// GENERATED CODE - DO NOT CHANGE
//   Generated by bindgen.cr
//   Time: 2017-08-25 00:09:50 +0200
// See: https://github.com/Papierkorb/bindgen

// Break C++:
#define protected public

#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <gc/gc_cpp.h>
#include "converters.hpp"
extern "C" void bg_QObject_DESTROY(QObject* _self_) { delete _self_; }

struct BgTable_QObject {
CrystalProc<const QMetaObject*> jump_bg_QObject_metaObject_;
CrystalProc<void*, const char*> jump_bg_QObject_qt_metacast_const_char_X;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QObject : public QObject {
  using QObject::QObject;
  BgTable_QObject bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QObject_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QObject_metaObject_();
    } else {
      return QObject::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QObject_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QObject_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QObject::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QObject_JUMPTABLE(BgInherit_QObject *self, const BgTable_QObject &table) {
  self->bg_table = table;
}

extern "C" void bg_QMetaObject__Connection_DESTROY(QMetaObject::Connection* _self_) { delete _self_; }

extern "C" void bg_QAbstractEventDispatcher_DESTROY(QAbstractEventDispatcher* _self_) { delete _self_; }

struct BgTable_QAbstractEventDispatcher {
CrystalProc<const QMetaObject*> jump_bg_QAbstractEventDispatcher_metaObject_;
CrystalProc<void*, const char*> jump_bg_QAbstractEventDispatcher_qt_metacast_const_char_X;
CrystalProc<bool, QEventLoop::ProcessEventsFlags> jump_bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags;
CrystalProc<bool> jump_bg_QAbstractEventDispatcher_hasPendingEvents_;
CrystalProc<void, QSocketNotifier*> jump_bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X;
CrystalProc<void, QSocketNotifier*> jump_bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X;
CrystalProc<void, int, int, Qt::TimerType, QObject*> jump_bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X;
CrystalProc<bool, int> jump_bg_QAbstractEventDispatcher_unregisterTimer_int;
CrystalProc<bool, QObject*> jump_bg_QAbstractEventDispatcher_unregisterTimers_QObject_X;
CrystalProc<QList<QAbstractEventDispatcher::TimerInfo>&, QObject*> jump_bg_QAbstractEventDispatcher_registeredTimers_QObject_X;
CrystalProc<int, int> jump_bg_QAbstractEventDispatcher_remainingTime_int;
CrystalProc<void> jump_bg_QAbstractEventDispatcher_wakeUp_;
CrystalProc<void> jump_bg_QAbstractEventDispatcher_interrupt_;
CrystalProc<void> jump_bg_QAbstractEventDispatcher_flush_;
CrystalProc<void> jump_bg_QAbstractEventDispatcher_startingUp_;
CrystalProc<void> jump_bg_QAbstractEventDispatcher_closingDown_;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QAbstractEventDispatcher : public QAbstractEventDispatcher {
  using QAbstractEventDispatcher::QAbstractEventDispatcher;
  BgTable_QAbstractEventDispatcher bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QAbstractEventDispatcher_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QAbstractEventDispatcher_metaObject_();
    } else {
      return QAbstractEventDispatcher::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractEventDispatcher_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractEventDispatcher_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractEventDispatcher::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool processEvents(QEventLoop::ProcessEventsFlags flags) override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(flags);
  }

  virtual bool hasPendingEvents() override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_hasPendingEvents_();
  }

  virtual void registerSocketNotifier(QSocketNotifier* notifier) override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(notifier);
  }

  virtual void unregisterSocketNotifier(QSocketNotifier* notifier) override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(notifier);
  }

  virtual void registerTimer(int timerId, int interval, Qt::TimerType timerType, QObject* object) override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(timerId, interval, timerType, object);
  }

  virtual bool unregisterTimer(int timerId) override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_unregisterTimer_int(timerId);
  }

  virtual bool unregisterTimers(QObject* object) override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(object);
  }

  virtual QList<QAbstractEventDispatcher::TimerInfo> registeredTimers(QObject* object) const override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_registeredTimers_QObject_X(object);
  }

  virtual int remainingTime(int timerId) override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_remainingTime_int(timerId);
  }

  virtual void wakeUp() override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_wakeUp_();
  }

  virtual void interrupt() override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_interrupt_();
  }

  virtual void flush() override {
    return this->bg_table.jump_bg_QAbstractEventDispatcher_flush_();
  }

  virtual void startingUp() override {
    if (this->bg_table.jump_bg_QAbstractEventDispatcher_startingUp_.isValid()) {
      return this->bg_table.jump_bg_QAbstractEventDispatcher_startingUp_();
    } else {
      return QAbstractEventDispatcher::startingUp();
    }
  }

  virtual void closingDown() override {
    if (this->bg_table.jump_bg_QAbstractEventDispatcher_closingDown_.isValid()) {
      return this->bg_table.jump_bg_QAbstractEventDispatcher_closingDown_();
    } else {
      return QAbstractEventDispatcher::closingDown();
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QAbstractEventDispatcher_JUMPTABLE(BgInherit_QAbstractEventDispatcher *self, const BgTable_QAbstractEventDispatcher &table) {
  self->bg_table = table;
}

extern "C" void bg_QWidget_DESTROY(QWidget* _self_) { delete _self_; }

struct BgTable_QWidget {
CrystalProc<const QMetaObject*> jump_bg_QWidget_metaObject_;
CrystalProc<void*, const char*> jump_bg_QWidget_qt_metacast_const_char_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<QSize&> jump_bg_QWidget_sizeHint_;
CrystalProc<QSize&> jump_bg_QWidget_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<bool, QEvent*> jump_bg_QWidget_event_QEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QWidget_paintEvent_QPaintEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_changeEvent_QEvent_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QWidget : public QWidget {
  using QWidget::QWidget;
  BgTable_QWidget bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QWidget_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QWidget_metaObject_();
    } else {
      return QWidget::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QWidget::qt_metacast(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sizeHint_();
    } else {
      return QWidget::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_minimumSizeHint_();
    } else {
      return QWidget::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_event_QEvent_X(event);
    } else {
      return QWidget::event(event);
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mousePressEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseMoveEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void paintEvent(QPaintEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X(event);
    } else {
      return QWidget::paintEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QWidget::changeEvent(unnamed_arg_0);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QWidget_JUMPTABLE(BgInherit_QWidget *self, const BgTable_QWidget &table) {
  self->bg_table = table;
}

extern "C" void bg_QAbstractButton_DESTROY(QAbstractButton* _self_) { delete _self_; }

struct BgTable_QAbstractButton {
CrystalProc<const QMetaObject*> jump_bg_QAbstractButton_metaObject_;
CrystalProc<void*, const char*> jump_bg_QAbstractButton_qt_metacast_const_char_X;
CrystalProc<void, QPaintEvent*> jump_bg_QAbstractButton_paintEvent_QPaintEvent_X;
CrystalProc<bool, const QPoint> jump_bg_QAbstractButton_hitButton_const_QPoint_R;
CrystalProc<void> jump_bg_QAbstractButton_checkStateSet_;
CrystalProc<void> jump_bg_QAbstractButton_nextCheckState_;
CrystalProc<bool, QEvent*> jump_bg_QAbstractButton_event_QEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QAbstractButton_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QAbstractButton_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QAbstractButton_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QAbstractButton_changeEvent_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QAbstractButton_timerEvent_QTimerEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<QSize&> jump_bg_QWidget_sizeHint_;
CrystalProc<QSize&> jump_bg_QWidget_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QAbstractButton : public QAbstractButton {
  using QAbstractButton::QAbstractButton;
  BgTable_QAbstractButton bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QAbstractButton_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_metaObject_();
    } else {
      return QAbstractButton::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractButton_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractButton::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void paintEvent(QPaintEvent* e) override {
    return this->bg_table.jump_bg_QAbstractButton_paintEvent_QPaintEvent_X(e);
  }

  virtual bool hitButton(const QPoint& pos) const override {
    if (this->bg_table.jump_bg_QAbstractButton_hitButton_const_QPoint_R.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_hitButton_const_QPoint_R(pos);
    } else {
      return QAbstractButton::hitButton(pos);
    }
  }

  virtual void checkStateSet() override {
    if (this->bg_table.jump_bg_QAbstractButton_checkStateSet_.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_checkStateSet_();
    } else {
      return QAbstractButton::checkStateSet();
    }
  }

  virtual void nextCheckState() override {
    if (this->bg_table.jump_bg_QAbstractButton_nextCheckState_.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_nextCheckState_();
    } else {
      return QAbstractButton::nextCheckState();
    }
  }

  virtual bool event(QEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_event_QEvent_X(e);
    } else {
      return QAbstractButton::event(e);
    }
  }

  virtual void keyPressEvent(QKeyEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_keyPressEvent_QKeyEvent_X(e);
    } else {
      return QAbstractButton::keyPressEvent(e);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      return QAbstractButton::keyReleaseEvent(e);
    }
  }

  virtual void mousePressEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mousePressEvent(e);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mouseReleaseEvent(e);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mouseMoveEvent(e);
    }
  }

  virtual void focusInEvent(QFocusEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_focusInEvent_QFocusEvent_X(e);
    } else {
      return QAbstractButton::focusInEvent(e);
    }
  }

  virtual void focusOutEvent(QFocusEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_focusOutEvent_QFocusEvent_X(e);
    } else {
      return QAbstractButton::focusOutEvent(e);
    }
  }

  virtual void changeEvent(QEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_changeEvent_QEvent_X(e);
    } else {
      return QAbstractButton::changeEvent(e);
    }
  }

  virtual void timerEvent(QTimerEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_timerEvent_QTimerEvent_X(e);
    } else {
      return QAbstractButton::timerEvent(e);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sizeHint_();
    } else {
      return QWidget::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_minimumSizeHint_();
    } else {
      return QWidget::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QAbstractButton_JUMPTABLE(BgInherit_QAbstractButton *self, const BgTable_QAbstractButton &table) {
  self->bg_table = table;
}

extern "C" void bg_QFrame_DESTROY(QFrame* _self_) { delete _self_; }

struct BgTable_QFrame {
CrystalProc<const QMetaObject*> jump_bg_QFrame_metaObject_;
CrystalProc<void*, const char*> jump_bg_QFrame_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QFrame_sizeHint_;
CrystalProc<bool, QEvent*> jump_bg_QFrame_event_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QFrame_paintEvent_QPaintEvent_X;
CrystalProc<void, QEvent*> jump_bg_QFrame_changeEvent_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<QSize&> jump_bg_QWidget_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QFrame : public QFrame {
  using QFrame::QFrame;
  BgTable_QFrame bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QFrame_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QFrame_metaObject_();
    } else {
      return QFrame::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFrame_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QFrame::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QFrame_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QFrame_sizeHint_();
    } else {
      return QFrame::sizeHint();
    }
  }

  virtual bool event(QEvent* e) override {
    if (this->bg_table.jump_bg_QFrame_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_event_QEvent_X(e);
    } else {
      return QFrame::event(e);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFrame_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QFrame::paintEvent(unnamed_arg_0);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QFrame::changeEvent(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_minimumSizeHint_();
    } else {
      return QWidget::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mousePressEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseMoveEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QFrame_JUMPTABLE(BgInherit_QFrame *self, const BgTable_QFrame &table) {
  self->bg_table = table;
}

extern "C" void bg_QAbstractScrollArea_DESTROY(QAbstractScrollArea* _self_) { delete _self_; }

struct BgTable_QAbstractScrollArea {
CrystalProc<const QMetaObject*> jump_bg_QAbstractScrollArea_metaObject_;
CrystalProc<void*, const char*> jump_bg_QAbstractScrollArea_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_minimumSizeHint_;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_sizeHint_;
CrystalProc<void, QWidget*> jump_bg_QAbstractScrollArea_setupViewport_QWidget_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QAbstractScrollArea_event_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QAbstractScrollArea_paintEvent_QPaintEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QAbstractScrollArea_dropEvent_QDropEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X;
CrystalProc<void, int, int> jump_bg_QAbstractScrollArea_scrollContentsBy_int_int;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_viewportSizeHint_;
CrystalProc<void, QEvent*> jump_bg_QFrame_changeEvent_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QAbstractScrollArea : public QAbstractScrollArea {
  using QAbstractScrollArea::QAbstractScrollArea;
  BgTable_QAbstractScrollArea bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_metaObject_();
    } else {
      return QAbstractScrollArea::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QAbstractScrollArea::minimumSizeHint();
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_sizeHint_();
    } else {
      return QAbstractScrollArea::sizeHint();
    }
  }

  virtual void setupViewport(QWidget* viewport) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_setupViewport_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_setupViewport_QWidget_X(viewport);
    } else {
      return QAbstractScrollArea::setupViewport(viewport);
    }
  }

  virtual bool eventFilter(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QAbstractScrollArea::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_event_QEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::event(unnamed_arg_0);
    }
  }

  virtual bool viewportEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::viewportEvent(unnamed_arg_0);
    }
  }

  virtual void resizeEvent(QResizeEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::resizeEvent(unnamed_arg_0);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::paintEvent(unnamed_arg_0);
    }
  }

  virtual void mousePressEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mousePressEvent(unnamed_arg_0);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mouseReleaseEvent(unnamed_arg_0);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mouseMoveEvent(unnamed_arg_0);
    }
  }

  virtual void wheelEvent(QWheelEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::wheelEvent(unnamed_arg_0);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::contextMenuEvent(unnamed_arg_0);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dragEnterEvent(unnamed_arg_0);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dragMoveEvent(unnamed_arg_0);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dragLeaveEvent(unnamed_arg_0);
    }
  }

  virtual void dropEvent(QDropEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dropEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void scrollContentsBy(int dx, int dy) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_scrollContentsBy_int_int.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_scrollContentsBy_int_int(dx, dy);
    } else {
      return QAbstractScrollArea::scrollContentsBy(dx, dy);
    }
  }

  virtual QSize viewportSizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_viewportSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_viewportSizeHint_();
    } else {
      return QAbstractScrollArea::viewportSizeHint();
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QFrame::changeEvent(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QAbstractScrollArea_JUMPTABLE(BgInherit_QAbstractScrollArea *self, const BgTable_QAbstractScrollArea &table) {
  self->bg_table = table;
}

extern "C" void bg_QScrollArea_DESTROY(QScrollArea* _self_) { delete _self_; }

struct BgTable_QScrollArea {
CrystalProc<const QMetaObject*> jump_bg_QScrollArea_metaObject_;
CrystalProc<void*, const char*> jump_bg_QScrollArea_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QScrollArea_sizeHint_;
CrystalProc<bool, bool> jump_bg_QScrollArea_focusNextPrevChild_bool;
CrystalProc<bool, QEvent*> jump_bg_QScrollArea_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QScrollArea_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QScrollArea_resizeEvent_QResizeEvent_X;
CrystalProc<void, int, int> jump_bg_QScrollArea_scrollContentsBy_int_int;
CrystalProc<QSize&> jump_bg_QScrollArea_viewportSizeHint_;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_minimumSizeHint_;
CrystalProc<void, QWidget*> jump_bg_QAbstractScrollArea_setupViewport_QWidget_X;
CrystalProc<bool, QEvent*> jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QAbstractScrollArea_paintEvent_QPaintEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QAbstractScrollArea_dropEvent_QDropEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QEvent*> jump_bg_QFrame_changeEvent_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QScrollArea : public QScrollArea {
  using QScrollArea::QScrollArea;
  BgTable_QScrollArea bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QScrollArea_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_metaObject_();
    } else {
      return QScrollArea::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QScrollArea_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QScrollArea::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QScrollArea_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_sizeHint_();
    } else {
      return QScrollArea::sizeHint();
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QScrollArea_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_focusNextPrevChild_bool(next);
    } else {
      return QScrollArea::focusNextPrevChild(next);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QScrollArea_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_event_QEvent_X(unnamed_arg_0);
    } else {
      return QScrollArea::event(unnamed_arg_0);
    }
  }

  virtual bool eventFilter(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QScrollArea::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual void resizeEvent(QResizeEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QScrollArea_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      return QScrollArea::resizeEvent(unnamed_arg_0);
    }
  }

  virtual void scrollContentsBy(int dx, int dy) override {
    if (this->bg_table.jump_bg_QScrollArea_scrollContentsBy_int_int.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_scrollContentsBy_int_int(dx, dy);
    } else {
      return QScrollArea::scrollContentsBy(dx, dy);
    }
  }

  virtual QSize viewportSizeHint() const override {
    if (this->bg_table.jump_bg_QScrollArea_viewportSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QScrollArea_viewportSizeHint_();
    } else {
      return QScrollArea::viewportSizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QAbstractScrollArea::minimumSizeHint();
    }
  }

  virtual void setupViewport(QWidget* viewport) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_setupViewport_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_setupViewport_QWidget_X(viewport);
    } else {
      return QAbstractScrollArea::setupViewport(viewport);
    }
  }

  virtual bool viewportEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::viewportEvent(unnamed_arg_0);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::paintEvent(unnamed_arg_0);
    }
  }

  virtual void mousePressEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mousePressEvent(unnamed_arg_0);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mouseReleaseEvent(unnamed_arg_0);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::mouseMoveEvent(unnamed_arg_0);
    }
  }

  virtual void wheelEvent(QWheelEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::wheelEvent(unnamed_arg_0);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::contextMenuEvent(unnamed_arg_0);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dragEnterEvent(unnamed_arg_0);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dragMoveEvent(unnamed_arg_0);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dragLeaveEvent(unnamed_arg_0);
    }
  }

  virtual void dropEvent(QDropEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::dropEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QFrame::changeEvent(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QScrollArea_JUMPTABLE(BgInherit_QScrollArea *self, const BgTable_QScrollArea &table) {
  self->bg_table = table;
}

extern "C" void bg_QMenuBar_DESTROY(QMenuBar* _self_) { delete _self_; }

struct BgTable_QMenuBar {
CrystalProc<const QMetaObject*> jump_bg_QMenuBar_metaObject_;
CrystalProc<void*, const char*> jump_bg_QMenuBar_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QMenuBar_sizeHint_;
CrystalProc<QSize&> jump_bg_QMenuBar_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QMenuBar_heightForWidth_int;
CrystalProc<void, bool> jump_bg_QMenuBar_setVisible_bool;
CrystalProc<void, QEvent*> jump_bg_QMenuBar_changeEvent_QEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QMenuBar_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QMenuBar_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QMenuBar_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QEvent*> jump_bg_QMenuBar_leaveEvent_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QMenuBar_paintEvent_QPaintEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QMenuBar_resizeEvent_QResizeEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QMenuBar_actionEvent_QActionEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QMenuBar_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QMenuBar_focusInEvent_QFocusEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QMenuBar_timerEvent_QTimerEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QMenuBar_eventFilter_QObject_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QMenuBar_event_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QMenuBar : public QMenuBar {
  using QMenuBar::QMenuBar;
  BgTable_QMenuBar bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QMenuBar_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_metaObject_();
    } else {
      return QMenuBar::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QMenuBar::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QMenuBar_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_sizeHint_();
    } else {
      return QMenuBar::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QMenuBar_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_minimumSizeHint_();
    } else {
      return QMenuBar::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QMenuBar_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_heightForWidth_int(unnamed_arg_0);
    } else {
      return QMenuBar::heightForWidth(unnamed_arg_0);
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QMenuBar_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_setVisible_bool(visible);
    } else {
      return QMenuBar::setVisible(visible);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::changeEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::mouseReleaseEvent(unnamed_arg_0);
    }
  }

  virtual void mousePressEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::mousePressEvent(unnamed_arg_0);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::mouseMoveEvent(unnamed_arg_0);
    }
  }

  virtual void leaveEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::leaveEvent(unnamed_arg_0);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::paintEvent(unnamed_arg_0);
    }
  }

  virtual void resizeEvent(QResizeEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::resizeEvent(unnamed_arg_0);
    }
  }

  virtual void actionEvent(QActionEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::actionEvent(unnamed_arg_0);
    }
  }

  virtual void focusOutEvent(QFocusEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::focusOutEvent(unnamed_arg_0);
    }
  }

  virtual void focusInEvent(QFocusEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::focusInEvent(unnamed_arg_0);
    }
  }

  virtual void timerEvent(QTimerEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::timerEvent(unnamed_arg_0);
    }
  }

  virtual bool eventFilter(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QMenuBar_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QMenuBar::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenuBar_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenuBar_event_QEvent_X(unnamed_arg_0);
    } else {
      return QMenuBar::event(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QMenuBar_JUMPTABLE(BgInherit_QMenuBar *self, const BgTable_QMenuBar &table) {
  self->bg_table = table;
}

extern "C" void bg_QMenu_DESTROY(QMenu* _self_) { delete _self_; }

struct BgTable_QMenu {
CrystalProc<const QMetaObject*> jump_bg_QMenu_metaObject_;
CrystalProc<void*, const char*> jump_bg_QMenu_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QMenu_sizeHint_;
CrystalProc<void, QEvent*> jump_bg_QMenu_changeEvent_QEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QMenu_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QMenu_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QMenu_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QMenu_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QMenu_wheelEvent_QWheelEvent_X;
CrystalProc<void, QEvent*> jump_bg_QMenu_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QMenu_leaveEvent_QEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QMenu_hideEvent_QHideEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QMenu_paintEvent_QPaintEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QMenu_actionEvent_QActionEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QMenu_timerEvent_QTimerEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QMenu_event_QEvent_X;
CrystalProc<bool, bool> jump_bg_QMenu_focusNextPrevChild_bool;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<QSize&> jump_bg_QWidget_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QMenu : public QMenu {
  using QMenu::QMenu;
  BgTable_QMenu bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QMenu_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QMenu_metaObject_();
    } else {
      return QMenu::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QMenu::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QMenu_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QMenu_sizeHint_();
    } else {
      return QMenu::sizeHint();
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QMenu::changeEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QMenu::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QMenu::mouseReleaseEvent(unnamed_arg_0);
    }
  }

  virtual void mousePressEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QMenu::mousePressEvent(unnamed_arg_0);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QMenu::mouseMoveEvent(unnamed_arg_0);
    }
  }

  virtual void wheelEvent(QWheelEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_wheelEvent_QWheelEvent_X(unnamed_arg_0);
    } else {
      return QMenu::wheelEvent(unnamed_arg_0);
    }
  }

  virtual void enterEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_enterEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QMenu::enterEvent(unnamed_arg_0);
    }
  }

  virtual void leaveEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_leaveEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QMenu::leaveEvent(unnamed_arg_0);
    }
  }

  virtual void hideEvent(QHideEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_hideEvent_QHideEvent_X(unnamed_arg_0);
    } else {
      return QMenu::hideEvent(unnamed_arg_0);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QMenu::paintEvent(unnamed_arg_0);
    }
  }

  virtual void actionEvent(QActionEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_actionEvent_QActionEvent_X(unnamed_arg_0);
    } else {
      return QMenu::actionEvent(unnamed_arg_0);
    }
  }

  virtual void timerEvent(QTimerEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_timerEvent_QTimerEvent_X(unnamed_arg_0);
    } else {
      return QMenu::timerEvent(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMenu_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMenu_event_QEvent_X(unnamed_arg_0);
    } else {
      return QMenu::event(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QMenu_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QMenu_focusNextPrevChild_bool(next);
    } else {
      return QMenu::focusNextPrevChild(next);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_minimumSizeHint_();
    } else {
      return QWidget::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QMenu_JUMPTABLE(BgInherit_QMenu *self, const BgTable_QMenu &table) {
  self->bg_table = table;
}

extern "C" void bg_QAction_DESTROY(QAction* _self_) { delete _self_; }

struct BgTable_QAction {
CrystalProc<const QMetaObject*> jump_bg_QAction_metaObject_;
CrystalProc<void*, const char*> jump_bg_QAction_qt_metacast_const_char_X;
CrystalProc<bool, QEvent*> jump_bg_QAction_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QAction : public QAction {
  using QAction::QAction;
  BgTable_QAction bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QAction_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QAction_metaObject_();
    } else {
      return QAction::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAction_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QAction_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QAction::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAction_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAction_event_QEvent_X(unnamed_arg_0);
    } else {
      return QAction::event(unnamed_arg_0);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QAction_JUMPTABLE(BgInherit_QAction *self, const BgTable_QAction &table) {
  self->bg_table = table;
}

extern "C" void bg_QMainWindow_DESTROY(QMainWindow* _self_) { delete _self_; }

struct BgTable_QMainWindow {
CrystalProc<const QMetaObject*> jump_bg_QMainWindow_metaObject_;
CrystalProc<void*, const char*> jump_bg_QMainWindow_qt_metacast_const_char_X;
CrystalProc<QMenu*> jump_bg_QMainWindow_createPopupMenu_;
CrystalProc<void, QContextMenuEvent*> jump_bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QMainWindow_event_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<QSize&> jump_bg_QWidget_sizeHint_;
CrystalProc<QSize&> jump_bg_QWidget_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QWidget_paintEvent_QPaintEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_changeEvent_QEvent_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QMainWindow : public QMainWindow {
  using QMainWindow::QMainWindow;
  BgTable_QMainWindow bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QMainWindow_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QMainWindow_metaObject_();
    } else {
      return QMainWindow::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QMainWindow_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QMainWindow_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QMainWindow::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QMenu* createPopupMenu() override {
    if (this->bg_table.jump_bg_QMainWindow_createPopupMenu_.isValid()) {
      return this->bg_table.jump_bg_QMainWindow_createPopupMenu_();
    } else {
      return QMainWindow::createPopupMenu();
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QMainWindow::contextMenuEvent(event);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QMainWindow_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QMainWindow_event_QEvent_X(event);
    } else {
      return QMainWindow::event(event);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sizeHint_();
    } else {
      return QWidget::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_minimumSizeHint_();
    } else {
      return QWidget::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mousePressEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseMoveEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void paintEvent(QPaintEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X(event);
    } else {
      return QWidget::paintEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QWidget::changeEvent(unnamed_arg_0);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QMainWindow_JUMPTABLE(BgInherit_QMainWindow *self, const BgTable_QMainWindow &table) {
  self->bg_table = table;
}

extern "C" void bg_QDialog_DESTROY(QDialog* _self_) { delete _self_; }

struct BgTable_QDialog {
CrystalProc<const QMetaObject*> jump_bg_QDialog_metaObject_;
CrystalProc<void*, const char*> jump_bg_QDialog_qt_metacast_const_char_X;
CrystalProc<void, bool> jump_bg_QDialog_setVisible_bool;
CrystalProc<QSize&> jump_bg_QDialog_sizeHint_;
CrystalProc<QSize&> jump_bg_QDialog_minimumSizeHint_;
CrystalProc<void> jump_bg_QDialog_open_;
CrystalProc<int> jump_bg_QDialog_exec_;
CrystalProc<void, int> jump_bg_QDialog_done_int;
CrystalProc<void> jump_bg_QDialog_accept_;
CrystalProc<void> jump_bg_QDialog_reject_;
CrystalProc<void, QKeyEvent*> jump_bg_QDialog_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QDialog_closeEvent_QCloseEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QDialog_showEvent_QShowEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QDialog_resizeEvent_QResizeEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QDialog_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QDialog_eventFilter_QObject_X_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<bool, QEvent*> jump_bg_QWidget_event_QEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QWidget_paintEvent_QPaintEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_changeEvent_QEvent_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QDialog : public QDialog {
  using QDialog::QDialog;
  BgTable_QDialog bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QDialog_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QDialog_metaObject_();
    } else {
      return QDialog::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QDialog::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QDialog_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QDialog_setVisible_bool(visible);
    } else {
      return QDialog::setVisible(visible);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QDialog_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QDialog_sizeHint_();
    } else {
      return QDialog::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QDialog_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QDialog_minimumSizeHint_();
    } else {
      return QDialog::minimumSizeHint();
    }
  }

  virtual void open() override {
    if (this->bg_table.jump_bg_QDialog_open_.isValid()) {
      return this->bg_table.jump_bg_QDialog_open_();
    } else {
      return QDialog::open();
    }
  }

  virtual int exec() override {
    if (this->bg_table.jump_bg_QDialog_exec_.isValid()) {
      return this->bg_table.jump_bg_QDialog_exec_();
    } else {
      return QDialog::exec();
    }
  }

  virtual void done(int unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_done_int.isValid()) {
      return this->bg_table.jump_bg_QDialog_done_int(unnamed_arg_0);
    } else {
      return QDialog::done(unnamed_arg_0);
    }
  }

  virtual void accept() override {
    if (this->bg_table.jump_bg_QDialog_accept_.isValid()) {
      return this->bg_table.jump_bg_QDialog_accept_();
    } else {
      return QDialog::accept();
    }
  }

  virtual void reject() override {
    if (this->bg_table.jump_bg_QDialog_reject_.isValid()) {
      return this->bg_table.jump_bg_QDialog_reject_();
    } else {
      return QDialog::reject();
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QDialog::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void closeEvent(QCloseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      return QDialog::closeEvent(unnamed_arg_0);
    }
  }

  virtual void showEvent(QShowEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      return QDialog::showEvent(unnamed_arg_0);
    }
  }

  virtual void resizeEvent(QResizeEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      return QDialog::resizeEvent(unnamed_arg_0);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      return QDialog::contextMenuEvent(unnamed_arg_0);
    }
  }

  virtual bool eventFilter(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QDialog_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QDialog::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_event_QEvent_X(event);
    } else {
      return QWidget::event(event);
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mousePressEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseMoveEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void paintEvent(QPaintEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X(event);
    } else {
      return QWidget::paintEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QWidget::changeEvent(unnamed_arg_0);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QDialog_JUMPTABLE(BgInherit_QDialog *self, const BgTable_QDialog &table) {
  self->bg_table = table;
}

extern "C" void bg_QLabel_DESTROY(QLabel* _self_) { delete _self_; }

struct BgTable_QLabel {
CrystalProc<const QMetaObject*> jump_bg_QLabel_metaObject_;
CrystalProc<void*, const char*> jump_bg_QLabel_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QLabel_sizeHint_;
CrystalProc<QSize&> jump_bg_QLabel_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QLabel_heightForWidth_int;
CrystalProc<bool, QEvent*> jump_bg_QLabel_event_QEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QLabel_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QLabel_paintEvent_QPaintEvent_X;
CrystalProc<void, QEvent*> jump_bg_QLabel_changeEvent_QEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QLabel_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QLabel_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QLabel_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QLabel_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QLabel_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QLabel_focusOutEvent_QFocusEvent_X;
CrystalProc<bool, bool> jump_bg_QLabel_focusNextPrevChild_bool;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QLabel : public QLabel {
  using QLabel::QLabel;
  BgTable_QLabel bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QLabel_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QLabel_metaObject_();
    } else {
      return QLabel::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLabel_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLabel::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QLabel_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QLabel_sizeHint_();
    } else {
      return QLabel::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QLabel_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QLabel_minimumSizeHint_();
    } else {
      return QLabel::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLabel_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QLabel_heightForWidth_int(unnamed_arg_0);
    } else {
      return QLabel::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* e) override {
    if (this->bg_table.jump_bg_QLabel_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_event_QEvent_X(e);
    } else {
      return QLabel::event(e);
    }
  }

  virtual void keyPressEvent(QKeyEvent* ev) override {
    if (this->bg_table.jump_bg_QLabel_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_keyPressEvent_QKeyEvent_X(ev);
    } else {
      return QLabel::keyPressEvent(ev);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLabel_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QLabel::paintEvent(unnamed_arg_0);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLabel_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QLabel::changeEvent(unnamed_arg_0);
    }
  }

  virtual void mousePressEvent(QMouseEvent* ev) override {
    if (this->bg_table.jump_bg_QLabel_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_mousePressEvent_QMouseEvent_X(ev);
    } else {
      return QLabel::mousePressEvent(ev);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* ev) override {
    if (this->bg_table.jump_bg_QLabel_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_mouseMoveEvent_QMouseEvent_X(ev);
    } else {
      return QLabel::mouseMoveEvent(ev);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* ev) override {
    if (this->bg_table.jump_bg_QLabel_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_mouseReleaseEvent_QMouseEvent_X(ev);
    } else {
      return QLabel::mouseReleaseEvent(ev);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* ev) override {
    if (this->bg_table.jump_bg_QLabel_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_contextMenuEvent_QContextMenuEvent_X(ev);
    } else {
      return QLabel::contextMenuEvent(ev);
    }
  }

  virtual void focusInEvent(QFocusEvent* ev) override {
    if (this->bg_table.jump_bg_QLabel_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_focusInEvent_QFocusEvent_X(ev);
    } else {
      return QLabel::focusInEvent(ev);
    }
  }

  virtual void focusOutEvent(QFocusEvent* ev) override {
    if (this->bg_table.jump_bg_QLabel_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLabel_focusOutEvent_QFocusEvent_X(ev);
    } else {
      return QLabel::focusOutEvent(ev);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QLabel_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QLabel_focusNextPrevChild_bool(next);
    } else {
      return QLabel::focusNextPrevChild(next);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QLabel_JUMPTABLE(BgInherit_QLabel *self, const BgTable_QLabel &table) {
  self->bg_table = table;
}

extern "C" void bg_QLCDNumber_DESTROY(QLCDNumber* _self_) { delete _self_; }

struct BgTable_QLCDNumber {
CrystalProc<const QMetaObject*> jump_bg_QLCDNumber_metaObject_;
CrystalProc<void*, const char*> jump_bg_QLCDNumber_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QLCDNumber_sizeHint_;
CrystalProc<bool, QEvent*> jump_bg_QLCDNumber_event_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QLCDNumber_paintEvent_QPaintEvent_X;
CrystalProc<void, QEvent*> jump_bg_QFrame_changeEvent_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<QSize&> jump_bg_QWidget_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QLCDNumber : public QLCDNumber {
  using QLCDNumber::QLCDNumber;
  BgTable_QLCDNumber bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QLCDNumber_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QLCDNumber_metaObject_();
    } else {
      return QLCDNumber::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLCDNumber_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QLCDNumber_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLCDNumber::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QLCDNumber_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QLCDNumber_sizeHint_();
    } else {
      return QLCDNumber::sizeHint();
    }
  }

  virtual bool event(QEvent* e) override {
    if (this->bg_table.jump_bg_QLCDNumber_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLCDNumber_event_QEvent_X(e);
    } else {
      return QLCDNumber::event(e);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLCDNumber_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLCDNumber_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QLCDNumber::paintEvent(unnamed_arg_0);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QFrame::changeEvent(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QWidget_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QWidget_minimumSizeHint_();
    } else {
      return QWidget::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mousePressEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseMoveEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QLCDNumber_JUMPTABLE(BgInherit_QLCDNumber *self, const BgTable_QLCDNumber &table) {
  self->bg_table = table;
}

extern "C" void bg_QPushButton_DESTROY(QPushButton* _self_) { delete _self_; }

struct BgTable_QPushButton {
CrystalProc<const QMetaObject*> jump_bg_QPushButton_metaObject_;
CrystalProc<void*, const char*> jump_bg_QPushButton_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QPushButton_sizeHint_;
CrystalProc<QSize&> jump_bg_QPushButton_minimumSizeHint_;
CrystalProc<bool, QEvent*> jump_bg_QPushButton_event_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QPushButton_paintEvent_QPaintEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QPushButton_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QPushButton_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QPushButton_focusOutEvent_QFocusEvent_X;
CrystalProc<bool, const QPoint> jump_bg_QAbstractButton_hitButton_const_QPoint_R;
CrystalProc<void> jump_bg_QAbstractButton_checkStateSet_;
CrystalProc<void> jump_bg_QAbstractButton_nextCheckState_;
CrystalProc<void, QKeyEvent*> jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QEvent*> jump_bg_QAbstractButton_changeEvent_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QAbstractButton_timerEvent_QTimerEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QPushButton : public QPushButton {
  using QPushButton::QPushButton;
  BgTable_QPushButton bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QPushButton_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QPushButton_metaObject_();
    } else {
      return QPushButton::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QPushButton_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QPushButton_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QPushButton::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QPushButton_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QPushButton_sizeHint_();
    } else {
      return QPushButton::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QPushButton_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QPushButton_minimumSizeHint_();
    } else {
      return QPushButton::minimumSizeHint();
    }
  }

  virtual bool event(QEvent* e) override {
    if (this->bg_table.jump_bg_QPushButton_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QPushButton_event_QEvent_X(e);
    } else {
      return QPushButton::event(e);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QPushButton_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QPushButton_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QPushButton::paintEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QPushButton_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QPushButton_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QPushButton::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void focusInEvent(QFocusEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QPushButton_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QPushButton_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      return QPushButton::focusInEvent(unnamed_arg_0);
    }
  }

  virtual void focusOutEvent(QFocusEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QPushButton_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QPushButton_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      return QPushButton::focusOutEvent(unnamed_arg_0);
    }
  }

  virtual bool hitButton(const QPoint& pos) const override {
    if (this->bg_table.jump_bg_QAbstractButton_hitButton_const_QPoint_R.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_hitButton_const_QPoint_R(pos);
    } else {
      return QAbstractButton::hitButton(pos);
    }
  }

  virtual void checkStateSet() override {
    if (this->bg_table.jump_bg_QAbstractButton_checkStateSet_.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_checkStateSet_();
    } else {
      return QAbstractButton::checkStateSet();
    }
  }

  virtual void nextCheckState() override {
    if (this->bg_table.jump_bg_QAbstractButton_nextCheckState_.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_nextCheckState_();
    } else {
      return QAbstractButton::nextCheckState();
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      return QAbstractButton::keyReleaseEvent(e);
    }
  }

  virtual void mousePressEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mousePressEvent(e);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mouseReleaseEvent(e);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mouseMoveEvent(e);
    }
  }

  virtual void changeEvent(QEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_changeEvent_QEvent_X(e);
    } else {
      return QAbstractButton::changeEvent(e);
    }
  }

  virtual void timerEvent(QTimerEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_timerEvent_QTimerEvent_X(e);
    } else {
      return QAbstractButton::timerEvent(e);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QPushButton_JUMPTABLE(BgInherit_QPushButton *self, const BgTable_QPushButton &table) {
  self->bg_table = table;
}

extern "C" void bg_QCheckBox_DESTROY(QCheckBox* _self_) { delete _self_; }

struct BgTable_QCheckBox {
CrystalProc<const QMetaObject*> jump_bg_QCheckBox_metaObject_;
CrystalProc<void*, const char*> jump_bg_QCheckBox_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QCheckBox_sizeHint_;
CrystalProc<QSize&> jump_bg_QCheckBox_minimumSizeHint_;
CrystalProc<bool, QEvent*> jump_bg_QCheckBox_event_QEvent_X;
CrystalProc<bool, const QPoint> jump_bg_QCheckBox_hitButton_const_QPoint_R;
CrystalProc<void> jump_bg_QCheckBox_checkStateSet_;
CrystalProc<void> jump_bg_QCheckBox_nextCheckState_;
CrystalProc<void, QPaintEvent*> jump_bg_QCheckBox_paintEvent_QPaintEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QCheckBox_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QAbstractButton_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QAbstractButton_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QAbstractButton_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QAbstractButton_changeEvent_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QAbstractButton_timerEvent_QTimerEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QCheckBox : public QCheckBox {
  using QCheckBox::QCheckBox;
  BgTable_QCheckBox bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QCheckBox_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_metaObject_();
    } else {
      return QCheckBox::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QCheckBox_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QCheckBox::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QCheckBox_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_sizeHint_();
    } else {
      return QCheckBox::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QCheckBox_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_minimumSizeHint_();
    } else {
      return QCheckBox::minimumSizeHint();
    }
  }

  virtual bool event(QEvent* e) override {
    if (this->bg_table.jump_bg_QCheckBox_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_event_QEvent_X(e);
    } else {
      return QCheckBox::event(e);
    }
  }

  virtual bool hitButton(const QPoint& pos) const override {
    if (this->bg_table.jump_bg_QCheckBox_hitButton_const_QPoint_R.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_hitButton_const_QPoint_R(pos);
    } else {
      return QCheckBox::hitButton(pos);
    }
  }

  virtual void checkStateSet() override {
    if (this->bg_table.jump_bg_QCheckBox_checkStateSet_.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_checkStateSet_();
    } else {
      return QCheckBox::checkStateSet();
    }
  }

  virtual void nextCheckState() override {
    if (this->bg_table.jump_bg_QCheckBox_nextCheckState_.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_nextCheckState_();
    } else {
      return QCheckBox::nextCheckState();
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QCheckBox_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QCheckBox::paintEvent(unnamed_arg_0);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QCheckBox_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QCheckBox::mouseMoveEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_keyPressEvent_QKeyEvent_X(e);
    } else {
      return QAbstractButton::keyPressEvent(e);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      return QAbstractButton::keyReleaseEvent(e);
    }
  }

  virtual void mousePressEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mousePressEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mousePressEvent(e);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      return QAbstractButton::mouseReleaseEvent(e);
    }
  }

  virtual void focusInEvent(QFocusEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_focusInEvent_QFocusEvent_X(e);
    } else {
      return QAbstractButton::focusInEvent(e);
    }
  }

  virtual void focusOutEvent(QFocusEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_focusOutEvent_QFocusEvent_X(e);
    } else {
      return QAbstractButton::focusOutEvent(e);
    }
  }

  virtual void changeEvent(QEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_changeEvent_QEvent_X(e);
    } else {
      return QAbstractButton::changeEvent(e);
    }
  }

  virtual void timerEvent(QTimerEvent* e) override {
    if (this->bg_table.jump_bg_QAbstractButton_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractButton_timerEvent_QTimerEvent_X(e);
    } else {
      return QAbstractButton::timerEvent(e);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QCheckBox_JUMPTABLE(BgInherit_QCheckBox *self, const BgTable_QCheckBox &table) {
  self->bg_table = table;
}

extern "C" void bg_QCoreApplication_DESTROY(QCoreApplication* _self_) { delete _self_; }

struct BgTable_QCoreApplication {
CrystalProc<const QMetaObject*> jump_bg_QCoreApplication_metaObject_;
CrystalProc<void*, const char*> jump_bg_QCoreApplication_qt_metacast_const_char_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QCoreApplication_notify_QObject_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QCoreApplication_event_QEvent_X;
CrystalProc<bool, QEvent*, QObject*, QPostEventList*> jump_bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QCoreApplication : public QCoreApplication {
  using QCoreApplication::QCoreApplication;
  BgTable_QCoreApplication bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QCoreApplication_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QCoreApplication_metaObject_();
    } else {
      return QCoreApplication::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QCoreApplication_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QCoreApplication_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QCoreApplication::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool notify(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QCoreApplication_notify_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QCoreApplication_notify_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QCoreApplication::notify(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QCoreApplication_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QCoreApplication_event_QEvent_X(unnamed_arg_0);
    } else {
      return QCoreApplication::event(unnamed_arg_0);
    }
  }

  virtual bool compressEvent(QEvent* unnamed_arg_0, QObject* receiver, QPostEventList* unnamed_arg_2) override {
    if (this->bg_table.jump_bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X.isValid()) {
      return this->bg_table.jump_bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(unnamed_arg_0, receiver, unnamed_arg_2);
    } else {
      return QCoreApplication::compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QCoreApplication_JUMPTABLE(BgInherit_QCoreApplication *self, const BgTable_QCoreApplication &table) {
  self->bg_table = table;
}

extern "C" void bg_QGuiApplication_DESTROY(QGuiApplication* _self_) { delete _self_; }

struct BgTable_QGuiApplication {
CrystalProc<const QMetaObject*> jump_bg_QGuiApplication_metaObject_;
CrystalProc<void*, const char*> jump_bg_QGuiApplication_qt_metacast_const_char_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QGuiApplication_notify_QObject_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGuiApplication_event_QEvent_X;
CrystalProc<bool, QEvent*, QObject*, QPostEventList*> jump_bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QGuiApplication : public QGuiApplication {
  using QGuiApplication::QGuiApplication;
  BgTable_QGuiApplication bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QGuiApplication_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QGuiApplication_metaObject_();
    } else {
      return QGuiApplication::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGuiApplication_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QGuiApplication_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGuiApplication::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool notify(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QGuiApplication_notify_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGuiApplication_notify_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QGuiApplication::notify(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGuiApplication_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGuiApplication_event_QEvent_X(unnamed_arg_0);
    } else {
      return QGuiApplication::event(unnamed_arg_0);
    }
  }

  virtual bool compressEvent(QEvent* unnamed_arg_0, QObject* receiver, QPostEventList* unnamed_arg_2) override {
    if (this->bg_table.jump_bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X.isValid()) {
      return this->bg_table.jump_bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(unnamed_arg_0, receiver, unnamed_arg_2);
    } else {
      return QGuiApplication::compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QGuiApplication_JUMPTABLE(BgInherit_QGuiApplication *self, const BgTable_QGuiApplication &table) {
  self->bg_table = table;
}

extern "C" void bg_QApplication_DESTROY(QApplication* _self_) { delete _self_; }

struct BgTable_QApplication {
CrystalProc<const QMetaObject*> jump_bg_QApplication_metaObject_;
CrystalProc<void*, const char*> jump_bg_QApplication_qt_metacast_const_char_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QApplication_notify_QObject_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QApplication_event_QEvent_X;
CrystalProc<bool, QEvent*, QObject*, QPostEventList*> jump_bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QApplication : public QApplication {
  using QApplication::QApplication;
  BgTable_QApplication bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QApplication_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QApplication_metaObject_();
    } else {
      return QApplication::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QApplication_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QApplication_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QApplication::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool notify(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QApplication_notify_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QApplication_notify_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QApplication::notify(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QApplication_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QApplication_event_QEvent_X(unnamed_arg_0);
    } else {
      return QApplication::event(unnamed_arg_0);
    }
  }

  virtual bool compressEvent(QEvent* unnamed_arg_0, QObject* receiver, QPostEventList* unnamed_arg_2) override {
    if (this->bg_table.jump_bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X.isValid()) {
      return this->bg_table.jump_bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(unnamed_arg_0, receiver, unnamed_arg_2);
    } else {
      return QApplication::compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QApplication_JUMPTABLE(BgInherit_QApplication *self, const BgTable_QApplication &table) {
  self->bg_table = table;
}

extern "C" void bg_QImage_DESTROY(QImage* _self_) { delete _self_; }

extern "C" void bg_QPixmap_DESTROY(QPixmap* _self_) { delete _self_; }

extern "C" void bg_QEventLoop_DESTROY(QEventLoop* _self_) { delete _self_; }

struct BgTable_QEventLoop {
CrystalProc<const QMetaObject*> jump_bg_QEventLoop_metaObject_;
CrystalProc<void*, const char*> jump_bg_QEventLoop_qt_metacast_const_char_X;
CrystalProc<bool, QEvent*> jump_bg_QEventLoop_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QEventLoop : public QEventLoop {
  using QEventLoop::QEventLoop;
  BgTable_QEventLoop bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QEventLoop_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QEventLoop_metaObject_();
    } else {
      return QEventLoop::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QEventLoop_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QEventLoop_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QEventLoop::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QEventLoop_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QEventLoop_event_QEvent_X(event);
    } else {
      return QEventLoop::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QEventLoop_JUMPTABLE(BgInherit_QEventLoop *self, const BgTable_QEventLoop &table) {
  self->bg_table = table;
}

extern "C" void bg_QTabWidget_DESTROY(QTabWidget* _self_) { delete _self_; }

struct BgTable_QTabWidget {
CrystalProc<const QMetaObject*> jump_bg_QTabWidget_metaObject_;
CrystalProc<void*, const char*> jump_bg_QTabWidget_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QTabWidget_sizeHint_;
CrystalProc<QSize&> jump_bg_QTabWidget_minimumSizeHint_;
CrystalProc<int, int> jump_bg_QTabWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QTabWidget_hasHeightForWidth_;
CrystalProc<void, int> jump_bg_QTabWidget_tabInserted_int;
CrystalProc<void, int> jump_bg_QTabWidget_tabRemoved_int;
CrystalProc<void, QShowEvent*> jump_bg_QTabWidget_showEvent_QShowEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QTabWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QTabWidget_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QTabWidget_paintEvent_QPaintEvent_X;
CrystalProc<void, QEvent*> jump_bg_QTabWidget_changeEvent_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QTabWidget_event_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QTabWidget : public QTabWidget {
  using QTabWidget::QTabWidget;
  BgTable_QTabWidget bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QTabWidget_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_metaObject_();
    } else {
      return QTabWidget::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTabWidget_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTabWidget::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QTabWidget_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_sizeHint_();
    } else {
      return QTabWidget::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QTabWidget_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_minimumSizeHint_();
    } else {
      return QTabWidget::minimumSizeHint();
    }
  }

  virtual int heightForWidth(int width) const override {
    if (this->bg_table.jump_bg_QTabWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_heightForWidth_int(width);
    } else {
      return QTabWidget::heightForWidth(width);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QTabWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_hasHeightForWidth_();
    } else {
      return QTabWidget::hasHeightForWidth();
    }
  }

  virtual void tabInserted(int index) override {
    if (this->bg_table.jump_bg_QTabWidget_tabInserted_int.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_tabInserted_int(index);
    } else {
      return QTabWidget::tabInserted(index);
    }
  }

  virtual void tabRemoved(int index) override {
    if (this->bg_table.jump_bg_QTabWidget_tabRemoved_int.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_tabRemoved_int(index);
    } else {
      return QTabWidget::tabRemoved(index);
    }
  }

  virtual void showEvent(QShowEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTabWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      return QTabWidget::showEvent(unnamed_arg_0);
    }
  }

  virtual void resizeEvent(QResizeEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTabWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      return QTabWidget::resizeEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTabWidget_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QTabWidget::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTabWidget_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QTabWidget::paintEvent(unnamed_arg_0);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTabWidget_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QTabWidget::changeEvent(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTabWidget_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTabWidget_event_QEvent_X(unnamed_arg_0);
    } else {
      return QTabWidget::event(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mousePressEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseMoveEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QWidget::contextMenuEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QTabWidget_JUMPTABLE(BgInherit_QTabWidget *self, const BgTable_QTabWidget &table) {
  self->bg_table = table;
}

extern "C" void bg_QLayoutItem_DESTROY(QLayoutItem* _self_) { delete _self_; }

struct BgTable_QLayoutItem {
CrystalProc<QSize&> jump_bg_QLayoutItem_sizeHint_;
CrystalProc<QSize&> jump_bg_QLayoutItem_minimumSize_;
CrystalProc<QSize&> jump_bg_QLayoutItem_maximumSize_;
CrystalProc<Qt::Orientations> jump_bg_QLayoutItem_expandingDirections_;
CrystalProc<void, const QRect*> jump_bg_QLayoutItem_setGeometry_const_QRect_R;
CrystalProc<QRect&> jump_bg_QLayoutItem_geometry_;
CrystalProc<bool> jump_bg_QLayoutItem_isEmpty_;
CrystalProc<bool> jump_bg_QLayoutItem_hasHeightForWidth_;
CrystalProc<int, int> jump_bg_QLayoutItem_heightForWidth_int;
CrystalProc<int, int> jump_bg_QLayoutItem_minimumHeightForWidth_int;
CrystalProc<void> jump_bg_QLayoutItem_invalidate_;
CrystalProc<QWidget*> jump_bg_QLayoutItem_widget_;
CrystalProc<QLayout*> jump_bg_QLayoutItem_layout_;
CrystalProc<QSpacerItem*> jump_bg_QLayoutItem_spacerItem_;
};
struct BgInherit_QLayoutItem : public QLayoutItem {
  using QLayoutItem::QLayoutItem;
  BgTable_QLayoutItem bg_table;

  virtual QSize sizeHint() const override {
    return this->bg_table.jump_bg_QLayoutItem_sizeHint_();
  }

  virtual QSize minimumSize() const override {
    return this->bg_table.jump_bg_QLayoutItem_minimumSize_();
  }

  virtual QSize maximumSize() const override {
    return this->bg_table.jump_bg_QLayoutItem_maximumSize_();
  }

  virtual Qt::Orientations expandingDirections() const override {
    return this->bg_table.jump_bg_QLayoutItem_expandingDirections_();
  }

  virtual void setGeometry(const QRect& unnamed_arg_0) override {
    return this->bg_table.jump_bg_QLayoutItem_setGeometry_const_QRect_R(new (UseGC) QRect (unnamed_arg_0));
  }

  virtual QRect geometry() const override {
    return this->bg_table.jump_bg_QLayoutItem_geometry_();
  }

  virtual bool isEmpty() const override {
    return this->bg_table.jump_bg_QLayoutItem_isEmpty_();
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QLayoutItem_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_hasHeightForWidth_();
    } else {
      return QLayoutItem::hasHeightForWidth();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayoutItem_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_heightForWidth_int(unnamed_arg_0);
    } else {
      return QLayoutItem::heightForWidth(unnamed_arg_0);
    }
  }

  virtual int minimumHeightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayoutItem_minimumHeightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QLayoutItem::minimumHeightForWidth(unnamed_arg_0);
    }
  }

  virtual void invalidate() override {
    if (this->bg_table.jump_bg_QLayoutItem_invalidate_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_invalidate_();
    } else {
      return QLayoutItem::invalidate();
    }
  }

  virtual QWidget* widget() override {
    if (this->bg_table.jump_bg_QLayoutItem_widget_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_widget_();
    } else {
      return QLayoutItem::widget();
    }
  }

  virtual QLayout* layout() override {
    if (this->bg_table.jump_bg_QLayoutItem_layout_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_layout_();
    } else {
      return QLayoutItem::layout();
    }
  }

  virtual QSpacerItem* spacerItem() override {
    if (this->bg_table.jump_bg_QLayoutItem_spacerItem_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_spacerItem_();
    } else {
      return QLayoutItem::spacerItem();
    }
  }

};
extern "C" void bg_QLayoutItem_JUMPTABLE(BgInherit_QLayoutItem *self, const BgTable_QLayoutItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QLayout_DESTROY(QLayout* _self_) { delete _self_; }

extern "C" QLayoutItem* bg_QLayout_AS_QLayoutItem(QLayout* self) {
  return static_cast< QLayoutItem* >(self);
}
struct BgTable_QLayout {
CrystalProc<const QMetaObject*> jump_bg_QLayout_metaObject_;
CrystalProc<void*, const char*> jump_bg_QLayout_qt_metacast_const_char_X;
CrystalProc<void> jump_bg_QLayout_invalidate_;
CrystalProc<QRect&> jump_bg_QLayout_geometry_;
CrystalProc<void, QLayoutItem*> jump_bg_QLayout_addItem_QLayoutItem_X;
CrystalProc<Qt::Orientations> jump_bg_QLayout_expandingDirections_;
CrystalProc<QSize&> jump_bg_QLayout_minimumSize_;
CrystalProc<QSize&> jump_bg_QLayout_maximumSize_;
CrystalProc<void, const QRect*> jump_bg_QLayout_setGeometry_const_QRect_R;
CrystalProc<QLayoutItem*, int> jump_bg_QLayout_itemAt_int;
CrystalProc<QLayoutItem*, int> jump_bg_QLayout_takeAt_int;
CrystalProc<int, QWidget*> jump_bg_QLayout_indexOf_QWidget_X;
CrystalProc<int> jump_bg_QLayout_count_;
CrystalProc<bool> jump_bg_QLayout_isEmpty_;
CrystalProc<QLayout*> jump_bg_QLayout_layout_;
CrystalProc<void, QChildEvent*> jump_bg_QLayout_childEvent_QChildEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
CrystalProc<QSize&> jump_bg_QLayoutItem_sizeHint_;
CrystalProc<bool> jump_bg_QLayoutItem_hasHeightForWidth_;
CrystalProc<int, int> jump_bg_QLayoutItem_heightForWidth_int;
CrystalProc<int, int> jump_bg_QLayoutItem_minimumHeightForWidth_int;
CrystalProc<QWidget*> jump_bg_QLayoutItem_widget_;
CrystalProc<QSpacerItem*> jump_bg_QLayoutItem_spacerItem_;
};
struct BgInherit_QLayout : public QLayout {
  using QLayout::QLayout;
  BgTable_QLayout bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QLayout_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QLayout_metaObject_();
    } else {
      return QLayout::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLayout_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLayout::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void invalidate() override {
    if (this->bg_table.jump_bg_QLayout_invalidate_.isValid()) {
      return this->bg_table.jump_bg_QLayout_invalidate_();
    } else {
      return QLayout::invalidate();
    }
  }

  virtual QRect geometry() const override {
    if (this->bg_table.jump_bg_QLayout_geometry_.isValid()) {
      return this->bg_table.jump_bg_QLayout_geometry_();
    } else {
      return QLayout::geometry();
    }
  }

  virtual void addItem(QLayoutItem* unnamed_arg_0) override {
    return this->bg_table.jump_bg_QLayout_addItem_QLayoutItem_X(unnamed_arg_0);
  }

  virtual Qt::Orientations expandingDirections() const override {
    if (this->bg_table.jump_bg_QLayout_expandingDirections_.isValid()) {
      return this->bg_table.jump_bg_QLayout_expandingDirections_();
    } else {
      return QLayout::expandingDirections();
    }
  }

  virtual QSize minimumSize() const override {
    if (this->bg_table.jump_bg_QLayout_minimumSize_.isValid()) {
      return this->bg_table.jump_bg_QLayout_minimumSize_();
    } else {
      return QLayout::minimumSize();
    }
  }

  virtual QSize maximumSize() const override {
    if (this->bg_table.jump_bg_QLayout_maximumSize_.isValid()) {
      return this->bg_table.jump_bg_QLayout_maximumSize_();
    } else {
      return QLayout::maximumSize();
    }
  }

  virtual void setGeometry(const QRect& unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLayout_setGeometry_const_QRect_R.isValid()) {
      return this->bg_table.jump_bg_QLayout_setGeometry_const_QRect_R(new (UseGC) QRect (unnamed_arg_0));
    } else {
      return QLayout::setGeometry(unnamed_arg_0);
    }
  }

  virtual QLayoutItem* itemAt(int index) const override {
    return this->bg_table.jump_bg_QLayout_itemAt_int(index);
  }

  virtual QLayoutItem* takeAt(int index) override {
    return this->bg_table.jump_bg_QLayout_takeAt_int(index);
  }

  virtual int indexOf(QWidget* unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayout_indexOf_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QLayout::indexOf(unnamed_arg_0);
    }
  }

  virtual int count() const override {
    return this->bg_table.jump_bg_QLayout_count_();
  }

  virtual bool isEmpty() const override {
    if (this->bg_table.jump_bg_QLayout_isEmpty_.isValid()) {
      return this->bg_table.jump_bg_QLayout_isEmpty_();
    } else {
      return QLayout::isEmpty();
    }
  }

  virtual QLayout* layout() override {
    if (this->bg_table.jump_bg_QLayout_layout_.isValid()) {
      return this->bg_table.jump_bg_QLayout_layout_();
    } else {
      return QLayout::layout();
    }
  }

  virtual void childEvent(QChildEvent* e) override {
    if (this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      return QLayout::childEvent(e);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

  virtual QSize sizeHint() const override {
    return this->bg_table.jump_bg_QLayoutItem_sizeHint_();
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QLayoutItem_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_hasHeightForWidth_();
    } else {
      return QLayoutItem::hasHeightForWidth();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayoutItem_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_heightForWidth_int(unnamed_arg_0);
    } else {
      return QLayoutItem::heightForWidth(unnamed_arg_0);
    }
  }

  virtual int minimumHeightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayoutItem_minimumHeightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QLayoutItem::minimumHeightForWidth(unnamed_arg_0);
    }
  }

  virtual QWidget* widget() override {
    if (this->bg_table.jump_bg_QLayoutItem_widget_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_widget_();
    } else {
      return QLayoutItem::widget();
    }
  }

  virtual QSpacerItem* spacerItem() override {
    if (this->bg_table.jump_bg_QLayoutItem_spacerItem_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_spacerItem_();
    } else {
      return QLayoutItem::spacerItem();
    }
  }

};
extern "C" void bg_QLayout_JUMPTABLE(BgInherit_QLayout *self, const BgTable_QLayout &table) {
  self->bg_table = table;
}

extern "C" void bg_QBoxLayout_DESTROY(QBoxLayout* _self_) { delete _self_; }

struct BgTable_QBoxLayout {
CrystalProc<const QMetaObject*> jump_bg_QBoxLayout_metaObject_;
CrystalProc<void*, const char*> jump_bg_QBoxLayout_qt_metacast_const_char_X;
CrystalProc<void, QLayoutItem*> jump_bg_QBoxLayout_addItem_QLayoutItem_X;
CrystalProc<QSize&> jump_bg_QBoxLayout_sizeHint_;
CrystalProc<QSize&> jump_bg_QBoxLayout_minimumSize_;
CrystalProc<QSize&> jump_bg_QBoxLayout_maximumSize_;
CrystalProc<bool> jump_bg_QBoxLayout_hasHeightForWidth_;
CrystalProc<int, int> jump_bg_QBoxLayout_heightForWidth_int;
CrystalProc<int, int> jump_bg_QBoxLayout_minimumHeightForWidth_int;
CrystalProc<Qt::Orientations> jump_bg_QBoxLayout_expandingDirections_;
CrystalProc<void> jump_bg_QBoxLayout_invalidate_;
CrystalProc<QLayoutItem*, int> jump_bg_QBoxLayout_itemAt_int;
CrystalProc<QLayoutItem*, int> jump_bg_QBoxLayout_takeAt_int;
CrystalProc<int> jump_bg_QBoxLayout_count_;
CrystalProc<void, const QRect*> jump_bg_QBoxLayout_setGeometry_const_QRect_R;
CrystalProc<QRect&> jump_bg_QLayout_geometry_;
CrystalProc<int, QWidget*> jump_bg_QLayout_indexOf_QWidget_X;
CrystalProc<bool> jump_bg_QLayout_isEmpty_;
CrystalProc<QLayout*> jump_bg_QLayout_layout_;
CrystalProc<void, QChildEvent*> jump_bg_QLayout_childEvent_QChildEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
CrystalProc<QWidget*> jump_bg_QLayoutItem_widget_;
CrystalProc<QSpacerItem*> jump_bg_QLayoutItem_spacerItem_;
};
struct BgInherit_QBoxLayout : public QBoxLayout {
  using QBoxLayout::QBoxLayout;
  BgTable_QBoxLayout bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QBoxLayout_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_metaObject_();
    } else {
      return QBoxLayout::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QBoxLayout::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void addItem(QLayoutItem* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_addItem_QLayoutItem_X.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      return QBoxLayout::addItem(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QBoxLayout_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_sizeHint_();
    } else {
      return QBoxLayout::sizeHint();
    }
  }

  virtual QSize minimumSize() const override {
    if (this->bg_table.jump_bg_QBoxLayout_minimumSize_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_minimumSize_();
    } else {
      return QBoxLayout::minimumSize();
    }
  }

  virtual QSize maximumSize() const override {
    if (this->bg_table.jump_bg_QBoxLayout_maximumSize_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_maximumSize_();
    } else {
      return QBoxLayout::maximumSize();
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QBoxLayout_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_hasHeightForWidth_();
    } else {
      return QBoxLayout::hasHeightForWidth();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_heightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::heightForWidth(unnamed_arg_0);
    }
  }

  virtual int minimumHeightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_minimumHeightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }

  virtual Qt::Orientations expandingDirections() const override {
    if (this->bg_table.jump_bg_QBoxLayout_expandingDirections_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_expandingDirections_();
    } else {
      return QBoxLayout::expandingDirections();
    }
  }

  virtual void invalidate() override {
    if (this->bg_table.jump_bg_QBoxLayout_invalidate_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_invalidate_();
    } else {
      return QBoxLayout::invalidate();
    }
  }

  virtual QLayoutItem* itemAt(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_itemAt_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_itemAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::itemAt(unnamed_arg_0);
    }
  }

  virtual QLayoutItem* takeAt(int unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_takeAt_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_takeAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::takeAt(unnamed_arg_0);
    }
  }

  virtual int count() const override {
    if (this->bg_table.jump_bg_QBoxLayout_count_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_count_();
    } else {
      return QBoxLayout::count();
    }
  }

  virtual void setGeometry(const QRect& unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_setGeometry_const_QRect_R.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_setGeometry_const_QRect_R(new (UseGC) QRect (unnamed_arg_0));
    } else {
      return QBoxLayout::setGeometry(unnamed_arg_0);
    }
  }

  virtual QRect geometry() const override {
    if (this->bg_table.jump_bg_QLayout_geometry_.isValid()) {
      return this->bg_table.jump_bg_QLayout_geometry_();
    } else {
      return QLayout::geometry();
    }
  }

  virtual int indexOf(QWidget* unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayout_indexOf_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QLayout::indexOf(unnamed_arg_0);
    }
  }

  virtual bool isEmpty() const override {
    if (this->bg_table.jump_bg_QLayout_isEmpty_.isValid()) {
      return this->bg_table.jump_bg_QLayout_isEmpty_();
    } else {
      return QLayout::isEmpty();
    }
  }

  virtual QLayout* layout() override {
    if (this->bg_table.jump_bg_QLayout_layout_.isValid()) {
      return this->bg_table.jump_bg_QLayout_layout_();
    } else {
      return QLayout::layout();
    }
  }

  virtual void childEvent(QChildEvent* e) override {
    if (this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      return QLayout::childEvent(e);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

  virtual QWidget* widget() override {
    if (this->bg_table.jump_bg_QLayoutItem_widget_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_widget_();
    } else {
      return QLayoutItem::widget();
    }
  }

  virtual QSpacerItem* spacerItem() override {
    if (this->bg_table.jump_bg_QLayoutItem_spacerItem_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_spacerItem_();
    } else {
      return QLayoutItem::spacerItem();
    }
  }

};
extern "C" void bg_QBoxLayout_JUMPTABLE(BgInherit_QBoxLayout *self, const BgTable_QBoxLayout &table) {
  self->bg_table = table;
}

extern "C" void bg_QHBoxLayout_DESTROY(QHBoxLayout* _self_) { delete _self_; }

struct BgTable_QHBoxLayout {
CrystalProc<const QMetaObject*> jump_bg_QHBoxLayout_metaObject_;
CrystalProc<void*, const char*> jump_bg_QHBoxLayout_qt_metacast_const_char_X;
CrystalProc<void, QLayoutItem*> jump_bg_QBoxLayout_addItem_QLayoutItem_X;
CrystalProc<QSize&> jump_bg_QBoxLayout_sizeHint_;
CrystalProc<QSize&> jump_bg_QBoxLayout_minimumSize_;
CrystalProc<QSize&> jump_bg_QBoxLayout_maximumSize_;
CrystalProc<bool> jump_bg_QBoxLayout_hasHeightForWidth_;
CrystalProc<int, int> jump_bg_QBoxLayout_heightForWidth_int;
CrystalProc<int, int> jump_bg_QBoxLayout_minimumHeightForWidth_int;
CrystalProc<Qt::Orientations> jump_bg_QBoxLayout_expandingDirections_;
CrystalProc<void> jump_bg_QBoxLayout_invalidate_;
CrystalProc<QLayoutItem*, int> jump_bg_QBoxLayout_itemAt_int;
CrystalProc<QLayoutItem*, int> jump_bg_QBoxLayout_takeAt_int;
CrystalProc<int> jump_bg_QBoxLayout_count_;
CrystalProc<void, const QRect*> jump_bg_QBoxLayout_setGeometry_const_QRect_R;
CrystalProc<QRect&> jump_bg_QLayout_geometry_;
CrystalProc<int, QWidget*> jump_bg_QLayout_indexOf_QWidget_X;
CrystalProc<bool> jump_bg_QLayout_isEmpty_;
CrystalProc<QLayout*> jump_bg_QLayout_layout_;
CrystalProc<void, QChildEvent*> jump_bg_QLayout_childEvent_QChildEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
CrystalProc<QWidget*> jump_bg_QLayoutItem_widget_;
CrystalProc<QSpacerItem*> jump_bg_QLayoutItem_spacerItem_;
};
struct BgInherit_QHBoxLayout : public QHBoxLayout {
  using QHBoxLayout::QHBoxLayout;
  BgTable_QHBoxLayout bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QHBoxLayout_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QHBoxLayout_metaObject_();
    } else {
      return QHBoxLayout::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QHBoxLayout_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QHBoxLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QHBoxLayout::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void addItem(QLayoutItem* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_addItem_QLayoutItem_X.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      return QBoxLayout::addItem(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QBoxLayout_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_sizeHint_();
    } else {
      return QBoxLayout::sizeHint();
    }
  }

  virtual QSize minimumSize() const override {
    if (this->bg_table.jump_bg_QBoxLayout_minimumSize_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_minimumSize_();
    } else {
      return QBoxLayout::minimumSize();
    }
  }

  virtual QSize maximumSize() const override {
    if (this->bg_table.jump_bg_QBoxLayout_maximumSize_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_maximumSize_();
    } else {
      return QBoxLayout::maximumSize();
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QBoxLayout_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_hasHeightForWidth_();
    } else {
      return QBoxLayout::hasHeightForWidth();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_heightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::heightForWidth(unnamed_arg_0);
    }
  }

  virtual int minimumHeightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_minimumHeightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }

  virtual Qt::Orientations expandingDirections() const override {
    if (this->bg_table.jump_bg_QBoxLayout_expandingDirections_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_expandingDirections_();
    } else {
      return QBoxLayout::expandingDirections();
    }
  }

  virtual void invalidate() override {
    if (this->bg_table.jump_bg_QBoxLayout_invalidate_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_invalidate_();
    } else {
      return QBoxLayout::invalidate();
    }
  }

  virtual QLayoutItem* itemAt(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_itemAt_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_itemAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::itemAt(unnamed_arg_0);
    }
  }

  virtual QLayoutItem* takeAt(int unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_takeAt_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_takeAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::takeAt(unnamed_arg_0);
    }
  }

  virtual int count() const override {
    if (this->bg_table.jump_bg_QBoxLayout_count_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_count_();
    } else {
      return QBoxLayout::count();
    }
  }

  virtual void setGeometry(const QRect& unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_setGeometry_const_QRect_R.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_setGeometry_const_QRect_R(new (UseGC) QRect (unnamed_arg_0));
    } else {
      return QBoxLayout::setGeometry(unnamed_arg_0);
    }
  }

  virtual QRect geometry() const override {
    if (this->bg_table.jump_bg_QLayout_geometry_.isValid()) {
      return this->bg_table.jump_bg_QLayout_geometry_();
    } else {
      return QLayout::geometry();
    }
  }

  virtual int indexOf(QWidget* unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayout_indexOf_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QLayout::indexOf(unnamed_arg_0);
    }
  }

  virtual bool isEmpty() const override {
    if (this->bg_table.jump_bg_QLayout_isEmpty_.isValid()) {
      return this->bg_table.jump_bg_QLayout_isEmpty_();
    } else {
      return QLayout::isEmpty();
    }
  }

  virtual QLayout* layout() override {
    if (this->bg_table.jump_bg_QLayout_layout_.isValid()) {
      return this->bg_table.jump_bg_QLayout_layout_();
    } else {
      return QLayout::layout();
    }
  }

  virtual void childEvent(QChildEvent* e) override {
    if (this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      return QLayout::childEvent(e);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

  virtual QWidget* widget() override {
    if (this->bg_table.jump_bg_QLayoutItem_widget_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_widget_();
    } else {
      return QLayoutItem::widget();
    }
  }

  virtual QSpacerItem* spacerItem() override {
    if (this->bg_table.jump_bg_QLayoutItem_spacerItem_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_spacerItem_();
    } else {
      return QLayoutItem::spacerItem();
    }
  }

};
extern "C" void bg_QHBoxLayout_JUMPTABLE(BgInherit_QHBoxLayout *self, const BgTable_QHBoxLayout &table) {
  self->bg_table = table;
}

extern "C" void bg_QVBoxLayout_DESTROY(QVBoxLayout* _self_) { delete _self_; }

struct BgTable_QVBoxLayout {
CrystalProc<const QMetaObject*> jump_bg_QVBoxLayout_metaObject_;
CrystalProc<void*, const char*> jump_bg_QVBoxLayout_qt_metacast_const_char_X;
CrystalProc<void, QLayoutItem*> jump_bg_QBoxLayout_addItem_QLayoutItem_X;
CrystalProc<QSize&> jump_bg_QBoxLayout_sizeHint_;
CrystalProc<QSize&> jump_bg_QBoxLayout_minimumSize_;
CrystalProc<QSize&> jump_bg_QBoxLayout_maximumSize_;
CrystalProc<bool> jump_bg_QBoxLayout_hasHeightForWidth_;
CrystalProc<int, int> jump_bg_QBoxLayout_heightForWidth_int;
CrystalProc<int, int> jump_bg_QBoxLayout_minimumHeightForWidth_int;
CrystalProc<Qt::Orientations> jump_bg_QBoxLayout_expandingDirections_;
CrystalProc<void> jump_bg_QBoxLayout_invalidate_;
CrystalProc<QLayoutItem*, int> jump_bg_QBoxLayout_itemAt_int;
CrystalProc<QLayoutItem*, int> jump_bg_QBoxLayout_takeAt_int;
CrystalProc<int> jump_bg_QBoxLayout_count_;
CrystalProc<void, const QRect*> jump_bg_QBoxLayout_setGeometry_const_QRect_R;
CrystalProc<QRect&> jump_bg_QLayout_geometry_;
CrystalProc<int, QWidget*> jump_bg_QLayout_indexOf_QWidget_X;
CrystalProc<bool> jump_bg_QLayout_isEmpty_;
CrystalProc<QLayout*> jump_bg_QLayout_layout_;
CrystalProc<void, QChildEvent*> jump_bg_QLayout_childEvent_QChildEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
CrystalProc<QWidget*> jump_bg_QLayoutItem_widget_;
CrystalProc<QSpacerItem*> jump_bg_QLayoutItem_spacerItem_;
};
struct BgInherit_QVBoxLayout : public QVBoxLayout {
  using QVBoxLayout::QVBoxLayout;
  BgTable_QVBoxLayout bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QVBoxLayout_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QVBoxLayout_metaObject_();
    } else {
      return QVBoxLayout::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QVBoxLayout_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QVBoxLayout_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QVBoxLayout::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void addItem(QLayoutItem* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_addItem_QLayoutItem_X.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_addItem_QLayoutItem_X(unnamed_arg_0);
    } else {
      return QBoxLayout::addItem(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QBoxLayout_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_sizeHint_();
    } else {
      return QBoxLayout::sizeHint();
    }
  }

  virtual QSize minimumSize() const override {
    if (this->bg_table.jump_bg_QBoxLayout_minimumSize_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_minimumSize_();
    } else {
      return QBoxLayout::minimumSize();
    }
  }

  virtual QSize maximumSize() const override {
    if (this->bg_table.jump_bg_QBoxLayout_maximumSize_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_maximumSize_();
    } else {
      return QBoxLayout::maximumSize();
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QBoxLayout_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_hasHeightForWidth_();
    } else {
      return QBoxLayout::hasHeightForWidth();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_heightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::heightForWidth(unnamed_arg_0);
    }
  }

  virtual int minimumHeightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_minimumHeightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_minimumHeightForWidth_int(unnamed_arg_0);
    } else {
      return QBoxLayout::minimumHeightForWidth(unnamed_arg_0);
    }
  }

  virtual Qt::Orientations expandingDirections() const override {
    if (this->bg_table.jump_bg_QBoxLayout_expandingDirections_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_expandingDirections_();
    } else {
      return QBoxLayout::expandingDirections();
    }
  }

  virtual void invalidate() override {
    if (this->bg_table.jump_bg_QBoxLayout_invalidate_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_invalidate_();
    } else {
      return QBoxLayout::invalidate();
    }
  }

  virtual QLayoutItem* itemAt(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QBoxLayout_itemAt_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_itemAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::itemAt(unnamed_arg_0);
    }
  }

  virtual QLayoutItem* takeAt(int unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_takeAt_int.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_takeAt_int(unnamed_arg_0);
    } else {
      return QBoxLayout::takeAt(unnamed_arg_0);
    }
  }

  virtual int count() const override {
    if (this->bg_table.jump_bg_QBoxLayout_count_.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_count_();
    } else {
      return QBoxLayout::count();
    }
  }

  virtual void setGeometry(const QRect& unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QBoxLayout_setGeometry_const_QRect_R.isValid()) {
      return this->bg_table.jump_bg_QBoxLayout_setGeometry_const_QRect_R(new (UseGC) QRect (unnamed_arg_0));
    } else {
      return QBoxLayout::setGeometry(unnamed_arg_0);
    }
  }

  virtual QRect geometry() const override {
    if (this->bg_table.jump_bg_QLayout_geometry_.isValid()) {
      return this->bg_table.jump_bg_QLayout_geometry_();
    } else {
      return QLayout::geometry();
    }
  }

  virtual int indexOf(QWidget* unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QLayout_indexOf_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_indexOf_QWidget_X(unnamed_arg_0);
    } else {
      return QLayout::indexOf(unnamed_arg_0);
    }
  }

  virtual bool isEmpty() const override {
    if (this->bg_table.jump_bg_QLayout_isEmpty_.isValid()) {
      return this->bg_table.jump_bg_QLayout_isEmpty_();
    } else {
      return QLayout::isEmpty();
    }
  }

  virtual QLayout* layout() override {
    if (this->bg_table.jump_bg_QLayout_layout_.isValid()) {
      return this->bg_table.jump_bg_QLayout_layout_();
    } else {
      return QLayout::layout();
    }
  }

  virtual void childEvent(QChildEvent* e) override {
    if (this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLayout_childEvent_QChildEvent_X(e);
    } else {
      return QLayout::childEvent(e);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

  virtual QWidget* widget() override {
    if (this->bg_table.jump_bg_QLayoutItem_widget_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_widget_();
    } else {
      return QLayoutItem::widget();
    }
  }

  virtual QSpacerItem* spacerItem() override {
    if (this->bg_table.jump_bg_QLayoutItem_spacerItem_.isValid()) {
      return this->bg_table.jump_bg_QLayoutItem_spacerItem_();
    } else {
      return QLayoutItem::spacerItem();
    }
  }

};
extern "C" void bg_QVBoxLayout_JUMPTABLE(BgInherit_QVBoxLayout *self, const BgTable_QVBoxLayout &table) {
  self->bg_table = table;
}

extern "C" void bg_QKeySequence_DESTROY(QKeySequence* _self_) { delete _self_; }

extern "C" void bg_QLineEdit_DESTROY(QLineEdit* _self_) { delete _self_; }

struct BgTable_QLineEdit {
CrystalProc<const QMetaObject*> jump_bg_QLineEdit_metaObject_;
CrystalProc<void*, const char*> jump_bg_QLineEdit_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QLineEdit_sizeHint_;
CrystalProc<QSize&> jump_bg_QLineEdit_minimumSizeHint_;
CrystalProc<void, QMouseEvent*> jump_bg_QLineEdit_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QLineEdit_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QLineEdit_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QLineEdit_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QLineEdit_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QLineEdit_paintEvent_QPaintEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QLineEdit_dropEvent_QDropEvent_X;
CrystalProc<void, QEvent*> jump_bg_QLineEdit_changeEvent_QEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QLineEdit_event_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QWidget_resizeEvent_QResizeEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QWidget_showEvent_QShowEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QLineEdit : public QLineEdit {
  using QLineEdit::QLineEdit;
  BgTable_QLineEdit bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QLineEdit_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_metaObject_();
    } else {
      return QLineEdit::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QLineEdit::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QLineEdit_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_sizeHint_();
    } else {
      return QLineEdit::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QLineEdit_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_minimumSizeHint_();
    } else {
      return QLineEdit::minimumSizeHint();
    }
  }

  virtual void mousePressEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_mousePressEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::mousePressEvent(unnamed_arg_0);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::mouseMoveEvent(unnamed_arg_0);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::mouseReleaseEvent(unnamed_arg_0);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::mouseDoubleClickEvent(unnamed_arg_0);
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void focusInEvent(QFocusEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_focusInEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::focusInEvent(unnamed_arg_0);
    }
  }

  virtual void focusOutEvent(QFocusEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_focusOutEvent_QFocusEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::focusOutEvent(unnamed_arg_0);
    }
  }

  virtual void paintEvent(QPaintEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_paintEvent_QPaintEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::paintEvent(unnamed_arg_0);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::dragEnterEvent(unnamed_arg_0);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* e) override {
    if (this->bg_table.jump_bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(e);
    } else {
      return QLineEdit::dragMoveEvent(e);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* e) override {
    if (this->bg_table.jump_bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(e);
    } else {
      return QLineEdit::dragLeaveEvent(e);
    }
  }

  virtual void dropEvent(QDropEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_dropEvent_QDropEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::dropEvent(unnamed_arg_0);
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::changeEvent(unnamed_arg_0);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::contextMenuEvent(unnamed_arg_0);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QLineEdit_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QLineEdit_event_QEvent_X(unnamed_arg_0);
    } else {
      return QLineEdit::event(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_resizeEvent_QResizeEvent_X(event);
    } else {
      return QWidget::resizeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_showEvent_QShowEvent_X(event);
    } else {
      return QWidget::showEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QLineEdit_JUMPTABLE(BgInherit_QLineEdit *self, const BgTable_QLineEdit &table) {
  self->bg_table = table;
}

extern "C" void bg_QTextEdit_DESTROY(QTextEdit* _self_) { delete _self_; }

struct BgTable_QTextEdit {
CrystalProc<const QMetaObject*> jump_bg_QTextEdit_metaObject_;
CrystalProc<void*, const char*> jump_bg_QTextEdit_qt_metacast_const_char_X;
CrystalProc<bool, QEvent*> jump_bg_QTextEdit_event_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QTextEdit_timerEvent_QTimerEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QTextEdit_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QTextEdit_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QTextEdit_resizeEvent_QResizeEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QTextEdit_paintEvent_QPaintEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QTextEdit_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QTextEdit_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<bool, bool> jump_bg_QTextEdit_focusNextPrevChild_bool;
CrystalProc<void, QContextMenuEvent*> jump_bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QTextEdit_dropEvent_QDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QTextEdit_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QTextEdit_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QTextEdit_showEvent_QShowEvent_X;
CrystalProc<void, QEvent*> jump_bg_QTextEdit_changeEvent_QEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QTextEdit_wheelEvent_QWheelEvent_X;
CrystalProc<QMimeData*> jump_bg_QTextEdit_createMimeDataFromSelection_;
CrystalProc<bool, const QMimeData*> jump_bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X;
CrystalProc<void, const QMimeData*> jump_bg_QTextEdit_insertFromMimeData_const_QMimeData_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<void, int, int> jump_bg_QTextEdit_scrollContentsBy_int_int;
CrystalProc<void, const QTextCursor*> jump_bg_QTextEdit_doSetTextCursor_const_QTextCursor_R;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_minimumSizeHint_;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_sizeHint_;
CrystalProc<void, QWidget*> jump_bg_QAbstractScrollArea_setupViewport_QWidget_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_viewportSizeHint_;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QTextEdit : public QTextEdit {
  using QTextEdit::QTextEdit;
  BgTable_QTextEdit bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QTextEdit_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_metaObject_();
    } else {
      return QTextEdit::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTextEdit_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTextEdit::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_event_QEvent_X(e);
    } else {
      return QTextEdit::event(e);
    }
  }

  virtual void timerEvent(QTimerEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_timerEvent_QTimerEvent_X(e);
    } else {
      return QTextEdit::timerEvent(e);
    }
  }

  virtual void keyPressEvent(QKeyEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_keyPressEvent_QKeyEvent_X(e);
    } else {
      return QTextEdit::keyPressEvent(e);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(e);
    } else {
      return QTextEdit::keyReleaseEvent(e);
    }
  }

  virtual void resizeEvent(QResizeEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_resizeEvent_QResizeEvent_X(e);
    } else {
      return QTextEdit::resizeEvent(e);
    }
  }

  virtual void paintEvent(QPaintEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_paintEvent_QPaintEvent_X(e);
    } else {
      return QTextEdit::paintEvent(e);
    }
  }

  virtual void mousePressEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_mousePressEvent_QMouseEvent_X(e);
    } else {
      return QTextEdit::mousePressEvent(e);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(e);
    } else {
      return QTextEdit::mouseMoveEvent(e);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(e);
    } else {
      return QTextEdit::mouseReleaseEvent(e);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(e);
    } else {
      return QTextEdit::mouseDoubleClickEvent(e);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QTextEdit_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_focusNextPrevChild_bool(next);
    } else {
      return QTextEdit::focusNextPrevChild(next);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(e);
    } else {
      return QTextEdit::contextMenuEvent(e);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(e);
    } else {
      return QTextEdit::dragEnterEvent(e);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(e);
    } else {
      return QTextEdit::dragLeaveEvent(e);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(e);
    } else {
      return QTextEdit::dragMoveEvent(e);
    }
  }

  virtual void dropEvent(QDropEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_dropEvent_QDropEvent_X(e);
    } else {
      return QTextEdit::dropEvent(e);
    }
  }

  virtual void focusInEvent(QFocusEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_focusInEvent_QFocusEvent_X(e);
    } else {
      return QTextEdit::focusInEvent(e);
    }
  }

  virtual void focusOutEvent(QFocusEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_focusOutEvent_QFocusEvent_X(e);
    } else {
      return QTextEdit::focusOutEvent(e);
    }
  }

  virtual void showEvent(QShowEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTextEdit_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      return QTextEdit::showEvent(unnamed_arg_0);
    }
  }

  virtual void changeEvent(QEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_changeEvent_QEvent_X(e);
    } else {
      return QTextEdit::changeEvent(e);
    }
  }

  virtual void wheelEvent(QWheelEvent* e) override {
    if (this->bg_table.jump_bg_QTextEdit_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_wheelEvent_QWheelEvent_X(e);
    } else {
      return QTextEdit::wheelEvent(e);
    }
  }

  virtual QMimeData* createMimeDataFromSelection() const override {
    if (this->bg_table.jump_bg_QTextEdit_createMimeDataFromSelection_.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_createMimeDataFromSelection_();
    } else {
      return QTextEdit::createMimeDataFromSelection();
    }
  }

  virtual bool canInsertFromMimeData(const QMimeData* source) const override {
    if (this->bg_table.jump_bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(source);
    } else {
      return QTextEdit::canInsertFromMimeData(source);
    }
  }

  virtual void insertFromMimeData(const QMimeData* source) override {
    if (this->bg_table.jump_bg_QTextEdit_insertFromMimeData_const_QMimeData_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_insertFromMimeData_const_QMimeData_X(source);
    } else {
      return QTextEdit::insertFromMimeData(source);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QTextEdit::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual void scrollContentsBy(int dx, int dy) override {
    if (this->bg_table.jump_bg_QTextEdit_scrollContentsBy_int_int.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_scrollContentsBy_int_int(dx, dy);
    } else {
      return QTextEdit::scrollContentsBy(dx, dy);
    }
  }

  virtual void doSetTextCursor(const QTextCursor& cursor) override {
    if (this->bg_table.jump_bg_QTextEdit_doSetTextCursor_const_QTextCursor_R.isValid()) {
      return this->bg_table.jump_bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(new (UseGC) QTextCursor (cursor));
    } else {
      return QTextEdit::doSetTextCursor(cursor);
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QAbstractScrollArea::minimumSizeHint();
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_sizeHint_();
    } else {
      return QAbstractScrollArea::sizeHint();
    }
  }

  virtual void setupViewport(QWidget* viewport) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_setupViewport_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_setupViewport_QWidget_X(viewport);
    } else {
      return QAbstractScrollArea::setupViewport(viewport);
    }
  }

  virtual bool eventFilter(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QAbstractScrollArea::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual bool viewportEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_viewportEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QAbstractScrollArea::viewportEvent(unnamed_arg_0);
    }
  }

  virtual QSize viewportSizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_viewportSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_viewportSizeHint_();
    } else {
      return QAbstractScrollArea::viewportSizeHint();
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QTextEdit_JUMPTABLE(BgInherit_QTextEdit *self, const BgTable_QTextEdit &table) {
  self->bg_table = table;
}

extern "C" void bg_QFileDialog_DESTROY(QFileDialog* _self_) { delete _self_; }

struct BgTable_QFileDialog {
CrystalProc<const QMetaObject*> jump_bg_QFileDialog_metaObject_;
CrystalProc<void*, const char*> jump_bg_QFileDialog_qt_metacast_const_char_X;
CrystalProc<void, bool> jump_bg_QFileDialog_setVisible_bool;
CrystalProc<void, int> jump_bg_QFileDialog_done_int;
CrystalProc<void> jump_bg_QFileDialog_accept_;
CrystalProc<void, QEvent*> jump_bg_QFileDialog_changeEvent_QEvent_X;
CrystalProc<QSize&> jump_bg_QDialog_sizeHint_;
CrystalProc<QSize&> jump_bg_QDialog_minimumSizeHint_;
CrystalProc<void> jump_bg_QDialog_open_;
CrystalProc<int> jump_bg_QDialog_exec_;
CrystalProc<void> jump_bg_QDialog_reject_;
CrystalProc<void, QKeyEvent*> jump_bg_QDialog_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QDialog_closeEvent_QCloseEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QDialog_showEvent_QShowEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QDialog_resizeEvent_QResizeEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QDialog_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QDialog_eventFilter_QObject_X_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<bool, QEvent*> jump_bg_QWidget_event_QEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QWidget_wheelEvent_QWheelEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QWidget_paintEvent_QPaintEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QWidget_dropEvent_QDropEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QInputMethodEvent*> jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, bool> jump_bg_QWidget_focusNextPrevChild_bool;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QFileDialog : public QFileDialog {
  using QFileDialog::QFileDialog;
  BgTable_QFileDialog bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QFileDialog_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QFileDialog_metaObject_();
    } else {
      return QFileDialog::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFileDialog_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QFileDialog_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QFileDialog::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QFileDialog_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QFileDialog_setVisible_bool(visible);
    } else {
      return QFileDialog::setVisible(visible);
    }
  }

  virtual void done(int result) override {
    if (this->bg_table.jump_bg_QFileDialog_done_int.isValid()) {
      return this->bg_table.jump_bg_QFileDialog_done_int(result);
    } else {
      return QFileDialog::done(result);
    }
  }

  virtual void accept() override {
    if (this->bg_table.jump_bg_QFileDialog_accept_.isValid()) {
      return this->bg_table.jump_bg_QFileDialog_accept_();
    } else {
      return QFileDialog::accept();
    }
  }

  virtual void changeEvent(QEvent* e) override {
    if (this->bg_table.jump_bg_QFileDialog_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFileDialog_changeEvent_QEvent_X(e);
    } else {
      return QFileDialog::changeEvent(e);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QDialog_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QDialog_sizeHint_();
    } else {
      return QDialog::sizeHint();
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QDialog_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QDialog_minimumSizeHint_();
    } else {
      return QDialog::minimumSizeHint();
    }
  }

  virtual void open() override {
    if (this->bg_table.jump_bg_QDialog_open_.isValid()) {
      return this->bg_table.jump_bg_QDialog_open_();
    } else {
      return QDialog::open();
    }
  }

  virtual int exec() override {
    if (this->bg_table.jump_bg_QDialog_exec_.isValid()) {
      return this->bg_table.jump_bg_QDialog_exec_();
    } else {
      return QDialog::exec();
    }
  }

  virtual void reject() override {
    if (this->bg_table.jump_bg_QDialog_reject_.isValid()) {
      return this->bg_table.jump_bg_QDialog_reject_();
    } else {
      return QDialog::reject();
    }
  }

  virtual void keyPressEvent(QKeyEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_keyPressEvent_QKeyEvent_X(unnamed_arg_0);
    } else {
      return QDialog::keyPressEvent(unnamed_arg_0);
    }
  }

  virtual void closeEvent(QCloseEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_closeEvent_QCloseEvent_X(unnamed_arg_0);
    } else {
      return QDialog::closeEvent(unnamed_arg_0);
    }
  }

  virtual void showEvent(QShowEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_showEvent_QShowEvent_X(unnamed_arg_0);
    } else {
      return QDialog::showEvent(unnamed_arg_0);
    }
  }

  virtual void resizeEvent(QResizeEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_resizeEvent_QResizeEvent_X(unnamed_arg_0);
    } else {
      return QDialog::resizeEvent(unnamed_arg_0);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QDialog_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_contextMenuEvent_QContextMenuEvent_X(unnamed_arg_0);
    } else {
      return QDialog::contextMenuEvent(unnamed_arg_0);
    }
  }

  virtual bool eventFilter(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QDialog_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QDialog_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QDialog::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_event_QEvent_X(event);
    } else {
      return QWidget::event(event);
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mousePressEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseDoubleClickEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QWidget::mouseMoveEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_wheelEvent_QWheelEvent_X(event);
    } else {
      return QWidget::wheelEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QWidget::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QWidget::focusOutEvent(event);
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void paintEvent(QPaintEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEvent_QPaintEvent_X(event);
    } else {
      return QWidget::paintEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QWidget::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QWidget::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QWidget::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_dropEvent_QDropEvent_X(event);
    } else {
      return QWidget::dropEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_inputMethodEvent_QInputMethodEvent_X(unnamed_arg_0);
    } else {
      return QWidget::inputMethodEvent(unnamed_arg_0);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_focusNextPrevChild_bool(next);
    } else {
      return QWidget::focusNextPrevChild(next);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QFileDialog_JUMPTABLE(BgInherit_QFileDialog *self, const BgTable_QFileDialog &table) {
  self->bg_table = table;
}

extern "C" void bg_QTextOption_DESTROY(QTextOption* _self_) { delete _self_; }

extern "C" void bg_QTextDocument_DESTROY(QTextDocument* _self_) { delete _self_; }

struct BgTable_QTextDocument {
CrystalProc<const QMetaObject*> jump_bg_QTextDocument_metaObject_;
CrystalProc<void*, const char*> jump_bg_QTextDocument_qt_metacast_const_char_X;
CrystalProc<void> jump_bg_QTextDocument_clear_;
CrystalProc<QTextObject*, const QTextFormat*> jump_bg_QTextDocument_createObject_const_QTextFormat_R;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QTextDocument : public QTextDocument {
  using QTextDocument::QTextDocument;
  BgTable_QTextDocument bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QTextDocument_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QTextDocument_metaObject_();
    } else {
      return QTextDocument::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QTextDocument_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QTextDocument_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QTextDocument::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void clear() override {
    if (this->bg_table.jump_bg_QTextDocument_clear_.isValid()) {
      return this->bg_table.jump_bg_QTextDocument_clear_();
    } else {
      return QTextDocument::clear();
    }
  }

  virtual QTextObject* createObject(const QTextFormat& f) override {
    if (this->bg_table.jump_bg_QTextDocument_createObject_const_QTextFormat_R.isValid()) {
      return this->bg_table.jump_bg_QTextDocument_createObject_const_QTextFormat_R(new (UseGC) QTextFormat (f));
    } else {
      return QTextDocument::createObject(f);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QTextDocument_JUMPTABLE(BgInherit_QTextDocument *self, const BgTable_QTextDocument &table) {
  self->bg_table = table;
}

extern "C" void bg_QTextCursor_DESTROY(QTextCursor* _self_) { delete _self_; }

extern "C" void bg_QDir_DESTROY(QDir* _self_) { delete _self_; }

extern "C" void bg_QGraphicsItem_DESTROY(QGraphicsItem* _self_) { delete _self_; }

struct BgTable_QGraphicsItem {
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<QRectF&> jump_bg_QGraphicsItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsItem_contains_const_QPointF_R;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsItem_opaqueArea_;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<int> jump_bg_QGraphicsItem_type_;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension;
};
struct BgInherit_QGraphicsItem : public QGraphicsItem {
  using QGraphicsItem::QGraphicsItem;
  BgTable_QGraphicsItem bg_table;

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual QRectF boundingRect() const override {
    return this->bg_table.jump_bg_QGraphicsItem_boundingRect_();
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_shape_();
    } else {
      return QGraphicsItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsItem::contains(point);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_opaqueArea_();
    } else {
      return QGraphicsItem::opaqueArea();
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    return this->bg_table.jump_bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_type_();
    } else {
      return QGraphicsItem::type();
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsItem::supportsExtension(extension);
    }
  }

};
extern "C" void bg_QGraphicsItem_JUMPTABLE(BgInherit_QGraphicsItem *self, const BgTable_QGraphicsItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsScene_DESTROY(QGraphicsScene* _self_) { delete _self_; }

struct BgTable_QGraphicsScene {
CrystalProc<const QMetaObject*> jump_bg_QGraphicsScene_metaObject_;
CrystalProc<void*, const char*> jump_bg_QGraphicsScene_qt_metacast_const_char_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsScene_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsScene_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsScene_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHelpEvent*> jump_bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsScene_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<void, QPainter*, const QRectF*> jump_bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R;
CrystalProc<void, QPainter*, const QRectF*> jump_bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R;
CrystalProc<void, QPainter*, int, QGraphicsItem**, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QGraphicsScene : public QGraphicsScene {
  using QGraphicsScene::QGraphicsScene;
  BgTable_QGraphicsScene bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QGraphicsScene_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_metaObject_();
    } else {
      return QGraphicsScene::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGraphicsScene_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsScene::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_event_QEvent_X(event);
    } else {
      return QGraphicsScene::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QGraphicsScene::eventFilter(watched, event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsScene::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsScene::dragEnterEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsScene::dragMoveEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsScene::dragLeaveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsScene::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsScene::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsScene::focusOutEvent(event);
    }
  }

  virtual void helpEvent(QGraphicsSceneHelpEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(event);
    } else {
      return QGraphicsScene::helpEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsScene::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsScene::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsScene::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsScene::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsScene::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsScene::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsScene::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsScene::inputMethodEvent(event);
    }
  }

  virtual void drawBackground(QPainter* painter, const QRectF& rect) override {
    if (this->bg_table.jump_bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(painter, new (UseGC) QRectF (rect));
    } else {
      return QGraphicsScene::drawBackground(painter, rect);
    }
  }

  virtual void drawForeground(QPainter* painter, const QRectF& rect) override {
    if (this->bg_table.jump_bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(painter, new (UseGC) QRectF (rect));
    } else {
      return QGraphicsScene::drawForeground(painter, rect);
    }
  }

  virtual void drawItems(QPainter* painter, int numItems, QGraphicsItem** items, const QStyleOptionGraphicsItem* options, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, numItems, items, options, widget);
    } else {
      return QGraphicsScene::drawItems(painter, numItems, items, options, widget);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QGraphicsScene_JUMPTABLE(BgInherit_QGraphicsScene *self, const BgTable_QGraphicsScene &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsView_DESTROY(QGraphicsView* _self_) { delete _self_; }

struct BgTable_QGraphicsView {
CrystalProc<const QMetaObject*> jump_bg_QGraphicsView_metaObject_;
CrystalProc<void*, const char*> jump_bg_QGraphicsView_qt_metacast_const_char_X;
CrystalProc<QSize&> jump_bg_QGraphicsView_sizeHint_;
CrystalProc<void, QWidget*> jump_bg_QGraphicsView_setupViewport_QWidget_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsView_event_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsView_viewportEvent_QEvent_X;
CrystalProc<void, QContextMenuEvent*> jump_bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X;
CrystalProc<void, QDragEnterEvent*> jump_bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X;
CrystalProc<void, QDragLeaveEvent*> jump_bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X;
CrystalProc<void, QDragMoveEvent*> jump_bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X;
CrystalProc<void, QDropEvent*> jump_bg_QGraphicsView_dropEvent_QDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsView_focusInEvent_QFocusEvent_X;
CrystalProc<bool, bool> jump_bg_QGraphicsView_focusNextPrevChild_bool;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsView_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsView_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QGraphicsView_mousePressEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X;
CrystalProc<void, QMouseEvent*> jump_bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X;
CrystalProc<void, QWheelEvent*> jump_bg_QGraphicsView_wheelEvent_QWheelEvent_X;
CrystalProc<void, QPaintEvent*> jump_bg_QGraphicsView_paintEvent_QPaintEvent_X;
CrystalProc<void, QResizeEvent*> jump_bg_QGraphicsView_resizeEvent_QResizeEvent_X;
CrystalProc<void, int, int> jump_bg_QGraphicsView_scrollContentsBy_int_int;
CrystalProc<void, QShowEvent*> jump_bg_QGraphicsView_showEvent_QShowEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<void, QPainter*, const QRectF*> jump_bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R;
CrystalProc<void, QPainter*, const QRectF*> jump_bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R;
CrystalProc<void, QPainter*, int, QGraphicsItem**, const QStyleOptionGraphicsItem*> jump_bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_minimumSizeHint_;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X;
CrystalProc<QSize&> jump_bg_QAbstractScrollArea_viewportSizeHint_;
CrystalProc<void, QEvent*> jump_bg_QFrame_changeEvent_QEvent_X;
CrystalProc<int> jump_bg_QWidget_devType_;
CrystalProc<void, bool> jump_bg_QWidget_setVisible_bool;
CrystalProc<int, int> jump_bg_QWidget_heightForWidth_int;
CrystalProc<bool> jump_bg_QWidget_hasHeightForWidth_;
CrystalProc<QPaintEngine*> jump_bg_QWidget_paintEngine_;
CrystalProc<void, QEvent*> jump_bg_QWidget_enterEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QWidget_leaveEvent_QEvent_X;
CrystalProc<void, QMoveEvent*> jump_bg_QWidget_moveEvent_QMoveEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QTabletEvent*> jump_bg_QWidget_tabletEvent_QTabletEvent_X;
CrystalProc<void, QActionEvent*> jump_bg_QWidget_actionEvent_QActionEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QWidget_hideEvent_QHideEvent_X;
CrystalProc<bool, const QByteArray*, void*, long*> jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X;
CrystalProc<int, QPaintDevice::PaintDeviceMetric> jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric;
CrystalProc<void, QPainter*> jump_bg_QWidget_initPainter_QPainter_X;
CrystalProc<QPainter*> jump_bg_QWidget_sharedPainter_;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QGraphicsView : public QGraphicsView {
  using QGraphicsView::QGraphicsView;
  BgTable_QGraphicsView bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QGraphicsView_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_metaObject_();
    } else {
      return QGraphicsView::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGraphicsView_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsView::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QSize sizeHint() const override {
    if (this->bg_table.jump_bg_QGraphicsView_sizeHint_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_sizeHint_();
    } else {
      return QGraphicsView::sizeHint();
    }
  }

  virtual void setupViewport(QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsView_setupViewport_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_setupViewport_QWidget_X(widget);
    } else {
      return QGraphicsView::setupViewport(widget);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_event_QEvent_X(event);
    } else {
      return QGraphicsView::event(event);
    }
  }

  virtual bool viewportEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_viewportEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_viewportEvent_QEvent_X(event);
    } else {
      return QGraphicsView::viewportEvent(event);
    }
  }

  virtual void contextMenuEvent(QContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(event);
    } else {
      return QGraphicsView::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QDragEnterEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(event);
    } else {
      return QGraphicsView::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QDragLeaveEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(event);
    } else {
      return QGraphicsView::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QDragMoveEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(event);
    } else {
      return QGraphicsView::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_dropEvent_QDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_dropEvent_QDropEvent_X(event);
    } else {
      return QGraphicsView::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsView::focusInEvent(event);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QGraphicsView_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_focusNextPrevChild_bool(next);
    } else {
      return QGraphicsView::focusNextPrevChild(next);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsView::focusOutEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsView::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsView::keyReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(event);
    } else {
      return QGraphicsView::mouseDoubleClickEvent(event);
    }
  }

  virtual void mousePressEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_mousePressEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_mousePressEvent_QMouseEvent_X(event);
    } else {
      return QGraphicsView::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(event);
    } else {
      return QGraphicsView::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(event);
    } else {
      return QGraphicsView::mouseReleaseEvent(event);
    }
  }

  virtual void wheelEvent(QWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_wheelEvent_QWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_wheelEvent_QWheelEvent_X(event);
    } else {
      return QGraphicsView::wheelEvent(event);
    }
  }

  virtual void paintEvent(QPaintEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_paintEvent_QPaintEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_paintEvent_QPaintEvent_X(event);
    } else {
      return QGraphicsView::paintEvent(event);
    }
  }

  virtual void resizeEvent(QResizeEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_resizeEvent_QResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_resizeEvent_QResizeEvent_X(event);
    } else {
      return QGraphicsView::resizeEvent(event);
    }
  }

  virtual void scrollContentsBy(int dx, int dy) override {
    if (this->bg_table.jump_bg_QGraphicsView_scrollContentsBy_int_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_scrollContentsBy_int_int(dx, dy);
    } else {
      return QGraphicsView::scrollContentsBy(dx, dy);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_showEvent_QShowEvent_X(event);
    } else {
      return QGraphicsView::showEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsView::inputMethodEvent(event);
    }
  }

  virtual void drawBackground(QPainter* painter, const QRectF& rect) override {
    if (this->bg_table.jump_bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(painter, new (UseGC) QRectF (rect));
    } else {
      return QGraphicsView::drawBackground(painter, rect);
    }
  }

  virtual void drawForeground(QPainter* painter, const QRectF& rect) override {
    if (this->bg_table.jump_bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(painter, new (UseGC) QRectF (rect));
    } else {
      return QGraphicsView::drawForeground(painter, rect);
    }
  }

  virtual void drawItems(QPainter* painter, int numItems, QGraphicsItem** items, const QStyleOptionGraphicsItem* options) override {
    if (this->bg_table.jump_bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(painter, numItems, items, options);
    } else {
      return QGraphicsView::drawItems(painter, numItems, items, options);
    }
  }

  virtual QSize minimumSizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_minimumSizeHint_();
    } else {
      return QAbstractScrollArea::minimumSizeHint();
    }
  }

  virtual bool eventFilter(QObject* unnamed_arg_0, QEvent* unnamed_arg_1) override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(unnamed_arg_0, unnamed_arg_1);
    } else {
      return QAbstractScrollArea::eventFilter(unnamed_arg_0, unnamed_arg_1);
    }
  }

  virtual QSize viewportSizeHint() const override {
    if (this->bg_table.jump_bg_QAbstractScrollArea_viewportSizeHint_.isValid()) {
      return this->bg_table.jump_bg_QAbstractScrollArea_viewportSizeHint_();
    } else {
      return QAbstractScrollArea::viewportSizeHint();
    }
  }

  virtual void changeEvent(QEvent* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QFrame_changeEvent_QEvent_X(unnamed_arg_0);
    } else {
      return QFrame::changeEvent(unnamed_arg_0);
    }
  }

  virtual int devType() const override {
    if (this->bg_table.jump_bg_QWidget_devType_.isValid()) {
      return this->bg_table.jump_bg_QWidget_devType_();
    } else {
      return QWidget::devType();
    }
  }

  virtual void setVisible(bool visible) override {
    if (this->bg_table.jump_bg_QWidget_setVisible_bool.isValid()) {
      return this->bg_table.jump_bg_QWidget_setVisible_bool(visible);
    } else {
      return QWidget::setVisible(visible);
    }
  }

  virtual int heightForWidth(int unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_heightForWidth_int.isValid()) {
      return this->bg_table.jump_bg_QWidget_heightForWidth_int(unnamed_arg_0);
    } else {
      return QWidget::heightForWidth(unnamed_arg_0);
    }
  }

  virtual bool hasHeightForWidth() const override {
    if (this->bg_table.jump_bg_QWidget_hasHeightForWidth_.isValid()) {
      return this->bg_table.jump_bg_QWidget_hasHeightForWidth_();
    } else {
      return QWidget::hasHeightForWidth();
    }
  }

  virtual QPaintEngine* paintEngine() const override {
    if (this->bg_table.jump_bg_QWidget_paintEngine_.isValid()) {
      return this->bg_table.jump_bg_QWidget_paintEngine_();
    } else {
      return QWidget::paintEngine();
    }
  }

  virtual void enterEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_enterEvent_QEvent_X(event);
    } else {
      return QWidget::enterEvent(event);
    }
  }

  virtual void leaveEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_leaveEvent_QEvent_X(event);
    } else {
      return QWidget::leaveEvent(event);
    }
  }

  virtual void moveEvent(QMoveEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_moveEvent_QMoveEvent_X(event);
    } else {
      return QWidget::moveEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QWidget::closeEvent(event);
    }
  }

  virtual void tabletEvent(QTabletEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_tabletEvent_QTabletEvent_X(event);
    } else {
      return QWidget::tabletEvent(event);
    }
  }

  virtual void actionEvent(QActionEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_actionEvent_QActionEvent_X(event);
    } else {
      return QWidget::actionEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QWidget::hideEvent(event);
    }
  }

  virtual bool nativeEvent(const QByteArray& eventType, void* message, long* result) override {
    if (this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(new (UseGC) QByteArray (eventType), message, result);
    } else {
      return QWidget::nativeEvent(eventType, message, result);
    }
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric unnamed_arg_0) const override {
    if (this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric.isValid()) {
      return this->bg_table.jump_bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(unnamed_arg_0);
    } else {
      return QWidget::metric(unnamed_arg_0);
    }
  }

  virtual void initPainter(QPainter* painter) const override {
    if (this->bg_table.jump_bg_QWidget_initPainter_QPainter_X.isValid()) {
      return this->bg_table.jump_bg_QWidget_initPainter_QPainter_X(painter);
    } else {
      return QWidget::initPainter(painter);
    }
  }

  virtual QPainter* sharedPainter() const override {
    if (this->bg_table.jump_bg_QWidget_sharedPainter_.isValid()) {
      return this->bg_table.jump_bg_QWidget_sharedPainter_();
    } else {
      return QWidget::sharedPainter();
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QGraphicsView_JUMPTABLE(BgInherit_QGraphicsView *self, const BgTable_QGraphicsView &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsObject_DESTROY(QGraphicsObject* _self_) { delete _self_; }

extern "C" QGraphicsItem* bg_QGraphicsObject_AS_QGraphicsItem(QGraphicsObject* self) {
  return static_cast< QGraphicsItem* >(self);
}
struct BgTable_QGraphicsObject {
CrystalProc<const QMetaObject*> jump_bg_QGraphicsObject_metaObject_;
CrystalProc<void*, const char*> jump_bg_QGraphicsObject_qt_metacast_const_char_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<QRectF&> jump_bg_QGraphicsItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsItem_contains_const_QPointF_R;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsItem_opaqueArea_;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<int> jump_bg_QGraphicsItem_type_;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension;
};
struct BgInherit_QGraphicsObject : public QGraphicsObject {
  using QGraphicsObject::QGraphicsObject;
  BgTable_QGraphicsObject bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QGraphicsObject_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsObject_metaObject_();
    } else {
      return QGraphicsObject::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGraphicsObject_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsObject_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsObject::qt_metacast(unnamed_arg_0);
    }
  }

  virtual bool event(QEvent* ev) override {
    if (this->bg_table.jump_bg_QGraphicsObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsObject_event_QEvent_X(ev);
    } else {
      return QGraphicsObject::event(ev);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual QRectF boundingRect() const override {
    return this->bg_table.jump_bg_QGraphicsItem_boundingRect_();
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_shape_();
    } else {
      return QGraphicsItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsItem::contains(point);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_opaqueArea_();
    } else {
      return QGraphicsItem::opaqueArea();
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    return this->bg_table.jump_bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_type_();
    } else {
      return QGraphicsItem::type();
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsItem::supportsExtension(extension);
    }
  }

};
extern "C" void bg_QGraphicsObject_JUMPTABLE(BgInherit_QGraphicsObject *self, const BgTable_QGraphicsObject &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsWidget_DESTROY(QGraphicsWidget* _self_) { delete _self_; }

struct BgTable_QGraphicsWidget {
CrystalProc<const QMetaObject*> jump_bg_QGraphicsWidget_metaObject_;
CrystalProc<void*, const char*> jump_bg_QGraphicsWidget_qt_metacast_const_char_X;
CrystalProc<void, const QRectF*> jump_bg_QGraphicsWidget_setGeometry_const_QRectF_R;
CrystalProc<void, qreal*, qreal*, qreal*, qreal*> jump_bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X;
CrystalProc<int> jump_bg_QGraphicsWidget_type_;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<QRectF&> jump_bg_QGraphicsWidget_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsWidget_shape_;
CrystalProc<void, QStyleOption*> jump_bg_QGraphicsWidget_initStyleOption_QStyleOption_X;
CrystalProc<QSizeF&, Qt::SizeHint, const QSizeF*> jump_bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R;
CrystalProc<void> jump_bg_QGraphicsWidget_updateGeometry_;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsWidget_sceneEvent_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsWidget_windowFrameEvent_QEvent_X;
CrystalProc<Qt::WindowFrameSection, const QPointF*> jump_bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsWidget_event_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QGraphicsWidget_changeEvent_QEvent_X;
CrystalProc<void, QCloseEvent*> jump_bg_QGraphicsWidget_closeEvent_QCloseEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsWidget_focusInEvent_QFocusEvent_X;
CrystalProc<bool, bool> jump_bg_QGraphicsWidget_focusNextPrevChild_bool;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QHideEvent*> jump_bg_QGraphicsWidget_hideEvent_QHideEvent_X;
CrystalProc<void, QGraphicsSceneMoveEvent*> jump_bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X;
CrystalProc<void> jump_bg_QGraphicsWidget_polishEvent_;
CrystalProc<void, QGraphicsSceneResizeEvent*> jump_bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X;
CrystalProc<void, QShowEvent*> jump_bg_QGraphicsWidget_showEvent_QShowEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QEvent*> jump_bg_QGraphicsWidget_grabMouseEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X;
CrystalProc<void, QEvent*> jump_bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsItem_contains_const_QPointF_R;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsItem_opaqueArea_;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension;
};
struct BgInherit_QGraphicsWidget : public QGraphicsWidget {
  using QGraphicsWidget::QGraphicsWidget;
  BgTable_QGraphicsWidget bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_metaObject_();
    } else {
      return QGraphicsWidget::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsWidget::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void setGeometry(const QRectF& rect) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_setGeometry_const_QRectF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_setGeometry_const_QRectF_R(new (UseGC) QRectF (rect));
    } else {
      return QGraphicsWidget::setGeometry(rect);
    }
  }

  virtual void getContentsMargins(qreal* left, qreal* top, qreal* right, qreal* bottom) const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(left, top, right, bottom);
    } else {
      return QGraphicsWidget::getContentsMargins(left, top, right, bottom);
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_type_();
    } else {
      return QGraphicsWidget::type();
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsWidget::paint(painter, option, widget);
    }
  }

  virtual void paintWindowFrame(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsWidget::paintWindowFrame(painter, option, widget);
    }
  }

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_boundingRect_();
    } else {
      return QGraphicsWidget::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_shape_();
    } else {
      return QGraphicsWidget::shape();
    }
  }

  virtual void initStyleOption(QStyleOption* option) const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_initStyleOption_QStyleOption_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_initStyleOption_QStyleOption_X(option);
    } else {
      return QGraphicsWidget::initStyleOption(option);
    }
  }

  virtual QSizeF sizeHint(Qt::SizeHint which, const QSizeF& constraint) const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(which, new (UseGC) QSizeF (constraint));
    } else {
      return QGraphicsWidget::sizeHint(which, constraint);
    }
  }

  virtual void updateGeometry() override {
    if (this->bg_table.jump_bg_QGraphicsWidget_updateGeometry_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_updateGeometry_();
    } else {
      return QGraphicsWidget::updateGeometry();
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsWidget::sceneEvent(event);
    }
  }

  virtual bool windowFrameEvent(QEvent* e) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_windowFrameEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_windowFrameEvent_QEvent_X(e);
    } else {
      return QGraphicsWidget::windowFrameEvent(e);
    }
  }

  virtual Qt::WindowFrameSection windowFrameSectionAt(const QPointF& pos) const override {
    if (this->bg_table.jump_bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(new (UseGC) QPointF (pos));
    } else {
      return QGraphicsWidget::windowFrameSectionAt(pos);
    }
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_event_QEvent_X(event);
    } else {
      return QGraphicsWidget::event(event);
    }
  }

  virtual void changeEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_changeEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_changeEvent_QEvent_X(event);
    } else {
      return QGraphicsWidget::changeEvent(event);
    }
  }

  virtual void closeEvent(QCloseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_closeEvent_QCloseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_closeEvent_QCloseEvent_X(event);
    } else {
      return QGraphicsWidget::closeEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsWidget::focusInEvent(event);
    }
  }

  virtual bool focusNextPrevChild(bool next) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_focusNextPrevChild_bool.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_focusNextPrevChild_bool(next);
    } else {
      return QGraphicsWidget::focusNextPrevChild(next);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsWidget::focusOutEvent(event);
    }
  }

  virtual void hideEvent(QHideEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_hideEvent_QHideEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_hideEvent_QHideEvent_X(event);
    } else {
      return QGraphicsWidget::hideEvent(event);
    }
  }

  virtual void moveEvent(QGraphicsSceneMoveEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(event);
    } else {
      return QGraphicsWidget::moveEvent(event);
    }
  }

  virtual void polishEvent() override {
    if (this->bg_table.jump_bg_QGraphicsWidget_polishEvent_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_polishEvent_();
    } else {
      return QGraphicsWidget::polishEvent();
    }
  }

  virtual void resizeEvent(QGraphicsSceneResizeEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(event);
    } else {
      return QGraphicsWidget::resizeEvent(event);
    }
  }

  virtual void showEvent(QShowEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_showEvent_QShowEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_showEvent_QShowEvent_X(event);
    } else {
      return QGraphicsWidget::showEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsWidget::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsWidget::hoverLeaveEvent(event);
    }
  }

  virtual void grabMouseEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_grabMouseEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_grabMouseEvent_QEvent_X(event);
    } else {
      return QGraphicsWidget::grabMouseEvent(event);
    }
  }

  virtual void ungrabMouseEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(event);
    } else {
      return QGraphicsWidget::ungrabMouseEvent(event);
    }
  }

  virtual void grabKeyboardEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(event);
    } else {
      return QGraphicsWidget::grabKeyboardEvent(event);
    }
  }

  virtual void ungrabKeyboardEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(event);
    } else {
      return QGraphicsWidget::ungrabKeyboardEvent(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsItem::contains(point);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_opaqueArea_();
    } else {
      return QGraphicsItem::opaqueArea();
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsItem::supportsExtension(extension);
    }
  }

};
extern "C" void bg_QGraphicsWidget_JUMPTABLE(BgInherit_QGraphicsWidget *self, const BgTable_QGraphicsWidget &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsTextItem_DESTROY(QGraphicsTextItem* _self_) { delete _self_; }

struct BgTable_QGraphicsTextItem {
CrystalProc<const QMetaObject*> jump_bg_QGraphicsTextItem_metaObject_;
CrystalProc<void*, const char*> jump_bg_QGraphicsTextItem_qt_metacast_const_char_X;
CrystalProc<QRectF&> jump_bg_QGraphicsTextItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsTextItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsTextItem_contains_const_QPointF_R;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsTextItem_opaqueArea_;
CrystalProc<int> jump_bg_QGraphicsTextItem_type_;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsTextItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
};
struct BgInherit_QGraphicsTextItem : public QGraphicsTextItem {
  using QGraphicsTextItem::QGraphicsTextItem;
  BgTable_QGraphicsTextItem bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_metaObject_();
    } else {
      return QGraphicsTextItem::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsTextItem::qt_metacast(unnamed_arg_0);
    }
  }

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_boundingRect_();
    } else {
      return QGraphicsTextItem::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_shape_();
    } else {
      return QGraphicsTextItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsTextItem::contains(point);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsTextItem::paint(painter, option, widget);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsTextItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_opaqueArea_();
    } else {
      return QGraphicsTextItem::opaqueArea();
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_type_();
    } else {
      return QGraphicsTextItem::type();
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsTextItem::sceneEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsTextItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsTextItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsTextItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsTextItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsTextItem::contextMenuEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsTextItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsTextItem::keyReleaseEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsTextItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsTextItem::focusOutEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsTextItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsTextItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsTextItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsTextItem::dropEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsTextItem::inputMethodEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsTextItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsTextItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsTextItem::hoverLeaveEvent(event);
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsTextItem::supportsExtension(extension);
    }
  }

  virtual bool event(QEvent* ev) override {
    if (this->bg_table.jump_bg_QGraphicsObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsObject_event_QEvent_X(ev);
    } else {
      return QGraphicsObject::event(ev);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

};
extern "C" void bg_QGraphicsTextItem_JUMPTABLE(BgInherit_QGraphicsTextItem *self, const BgTable_QGraphicsTextItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsTransform_DESTROY(QGraphicsTransform* _self_) { delete _self_; }

struct BgTable_QGraphicsTransform {
CrystalProc<const QMetaObject*> jump_bg_QGraphicsTransform_metaObject_;
CrystalProc<void*, const char*> jump_bg_QGraphicsTransform_qt_metacast_const_char_X;
CrystalProc<void, QMatrix4x4*> jump_bg_QGraphicsTransform_applyTo_QMatrix4x4_X;
CrystalProc<bool, QEvent*> jump_bg_QObject_event_QEvent_X;
CrystalProc<bool, QObject*, QEvent*> jump_bg_QObject_eventFilter_QObject_X_QEvent_X;
CrystalProc<void, QTimerEvent*> jump_bg_QObject_timerEvent_QTimerEvent_X;
CrystalProc<void, QChildEvent*> jump_bg_QObject_childEvent_QChildEvent_X;
CrystalProc<void, QEvent*> jump_bg_QObject_customEvent_QEvent_X;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_connectNotify_const_QMetaMethod_R;
CrystalProc<void, const QMetaMethod*> jump_bg_QObject_disconnectNotify_const_QMetaMethod_R;
};
struct BgInherit_QGraphicsTransform : public QGraphicsTransform {
  using QGraphicsTransform::QGraphicsTransform;
  BgTable_QGraphicsTransform bg_table;

  virtual const QMetaObject* metaObject() const override {
    if (this->bg_table.jump_bg_QGraphicsTransform_metaObject_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTransform_metaObject_();
    } else {
      return QGraphicsTransform::metaObject();
    }
  }

  virtual void* qt_metacast(const char* unnamed_arg_0) override {
    if (this->bg_table.jump_bg_QGraphicsTransform_qt_metacast_const_char_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsTransform_qt_metacast_const_char_X(unnamed_arg_0);
    } else {
      return QGraphicsTransform::qt_metacast(unnamed_arg_0);
    }
  }

  virtual void applyTo(QMatrix4x4* matrix) const override {
    return this->bg_table.jump_bg_QGraphicsTransform_applyTo_QMatrix4x4_X(matrix);
  }

  virtual bool event(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_event_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_event_QEvent_X(event);
    } else {
      return QObject::event(event);
    }
  }

  virtual bool eventFilter(QObject* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_eventFilter_QObject_X_QEvent_X(watched, event);
    } else {
      return QObject::eventFilter(watched, event);
    }
  }

  virtual void timerEvent(QTimerEvent* event) override {
    if (this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_timerEvent_QTimerEvent_X(event);
    } else {
      return QObject::timerEvent(event);
    }
  }

  virtual void childEvent(QChildEvent* event) override {
    if (this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_childEvent_QChildEvent_X(event);
    } else {
      return QObject::childEvent(event);
    }
  }

  virtual void customEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QObject_customEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QObject_customEvent_QEvent_X(event);
    } else {
      return QObject::customEvent(event);
    }
  }

  virtual void connectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_connectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::connectNotify(signal);
    }
  }

  virtual void disconnectNotify(const QMetaMethod& signal) override {
    if (this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R.isValid()) {
      return this->bg_table.jump_bg_QObject_disconnectNotify_const_QMetaMethod_R(new (UseGC) QMetaMethod (signal));
    } else {
      return QObject::disconnectNotify(signal);
    }
  }

};
extern "C" void bg_QGraphicsTransform_JUMPTABLE(BgInherit_QGraphicsTransform *self, const BgTable_QGraphicsTransform &table) {
  self->bg_table = table;
}

extern "C" void bg_QAbstractGraphicsShapeItem_DESTROY(QAbstractGraphicsShapeItem* _self_) { delete _self_; }

struct BgTable_QAbstractGraphicsShapeItem {
CrystalProc<bool, const QGraphicsItem*> jump_bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QAbstractGraphicsShapeItem_opaqueArea_;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<QRectF&> jump_bg_QGraphicsItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsItem_contains_const_QPointF_R;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<int> jump_bg_QGraphicsItem_type_;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension;
};
struct BgInherit_QAbstractGraphicsShapeItem : public QAbstractGraphicsShapeItem {
  using QAbstractGraphicsShapeItem::QAbstractGraphicsShapeItem;
  BgTable_QAbstractGraphicsShapeItem bg_table;

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QAbstractGraphicsShapeItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QAbstractGraphicsShapeItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QAbstractGraphicsShapeItem_opaqueArea_();
    } else {
      return QAbstractGraphicsShapeItem::opaqueArea();
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual QRectF boundingRect() const override {
    return this->bg_table.jump_bg_QGraphicsItem_boundingRect_();
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_shape_();
    } else {
      return QGraphicsItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsItem::contains(point);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    return this->bg_table.jump_bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_type_();
    } else {
      return QGraphicsItem::type();
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsItem::supportsExtension(extension);
    }
  }

};
extern "C" void bg_QAbstractGraphicsShapeItem_JUMPTABLE(BgInherit_QAbstractGraphicsShapeItem *self, const BgTable_QAbstractGraphicsShapeItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsEllipseItem_DESTROY(QGraphicsEllipseItem* _self_) { delete _self_; }

struct BgTable_QGraphicsEllipseItem {
CrystalProc<QRectF&> jump_bg_QGraphicsEllipseItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsEllipseItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsEllipseItem_contains_const_QPointF_R;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsEllipseItem_opaqueArea_;
CrystalProc<int> jump_bg_QGraphicsEllipseItem_type_;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
};
struct BgInherit_QGraphicsEllipseItem : public QGraphicsEllipseItem {
  using QGraphicsEllipseItem::QGraphicsEllipseItem;
  BgTable_QGraphicsEllipseItem bg_table;

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_boundingRect_();
    } else {
      return QGraphicsEllipseItem::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_shape_();
    } else {
      return QGraphicsEllipseItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsEllipseItem::contains(point);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsEllipseItem::paint(painter, option, widget);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsEllipseItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_opaqueArea_();
    } else {
      return QGraphicsEllipseItem::opaqueArea();
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_type_();
    } else {
      return QGraphicsEllipseItem::type();
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsEllipseItem::supportsExtension(extension);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

};
extern "C" void bg_QGraphicsEllipseItem_JUMPTABLE(BgInherit_QGraphicsEllipseItem *self, const BgTable_QGraphicsEllipseItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsPathItem_DESTROY(QGraphicsPathItem* _self_) { delete _self_; }

struct BgTable_QGraphicsPathItem {
CrystalProc<QRectF&> jump_bg_QGraphicsPathItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsPathItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsPathItem_contains_const_QPointF_R;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsPathItem_opaqueArea_;
CrystalProc<int> jump_bg_QGraphicsPathItem_type_;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
};
struct BgInherit_QGraphicsPathItem : public QGraphicsPathItem {
  using QGraphicsPathItem::QGraphicsPathItem;
  BgTable_QGraphicsPathItem bg_table;

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_boundingRect_();
    } else {
      return QGraphicsPathItem::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_shape_();
    } else {
      return QGraphicsPathItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsPathItem::contains(point);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsPathItem::paint(painter, option, widget);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsPathItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_opaqueArea_();
    } else {
      return QGraphicsPathItem::opaqueArea();
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_type_();
    } else {
      return QGraphicsPathItem::type();
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsPathItem::supportsExtension(extension);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

};
extern "C" void bg_QGraphicsPathItem_JUMPTABLE(BgInherit_QGraphicsPathItem *self, const BgTable_QGraphicsPathItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsPolygonItem_DESTROY(QGraphicsPolygonItem* _self_) { delete _self_; }

struct BgTable_QGraphicsPolygonItem {
CrystalProc<QRectF&> jump_bg_QGraphicsPolygonItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsPolygonItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsPolygonItem_contains_const_QPointF_R;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsPolygonItem_opaqueArea_;
CrystalProc<int> jump_bg_QGraphicsPolygonItem_type_;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
};
struct BgInherit_QGraphicsPolygonItem : public QGraphicsPolygonItem {
  using QGraphicsPolygonItem::QGraphicsPolygonItem;
  BgTable_QGraphicsPolygonItem bg_table;

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_boundingRect_();
    } else {
      return QGraphicsPolygonItem::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_shape_();
    } else {
      return QGraphicsPolygonItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsPolygonItem::contains(point);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsPolygonItem::paint(painter, option, widget);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsPolygonItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_opaqueArea_();
    } else {
      return QGraphicsPolygonItem::opaqueArea();
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_type_();
    } else {
      return QGraphicsPolygonItem::type();
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsPolygonItem::supportsExtension(extension);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

};
extern "C" void bg_QGraphicsPolygonItem_JUMPTABLE(BgInherit_QGraphicsPolygonItem *self, const BgTable_QGraphicsPolygonItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsRectItem_DESTROY(QGraphicsRectItem* _self_) { delete _self_; }

struct BgTable_QGraphicsRectItem {
CrystalProc<QRectF&> jump_bg_QGraphicsRectItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsRectItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsRectItem_contains_const_QPointF_R;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsRectItem_opaqueArea_;
CrystalProc<int> jump_bg_QGraphicsRectItem_type_;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
};
struct BgInherit_QGraphicsRectItem : public QGraphicsRectItem {
  using QGraphicsRectItem::QGraphicsRectItem;
  BgTable_QGraphicsRectItem bg_table;

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_boundingRect_();
    } else {
      return QGraphicsRectItem::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_shape_();
    } else {
      return QGraphicsRectItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsRectItem::contains(point);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsRectItem::paint(painter, option, widget);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsRectItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_opaqueArea_();
    } else {
      return QGraphicsRectItem::opaqueArea();
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_type_();
    } else {
      return QGraphicsRectItem::type();
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsRectItem::supportsExtension(extension);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

};
extern "C" void bg_QGraphicsRectItem_JUMPTABLE(BgInherit_QGraphicsRectItem *self, const BgTable_QGraphicsRectItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsSimpleTextItem_DESTROY(QGraphicsSimpleTextItem* _self_) { delete _self_; }

struct BgTable_QGraphicsSimpleTextItem {
CrystalProc<QRectF&> jump_bg_QGraphicsSimpleTextItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsSimpleTextItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsSimpleTextItem_contains_const_QPointF_R;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsSimpleTextItem_opaqueArea_;
CrystalProc<int> jump_bg_QGraphicsSimpleTextItem_type_;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
};
struct BgInherit_QGraphicsSimpleTextItem : public QGraphicsSimpleTextItem {
  using QGraphicsSimpleTextItem::QGraphicsSimpleTextItem;
  BgTable_QGraphicsSimpleTextItem bg_table;

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_boundingRect_();
    } else {
      return QGraphicsSimpleTextItem::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_shape_();
    } else {
      return QGraphicsSimpleTextItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsSimpleTextItem::contains(point);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsSimpleTextItem::paint(painter, option, widget);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsSimpleTextItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_opaqueArea_();
    } else {
      return QGraphicsSimpleTextItem::opaqueArea();
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_type_();
    } else {
      return QGraphicsSimpleTextItem::type();
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsSimpleTextItem::supportsExtension(extension);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

};
extern "C" void bg_QGraphicsSimpleTextItem_JUMPTABLE(BgInherit_QGraphicsSimpleTextItem *self, const BgTable_QGraphicsSimpleTextItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QGraphicsPixmapItem_DESTROY(QGraphicsPixmapItem* _self_) { delete _self_; }

struct BgTable_QGraphicsPixmapItem {
CrystalProc<QRectF&> jump_bg_QGraphicsPixmapItem_boundingRect_;
CrystalProc<QPainterPath&> jump_bg_QGraphicsPixmapItem_shape_;
CrystalProc<bool, const QPointF*> jump_bg_QGraphicsPixmapItem_contains_const_QPointF_R;
CrystalProc<void, QPainter*, const QStyleOptionGraphicsItem*, QWidget*> jump_bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X;
CrystalProc<bool, const QGraphicsItem*> jump_bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X;
CrystalProc<QPainterPath&> jump_bg_QGraphicsPixmapItem_opaqueArea_;
CrystalProc<int> jump_bg_QGraphicsPixmapItem_type_;
CrystalProc<bool, QGraphicsItem::Extension> jump_bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension;
CrystalProc<void, int> jump_bg_QGraphicsItem_advance_int;
CrystalProc<bool, const QGraphicsItem*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode;
CrystalProc<bool, const QPainterPath*, Qt::ItemSelectionMode> jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode;
CrystalProc<bool, QGraphicsItem*, QEvent*> jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X;
CrystalProc<bool, QEvent*> jump_bg_QGraphicsItem_sceneEvent_QEvent_X;
CrystalProc<void, QGraphicsSceneContextMenuEvent*> jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QGraphicsSceneDragDropEvent*> jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X;
CrystalProc<void, QFocusEvent*> jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QGraphicsSceneHoverEvent*> jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X;
CrystalProc<void, QKeyEvent*> jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneMouseEvent*> jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X;
CrystalProc<void, QGraphicsSceneWheelEvent*> jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X;
CrystalProc<void, QInputMethodEvent*> jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X;
};
struct BgInherit_QGraphicsPixmapItem : public QGraphicsPixmapItem {
  using QGraphicsPixmapItem::QGraphicsPixmapItem;
  BgTable_QGraphicsPixmapItem bg_table;

  virtual QRectF boundingRect() const override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_boundingRect_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_boundingRect_();
    } else {
      return QGraphicsPixmapItem::boundingRect();
    }
  }

  virtual QPainterPath shape() const override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_shape_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_shape_();
    } else {
      return QGraphicsPixmapItem::shape();
    }
  }

  virtual bool contains(const QPointF& point) const override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_contains_const_QPointF_R.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_contains_const_QPointF_R(new (UseGC) QPointF (point));
    } else {
      return QGraphicsPixmapItem::contains(point);
    }
  }

  virtual void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(painter, option, widget);
    } else {
      return QGraphicsPixmapItem::paint(painter, option, widget);
    }
  }

  virtual bool isObscuredBy(const QGraphicsItem* item) const override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(item);
    } else {
      return QGraphicsPixmapItem::isObscuredBy(item);
    }
  }

  virtual QPainterPath opaqueArea() const override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_opaqueArea_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_opaqueArea_();
    } else {
      return QGraphicsPixmapItem::opaqueArea();
    }
  }

  virtual int type() const override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_type_.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_type_();
    } else {
      return QGraphicsPixmapItem::type();
    }
  }

  virtual bool supportsExtension(QGraphicsItem::Extension extension) const override {
    if (this->bg_table.jump_bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension.isValid()) {
      return this->bg_table.jump_bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(extension);
    } else {
      return QGraphicsPixmapItem::supportsExtension(extension);
    }
  }

  virtual void advance(int phase) override {
    if (this->bg_table.jump_bg_QGraphicsItem_advance_int.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_advance_int(phase);
    } else {
      return QGraphicsItem::advance(phase);
    }
  }

  virtual bool collidesWithItem(const QGraphicsItem* other, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(other, mode);
    } else {
      return QGraphicsItem::collidesWithItem(other, mode);
    }
  }

  virtual bool collidesWithPath(const QPainterPath& path, Qt::ItemSelectionMode mode) const override {
    if (this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(new (UseGC) QPainterPath (path), mode);
    } else {
      return QGraphicsItem::collidesWithPath(path, mode);
    }
  }

  virtual bool sceneEventFilter(QGraphicsItem* watched, QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(watched, event);
    } else {
      return QGraphicsItem::sceneEventFilter(watched, event);
    }
  }

  virtual bool sceneEvent(QEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_sceneEvent_QEvent_X(event);
    } else {
      return QGraphicsItem::sceneEvent(event);
    }
  }

  virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(event);
    } else {
      return QGraphicsItem::contextMenuEvent(event);
    }
  }

  virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragEnterEvent(event);
    }
  }

  virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragLeaveEvent(event);
    }
  }

  virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dragMoveEvent(event);
    }
  }

  virtual void dropEvent(QGraphicsSceneDragDropEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(event);
    } else {
      return QGraphicsItem::dropEvent(event);
    }
  }

  virtual void focusInEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusInEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusInEvent(event);
    }
  }

  virtual void focusOutEvent(QFocusEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(event);
    } else {
      return QGraphicsItem::focusOutEvent(event);
    }
  }

  virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverEnterEvent(event);
    }
  }

  virtual void hoverMoveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverMoveEvent(event);
    }
  }

  virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(event);
    } else {
      return QGraphicsItem::hoverLeaveEvent(event);
    }
  }

  virtual void keyPressEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyPressEvent(event);
    }
  }

  virtual void keyReleaseEvent(QKeyEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(event);
    } else {
      return QGraphicsItem::keyReleaseEvent(event);
    }
  }

  virtual void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mousePressEvent(event);
    }
  }

  virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseMoveEvent(event);
    }
  }

  virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseReleaseEvent(event);
    }
  }

  virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(event);
    } else {
      return QGraphicsItem::mouseDoubleClickEvent(event);
    }
  }

  virtual void wheelEvent(QGraphicsSceneWheelEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(event);
    } else {
      return QGraphicsItem::wheelEvent(event);
    }
  }

  virtual void inputMethodEvent(QInputMethodEvent* event) override {
    if (this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X.isValid()) {
      return this->bg_table.jump_bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(event);
    } else {
      return QGraphicsItem::inputMethodEvent(event);
    }
  }

};
extern "C" void bg_QGraphicsPixmapItem_JUMPTABLE(BgInherit_QGraphicsPixmapItem *self, const BgTable_QGraphicsPixmapItem &table) {
  self->bg_table = table;
}

extern "C" void bg_QBrush_DESTROY(QBrush* _self_) { delete _self_; }

extern "C" void bg_QColor_DESTROY(QColor* _self_) { delete _self_; }

typedef QList<QString> QList_QString;
extern "C" void bg_QList_QString_DESTROY(QList_QString* _self_) { delete _self_; }

typedef QList<QObject *> QList_QObject_X;
extern "C" void bg_QList_QObject_X_DESTROY(QList_QObject_X* _self_) { delete _self_; }

typedef QList<QWidget *> QList_QWidget_X;
extern "C" void bg_QList_QWidget_X_DESTROY(QList_QWidget_X* _self_) { delete _self_; }

typedef QList<QAction *> QList_QAction_X;
extern "C" void bg_QList_QAction_X_DESTROY(QList_QAction_X* _self_) { delete _self_; }

typedef QList<QUrl> QList_QUrl;
extern "C" void bg_QList_QUrl_DESTROY(QList_QUrl* _self_) { delete _self_; }

typedef QList<QGraphicsItem *> QList_QGraphicsItem_X;
extern "C" void bg_QList_QGraphicsItem_X_DESTROY(QList_QGraphicsItem_X* _self_) { delete _self_; }

typedef QList<QGraphicsWidget *> QList_QGraphicsWidget_X;
extern "C" void bg_QList_QGraphicsWidget_X_DESTROY(QList_QGraphicsWidget_X* _self_) { delete _self_; }

typedef QList<QGraphicsTransform *> QList_QGraphicsTransform_X;
extern "C" void bg_QList_QGraphicsTransform_X_DESTROY(QList_QGraphicsTransform_X* _self_) { delete _self_; }

typedef QList<QGraphicsView *> QList_QGraphicsView_X;
extern "C" void bg_QList_QGraphicsView_X_DESTROY(QList_QGraphicsView_X* _self_) { delete _self_; }

typedef QList<QAbstractEventDispatcher::TimerInfo> QList_QAbstractEventDispatcher__TimerInfo;
extern "C" void bg_QList_QAbstractEventDispatcher__TimerInfo_DESTROY(QList_QAbstractEventDispatcher__TimerInfo* _self_) { delete _self_; }

extern "C" const QMetaObject* bg_QObject_metaObject_(QObject *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QObject_qt_metacast_const_char_X(QObject *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QObject_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QObject::tr(s, c, n));
}

extern "C" CrystalString bg_QObject_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QObject::trUtf8(s, c, n));
}

extern "C" QObject* bg_QObject_CONSTRUCT_QObject_X(QObject* parent) {
  return new (UseGC) BgInherit_QObject(parent);
}

extern "C" bool bg_QObject_event_QEvent_X(QObject *_self_, QEvent* event) {
  return _self_->event(event);
}

extern "C" bool bg_QObject_eventFilter_QObject_X_QEvent_X(QObject *_self_, QObject* watched, QEvent* event) {
  return _self_->eventFilter(watched, event);
}

extern "C" CrystalString bg_QObject_objectName_(QObject *_self_) {
  return qstring_to_crystal(_self_->objectName());
}

extern "C" void bg_QObject_setObjectName_const_QString_R(QObject *_self_, const CrystalString name) {
  return _self_->setObjectName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" bool bg_QObject_isWidgetType_(QObject *_self_) {
  return _self_->isWidgetType();
}

extern "C" bool bg_QObject_isWindowType_(QObject *_self_) {
  return _self_->isWindowType();
}

extern "C" bool bg_QObject_signalsBlocked_(QObject *_self_) {
  return _self_->signalsBlocked();
}

extern "C" bool bg_QObject_blockSignals_bool(QObject *_self_, bool b) {
  return _self_->blockSignals(b);
}

extern "C" QThread* bg_QObject_thread_(QObject *_self_) {
  return _self_->thread();
}

extern "C" void bg_QObject_moveToThread_QThread_X(QObject *_self_, QThread* thread) {
  return _self_->moveToThread(thread);
}

extern "C" int bg_QObject_startTimer_int_Qt__TimerType(QObject *_self_, int interval, Qt::TimerType timerType) {
  return _self_->startTimer(interval, timerType);
}

extern "C" void bg_QObject_killTimer_int(QObject *_self_, int id) {
  return _self_->killTimer(id);
}

extern "C" void bg_QObject_setParent_QObject_X(QObject *_self_, QObject* parent) {
  return _self_->setParent(parent);
}

extern "C" void bg_QObject_installEventFilter_QObject_X(QObject *_self_, QObject* filterObj) {
  return _self_->installEventFilter(filterObj);
}

extern "C" void bg_QObject_removeEventFilter_QObject_X(QObject *_self_, QObject* obj) {
  return _self_->removeEventFilter(obj);
}

extern "C" QMetaObject::Connection* bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType unnamed_arg_4) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(sender, signal, receiver, member, unnamed_arg_4));
}

extern "C" QMetaObject::Connection* bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(sender, signal, receiver, method, type));
}

extern "C" QMetaObject::Connection* bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(QObject *_self_, const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type) {
  return new (UseGC) QMetaObject::Connection (_self_->connect(sender, signal, member, type));
}

extern "C" bool bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(const QObject* sender, const char* signal, const QObject* receiver, const char* member) {
  return QObject::disconnect(sender, signal, receiver, member);
}

extern "C" bool bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member) {
  return QObject::disconnect(sender, signal, receiver, member);
}

extern "C" bool bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(QObject *_self_, const char* signal, const QObject* receiver, const char* member) {
  return _self_->disconnect(signal, receiver, member);
}

extern "C" bool bg_QObject_disconnect_const_QObject_X_const_char_X(QObject *_self_, const QObject* receiver, const char* member) {
  return _self_->disconnect(receiver, member);
}

extern "C" bool bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(const QMetaObject::Connection& unnamed_arg_0) {
  return QObject::disconnect(unnamed_arg_0);
}

extern "C" void bg_QObject_dumpObjectTree_(QObject *_self_) {
  return _self_->dumpObjectTree();
}

extern "C" void bg_QObject_dumpObjectInfo_(QObject *_self_) {
  return _self_->dumpObjectInfo();
}

extern "C" uint bg_QObject_registerUserData_STATIC_() {
  return QObject::registerUserData();
}

extern "C" void bg_QObject_setUserData_uint_QObjectUserData_X(QObject *_self_, uint id, QObjectUserData* data) {
  return _self_->setUserData(id, data);
}

extern "C" QObjectUserData* bg_QObject_userData_uint(QObject *_self_, uint id) {
  return _self_->userData(id);
}

extern "C" QMetaObject::Connection* bg_QObject_destroyed_CONNECT_CrystalProc_void__QObjectX_(QObject *_self_, CrystalProc<void, QObject*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QObject::*)(QObject *))&QObject::destroyed, [_proc_](QObject* unnamed_arg_0){
  _proc_(unnamed_arg_0);
}));
}


extern "C" void bg_QObject_destroyed_QObject_X(QObject *_self_, QObject* unnamed_arg_0) {
  return _self_->destroyed(unnamed_arg_0);
}

extern "C" QObject* bg_QObject_parent_(QObject *_self_) {
  return _self_->parent();
}

extern "C" bool bg_QObject_inherits_const_char_X(QObject *_self_, const char* classname) {
  return _self_->inherits(classname);
}

extern "C" void bg_QObject_deleteLater_(QObject *_self_) {
  return _self_->deleteLater();
}

extern "C" QObject* bg_QObject_sender_(QObject *_self_) {
  return _self_->sender();
}

extern "C" int bg_QObject_senderSignalIndex_(QObject *_self_) {
  return _self_->senderSignalIndex();
}

extern "C" int bg_QObject_receivers_const_char_X(QObject *_self_, const char* signal) {
  return _self_->receivers(signal);
}

extern "C" bool bg_QObject_isSignalConnected_const_QMetaMethod_R(QObject *_self_, const QMetaMethod& signal) {
  return _self_->isSignalConnected(signal);
}

extern "C" void bg_QObject_timerEvent_QTimerEvent_X(QObject *_self_, QTimerEvent* event) {
  return _self_->timerEvent(event);
}

extern "C" void bg_QObject_childEvent_QChildEvent_X(QObject *_self_, QChildEvent* event) {
  return _self_->childEvent(event);
}

extern "C" void bg_QObject_customEvent_QEvent_X(QObject *_self_, QEvent* event) {
  return _self_->customEvent(event);
}

extern "C" void bg_QObject_connectNotify_const_QMetaMethod_R(QObject *_self_, const QMetaMethod& signal) {
  return _self_->connectNotify(signal);
}

extern "C" void bg_QObject_disconnectNotify_const_QMetaMethod_R(QObject *_self_, const QMetaMethod& signal) {
  return _self_->disconnectNotify(signal);
}

extern "C" QObject* bg_QObject_CONSTRUCT_QObjectPrivate_R_QObject_X(QObjectPrivate& dd, QObject* parent) {
  return new (UseGC) BgInherit_QObject(dd, parent);
}

extern "C" QMetaObject::Connection* bg_QMetaObject__Connection_CONSTRUCT_() {
  return new (UseGC) QMetaObject::Connection();
}

extern "C" const QMetaObject* bg_QAbstractEventDispatcher_metaObject_(QAbstractEventDispatcher *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QAbstractEventDispatcher_qt_metacast_const_char_X(QAbstractEventDispatcher *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAbstractEventDispatcher::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAbstractEventDispatcher::trUtf8(s, c, n));
}

extern "C" QAbstractEventDispatcher* bg_QAbstractEventDispatcher_CONSTRUCT_QObject_X(QObject* parent) {
  return new (UseGC) BgInherit_QAbstractEventDispatcher(parent);
}

extern "C" QAbstractEventDispatcher* bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(QThread* thread) {
  return QAbstractEventDispatcher::instance(thread);
}

extern "C" bool bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(QAbstractEventDispatcher *_self_, QEventLoop::ProcessEventsFlags flags) {
  return _self_->processEvents(flags);
}

extern "C" bool bg_QAbstractEventDispatcher_hasPendingEvents_(QAbstractEventDispatcher *_self_) {
  return _self_->hasPendingEvents();
}

extern "C" void bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(QAbstractEventDispatcher *_self_, QSocketNotifier* notifier) {
  return _self_->registerSocketNotifier(notifier);
}

extern "C" void bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(QAbstractEventDispatcher *_self_, QSocketNotifier* notifier) {
  return _self_->unregisterSocketNotifier(notifier);
}

extern "C" int bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(QAbstractEventDispatcher *_self_, int interval, Qt::TimerType timerType, QObject* object) {
  return _self_->registerTimer(interval, timerType, object);
}

extern "C" void bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(QAbstractEventDispatcher *_self_, int timerId, int interval, Qt::TimerType timerType, QObject* object) {
  return _self_->registerTimer(timerId, interval, timerType, object);
}

extern "C" bool bg_QAbstractEventDispatcher_unregisterTimer_int(QAbstractEventDispatcher *_self_, int timerId) {
  return _self_->unregisterTimer(timerId);
}

extern "C" bool bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(QAbstractEventDispatcher *_self_, QObject* object) {
  return _self_->unregisterTimers(object);
}

extern "C" QList<QAbstractEventDispatcher::TimerInfo>* bg_QAbstractEventDispatcher_registeredTimers_QObject_X(QAbstractEventDispatcher *_self_, QObject* object) {
  return new (UseGC) QList<QAbstractEventDispatcher::TimerInfo> (_self_->registeredTimers(object));
}

extern "C" int bg_QAbstractEventDispatcher_remainingTime_int(QAbstractEventDispatcher *_self_, int timerId) {
  return _self_->remainingTime(timerId);
}

extern "C" void bg_QAbstractEventDispatcher_wakeUp_(QAbstractEventDispatcher *_self_) {
  return _self_->wakeUp();
}

extern "C" void bg_QAbstractEventDispatcher_interrupt_(QAbstractEventDispatcher *_self_) {
  return _self_->interrupt();
}

extern "C" void bg_QAbstractEventDispatcher_flush_(QAbstractEventDispatcher *_self_) {
  return _self_->flush();
}

extern "C" void bg_QAbstractEventDispatcher_startingUp_(QAbstractEventDispatcher *_self_) {
  return _self_->startingUp();
}

extern "C" void bg_QAbstractEventDispatcher_closingDown_(QAbstractEventDispatcher *_self_) {
  return _self_->closingDown();
}

extern "C" void bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(QAbstractEventDispatcher *_self_, QAbstractNativeEventFilter* filterObj) {
  return _self_->installNativeEventFilter(filterObj);
}

extern "C" void bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(QAbstractEventDispatcher *_self_, QAbstractNativeEventFilter* filterObj) {
  return _self_->removeNativeEventFilter(filterObj);
}

extern "C" bool bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(QAbstractEventDispatcher *_self_, const QByteArray& eventType, void* message, long* result) {
  return _self_->filterNativeEvent(eventType, message, result);
}

extern "C" QMetaObject::Connection* bg_QAbstractEventDispatcher_aboutToBlock_CONNECT_CrystalProc_void_(QAbstractEventDispatcher *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractEventDispatcher::*)())&QAbstractEventDispatcher::aboutToBlock, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QAbstractEventDispatcher_aboutToBlock_(QAbstractEventDispatcher *_self_) {
  return _self_->aboutToBlock();
}

extern "C" QMetaObject::Connection* bg_QAbstractEventDispatcher_awake_CONNECT_CrystalProc_void_(QAbstractEventDispatcher *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractEventDispatcher::*)())&QAbstractEventDispatcher::awake, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QAbstractEventDispatcher_awake_(QAbstractEventDispatcher *_self_) {
  return _self_->awake();
}

extern "C" QAbstractEventDispatcher* bg_QAbstractEventDispatcher_CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(QAbstractEventDispatcherPrivate& unnamed_arg_0, QObject* parent) {
  return new (UseGC) BgInherit_QAbstractEventDispatcher(unnamed_arg_0, parent);
}

extern "C" const QMetaObject* bg_QWidget_metaObject_(QWidget *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QWidget_qt_metacast_const_char_X(QWidget *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QWidget::trUtf8(s, c, n));
}

extern "C" QWidget* bg_QWidget_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QWidget(parent);
}

extern "C" QWidget* bg_QWidget_CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QWidget(parent, f);
}

extern "C" int bg_QWidget_devType_(QWidget *_self_) {
  return _self_->devType();
}

extern "C" void bg_QWidget_createWinId_(QWidget *_self_) {
  return _self_->createWinId();
}

extern "C" QStyle* bg_QWidget_style_(QWidget *_self_) {
  return _self_->style();
}

extern "C" void bg_QWidget_setStyle_QStyle_X(QWidget *_self_, QStyle* unnamed_arg_0) {
  return _self_->setStyle(unnamed_arg_0);
}

extern "C" bool bg_QWidget_isTopLevel_(QWidget *_self_) {
  return _self_->isTopLevel();
}

extern "C" bool bg_QWidget_isWindow_(QWidget *_self_) {
  return _self_->isWindow();
}

extern "C" bool bg_QWidget_isModal_(QWidget *_self_) {
  return _self_->isModal();
}

extern "C" Qt::WindowModality bg_QWidget_windowModality_(QWidget *_self_) {
  return _self_->windowModality();
}

extern "C" void bg_QWidget_setWindowModality_Qt__WindowModality(QWidget *_self_, Qt::WindowModality windowModality) {
  return _self_->setWindowModality(windowModality);
}

extern "C" bool bg_QWidget_isEnabled_(QWidget *_self_) {
  return _self_->isEnabled();
}

extern "C" bool bg_QWidget_isEnabledTo_const_QWidget_X(QWidget *_self_, const QWidget* unnamed_arg_0) {
  return _self_->isEnabledTo(unnamed_arg_0);
}

extern "C" bool bg_QWidget_isEnabledToTLW_(QWidget *_self_) {
  return _self_->isEnabledToTLW();
}

extern "C" void bg_QWidget_setEnabled_bool(QWidget *_self_, bool unnamed_arg_0) {
  return _self_->setEnabled(unnamed_arg_0);
}

extern "C" void bg_QWidget_setDisabled_bool(QWidget *_self_, bool unnamed_arg_0) {
  return _self_->setDisabled(unnamed_arg_0);
}

extern "C" void bg_QWidget_setWindowModified_bool(QWidget *_self_, bool unnamed_arg_0) {
  return _self_->setWindowModified(unnamed_arg_0);
}

extern "C" QRect* bg_QWidget_frameGeometry_(QWidget *_self_) {
  return new (UseGC) QRect (_self_->frameGeometry());
}

extern "C" const QRect* bg_QWidget_geometry_(QWidget *_self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" QRect* bg_QWidget_normalGeometry_(QWidget *_self_) {
  return new (UseGC) QRect (_self_->normalGeometry());
}

extern "C" int bg_QWidget_x_(QWidget *_self_) {
  return _self_->x();
}

extern "C" int bg_QWidget_y_(QWidget *_self_) {
  return _self_->y();
}

extern "C" QPoint bg_QWidget_pos_(QWidget *_self_) {
  return _self_->pos();
}

extern "C" QSize* bg_QWidget_frameSize_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->frameSize());
}

extern "C" QSize* bg_QWidget_size_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" int bg_QWidget_width_(QWidget *_self_) {
  return _self_->width();
}

extern "C" int bg_QWidget_height_(QWidget *_self_) {
  return _self_->height();
}

extern "C" QRect* bg_QWidget_rect_(QWidget *_self_) {
  return new (UseGC) QRect (_self_->rect());
}

extern "C" QRect* bg_QWidget_childrenRect_(QWidget *_self_) {
  return new (UseGC) QRect (_self_->childrenRect());
}

extern "C" QRegion* bg_QWidget_childrenRegion_(QWidget *_self_) {
  return new (UseGC) QRegion (_self_->childrenRegion());
}

extern "C" QSize* bg_QWidget_minimumSize_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize* bg_QWidget_maximumSize_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" int bg_QWidget_minimumWidth_(QWidget *_self_) {
  return _self_->minimumWidth();
}

extern "C" int bg_QWidget_minimumHeight_(QWidget *_self_) {
  return _self_->minimumHeight();
}

extern "C" int bg_QWidget_maximumWidth_(QWidget *_self_) {
  return _self_->maximumWidth();
}

extern "C" int bg_QWidget_maximumHeight_(QWidget *_self_) {
  return _self_->maximumHeight();
}

extern "C" void bg_QWidget_setMinimumSize_const_QSize_R(QWidget *_self_, const QSize& unnamed_arg_0) {
  return _self_->setMinimumSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setMinimumSize_int_int(QWidget *_self_, int minw, int minh) {
  return _self_->setMinimumSize(minw, minh);
}

extern "C" void bg_QWidget_setMaximumSize_const_QSize_R(QWidget *_self_, const QSize& unnamed_arg_0) {
  return _self_->setMaximumSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setMaximumSize_int_int(QWidget *_self_, int maxw, int maxh) {
  return _self_->setMaximumSize(maxw, maxh);
}

extern "C" void bg_QWidget_setMinimumWidth_int(QWidget *_self_, int minw) {
  return _self_->setMinimumWidth(minw);
}

extern "C" void bg_QWidget_setMinimumHeight_int(QWidget *_self_, int minh) {
  return _self_->setMinimumHeight(minh);
}

extern "C" void bg_QWidget_setMaximumWidth_int(QWidget *_self_, int maxw) {
  return _self_->setMaximumWidth(maxw);
}

extern "C" void bg_QWidget_setMaximumHeight_int(QWidget *_self_, int maxh) {
  return _self_->setMaximumHeight(maxh);
}

extern "C" QSize* bg_QWidget_sizeIncrement_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->sizeIncrement());
}

extern "C" void bg_QWidget_setSizeIncrement_const_QSize_R(QWidget *_self_, const QSize& unnamed_arg_0) {
  return _self_->setSizeIncrement(unnamed_arg_0);
}

extern "C" void bg_QWidget_setSizeIncrement_int_int(QWidget *_self_, int w, int h) {
  return _self_->setSizeIncrement(w, h);
}

extern "C" QSize* bg_QWidget_baseSize_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->baseSize());
}

extern "C" void bg_QWidget_setBaseSize_const_QSize_R(QWidget *_self_, const QSize& unnamed_arg_0) {
  return _self_->setBaseSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setBaseSize_int_int(QWidget *_self_, int basew, int baseh) {
  return _self_->setBaseSize(basew, baseh);
}

extern "C" void bg_QWidget_setFixedSize_const_QSize_R(QWidget *_self_, const QSize& unnamed_arg_0) {
  return _self_->setFixedSize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setFixedSize_int_int(QWidget *_self_, int w, int h) {
  return _self_->setFixedSize(w, h);
}

extern "C" void bg_QWidget_setFixedWidth_int(QWidget *_self_, int w) {
  return _self_->setFixedWidth(w);
}

extern "C" void bg_QWidget_setFixedHeight_int(QWidget *_self_, int h) {
  return _self_->setFixedHeight(h);
}

extern "C" QPoint bg_QWidget_mapToGlobal_const_QPoint_R(QWidget *_self_, const QPoint unnamed_arg_0) {
  return _self_->mapToGlobal(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapFromGlobal_const_QPoint_R(QWidget *_self_, const QPoint unnamed_arg_0) {
  return _self_->mapFromGlobal(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapToParent_const_QPoint_R(QWidget *_self_, const QPoint unnamed_arg_0) {
  return _self_->mapToParent(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapFromParent_const_QPoint_R(QWidget *_self_, const QPoint unnamed_arg_0) {
  return _self_->mapFromParent(unnamed_arg_0);
}

extern "C" QPoint bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(QWidget *_self_, const QWidget* unnamed_arg_0, const QPoint unnamed_arg_1) {
  return _self_->mapTo(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QPoint bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(QWidget *_self_, const QWidget* unnamed_arg_0, const QPoint unnamed_arg_1) {
  return _self_->mapFrom(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QWidget* bg_QWidget_window_(QWidget *_self_) {
  return _self_->window();
}

extern "C" QWidget* bg_QWidget_nativeParentWidget_(QWidget *_self_) {
  return _self_->nativeParentWidget();
}

extern "C" QWidget* bg_QWidget_topLevelWidget_(QWidget *_self_) {
  return _self_->topLevelWidget();
}

extern "C" const QPalette* bg_QWidget_palette_(QWidget *_self_) {
  return new (UseGC) QPalette (_self_->palette());
}

extern "C" void bg_QWidget_setPalette_const_QPalette_R(QWidget *_self_, const QPalette& unnamed_arg_0) {
  return _self_->setPalette(unnamed_arg_0);
}

extern "C" void bg_QWidget_setBackgroundRole_QPalette__ColorRole(QWidget *_self_, QPalette::ColorRole unnamed_arg_0) {
  return _self_->setBackgroundRole(unnamed_arg_0);
}

extern "C" QPalette::ColorRole bg_QWidget_backgroundRole_(QWidget *_self_) {
  return _self_->backgroundRole();
}

extern "C" void bg_QWidget_setForegroundRole_QPalette__ColorRole(QWidget *_self_, QPalette::ColorRole unnamed_arg_0) {
  return _self_->setForegroundRole(unnamed_arg_0);
}

extern "C" QPalette::ColorRole bg_QWidget_foregroundRole_(QWidget *_self_) {
  return _self_->foregroundRole();
}

extern "C" const QFont* bg_QWidget_font_(QWidget *_self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QWidget_setFont_const_QFont_R(QWidget *_self_, const QFont& unnamed_arg_0) {
  return _self_->setFont(unnamed_arg_0);
}

extern "C" QFontMetrics* bg_QWidget_fontMetrics_(QWidget *_self_) {
  return new (UseGC) QFontMetrics (_self_->fontMetrics());
}

extern "C" QFontInfo* bg_QWidget_fontInfo_(QWidget *_self_) {
  return new (UseGC) QFontInfo (_self_->fontInfo());
}

extern "C" QCursor* bg_QWidget_cursor_(QWidget *_self_) {
  return new (UseGC) QCursor (_self_->cursor());
}

extern "C" void bg_QWidget_setCursor_const_QCursor_R(QWidget *_self_, const QCursor& unnamed_arg_0) {
  return _self_->setCursor(unnamed_arg_0);
}

extern "C" void bg_QWidget_unsetCursor_(QWidget *_self_) {
  return _self_->unsetCursor();
}

extern "C" void bg_QWidget_setMouseTracking_bool(QWidget *_self_, bool enable) {
  return _self_->setMouseTracking(enable);
}

extern "C" bool bg_QWidget_hasMouseTracking_(QWidget *_self_) {
  return _self_->hasMouseTracking();
}

extern "C" bool bg_QWidget_underMouse_(QWidget *_self_) {
  return _self_->underMouse();
}

extern "C" void bg_QWidget_setTabletTracking_bool(QWidget *_self_, bool enable) {
  return _self_->setTabletTracking(enable);
}

extern "C" bool bg_QWidget_hasTabletTracking_(QWidget *_self_) {
  return _self_->hasTabletTracking();
}

extern "C" void bg_QWidget_setMask_const_QBitmap_R(QWidget *_self_, const QBitmap& unnamed_arg_0) {
  return _self_->setMask(unnamed_arg_0);
}

extern "C" void bg_QWidget_setMask_const_QRegion_R(QWidget *_self_, const QRegion& unnamed_arg_0) {
  return _self_->setMask(unnamed_arg_0);
}

extern "C" QRegion* bg_QWidget_mask_(QWidget *_self_) {
  return new (UseGC) QRegion (_self_->mask());
}

extern "C" void bg_QWidget_clearMask_(QWidget *_self_) {
  return _self_->clearMask();
}

extern "C" void bg_QWidget_render_QPaintDevice_X(QWidget *_self_, QPaintDevice* target) {
  return _self_->render(target);
}

extern "C" void bg_QWidget_render_QPaintDevice_X_const_QPoint_R(QWidget *_self_, QPaintDevice* target, const QPoint targetOffset) {
  return _self_->render(target, targetOffset);
}

extern "C" void bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(QWidget *_self_, QPaintDevice* target, const QPoint targetOffset, const QRegion& sourceRegion) {
  return _self_->render(target, targetOffset, sourceRegion);
}

extern "C" void bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(QWidget *_self_, QPaintDevice* target, const QPoint targetOffset, const QRegion& sourceRegion, QWidget::RenderFlags renderFlags) {
  return _self_->render(target, targetOffset, sourceRegion, renderFlags);
}

extern "C" void bg_QWidget_render_QPainter_X(QWidget *_self_, QPainter* painter) {
  return _self_->render(painter);
}

extern "C" void bg_QWidget_render_QPainter_X_const_QPoint_R(QWidget *_self_, QPainter* painter, const QPoint targetOffset) {
  return _self_->render(painter, targetOffset);
}

extern "C" void bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(QWidget *_self_, QPainter* painter, const QPoint targetOffset, const QRegion& sourceRegion) {
  return _self_->render(painter, targetOffset, sourceRegion);
}

extern "C" void bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(QWidget *_self_, QPainter* painter, const QPoint targetOffset, const QRegion& sourceRegion, QWidget::RenderFlags renderFlags) {
  return _self_->render(painter, targetOffset, sourceRegion, renderFlags);
}

extern "C" QPixmap* bg_QWidget_grab_(QWidget *_self_) {
  return new (UseGC) QPixmap (_self_->grab());
}

extern "C" QPixmap* bg_QWidget_grab_const_QRect_R(QWidget *_self_, const QRect& rectangle) {
  return new (UseGC) QPixmap (_self_->grab(rectangle));
}

extern "C" QGraphicsEffect* bg_QWidget_graphicsEffect_(QWidget *_self_) {
  return _self_->graphicsEffect();
}

extern "C" void bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(QWidget *_self_, QGraphicsEffect* effect) {
  return _self_->setGraphicsEffect(effect);
}

extern "C" void bg_QWidget_grabGesture_Qt__GestureType(QWidget *_self_, Qt::GestureType type) {
  return _self_->grabGesture(type);
}

extern "C" void bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(QWidget *_self_, Qt::GestureType type, Qt::GestureFlags flags) {
  return _self_->grabGesture(type, flags);
}

extern "C" void bg_QWidget_ungrabGesture_Qt__GestureType(QWidget *_self_, Qt::GestureType type) {
  return _self_->ungrabGesture(type);
}

extern "C" void bg_QWidget_setWindowTitle_const_QString_R(QWidget *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setWindowTitle(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QWidget_setStyleSheet_const_QString_R(QWidget *_self_, const CrystalString styleSheet) {
  return _self_->setStyleSheet(QString::fromUtf8(styleSheet.ptr, styleSheet.size));
}

extern "C" CrystalString bg_QWidget_styleSheet_(QWidget *_self_) {
  return qstring_to_crystal(_self_->styleSheet());
}

extern "C" CrystalString bg_QWidget_windowTitle_(QWidget *_self_) {
  return qstring_to_crystal(_self_->windowTitle());
}

extern "C" void bg_QWidget_setWindowIcon_const_QIcon_R(QWidget *_self_, const QIcon& icon) {
  return _self_->setWindowIcon(icon);
}

extern "C" QIcon* bg_QWidget_windowIcon_(QWidget *_self_) {
  return new (UseGC) QIcon (_self_->windowIcon());
}

extern "C" void bg_QWidget_setWindowIconText_const_QString_R(QWidget *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setWindowIconText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_windowIconText_(QWidget *_self_) {
  return qstring_to_crystal(_self_->windowIconText());
}

extern "C" void bg_QWidget_setWindowRole_const_QString_R(QWidget *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setWindowRole(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_windowRole_(QWidget *_self_) {
  return qstring_to_crystal(_self_->windowRole());
}

extern "C" void bg_QWidget_setWindowFilePath_const_QString_R(QWidget *_self_, const CrystalString filePath) {
  return _self_->setWindowFilePath(QString::fromUtf8(filePath.ptr, filePath.size));
}

extern "C" CrystalString bg_QWidget_windowFilePath_(QWidget *_self_) {
  return qstring_to_crystal(_self_->windowFilePath());
}

extern "C" void bg_QWidget_setWindowOpacity_qreal(QWidget *_self_, qreal level) {
  return _self_->setWindowOpacity(level);
}

extern "C" qreal bg_QWidget_windowOpacity_(QWidget *_self_) {
  return _self_->windowOpacity();
}

extern "C" bool bg_QWidget_isWindowModified_(QWidget *_self_) {
  return _self_->isWindowModified();
}

extern "C" void bg_QWidget_setToolTip_const_QString_R(QWidget *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setToolTip(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_toolTip_(QWidget *_self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QWidget_setToolTipDuration_int(QWidget *_self_, int msec) {
  return _self_->setToolTipDuration(msec);
}

extern "C" int bg_QWidget_toolTipDuration_(QWidget *_self_) {
  return _self_->toolTipDuration();
}

extern "C" void bg_QWidget_setStatusTip_const_QString_R(QWidget *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setStatusTip(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_statusTip_(QWidget *_self_) {
  return qstring_to_crystal(_self_->statusTip());
}

extern "C" void bg_QWidget_setWhatsThis_const_QString_R(QWidget *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setWhatsThis(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" CrystalString bg_QWidget_whatsThis_(QWidget *_self_) {
  return qstring_to_crystal(_self_->whatsThis());
}

extern "C" CrystalString bg_QWidget_accessibleName_(QWidget *_self_) {
  return qstring_to_crystal(_self_->accessibleName());
}

extern "C" void bg_QWidget_setAccessibleName_const_QString_R(QWidget *_self_, const CrystalString name) {
  return _self_->setAccessibleName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" CrystalString bg_QWidget_accessibleDescription_(QWidget *_self_) {
  return qstring_to_crystal(_self_->accessibleDescription());
}

extern "C" void bg_QWidget_setAccessibleDescription_const_QString_R(QWidget *_self_, const CrystalString description) {
  return _self_->setAccessibleDescription(QString::fromUtf8(description.ptr, description.size));
}

extern "C" void bg_QWidget_setLayoutDirection_Qt__LayoutDirection(QWidget *_self_, Qt::LayoutDirection direction) {
  return _self_->setLayoutDirection(direction);
}

extern "C" Qt::LayoutDirection bg_QWidget_layoutDirection_(QWidget *_self_) {
  return _self_->layoutDirection();
}

extern "C" void bg_QWidget_unsetLayoutDirection_(QWidget *_self_) {
  return _self_->unsetLayoutDirection();
}

extern "C" void bg_QWidget_setLocale_const_QLocale_R(QWidget *_self_, const QLocale& locale) {
  return _self_->setLocale(locale);
}

extern "C" QLocale* bg_QWidget_locale_(QWidget *_self_) {
  return new (UseGC) QLocale (_self_->locale());
}

extern "C" void bg_QWidget_unsetLocale_(QWidget *_self_) {
  return _self_->unsetLocale();
}

extern "C" bool bg_QWidget_isRightToLeft_(QWidget *_self_) {
  return _self_->isRightToLeft();
}

extern "C" bool bg_QWidget_isLeftToRight_(QWidget *_self_) {
  return _self_->isLeftToRight();
}

extern "C" void bg_QWidget_setFocus_(QWidget *_self_) {
  return _self_->setFocus();
}

extern "C" bool bg_QWidget_isActiveWindow_(QWidget *_self_) {
  return _self_->isActiveWindow();
}

extern "C" void bg_QWidget_activateWindow_(QWidget *_self_) {
  return _self_->activateWindow();
}

extern "C" void bg_QWidget_clearFocus_(QWidget *_self_) {
  return _self_->clearFocus();
}

extern "C" void bg_QWidget_setFocus_Qt__FocusReason(QWidget *_self_, Qt::FocusReason reason) {
  return _self_->setFocus(reason);
}

extern "C" Qt::FocusPolicy bg_QWidget_focusPolicy_(QWidget *_self_) {
  return _self_->focusPolicy();
}

extern "C" void bg_QWidget_setFocusPolicy_Qt__FocusPolicy(QWidget *_self_, Qt::FocusPolicy policy) {
  return _self_->setFocusPolicy(policy);
}

extern "C" bool bg_QWidget_hasFocus_(QWidget *_self_) {
  return _self_->hasFocus();
}

extern "C" void bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(QWidget* unnamed_arg_0, QWidget* unnamed_arg_1) {
  return QWidget::setTabOrder(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QWidget_setFocusProxy_QWidget_X(QWidget *_self_, QWidget* unnamed_arg_0) {
  return _self_->setFocusProxy(unnamed_arg_0);
}

extern "C" QWidget* bg_QWidget_focusProxy_(QWidget *_self_) {
  return _self_->focusProxy();
}

extern "C" Qt::ContextMenuPolicy bg_QWidget_contextMenuPolicy_(QWidget *_self_) {
  return _self_->contextMenuPolicy();
}

extern "C" void bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(QWidget *_self_, Qt::ContextMenuPolicy policy) {
  return _self_->setContextMenuPolicy(policy);
}

extern "C" void bg_QWidget_grabMouse_(QWidget *_self_) {
  return _self_->grabMouse();
}

extern "C" void bg_QWidget_grabMouse_const_QCursor_R(QWidget *_self_, const QCursor& unnamed_arg_0) {
  return _self_->grabMouse(unnamed_arg_0);
}

extern "C" void bg_QWidget_releaseMouse_(QWidget *_self_) {
  return _self_->releaseMouse();
}

extern "C" void bg_QWidget_grabKeyboard_(QWidget *_self_) {
  return _self_->grabKeyboard();
}

extern "C" void bg_QWidget_releaseKeyboard_(QWidget *_self_) {
  return _self_->releaseKeyboard();
}

extern "C" int bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(QWidget *_self_, const QKeySequence& key, Qt::ShortcutContext context) {
  return _self_->grabShortcut(key, context);
}

extern "C" void bg_QWidget_releaseShortcut_int(QWidget *_self_, int id) {
  return _self_->releaseShortcut(id);
}

extern "C" void bg_QWidget_setShortcutEnabled_int_bool(QWidget *_self_, int id, bool enable) {
  return _self_->setShortcutEnabled(id, enable);
}

extern "C" void bg_QWidget_setShortcutAutoRepeat_int_bool(QWidget *_self_, int id, bool enable) {
  return _self_->setShortcutAutoRepeat(id, enable);
}

extern "C" QWidget* bg_QWidget_mouseGrabber_STATIC_() {
  return QWidget::mouseGrabber();
}

extern "C" QWidget* bg_QWidget_keyboardGrabber_STATIC_() {
  return QWidget::keyboardGrabber();
}

extern "C" bool bg_QWidget_updatesEnabled_(QWidget *_self_) {
  return _self_->updatesEnabled();
}

extern "C" void bg_QWidget_setUpdatesEnabled_bool(QWidget *_self_, bool enable) {
  return _self_->setUpdatesEnabled(enable);
}

extern "C" QGraphicsProxyWidget* bg_QWidget_graphicsProxyWidget_(QWidget *_self_) {
  return _self_->graphicsProxyWidget();
}

extern "C" void bg_QWidget_update_(QWidget *_self_) {
  return _self_->update();
}

extern "C" void bg_QWidget_repaint_(QWidget *_self_) {
  return _self_->repaint();
}

extern "C" void bg_QWidget_update_int_int_int_int(QWidget *_self_, int x, int y, int w, int h) {
  return _self_->update(x, y, w, h);
}

extern "C" void bg_QWidget_update_const_QRect_R(QWidget *_self_, const QRect& unnamed_arg_0) {
  return _self_->update(unnamed_arg_0);
}

extern "C" void bg_QWidget_update_const_QRegion_R(QWidget *_self_, const QRegion& unnamed_arg_0) {
  return _self_->update(unnamed_arg_0);
}

extern "C" void bg_QWidget_repaint_int_int_int_int(QWidget *_self_, int x, int y, int w, int h) {
  return _self_->repaint(x, y, w, h);
}

extern "C" void bg_QWidget_repaint_const_QRect_R(QWidget *_self_, const QRect& unnamed_arg_0) {
  return _self_->repaint(unnamed_arg_0);
}

extern "C" void bg_QWidget_repaint_const_QRegion_R(QWidget *_self_, const QRegion& unnamed_arg_0) {
  return _self_->repaint(unnamed_arg_0);
}

extern "C" void bg_QWidget_setVisible_bool(QWidget *_self_, bool visible) {
  return _self_->setVisible(visible);
}

extern "C" void bg_QWidget_setHidden_bool(QWidget *_self_, bool hidden) {
  return _self_->setHidden(hidden);
}

extern "C" void bg_QWidget_show_(QWidget *_self_) {
  return _self_->show();
}

extern "C" void bg_QWidget_hide_(QWidget *_self_) {
  return _self_->hide();
}

extern "C" void bg_QWidget_showMinimized_(QWidget *_self_) {
  return _self_->showMinimized();
}

extern "C" void bg_QWidget_showMaximized_(QWidget *_self_) {
  return _self_->showMaximized();
}

extern "C" void bg_QWidget_showFullScreen_(QWidget *_self_) {
  return _self_->showFullScreen();
}

extern "C" void bg_QWidget_showNormal_(QWidget *_self_) {
  return _self_->showNormal();
}

extern "C" bool bg_QWidget_close_(QWidget *_self_) {
  return _self_->close();
}

extern "C" void bg_QWidget_raise_(QWidget *_self_) {
  return _self_->raise();
}

extern "C" void bg_QWidget_lower_(QWidget *_self_) {
  return _self_->lower();
}

extern "C" void bg_QWidget_stackUnder_QWidget_X(QWidget *_self_, QWidget* unnamed_arg_0) {
  return _self_->stackUnder(unnamed_arg_0);
}

extern "C" void bg_QWidget_move_int_int(QWidget *_self_, int x, int y) {
  return _self_->move(x, y);
}

extern "C" void bg_QWidget_move_const_QPoint_R(QWidget *_self_, const QPoint unnamed_arg_0) {
  return _self_->move(unnamed_arg_0);
}

extern "C" void bg_QWidget_resize_int_int(QWidget *_self_, int w, int h) {
  return _self_->resize(w, h);
}

extern "C" void bg_QWidget_resize_const_QSize_R(QWidget *_self_, const QSize& unnamed_arg_0) {
  return _self_->resize(unnamed_arg_0);
}

extern "C" void bg_QWidget_setGeometry_int_int_int_int(QWidget *_self_, int x, int y, int w, int h) {
  return _self_->setGeometry(x, y, w, h);
}

extern "C" void bg_QWidget_setGeometry_const_QRect_R(QWidget *_self_, const QRect& unnamed_arg_0) {
  return _self_->setGeometry(unnamed_arg_0);
}

extern "C" QByteArray* bg_QWidget_saveGeometry_(QWidget *_self_) {
  return new (UseGC) QByteArray (_self_->saveGeometry());
}

extern "C" bool bg_QWidget_restoreGeometry_const_QByteArray_R(QWidget *_self_, const QByteArray& geometry) {
  return _self_->restoreGeometry(geometry);
}

extern "C" void bg_QWidget_adjustSize_(QWidget *_self_) {
  return _self_->adjustSize();
}

extern "C" bool bg_QWidget_isVisible_(QWidget *_self_) {
  return _self_->isVisible();
}

extern "C" bool bg_QWidget_isVisibleTo_const_QWidget_X(QWidget *_self_, const QWidget* unnamed_arg_0) {
  return _self_->isVisibleTo(unnamed_arg_0);
}

extern "C" bool bg_QWidget_isHidden_(QWidget *_self_) {
  return _self_->isHidden();
}

extern "C" bool bg_QWidget_isMinimized_(QWidget *_self_) {
  return _self_->isMinimized();
}

extern "C" bool bg_QWidget_isMaximized_(QWidget *_self_) {
  return _self_->isMaximized();
}

extern "C" bool bg_QWidget_isFullScreen_(QWidget *_self_) {
  return _self_->isFullScreen();
}

extern "C" Qt::WindowStates bg_QWidget_windowState_(QWidget *_self_) {
  return _self_->windowState();
}

extern "C" void bg_QWidget_setWindowState_Qt__WindowStates(QWidget *_self_, Qt::WindowStates state) {
  return _self_->setWindowState(state);
}

extern "C" void bg_QWidget_overrideWindowState_Qt__WindowStates(QWidget *_self_, Qt::WindowStates state) {
  return _self_->overrideWindowState(state);
}

extern "C" QSize* bg_QWidget_sizeHint_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QWidget_minimumSizeHint_(QWidget *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" int bg_QWidget_heightForWidth_int(QWidget *_self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" bool bg_QWidget_hasHeightForWidth_(QWidget *_self_) {
  return _self_->hasHeightForWidth();
}

extern "C" QRegion* bg_QWidget_visibleRegion_(QWidget *_self_) {
  return new (UseGC) QRegion (_self_->visibleRegion());
}

extern "C" void bg_QWidget_setContentsMargins_int_int_int_int(QWidget *_self_, int left, int top, int right, int bottom) {
  return _self_->setContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QWidget_setContentsMargins_const_QMargins_R(QWidget *_self_, const QMargins& margins) {
  return _self_->setContentsMargins(margins);
}

extern "C" void bg_QWidget_getContentsMargins_int_X_int_X_int_X_int_X(QWidget *_self_, int* left, int* top, int* right, int* bottom) {
  return _self_->getContentsMargins(left, top, right, bottom);
}

extern "C" QMargins* bg_QWidget_contentsMargins_(QWidget *_self_) {
  return new (UseGC) QMargins (_self_->contentsMargins());
}

extern "C" QRect* bg_QWidget_contentsRect_(QWidget *_self_) {
  return new (UseGC) QRect (_self_->contentsRect());
}

extern "C" QLayout* bg_QWidget_layout_(QWidget *_self_) {
  return _self_->layout();
}

extern "C" void bg_QWidget_setLayout_QLayout_X(QWidget *_self_, QLayout* unnamed_arg_0) {
  return _self_->setLayout(unnamed_arg_0);
}

extern "C" void bg_QWidget_updateGeometry_(QWidget *_self_) {
  return _self_->updateGeometry();
}

extern "C" void bg_QWidget_setParent_QWidget_X(QWidget *_self_, QWidget* parent) {
  return _self_->setParent(parent);
}

extern "C" void bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(QWidget *_self_, QWidget* parent, Qt::WindowFlags f) {
  return _self_->setParent(parent, f);
}

extern "C" void bg_QWidget_scroll_int_int(QWidget *_self_, int dx, int dy) {
  return _self_->scroll(dx, dy);
}

extern "C" void bg_QWidget_scroll_int_int_const_QRect_R(QWidget *_self_, int dx, int dy, const QRect& unnamed_arg_2) {
  return _self_->scroll(dx, dy, unnamed_arg_2);
}

extern "C" QWidget* bg_QWidget_focusWidget_(QWidget *_self_) {
  return _self_->focusWidget();
}

extern "C" QWidget* bg_QWidget_nextInFocusChain_(QWidget *_self_) {
  return _self_->nextInFocusChain();
}

extern "C" QWidget* bg_QWidget_previousInFocusChain_(QWidget *_self_) {
  return _self_->previousInFocusChain();
}

extern "C" bool bg_QWidget_acceptDrops_(QWidget *_self_) {
  return _self_->acceptDrops();
}

extern "C" void bg_QWidget_setAcceptDrops_bool(QWidget *_self_, bool on) {
  return _self_->setAcceptDrops(on);
}

extern "C" void bg_QWidget_addAction_QAction_X(QWidget *_self_, QAction* action) {
  return _self_->addAction(action);
}

extern "C" void bg_QWidget_insertAction_QAction_X_QAction_X(QWidget *_self_, QAction* before, QAction* action) {
  return _self_->insertAction(before, action);
}

extern "C" void bg_QWidget_removeAction_QAction_X(QWidget *_self_, QAction* action) {
  return _self_->removeAction(action);
}

extern "C" QWidget* bg_QWidget_parentWidget_(QWidget *_self_) {
  return _self_->parentWidget();
}

extern "C" void bg_QWidget_setWindowFlags_Qt__WindowFlags(QWidget *_self_, Qt::WindowFlags type) {
  return _self_->setWindowFlags(type);
}

extern "C" Qt::WindowFlags bg_QWidget_windowFlags_(QWidget *_self_) {
  return _self_->windowFlags();
}

extern "C" void bg_QWidget_setWindowFlag_Qt__WindowType_bool(QWidget *_self_, Qt::WindowType unnamed_arg_0, bool on) {
  return _self_->setWindowFlag(unnamed_arg_0, on);
}

extern "C" void bg_QWidget_overrideWindowFlags_Qt__WindowFlags(QWidget *_self_, Qt::WindowFlags type) {
  return _self_->overrideWindowFlags(type);
}

extern "C" Qt::WindowType bg_QWidget_windowType_(QWidget *_self_) {
  return _self_->windowType();
}

extern "C" QWidget* bg_QWidget_childAt_int_int(QWidget *_self_, int x, int y) {
  return _self_->childAt(x, y);
}

extern "C" QWidget* bg_QWidget_childAt_const_QPoint_R(QWidget *_self_, const QPoint p) {
  return _self_->childAt(p);
}

extern "C" void bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(QWidget *_self_, Qt::WidgetAttribute unnamed_arg_0, bool on) {
  return _self_->setAttribute(unnamed_arg_0, on);
}

extern "C" bool bg_QWidget_testAttribute_Qt__WidgetAttribute(QWidget *_self_, Qt::WidgetAttribute unnamed_arg_0) {
  return _self_->testAttribute(unnamed_arg_0);
}

extern "C" QPaintEngine* bg_QWidget_paintEngine_(QWidget *_self_) {
  return _self_->paintEngine();
}

extern "C" void bg_QWidget_ensurePolished_(QWidget *_self_) {
  return _self_->ensurePolished();
}

extern "C" bool bg_QWidget_isAncestorOf_const_QWidget_X(QWidget *_self_, const QWidget* child) {
  return _self_->isAncestorOf(child);
}

extern "C" bool bg_QWidget_autoFillBackground_(QWidget *_self_) {
  return _self_->autoFillBackground();
}

extern "C" void bg_QWidget_setAutoFillBackground_bool(QWidget *_self_, bool enabled) {
  return _self_->setAutoFillBackground(enabled);
}

extern "C" QBackingStore* bg_QWidget_backingStore_(QWidget *_self_) {
  return _self_->backingStore();
}

extern "C" QWindow* bg_QWidget_windowHandle_(QWidget *_self_) {
  return _self_->windowHandle();
}

extern "C" QWidget* bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(QWindow* window, QWidget* parent) {
  return QWidget::createWindowContainer(window, parent);
}

extern "C" QWidget* bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(QWindow* window, QWidget* parent, Qt::WindowFlags flags) {
  return QWidget::createWindowContainer(window, parent, flags);
}

extern "C" QMetaObject::Connection* bg_QWidget_windowTitleChanged_CONNECT_CrystalProc_void__const_CrystalString_(QWidget *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QString &))&QWidget::windowTitleChanged, [_proc_](const QString& title){
  _proc_(qstring_to_crystal(title));
}));
}


extern "C" void bg_QWidget_windowTitleChanged_const_QString_R(QWidget *_self_, const CrystalString title) {
  return _self_->windowTitleChanged(QString::fromUtf8(title.ptr, title.size));
}

extern "C" QMetaObject::Connection* bg_QWidget_windowIconChanged_CONNECT_CrystalProc_void__const_QIconR_(QWidget *_self_, CrystalProc<void, const QIcon*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QIcon &))&QWidget::windowIconChanged, [_proc_](const QIcon& icon){
  _proc_(new (UseGC) QIcon (icon));
}));
}


extern "C" void bg_QWidget_windowIconChanged_const_QIcon_R(QWidget *_self_, const QIcon& icon) {
  return _self_->windowIconChanged(icon);
}

extern "C" QMetaObject::Connection* bg_QWidget_windowIconTextChanged_CONNECT_CrystalProc_void__const_CrystalString_(QWidget *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QString &))&QWidget::windowIconTextChanged, [_proc_](const QString& iconText){
  _proc_(qstring_to_crystal(iconText));
}));
}


extern "C" void bg_QWidget_windowIconTextChanged_const_QString_R(QWidget *_self_, const CrystalString iconText) {
  return _self_->windowIconTextChanged(QString::fromUtf8(iconText.ptr, iconText.size));
}

extern "C" QMetaObject::Connection* bg_QWidget_customContextMenuRequested_CONNECT_CrystalProc_void__const_QPoint_(QWidget *_self_, CrystalProc<void, const QPoint> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QWidget::*)(const QPoint &))&QWidget::customContextMenuRequested, [_proc_](const QPoint& pos){
  _proc_(pos);
}));
}


extern "C" void bg_QWidget_customContextMenuRequested_const_QPoint_R(QWidget *_self_, const QPoint pos) {
  return _self_->customContextMenuRequested(pos);
}

extern "C" bool bg_QWidget_event_QEvent_X(QWidget *_self_, QEvent* event) {
  return _self_->event(event);
}

extern "C" void bg_QWidget_mousePressEvent_QMouseEvent_X(QWidget *_self_, QMouseEvent* event) {
  return _self_->mousePressEvent(event);
}

extern "C" void bg_QWidget_mouseReleaseEvent_QMouseEvent_X(QWidget *_self_, QMouseEvent* event) {
  return _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(QWidget *_self_, QMouseEvent* event) {
  return _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QWidget_mouseMoveEvent_QMouseEvent_X(QWidget *_self_, QMouseEvent* event) {
  return _self_->mouseMoveEvent(event);
}

extern "C" void bg_QWidget_wheelEvent_QWheelEvent_X(QWidget *_self_, QWheelEvent* event) {
  return _self_->wheelEvent(event);
}

extern "C" void bg_QWidget_keyPressEvent_QKeyEvent_X(QWidget *_self_, QKeyEvent* event) {
  return _self_->keyPressEvent(event);
}

extern "C" void bg_QWidget_keyReleaseEvent_QKeyEvent_X(QWidget *_self_, QKeyEvent* event) {
  return _self_->keyReleaseEvent(event);
}

extern "C" void bg_QWidget_focusInEvent_QFocusEvent_X(QWidget *_self_, QFocusEvent* event) {
  return _self_->focusInEvent(event);
}

extern "C" void bg_QWidget_focusOutEvent_QFocusEvent_X(QWidget *_self_, QFocusEvent* event) {
  return _self_->focusOutEvent(event);
}

extern "C" void bg_QWidget_enterEvent_QEvent_X(QWidget *_self_, QEvent* event) {
  return _self_->enterEvent(event);
}

extern "C" void bg_QWidget_leaveEvent_QEvent_X(QWidget *_self_, QEvent* event) {
  return _self_->leaveEvent(event);
}

extern "C" void bg_QWidget_paintEvent_QPaintEvent_X(QWidget *_self_, QPaintEvent* event) {
  return _self_->paintEvent(event);
}

extern "C" void bg_QWidget_moveEvent_QMoveEvent_X(QWidget *_self_, QMoveEvent* event) {
  return _self_->moveEvent(event);
}

extern "C" void bg_QWidget_resizeEvent_QResizeEvent_X(QWidget *_self_, QResizeEvent* event) {
  return _self_->resizeEvent(event);
}

extern "C" void bg_QWidget_closeEvent_QCloseEvent_X(QWidget *_self_, QCloseEvent* event) {
  return _self_->closeEvent(event);
}

extern "C" void bg_QWidget_contextMenuEvent_QContextMenuEvent_X(QWidget *_self_, QContextMenuEvent* event) {
  return _self_->contextMenuEvent(event);
}

extern "C" void bg_QWidget_tabletEvent_QTabletEvent_X(QWidget *_self_, QTabletEvent* event) {
  return _self_->tabletEvent(event);
}

extern "C" void bg_QWidget_actionEvent_QActionEvent_X(QWidget *_self_, QActionEvent* event) {
  return _self_->actionEvent(event);
}

extern "C" void bg_QWidget_dragEnterEvent_QDragEnterEvent_X(QWidget *_self_, QDragEnterEvent* event) {
  return _self_->dragEnterEvent(event);
}

extern "C" void bg_QWidget_dragMoveEvent_QDragMoveEvent_X(QWidget *_self_, QDragMoveEvent* event) {
  return _self_->dragMoveEvent(event);
}

extern "C" void bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(QWidget *_self_, QDragLeaveEvent* event) {
  return _self_->dragLeaveEvent(event);
}

extern "C" void bg_QWidget_dropEvent_QDropEvent_X(QWidget *_self_, QDropEvent* event) {
  return _self_->dropEvent(event);
}

extern "C" void bg_QWidget_showEvent_QShowEvent_X(QWidget *_self_, QShowEvent* event) {
  return _self_->showEvent(event);
}

extern "C" void bg_QWidget_hideEvent_QHideEvent_X(QWidget *_self_, QHideEvent* event) {
  return _self_->hideEvent(event);
}

extern "C" bool bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(QWidget *_self_, const QByteArray& eventType, void* message, long* result) {
  return _self_->nativeEvent(eventType, message, result);
}

extern "C" void bg_QWidget_changeEvent_QEvent_X(QWidget *_self_, QEvent* unnamed_arg_0) {
  return _self_->changeEvent(unnamed_arg_0);
}

extern "C" int bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(QWidget *_self_, QPaintDevice::PaintDeviceMetric unnamed_arg_0) {
  return _self_->metric(unnamed_arg_0);
}

extern "C" void bg_QWidget_initPainter_QPainter_X(QWidget *_self_, QPainter* painter) {
  return _self_->initPainter(painter);
}

extern "C" QPainter* bg_QWidget_sharedPainter_(QWidget *_self_) {
  return _self_->sharedPainter();
}

extern "C" void bg_QWidget_inputMethodEvent_QInputMethodEvent_X(QWidget *_self_, QInputMethodEvent* unnamed_arg_0) {
  return _self_->inputMethodEvent(unnamed_arg_0);
}

extern "C" Qt::InputMethodHints bg_QWidget_inputMethodHints_(QWidget *_self_) {
  return _self_->inputMethodHints();
}

extern "C" void bg_QWidget_setInputMethodHints_Qt__InputMethodHints(QWidget *_self_, Qt::InputMethodHints hints) {
  return _self_->setInputMethodHints(hints);
}

extern "C" void bg_QWidget_updateMicroFocus_(QWidget *_self_) {
  return _self_->updateMicroFocus();
}

extern "C" void bg_QWidget_destroy_bool_bool(QWidget *_self_, bool destroyWindow, bool destroySubWindows) {
  return _self_->destroy(destroyWindow, destroySubWindows);
}

extern "C" bool bg_QWidget_focusNextPrevChild_bool(QWidget *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" bool bg_QWidget_focusNextChild_(QWidget *_self_) {
  return _self_->focusNextChild();
}

extern "C" bool bg_QWidget_focusPreviousChild_(QWidget *_self_) {
  return _self_->focusPreviousChild();
}

extern "C" QWidget* bg_QWidget_CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(QWidgetPrivate& d, QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QWidget(d, parent, f);
}

extern "C" const QMetaObject* bg_QAbstractButton_metaObject_(QAbstractButton *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QAbstractButton_qt_metacast_const_char_X(QAbstractButton *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAbstractButton::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAbstractButton::trUtf8(s, c, n));
}

extern "C" QAbstractButton* bg_QAbstractButton_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QAbstractButton(parent);
}

extern "C" void bg_QAbstractButton_setText_const_QString_R(QAbstractButton *_self_, const CrystalString text) {
  return _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QAbstractButton_text_(QAbstractButton *_self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QAbstractButton_setIcon_const_QIcon_R(QAbstractButton *_self_, const QIcon& icon) {
  return _self_->setIcon(icon);
}

extern "C" QIcon* bg_QAbstractButton_icon_(QAbstractButton *_self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" QSize* bg_QAbstractButton_iconSize_(QAbstractButton *_self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QAbstractButton_setShortcut_const_QKeySequence_R(QAbstractButton *_self_, const QKeySequence& key) {
  return _self_->setShortcut(key);
}

extern "C" QKeySequence* bg_QAbstractButton_shortcut_(QAbstractButton *_self_) {
  return new (UseGC) QKeySequence (_self_->shortcut());
}

extern "C" void bg_QAbstractButton_setCheckable_bool(QAbstractButton *_self_, bool unnamed_arg_0) {
  return _self_->setCheckable(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_isCheckable_(QAbstractButton *_self_) {
  return _self_->isCheckable();
}

extern "C" bool bg_QAbstractButton_isChecked_(QAbstractButton *_self_) {
  return _self_->isChecked();
}

extern "C" void bg_QAbstractButton_setDown_bool(QAbstractButton *_self_, bool unnamed_arg_0) {
  return _self_->setDown(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_isDown_(QAbstractButton *_self_) {
  return _self_->isDown();
}

extern "C" void bg_QAbstractButton_setAutoRepeat_bool(QAbstractButton *_self_, bool unnamed_arg_0) {
  return _self_->setAutoRepeat(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_autoRepeat_(QAbstractButton *_self_) {
  return _self_->autoRepeat();
}

extern "C" void bg_QAbstractButton_setAutoRepeatDelay_int(QAbstractButton *_self_, int unnamed_arg_0) {
  return _self_->setAutoRepeatDelay(unnamed_arg_0);
}

extern "C" int bg_QAbstractButton_autoRepeatDelay_(QAbstractButton *_self_) {
  return _self_->autoRepeatDelay();
}

extern "C" void bg_QAbstractButton_setAutoRepeatInterval_int(QAbstractButton *_self_, int unnamed_arg_0) {
  return _self_->setAutoRepeatInterval(unnamed_arg_0);
}

extern "C" int bg_QAbstractButton_autoRepeatInterval_(QAbstractButton *_self_) {
  return _self_->autoRepeatInterval();
}

extern "C" void bg_QAbstractButton_setAutoExclusive_bool(QAbstractButton *_self_, bool unnamed_arg_0) {
  return _self_->setAutoExclusive(unnamed_arg_0);
}

extern "C" bool bg_QAbstractButton_autoExclusive_(QAbstractButton *_self_) {
  return _self_->autoExclusive();
}

extern "C" QButtonGroup* bg_QAbstractButton_group_(QAbstractButton *_self_) {
  return _self_->group();
}

extern "C" void bg_QAbstractButton_setIconSize_const_QSize_R(QAbstractButton *_self_, const QSize& size) {
  return _self_->setIconSize(size);
}

extern "C" void bg_QAbstractButton_animateClick_int(QAbstractButton *_self_, int msec) {
  return _self_->animateClick(msec);
}

extern "C" void bg_QAbstractButton_click_(QAbstractButton *_self_) {
  return _self_->click();
}

extern "C" void bg_QAbstractButton_toggle_(QAbstractButton *_self_) {
  return _self_->toggle();
}

extern "C" void bg_QAbstractButton_setChecked_bool(QAbstractButton *_self_, bool unnamed_arg_0) {
  return _self_->setChecked(unnamed_arg_0);
}

extern "C" QMetaObject::Connection* bg_QAbstractButton_pressed_CONNECT_CrystalProc_void_(QAbstractButton *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)())&QAbstractButton::pressed, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QAbstractButton_pressed_(QAbstractButton *_self_) {
  return _self_->pressed();
}

extern "C" QMetaObject::Connection* bg_QAbstractButton_released_CONNECT_CrystalProc_void_(QAbstractButton *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)())&QAbstractButton::released, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QAbstractButton_released_(QAbstractButton *_self_) {
  return _self_->released();
}

extern "C" QMetaObject::Connection* bg_QAbstractButton_clicked_CONNECT_CrystalProc_void__bool_(QAbstractButton *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)(bool))&QAbstractButton::clicked, [_proc_](bool checked){
  _proc_(checked);
}));
}


extern "C" void bg_QAbstractButton_clicked_bool(QAbstractButton *_self_, bool checked) {
  return _self_->clicked(checked);
}

extern "C" QMetaObject::Connection* bg_QAbstractButton_toggled_CONNECT_CrystalProc_void__bool_(QAbstractButton *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAbstractButton::*)(bool))&QAbstractButton::toggled, [_proc_](bool checked){
  _proc_(checked);
}));
}


extern "C" void bg_QAbstractButton_toggled_bool(QAbstractButton *_self_, bool checked) {
  return _self_->toggled(checked);
}

extern "C" void bg_QAbstractButton_paintEvent_QPaintEvent_X(QAbstractButton *_self_, QPaintEvent* e) {
  return _self_->paintEvent(e);
}

extern "C" bool bg_QAbstractButton_hitButton_const_QPoint_R(QAbstractButton *_self_, const QPoint pos) {
  return _self_->hitButton(pos);
}

extern "C" void bg_QAbstractButton_checkStateSet_(QAbstractButton *_self_) {
  return _self_->checkStateSet();
}

extern "C" void bg_QAbstractButton_nextCheckState_(QAbstractButton *_self_) {
  return _self_->nextCheckState();
}

extern "C" bool bg_QAbstractButton_event_QEvent_X(QAbstractButton *_self_, QEvent* e) {
  return _self_->event(e);
}

extern "C" void bg_QAbstractButton_keyPressEvent_QKeyEvent_X(QAbstractButton *_self_, QKeyEvent* e) {
  return _self_->keyPressEvent(e);
}

extern "C" void bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(QAbstractButton *_self_, QKeyEvent* e) {
  return _self_->keyReleaseEvent(e);
}

extern "C" void bg_QAbstractButton_mousePressEvent_QMouseEvent_X(QAbstractButton *_self_, QMouseEvent* e) {
  return _self_->mousePressEvent(e);
}

extern "C" void bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(QAbstractButton *_self_, QMouseEvent* e) {
  return _self_->mouseReleaseEvent(e);
}

extern "C" void bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(QAbstractButton *_self_, QMouseEvent* e) {
  return _self_->mouseMoveEvent(e);
}

extern "C" void bg_QAbstractButton_focusInEvent_QFocusEvent_X(QAbstractButton *_self_, QFocusEvent* e) {
  return _self_->focusInEvent(e);
}

extern "C" void bg_QAbstractButton_focusOutEvent_QFocusEvent_X(QAbstractButton *_self_, QFocusEvent* e) {
  return _self_->focusOutEvent(e);
}

extern "C" void bg_QAbstractButton_changeEvent_QEvent_X(QAbstractButton *_self_, QEvent* e) {
  return _self_->changeEvent(e);
}

extern "C" void bg_QAbstractButton_timerEvent_QTimerEvent_X(QAbstractButton *_self_, QTimerEvent* e) {
  return _self_->timerEvent(e);
}

extern "C" QAbstractButton* bg_QAbstractButton_CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(QAbstractButtonPrivate& dd, QWidget* parent) {
  return new (UseGC) BgInherit_QAbstractButton(dd, parent);
}

extern "C" const QMetaObject* bg_QFrame_metaObject_(QFrame *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QFrame_qt_metacast_const_char_X(QFrame *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QFrame::tr(s, c, n));
}

extern "C" CrystalString bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QFrame::trUtf8(s, c, n));
}

extern "C" QFrame* bg_QFrame_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QFrame(parent);
}

extern "C" QFrame* bg_QFrame_CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QFrame(parent, f);
}

extern "C" int bg_QFrame_frameStyle_(QFrame *_self_) {
  return _self_->frameStyle();
}

extern "C" void bg_QFrame_setFrameStyle_int(QFrame *_self_, int unnamed_arg_0) {
  return _self_->setFrameStyle(unnamed_arg_0);
}

extern "C" int bg_QFrame_frameWidth_(QFrame *_self_) {
  return _self_->frameWidth();
}

extern "C" QSize* bg_QFrame_sizeHint_(QFrame *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QFrame::Shape bg_QFrame_frameShape_(QFrame *_self_) {
  return _self_->frameShape();
}

extern "C" void bg_QFrame_setFrameShape_QFrame__Shape(QFrame *_self_, QFrame::Shape unnamed_arg_0) {
  return _self_->setFrameShape(unnamed_arg_0);
}

extern "C" QFrame::Shadow bg_QFrame_frameShadow_(QFrame *_self_) {
  return _self_->frameShadow();
}

extern "C" void bg_QFrame_setFrameShadow_QFrame__Shadow(QFrame *_self_, QFrame::Shadow unnamed_arg_0) {
  return _self_->setFrameShadow(unnamed_arg_0);
}

extern "C" int bg_QFrame_lineWidth_(QFrame *_self_) {
  return _self_->lineWidth();
}

extern "C" void bg_QFrame_setLineWidth_int(QFrame *_self_, int unnamed_arg_0) {
  return _self_->setLineWidth(unnamed_arg_0);
}

extern "C" int bg_QFrame_midLineWidth_(QFrame *_self_) {
  return _self_->midLineWidth();
}

extern "C" void bg_QFrame_setMidLineWidth_int(QFrame *_self_, int unnamed_arg_0) {
  return _self_->setMidLineWidth(unnamed_arg_0);
}

extern "C" QRect* bg_QFrame_frameRect_(QFrame *_self_) {
  return new (UseGC) QRect (_self_->frameRect());
}

extern "C" void bg_QFrame_setFrameRect_const_QRect_R(QFrame *_self_, const QRect& unnamed_arg_0) {
  return _self_->setFrameRect(unnamed_arg_0);
}

extern "C" bool bg_QFrame_event_QEvent_X(QFrame *_self_, QEvent* e) {
  return _self_->event(e);
}

extern "C" void bg_QFrame_paintEvent_QPaintEvent_X(QFrame *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QFrame_changeEvent_QEvent_X(QFrame *_self_, QEvent* unnamed_arg_0) {
  return _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QFrame_drawFrame_QPainter_X(QFrame *_self_, QPainter* unnamed_arg_0) {
  return _self_->drawFrame(unnamed_arg_0);
}

extern "C" QFrame* bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X(QFramePrivate& dd, QWidget* parent) {
  return new (UseGC) BgInherit_QFrame(dd, parent);
}

extern "C" QFrame* bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(QFramePrivate& dd, QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QFrame(dd, parent, f);
}

extern "C" void bg_QFrame_initStyleOption_QStyleOptionFrame_X(QFrame *_self_, QStyleOptionFrame* option) {
  return _self_->initStyleOption(option);
}

extern "C" const QMetaObject* bg_QAbstractScrollArea_metaObject_(QAbstractScrollArea *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QAbstractScrollArea_qt_metacast_const_char_X(QAbstractScrollArea *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAbstractScrollArea::tr(s, c, n));
}

extern "C" CrystalString bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAbstractScrollArea::trUtf8(s, c, n));
}

extern "C" QAbstractScrollArea* bg_QAbstractScrollArea_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QAbstractScrollArea(parent);
}

extern "C" Qt::ScrollBarPolicy bg_QAbstractScrollArea_verticalScrollBarPolicy_(QAbstractScrollArea *_self_) {
  return _self_->verticalScrollBarPolicy();
}

extern "C" void bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(QAbstractScrollArea *_self_, Qt::ScrollBarPolicy unnamed_arg_0) {
  return _self_->setVerticalScrollBarPolicy(unnamed_arg_0);
}

extern "C" QScrollBar* bg_QAbstractScrollArea_verticalScrollBar_(QAbstractScrollArea *_self_) {
  return _self_->verticalScrollBar();
}

extern "C" void bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(QAbstractScrollArea *_self_, QScrollBar* scrollbar) {
  return _self_->setVerticalScrollBar(scrollbar);
}

extern "C" Qt::ScrollBarPolicy bg_QAbstractScrollArea_horizontalScrollBarPolicy_(QAbstractScrollArea *_self_) {
  return _self_->horizontalScrollBarPolicy();
}

extern "C" void bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(QAbstractScrollArea *_self_, Qt::ScrollBarPolicy unnamed_arg_0) {
  return _self_->setHorizontalScrollBarPolicy(unnamed_arg_0);
}

extern "C" QScrollBar* bg_QAbstractScrollArea_horizontalScrollBar_(QAbstractScrollArea *_self_) {
  return _self_->horizontalScrollBar();
}

extern "C" void bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(QAbstractScrollArea *_self_, QScrollBar* scrollbar) {
  return _self_->setHorizontalScrollBar(scrollbar);
}

extern "C" QWidget* bg_QAbstractScrollArea_cornerWidget_(QAbstractScrollArea *_self_) {
  return _self_->cornerWidget();
}

extern "C" void bg_QAbstractScrollArea_setCornerWidget_QWidget_X(QAbstractScrollArea *_self_, QWidget* widget) {
  return _self_->setCornerWidget(widget);
}

extern "C" void bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(QAbstractScrollArea *_self_, QWidget* widget, Qt::Alignment alignment) {
  return _self_->addScrollBarWidget(widget, alignment);
}

extern "C" QWidgetList* bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(QAbstractScrollArea *_self_, Qt::Alignment alignment) {
  return new (UseGC) QWidgetList (_self_->scrollBarWidgets(alignment));
}

extern "C" QWidget* bg_QAbstractScrollArea_viewport_(QAbstractScrollArea *_self_) {
  return _self_->viewport();
}

extern "C" void bg_QAbstractScrollArea_setViewport_QWidget_X(QAbstractScrollArea *_self_, QWidget* widget) {
  return _self_->setViewport(widget);
}

extern "C" QSize* bg_QAbstractScrollArea_maximumViewportSize_(QAbstractScrollArea *_self_) {
  return new (UseGC) QSize (_self_->maximumViewportSize());
}

extern "C" QSize* bg_QAbstractScrollArea_minimumSizeHint_(QAbstractScrollArea *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" QSize* bg_QAbstractScrollArea_sizeHint_(QAbstractScrollArea *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" void bg_QAbstractScrollArea_setupViewport_QWidget_X(QAbstractScrollArea *_self_, QWidget* viewport) {
  return _self_->setupViewport(viewport);
}

extern "C" QAbstractScrollArea::SizeAdjustPolicy bg_QAbstractScrollArea_sizeAdjustPolicy_(QAbstractScrollArea *_self_) {
  return _self_->sizeAdjustPolicy();
}

extern "C" void bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(QAbstractScrollArea *_self_, QAbstractScrollArea::SizeAdjustPolicy policy) {
  return _self_->setSizeAdjustPolicy(policy);
}

extern "C" QAbstractScrollArea* bg_QAbstractScrollArea_CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(QAbstractScrollAreaPrivate& dd, QWidget* parent) {
  return new (UseGC) BgInherit_QAbstractScrollArea(dd, parent);
}

extern "C" void bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(QAbstractScrollArea *_self_, int left, int top, int right, int bottom) {
  return _self_->setViewportMargins(left, top, right, bottom);
}

extern "C" void bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(QAbstractScrollArea *_self_, const QMargins& margins) {
  return _self_->setViewportMargins(margins);
}

extern "C" QMargins* bg_QAbstractScrollArea_viewportMargins_(QAbstractScrollArea *_self_) {
  return new (UseGC) QMargins (_self_->viewportMargins());
}

extern "C" bool bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(QAbstractScrollArea *_self_, QObject* unnamed_arg_0, QEvent* unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QAbstractScrollArea_event_QEvent_X(QAbstractScrollArea *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QAbstractScrollArea_viewportEvent_QEvent_X(QAbstractScrollArea *_self_, QEvent* unnamed_arg_0) {
  return _self_->viewportEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(QAbstractScrollArea *_self_, QResizeEvent* unnamed_arg_0) {
  return _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(QAbstractScrollArea *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(QAbstractScrollArea *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(QAbstractScrollArea *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(QAbstractScrollArea *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseDoubleClickEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(QAbstractScrollArea *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(QAbstractScrollArea *_self_, QWheelEvent* unnamed_arg_0) {
  return _self_->wheelEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(QAbstractScrollArea *_self_, QContextMenuEvent* unnamed_arg_0) {
  return _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(QAbstractScrollArea *_self_, QDragEnterEvent* unnamed_arg_0) {
  return _self_->dragEnterEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(QAbstractScrollArea *_self_, QDragMoveEvent* unnamed_arg_0) {
  return _self_->dragMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(QAbstractScrollArea *_self_, QDragLeaveEvent* unnamed_arg_0) {
  return _self_->dragLeaveEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_dropEvent_QDropEvent_X(QAbstractScrollArea *_self_, QDropEvent* unnamed_arg_0) {
  return _self_->dropEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(QAbstractScrollArea *_self_, QKeyEvent* unnamed_arg_0) {
  return _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QAbstractScrollArea_scrollContentsBy_int_int(QAbstractScrollArea *_self_, int dx, int dy) {
  return _self_->scrollContentsBy(dx, dy);
}

extern "C" QSize* bg_QAbstractScrollArea_viewportSizeHint_(QAbstractScrollArea *_self_) {
  return new (UseGC) QSize (_self_->viewportSizeHint());
}

extern "C" const QMetaObject* bg_QScrollArea_metaObject_(QScrollArea *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QScrollArea_qt_metacast_const_char_X(QScrollArea *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QScrollArea::tr(s, c, n));
}

extern "C" CrystalString bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QScrollArea::trUtf8(s, c, n));
}

extern "C" QScrollArea* bg_QScrollArea_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QScrollArea(parent);
}

extern "C" QWidget* bg_QScrollArea_widget_(QScrollArea *_self_) {
  return _self_->widget();
}

extern "C" void bg_QScrollArea_setWidget_QWidget_X(QScrollArea *_self_, QWidget* widget) {
  return _self_->setWidget(widget);
}

extern "C" QWidget* bg_QScrollArea_takeWidget_(QScrollArea *_self_) {
  return _self_->takeWidget();
}

extern "C" bool bg_QScrollArea_widgetResizable_(QScrollArea *_self_) {
  return _self_->widgetResizable();
}

extern "C" void bg_QScrollArea_setWidgetResizable_bool(QScrollArea *_self_, bool resizable) {
  return _self_->setWidgetResizable(resizable);
}

extern "C" QSize* bg_QScrollArea_sizeHint_(QScrollArea *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" bool bg_QScrollArea_focusNextPrevChild_bool(QScrollArea *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" Qt::Alignment bg_QScrollArea_alignment_(QScrollArea *_self_) {
  return _self_->alignment();
}

extern "C" void bg_QScrollArea_setAlignment_Qt__Alignment(QScrollArea *_self_, Qt::Alignment unnamed_arg_0) {
  return _self_->setAlignment(unnamed_arg_0);
}

extern "C" void bg_QScrollArea_ensureVisible_int_int_int_int(QScrollArea *_self_, int x, int y, int xmargin, int ymargin) {
  return _self_->ensureVisible(x, y, xmargin, ymargin);
}

extern "C" void bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(QScrollArea *_self_, QWidget* childWidget, int xmargin, int ymargin) {
  return _self_->ensureWidgetVisible(childWidget, xmargin, ymargin);
}

extern "C" QScrollArea* bg_QScrollArea_CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(QScrollAreaPrivate& dd, QWidget* parent) {
  return new (UseGC) BgInherit_QScrollArea(dd, parent);
}

extern "C" bool bg_QScrollArea_event_QEvent_X(QScrollArea *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QScrollArea_eventFilter_QObject_X_QEvent_X(QScrollArea *_self_, QObject* unnamed_arg_0, QEvent* unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QScrollArea_resizeEvent_QResizeEvent_X(QScrollArea *_self_, QResizeEvent* unnamed_arg_0) {
  return _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QScrollArea_scrollContentsBy_int_int(QScrollArea *_self_, int dx, int dy) {
  return _self_->scrollContentsBy(dx, dy);
}

extern "C" QSize* bg_QScrollArea_viewportSizeHint_(QScrollArea *_self_) {
  return new (UseGC) QSize (_self_->viewportSizeHint());
}

extern "C" const QMetaObject* bg_QMenuBar_metaObject_(QMenuBar *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QMenuBar_qt_metacast_const_char_X(QMenuBar *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QMenuBar::tr(s, c, n));
}

extern "C" CrystalString bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QMenuBar::trUtf8(s, c, n));
}

extern "C" QMenuBar* bg_QMenuBar_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QMenuBar(parent);
}

extern "C" QAction* bg_QMenuBar_addAction_const_QString_R(QMenuBar *_self_, const CrystalString text) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction* bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(QMenuBar *_self_, const CrystalString text, const QObject* receiver, const char* member) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction* bg_QMenuBar_addMenu_QMenu_X(QMenuBar *_self_, QMenu* menu) {
  return _self_->addMenu(menu);
}

extern "C" QMenu* bg_QMenuBar_addMenu_const_QString_R(QMenuBar *_self_, const CrystalString title) {
  return _self_->addMenu(QString::fromUtf8(title.ptr, title.size));
}

extern "C" QMenu* bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(QMenuBar *_self_, const QIcon& icon, const CrystalString title) {
  return _self_->addMenu(icon, QString::fromUtf8(title.ptr, title.size));
}

extern "C" QAction* bg_QMenuBar_addSeparator_(QMenuBar *_self_) {
  return _self_->addSeparator();
}

extern "C" QAction* bg_QMenuBar_insertSeparator_QAction_X(QMenuBar *_self_, QAction* before) {
  return _self_->insertSeparator(before);
}

extern "C" QAction* bg_QMenuBar_insertMenu_QAction_X_QMenu_X(QMenuBar *_self_, QAction* before, QMenu* menu) {
  return _self_->insertMenu(before, menu);
}

extern "C" void bg_QMenuBar_clear_(QMenuBar *_self_) {
  return _self_->clear();
}

extern "C" QAction* bg_QMenuBar_activeAction_(QMenuBar *_self_) {
  return _self_->activeAction();
}

extern "C" void bg_QMenuBar_setActiveAction_QAction_X(QMenuBar *_self_, QAction* action) {
  return _self_->setActiveAction(action);
}

extern "C" void bg_QMenuBar_setDefaultUp_bool(QMenuBar *_self_, bool unnamed_arg_0) {
  return _self_->setDefaultUp(unnamed_arg_0);
}

extern "C" bool bg_QMenuBar_isDefaultUp_(QMenuBar *_self_) {
  return _self_->isDefaultUp();
}

extern "C" QSize* bg_QMenuBar_sizeHint_(QMenuBar *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QMenuBar_minimumSizeHint_(QMenuBar *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" int bg_QMenuBar_heightForWidth_int(QMenuBar *_self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" QRect* bg_QMenuBar_actionGeometry_QAction_X(QMenuBar *_self_, QAction* unnamed_arg_0) {
  return new (UseGC) QRect (_self_->actionGeometry(unnamed_arg_0));
}

extern "C" QAction* bg_QMenuBar_actionAt_const_QPoint_R(QMenuBar *_self_, const QPoint unnamed_arg_0) {
  return _self_->actionAt(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(QMenuBar *_self_, QWidget* w, Qt::Corner corner) {
  return _self_->setCornerWidget(w, corner);
}

extern "C" QWidget* bg_QMenuBar_cornerWidget_Qt__Corner(QMenuBar *_self_, Qt::Corner corner) {
  return _self_->cornerWidget(corner);
}

extern "C" bool bg_QMenuBar_isNativeMenuBar_(QMenuBar *_self_) {
  return _self_->isNativeMenuBar();
}

extern "C" void bg_QMenuBar_setNativeMenuBar_bool(QMenuBar *_self_, bool nativeMenuBar) {
  return _self_->setNativeMenuBar(nativeMenuBar);
}

extern "C" QPlatformMenuBar* bg_QMenuBar_platformMenuBar_(QMenuBar *_self_) {
  return _self_->platformMenuBar();
}

extern "C" void bg_QMenuBar_setVisible_bool(QMenuBar *_self_, bool visible) {
  return _self_->setVisible(visible);
}

extern "C" QMetaObject::Connection* bg_QMenuBar_triggered_CONNECT_CrystalProc_void__QActionX_(QMenuBar *_self_, CrystalProc<void, QAction*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenuBar::*)(QAction *))&QMenuBar::triggered, [_proc_](QAction* action){
  _proc_(action);
}));
}


extern "C" void bg_QMenuBar_triggered_QAction_X(QMenuBar *_self_, QAction* action) {
  return _self_->triggered(action);
}

extern "C" QMetaObject::Connection* bg_QMenuBar_hovered_CONNECT_CrystalProc_void__QActionX_(QMenuBar *_self_, CrystalProc<void, QAction*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenuBar::*)(QAction *))&QMenuBar::hovered, [_proc_](QAction* action){
  _proc_(action);
}));
}


extern "C" void bg_QMenuBar_hovered_QAction_X(QMenuBar *_self_, QAction* action) {
  return _self_->hovered(action);
}

extern "C" void bg_QMenuBar_changeEvent_QEvent_X(QMenuBar *_self_, QEvent* unnamed_arg_0) {
  return _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_keyPressEvent_QKeyEvent_X(QMenuBar *_self_, QKeyEvent* unnamed_arg_0) {
  return _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(QMenuBar *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_mousePressEvent_QMouseEvent_X(QMenuBar *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(QMenuBar *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_leaveEvent_QEvent_X(QMenuBar *_self_, QEvent* unnamed_arg_0) {
  return _self_->leaveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_paintEvent_QPaintEvent_X(QMenuBar *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_resizeEvent_QResizeEvent_X(QMenuBar *_self_, QResizeEvent* unnamed_arg_0) {
  return _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_actionEvent_QActionEvent_X(QMenuBar *_self_, QActionEvent* unnamed_arg_0) {
  return _self_->actionEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_focusOutEvent_QFocusEvent_X(QMenuBar *_self_, QFocusEvent* unnamed_arg_0) {
  return _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_focusInEvent_QFocusEvent_X(QMenuBar *_self_, QFocusEvent* unnamed_arg_0) {
  return _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_timerEvent_QTimerEvent_X(QMenuBar *_self_, QTimerEvent* unnamed_arg_0) {
  return _self_->timerEvent(unnamed_arg_0);
}

extern "C" bool bg_QMenuBar_eventFilter_QObject_X_QEvent_X(QMenuBar *_self_, QObject* unnamed_arg_0, QEvent* unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QMenuBar_event_QEvent_X(QMenuBar *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" void bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(QMenuBar *_self_, QStyleOptionMenuItem* option, const QAction* action) {
  return _self_->initStyleOption(option, action);
}

extern "C" const QMetaObject* bg_QMenu_metaObject_(QMenu *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QMenu_qt_metacast_const_char_X(QMenu *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QMenu::tr(s, c, n));
}

extern "C" CrystalString bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QMenu::trUtf8(s, c, n));
}

extern "C" QMenu* bg_QMenu_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QMenu(parent);
}

extern "C" QMenu* bg_QMenu_CONSTRUCT_const_QString_R_QWidget_X(const CrystalString title, QWidget* parent) {
  return new (UseGC) BgInherit_QMenu(QString::fromUtf8(title.ptr, title.size), parent);
}

extern "C" QAction* bg_QMenu_addAction_const_QString_R(QMenu *_self_, const CrystalString text) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction* bg_QMenu_addAction_const_QIcon_R_const_QString_R(QMenu *_self_, const QIcon& icon, const CrystalString text) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction* bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(QMenu *_self_, const CrystalString text, const QObject* receiver, const char* member) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction* bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(QMenu *_self_, const CrystalString text, const QObject* receiver, const char* member, const QKeySequence& shortcut) {
  return _self_->addAction(QString::fromUtf8(text.ptr, text.size), receiver, member, shortcut);
}

extern "C" QAction* bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(QMenu *_self_, const QIcon& icon, const CrystalString text, const QObject* receiver, const char* member) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size), receiver, member);
}

extern "C" QAction* bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(QMenu *_self_, const QIcon& icon, const CrystalString text, const QObject* receiver, const char* member, const QKeySequence& shortcut) {
  return _self_->addAction(icon, QString::fromUtf8(text.ptr, text.size), receiver, member, shortcut);
}

extern "C" QAction* bg_QMenu_addMenu_QMenu_X(QMenu *_self_, QMenu* menu) {
  return _self_->addMenu(menu);
}

extern "C" QMenu* bg_QMenu_addMenu_const_QString_R(QMenu *_self_, const CrystalString title) {
  return _self_->addMenu(QString::fromUtf8(title.ptr, title.size));
}

extern "C" QMenu* bg_QMenu_addMenu_const_QIcon_R_const_QString_R(QMenu *_self_, const QIcon& icon, const CrystalString title) {
  return _self_->addMenu(icon, QString::fromUtf8(title.ptr, title.size));
}

extern "C" QAction* bg_QMenu_addSeparator_(QMenu *_self_) {
  return _self_->addSeparator();
}

extern "C" QAction* bg_QMenu_addSection_const_QString_R(QMenu *_self_, const CrystalString text) {
  return _self_->addSection(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction* bg_QMenu_addSection_const_QIcon_R_const_QString_R(QMenu *_self_, const QIcon& icon, const CrystalString text) {
  return _self_->addSection(icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction* bg_QMenu_insertMenu_QAction_X_QMenu_X(QMenu *_self_, QAction* before, QMenu* menu) {
  return _self_->insertMenu(before, menu);
}

extern "C" QAction* bg_QMenu_insertSeparator_QAction_X(QMenu *_self_, QAction* before) {
  return _self_->insertSeparator(before);
}

extern "C" QAction* bg_QMenu_insertSection_QAction_X_const_QString_R(QMenu *_self_, QAction* before, const CrystalString text) {
  return _self_->insertSection(before, QString::fromUtf8(text.ptr, text.size));
}

extern "C" QAction* bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(QMenu *_self_, QAction* before, const QIcon& icon, const CrystalString text) {
  return _self_->insertSection(before, icon, QString::fromUtf8(text.ptr, text.size));
}

extern "C" bool bg_QMenu_isEmpty_(QMenu *_self_) {
  return _self_->isEmpty();
}

extern "C" void bg_QMenu_clear_(QMenu *_self_) {
  return _self_->clear();
}

extern "C" void bg_QMenu_setTearOffEnabled_bool(QMenu *_self_, bool unnamed_arg_0) {
  return _self_->setTearOffEnabled(unnamed_arg_0);
}

extern "C" bool bg_QMenu_isTearOffEnabled_(QMenu *_self_) {
  return _self_->isTearOffEnabled();
}

extern "C" bool bg_QMenu_isTearOffMenuVisible_(QMenu *_self_) {
  return _self_->isTearOffMenuVisible();
}

extern "C" void bg_QMenu_showTearOffMenu_(QMenu *_self_) {
  return _self_->showTearOffMenu();
}

extern "C" void bg_QMenu_showTearOffMenu_const_QPoint_R(QMenu *_self_, const QPoint pos) {
  return _self_->showTearOffMenu(pos);
}

extern "C" void bg_QMenu_hideTearOffMenu_(QMenu *_self_) {
  return _self_->hideTearOffMenu();
}

extern "C" void bg_QMenu_setDefaultAction_QAction_X(QMenu *_self_, QAction* unnamed_arg_0) {
  return _self_->setDefaultAction(unnamed_arg_0);
}

extern "C" QAction* bg_QMenu_defaultAction_(QMenu *_self_) {
  return _self_->defaultAction();
}

extern "C" void bg_QMenu_setActiveAction_QAction_X(QMenu *_self_, QAction* act) {
  return _self_->setActiveAction(act);
}

extern "C" QAction* bg_QMenu_activeAction_(QMenu *_self_) {
  return _self_->activeAction();
}

extern "C" void bg_QMenu_popup_const_QPoint_R_QAction_X(QMenu *_self_, const QPoint pos, QAction* at) {
  return _self_->popup(pos, at);
}

extern "C" QAction* bg_QMenu_exec_(QMenu *_self_) {
  return _self_->exec();
}

extern "C" QAction* bg_QMenu_exec_const_QPoint_R_QAction_X(QMenu *_self_, const QPoint pos, QAction* at) {
  return _self_->exec(pos, at);
}

extern "C" QSize* bg_QMenu_sizeHint_(QMenu *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QRect* bg_QMenu_actionGeometry_QAction_X(QMenu *_self_, QAction* unnamed_arg_0) {
  return new (UseGC) QRect (_self_->actionGeometry(unnamed_arg_0));
}

extern "C" QAction* bg_QMenu_actionAt_const_QPoint_R(QMenu *_self_, const QPoint unnamed_arg_0) {
  return _self_->actionAt(unnamed_arg_0);
}

extern "C" QAction* bg_QMenu_menuAction_(QMenu *_self_) {
  return _self_->menuAction();
}

extern "C" CrystalString bg_QMenu_title_(QMenu *_self_) {
  return qstring_to_crystal(_self_->title());
}

extern "C" void bg_QMenu_setTitle_const_QString_R(QMenu *_self_, const CrystalString title) {
  return _self_->setTitle(QString::fromUtf8(title.ptr, title.size));
}

extern "C" QIcon* bg_QMenu_icon_(QMenu *_self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" void bg_QMenu_setIcon_const_QIcon_R(QMenu *_self_, const QIcon& icon) {
  return _self_->setIcon(icon);
}

extern "C" void bg_QMenu_setNoReplayFor_QWidget_X(QMenu *_self_, QWidget* widget) {
  return _self_->setNoReplayFor(widget);
}

extern "C" QPlatformMenu* bg_QMenu_platformMenu_(QMenu *_self_) {
  return _self_->platformMenu();
}

extern "C" void bg_QMenu_setPlatformMenu_QPlatformMenu_X(QMenu *_self_, QPlatformMenu* platformMenu) {
  return _self_->setPlatformMenu(platformMenu);
}

extern "C" bool bg_QMenu_separatorsCollapsible_(QMenu *_self_) {
  return _self_->separatorsCollapsible();
}

extern "C" void bg_QMenu_setSeparatorsCollapsible_bool(QMenu *_self_, bool collapse) {
  return _self_->setSeparatorsCollapsible(collapse);
}

extern "C" bool bg_QMenu_toolTipsVisible_(QMenu *_self_) {
  return _self_->toolTipsVisible();
}

extern "C" void bg_QMenu_setToolTipsVisible_bool(QMenu *_self_, bool visible) {
  return _self_->setToolTipsVisible(visible);
}

extern "C" QMetaObject::Connection* bg_QMenu_aboutToShow_CONNECT_CrystalProc_void_(QMenu *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)())&QMenu::aboutToShow, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QMenu_aboutToShow_(QMenu *_self_) {
  return _self_->aboutToShow();
}

extern "C" QMetaObject::Connection* bg_QMenu_aboutToHide_CONNECT_CrystalProc_void_(QMenu *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)())&QMenu::aboutToHide, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QMenu_aboutToHide_(QMenu *_self_) {
  return _self_->aboutToHide();
}

extern "C" QMetaObject::Connection* bg_QMenu_triggered_CONNECT_CrystalProc_void__QActionX_(QMenu *_self_, CrystalProc<void, QAction*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)(QAction *))&QMenu::triggered, [_proc_](QAction* action){
  _proc_(action);
}));
}


extern "C" void bg_QMenu_triggered_QAction_X(QMenu *_self_, QAction* action) {
  return _self_->triggered(action);
}

extern "C" QMetaObject::Connection* bg_QMenu_hovered_CONNECT_CrystalProc_void__QActionX_(QMenu *_self_, CrystalProc<void, QAction*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMenu::*)(QAction *))&QMenu::hovered, [_proc_](QAction* action){
  _proc_(action);
}));
}


extern "C" void bg_QMenu_hovered_QAction_X(QMenu *_self_, QAction* action) {
  return _self_->hovered(action);
}

extern "C" int bg_QMenu_columnCount_(QMenu *_self_) {
  return _self_->columnCount();
}

extern "C" void bg_QMenu_changeEvent_QEvent_X(QMenu *_self_, QEvent* unnamed_arg_0) {
  return _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_keyPressEvent_QKeyEvent_X(QMenu *_self_, QKeyEvent* unnamed_arg_0) {
  return _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_mouseReleaseEvent_QMouseEvent_X(QMenu *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_mousePressEvent_QMouseEvent_X(QMenu *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_mouseMoveEvent_QMouseEvent_X(QMenu *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_wheelEvent_QWheelEvent_X(QMenu *_self_, QWheelEvent* unnamed_arg_0) {
  return _self_->wheelEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_enterEvent_QEvent_X(QMenu *_self_, QEvent* unnamed_arg_0) {
  return _self_->enterEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_leaveEvent_QEvent_X(QMenu *_self_, QEvent* unnamed_arg_0) {
  return _self_->leaveEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_hideEvent_QHideEvent_X(QMenu *_self_, QHideEvent* unnamed_arg_0) {
  return _self_->hideEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_paintEvent_QPaintEvent_X(QMenu *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_actionEvent_QActionEvent_X(QMenu *_self_, QActionEvent* unnamed_arg_0) {
  return _self_->actionEvent(unnamed_arg_0);
}

extern "C" void bg_QMenu_timerEvent_QTimerEvent_X(QMenu *_self_, QTimerEvent* unnamed_arg_0) {
  return _self_->timerEvent(unnamed_arg_0);
}

extern "C" bool bg_QMenu_event_QEvent_X(QMenu *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QMenu_focusNextPrevChild_bool(QMenu *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(QMenu *_self_, QStyleOptionMenuItem* option, const QAction* action) {
  return _self_->initStyleOption(option, action);
}

extern "C" QMenu* bg_QMenu_CONSTRUCT_QMenuPrivate_R_QWidget_X(QMenuPrivate& dd, QWidget* parent) {
  return new (UseGC) BgInherit_QMenu(dd, parent);
}

extern "C" const QMetaObject* bg_QAction_metaObject_(QAction *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QAction_qt_metacast_const_char_X(QAction *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QAction_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAction::tr(s, c, n));
}

extern "C" CrystalString bg_QAction_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QAction::trUtf8(s, c, n));
}

extern "C" QAction* bg_QAction_CONSTRUCT_QObject_X(QObject* parent) {
  return new (UseGC) BgInherit_QAction(parent);
}

extern "C" QAction* bg_QAction_CONSTRUCT_const_QString_R_QObject_X(const CrystalString text, QObject* parent) {
  return new (UseGC) BgInherit_QAction(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QAction* bg_QAction_CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(const QIcon& icon, const CrystalString text, QObject* parent) {
  return new (UseGC) BgInherit_QAction(icon, QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" void bg_QAction_setActionGroup_QActionGroup_X(QAction *_self_, QActionGroup* group) {
  return _self_->setActionGroup(group);
}

extern "C" QActionGroup* bg_QAction_actionGroup_(QAction *_self_) {
  return _self_->actionGroup();
}

extern "C" void bg_QAction_setIcon_const_QIcon_R(QAction *_self_, const QIcon& icon) {
  return _self_->setIcon(icon);
}

extern "C" QIcon* bg_QAction_icon_(QAction *_self_) {
  return new (UseGC) QIcon (_self_->icon());
}

extern "C" void bg_QAction_setText_const_QString_R(QAction *_self_, const CrystalString text) {
  return _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QAction_text_(QAction *_self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QAction_setIconText_const_QString_R(QAction *_self_, const CrystalString text) {
  return _self_->setIconText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QAction_iconText_(QAction *_self_) {
  return qstring_to_crystal(_self_->iconText());
}

extern "C" void bg_QAction_setToolTip_const_QString_R(QAction *_self_, const CrystalString tip) {
  return _self_->setToolTip(QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" CrystalString bg_QAction_toolTip_(QAction *_self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QAction_setStatusTip_const_QString_R(QAction *_self_, const CrystalString statusTip) {
  return _self_->setStatusTip(QString::fromUtf8(statusTip.ptr, statusTip.size));
}

extern "C" CrystalString bg_QAction_statusTip_(QAction *_self_) {
  return qstring_to_crystal(_self_->statusTip());
}

extern "C" void bg_QAction_setWhatsThis_const_QString_R(QAction *_self_, const CrystalString what) {
  return _self_->setWhatsThis(QString::fromUtf8(what.ptr, what.size));
}

extern "C" CrystalString bg_QAction_whatsThis_(QAction *_self_) {
  return qstring_to_crystal(_self_->whatsThis());
}

extern "C" void bg_QAction_setPriority_QAction__Priority(QAction *_self_, QAction::Priority priority) {
  return _self_->setPriority(priority);
}

extern "C" QAction::Priority bg_QAction_priority_(QAction *_self_) {
  return _self_->priority();
}

extern "C" QMenu* bg_QAction_menu_(QAction *_self_) {
  return _self_->menu();
}

extern "C" void bg_QAction_setMenu_QMenu_X(QAction *_self_, QMenu* menu) {
  return _self_->setMenu(menu);
}

extern "C" void bg_QAction_setSeparator_bool(QAction *_self_, bool b) {
  return _self_->setSeparator(b);
}

extern "C" bool bg_QAction_isSeparator_(QAction *_self_) {
  return _self_->isSeparator();
}

extern "C" void bg_QAction_setShortcut_const_QKeySequence_R(QAction *_self_, const QKeySequence& shortcut) {
  return _self_->setShortcut(shortcut);
}

extern "C" QKeySequence* bg_QAction_shortcut_(QAction *_self_) {
  return new (UseGC) QKeySequence (_self_->shortcut());
}

extern "C" void bg_QAction_setShortcuts_QKeySequence__StandardKey(QAction *_self_, QKeySequence::StandardKey unnamed_arg_0) {
  return _self_->setShortcuts(unnamed_arg_0);
}

extern "C" void bg_QAction_setShortcutContext_Qt__ShortcutContext(QAction *_self_, Qt::ShortcutContext context) {
  return _self_->setShortcutContext(context);
}

extern "C" Qt::ShortcutContext bg_QAction_shortcutContext_(QAction *_self_) {
  return _self_->shortcutContext();
}

extern "C" void bg_QAction_setAutoRepeat_bool(QAction *_self_, bool unnamed_arg_0) {
  return _self_->setAutoRepeat(unnamed_arg_0);
}

extern "C" bool bg_QAction_autoRepeat_(QAction *_self_) {
  return _self_->autoRepeat();
}

extern "C" void bg_QAction_setFont_const_QFont_R(QAction *_self_, const QFont& font) {
  return _self_->setFont(font);
}

extern "C" QFont* bg_QAction_font_(QAction *_self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QAction_setCheckable_bool(QAction *_self_, bool unnamed_arg_0) {
  return _self_->setCheckable(unnamed_arg_0);
}

extern "C" bool bg_QAction_isCheckable_(QAction *_self_) {
  return _self_->isCheckable();
}

extern "C" bool bg_QAction_isChecked_(QAction *_self_) {
  return _self_->isChecked();
}

extern "C" bool bg_QAction_isEnabled_(QAction *_self_) {
  return _self_->isEnabled();
}

extern "C" bool bg_QAction_isVisible_(QAction *_self_) {
  return _self_->isVisible();
}

extern "C" void bg_QAction_activate_QAction__ActionEvent(QAction *_self_, QAction::ActionEvent event) {
  return _self_->activate(event);
}

extern "C" bool bg_QAction_showStatusText_QWidget_X(QAction *_self_, QWidget* widget) {
  return _self_->showStatusText(widget);
}

extern "C" void bg_QAction_setMenuRole_QAction__MenuRole(QAction *_self_, QAction::MenuRole menuRole) {
  return _self_->setMenuRole(menuRole);
}

extern "C" QAction::MenuRole bg_QAction_menuRole_(QAction *_self_) {
  return _self_->menuRole();
}

extern "C" void bg_QAction_setIconVisibleInMenu_bool(QAction *_self_, bool visible) {
  return _self_->setIconVisibleInMenu(visible);
}

extern "C" bool bg_QAction_isIconVisibleInMenu_(QAction *_self_) {
  return _self_->isIconVisibleInMenu();
}

extern "C" QWidget* bg_QAction_parentWidget_(QAction *_self_) {
  return _self_->parentWidget();
}

extern "C" QList<QWidget *>* bg_QAction_associatedWidgets_(QAction *_self_) {
  return new (UseGC) QList<QWidget *> (_self_->associatedWidgets());
}

extern "C" bool bg_QAction_event_QEvent_X(QAction *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" QAction* bg_QAction_CONSTRUCT_QActionPrivate_R_QObject_X(QActionPrivate& dd, QObject* parent) {
  return new (UseGC) BgInherit_QAction(dd, parent);
}

extern "C" void bg_QAction_trigger_(QAction *_self_) {
  return _self_->trigger();
}

extern "C" void bg_QAction_hover_(QAction *_self_) {
  return _self_->hover();
}

extern "C" void bg_QAction_setChecked_bool(QAction *_self_, bool unnamed_arg_0) {
  return _self_->setChecked(unnamed_arg_0);
}

extern "C" void bg_QAction_toggle_(QAction *_self_) {
  return _self_->toggle();
}

extern "C" void bg_QAction_setEnabled_bool(QAction *_self_, bool unnamed_arg_0) {
  return _self_->setEnabled(unnamed_arg_0);
}

extern "C" void bg_QAction_setDisabled_bool(QAction *_self_, bool b) {
  return _self_->setDisabled(b);
}

extern "C" void bg_QAction_setVisible_bool(QAction *_self_, bool unnamed_arg_0) {
  return _self_->setVisible(unnamed_arg_0);
}

extern "C" QMetaObject::Connection* bg_QAction_changed_CONNECT_CrystalProc_void_(QAction *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)())&QAction::changed, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QAction_changed_(QAction *_self_) {
  return _self_->changed();
}

extern "C" QMetaObject::Connection* bg_QAction_triggered_CONNECT_CrystalProc_void__bool_(QAction *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)(bool))&QAction::triggered, [_proc_](bool checked){
  _proc_(checked);
}));
}


extern "C" void bg_QAction_triggered_bool(QAction *_self_, bool checked) {
  return _self_->triggered(checked);
}

extern "C" QMetaObject::Connection* bg_QAction_hovered_CONNECT_CrystalProc_void_(QAction *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)())&QAction::hovered, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QAction_hovered_(QAction *_self_) {
  return _self_->hovered();
}

extern "C" QMetaObject::Connection* bg_QAction_toggled_CONNECT_CrystalProc_void__bool_(QAction *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QAction::*)(bool))&QAction::toggled, [_proc_](bool unnamed_arg_0){
  _proc_(unnamed_arg_0);
}));
}


extern "C" void bg_QAction_toggled_bool(QAction *_self_, bool unnamed_arg_0) {
  return _self_->toggled(unnamed_arg_0);
}

extern "C" const QMetaObject* bg_QMainWindow_metaObject_(QMainWindow *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QMainWindow_qt_metacast_const_char_X(QMainWindow *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QMainWindow::tr(s, c, n));
}

extern "C" CrystalString bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QMainWindow::trUtf8(s, c, n));
}

extern "C" QMainWindow* bg_QMainWindow_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QMainWindow(parent);
}

extern "C" QMainWindow* bg_QMainWindow_CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget* parent, Qt::WindowFlags flags) {
  return new (UseGC) BgInherit_QMainWindow(parent, flags);
}

extern "C" QSize* bg_QMainWindow_iconSize_(QMainWindow *_self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QMainWindow_setIconSize_const_QSize_R(QMainWindow *_self_, const QSize& iconSize) {
  return _self_->setIconSize(iconSize);
}

extern "C" Qt::ToolButtonStyle bg_QMainWindow_toolButtonStyle_(QMainWindow *_self_) {
  return _self_->toolButtonStyle();
}

extern "C" void bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(QMainWindow *_self_, Qt::ToolButtonStyle toolButtonStyle) {
  return _self_->setToolButtonStyle(toolButtonStyle);
}

extern "C" bool bg_QMainWindow_isAnimated_(QMainWindow *_self_) {
  return _self_->isAnimated();
}

extern "C" bool bg_QMainWindow_isDockNestingEnabled_(QMainWindow *_self_) {
  return _self_->isDockNestingEnabled();
}

extern "C" bool bg_QMainWindow_documentMode_(QMainWindow *_self_) {
  return _self_->documentMode();
}

extern "C" void bg_QMainWindow_setDocumentMode_bool(QMainWindow *_self_, bool enabled) {
  return _self_->setDocumentMode(enabled);
}

extern "C" QTabWidget::TabShape bg_QMainWindow_tabShape_(QMainWindow *_self_) {
  return _self_->tabShape();
}

extern "C" void bg_QMainWindow_setTabShape_QTabWidget__TabShape(QMainWindow *_self_, QTabWidget::TabShape tabShape) {
  return _self_->setTabShape(tabShape);
}

extern "C" QTabWidget::TabPosition bg_QMainWindow_tabPosition_Qt__DockWidgetArea(QMainWindow *_self_, Qt::DockWidgetArea area) {
  return _self_->tabPosition(area);
}

extern "C" void bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(QMainWindow *_self_, Qt::DockWidgetAreas areas, QTabWidget::TabPosition tabPosition) {
  return _self_->setTabPosition(areas, tabPosition);
}

extern "C" void bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(QMainWindow *_self_, QMainWindow::DockOptions options) {
  return _self_->setDockOptions(options);
}

extern "C" QMainWindow::DockOptions bg_QMainWindow_dockOptions_(QMainWindow *_self_) {
  return _self_->dockOptions();
}

extern "C" bool bg_QMainWindow_isSeparator_const_QPoint_R(QMainWindow *_self_, const QPoint pos) {
  return _self_->isSeparator(pos);
}

extern "C" QMenuBar* bg_QMainWindow_menuBar_(QMainWindow *_self_) {
  return _self_->menuBar();
}

extern "C" void bg_QMainWindow_setMenuBar_QMenuBar_X(QMainWindow *_self_, QMenuBar* menubar) {
  return _self_->setMenuBar(menubar);
}

extern "C" QWidget* bg_QMainWindow_menuWidget_(QMainWindow *_self_) {
  return _self_->menuWidget();
}

extern "C" void bg_QMainWindow_setMenuWidget_QWidget_X(QMainWindow *_self_, QWidget* menubar) {
  return _self_->setMenuWidget(menubar);
}

extern "C" QStatusBar* bg_QMainWindow_statusBar_(QMainWindow *_self_) {
  return _self_->statusBar();
}

extern "C" void bg_QMainWindow_setStatusBar_QStatusBar_X(QMainWindow *_self_, QStatusBar* statusbar) {
  return _self_->setStatusBar(statusbar);
}

extern "C" QWidget* bg_QMainWindow_centralWidget_(QMainWindow *_self_) {
  return _self_->centralWidget();
}

extern "C" void bg_QMainWindow_setCentralWidget_QWidget_X(QMainWindow *_self_, QWidget* widget) {
  return _self_->setCentralWidget(widget);
}

extern "C" QWidget* bg_QMainWindow_takeCentralWidget_(QMainWindow *_self_) {
  return _self_->takeCentralWidget();
}

extern "C" void bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(QMainWindow *_self_, Qt::Corner corner, Qt::DockWidgetArea area) {
  return _self_->setCorner(corner, area);
}

extern "C" Qt::DockWidgetArea bg_QMainWindow_corner_Qt__Corner(QMainWindow *_self_, Qt::Corner corner) {
  return _self_->corner(corner);
}

extern "C" void bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(QMainWindow *_self_, Qt::ToolBarArea area) {
  return _self_->addToolBarBreak(area);
}

extern "C" void bg_QMainWindow_insertToolBarBreak_QToolBar_X(QMainWindow *_self_, QToolBar* before) {
  return _self_->insertToolBarBreak(before);
}

extern "C" void bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(QMainWindow *_self_, Qt::ToolBarArea area, QToolBar* toolbar) {
  return _self_->addToolBar(area, toolbar);
}

extern "C" void bg_QMainWindow_addToolBar_QToolBar_X(QMainWindow *_self_, QToolBar* toolbar) {
  return _self_->addToolBar(toolbar);
}

extern "C" QToolBar* bg_QMainWindow_addToolBar_const_QString_R(QMainWindow *_self_, const CrystalString title) {
  return _self_->addToolBar(QString::fromUtf8(title.ptr, title.size));
}

extern "C" void bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(QMainWindow *_self_, QToolBar* before, QToolBar* toolbar) {
  return _self_->insertToolBar(before, toolbar);
}

extern "C" void bg_QMainWindow_removeToolBar_QToolBar_X(QMainWindow *_self_, QToolBar* toolbar) {
  return _self_->removeToolBar(toolbar);
}

extern "C" void bg_QMainWindow_removeToolBarBreak_QToolBar_X(QMainWindow *_self_, QToolBar* before) {
  return _self_->removeToolBarBreak(before);
}

extern "C" bool bg_QMainWindow_unifiedTitleAndToolBarOnMac_(QMainWindow *_self_) {
  return _self_->unifiedTitleAndToolBarOnMac();
}

extern "C" Qt::ToolBarArea bg_QMainWindow_toolBarArea_QToolBar_X(QMainWindow *_self_, QToolBar* toolbar) {
  return _self_->toolBarArea(toolbar);
}

extern "C" bool bg_QMainWindow_toolBarBreak_QToolBar_X(QMainWindow *_self_, QToolBar* toolbar) {
  return _self_->toolBarBreak(toolbar);
}

extern "C" void bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(QMainWindow *_self_, Qt::DockWidgetArea area, QDockWidget* dockwidget) {
  return _self_->addDockWidget(area, dockwidget);
}

extern "C" void bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(QMainWindow *_self_, Qt::DockWidgetArea area, QDockWidget* dockwidget, Qt::Orientation orientation) {
  return _self_->addDockWidget(area, dockwidget, orientation);
}

extern "C" void bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(QMainWindow *_self_, QDockWidget* after, QDockWidget* dockwidget, Qt::Orientation orientation) {
  return _self_->splitDockWidget(after, dockwidget, orientation);
}

extern "C" void bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(QMainWindow *_self_, QDockWidget* first, QDockWidget* second) {
  return _self_->tabifyDockWidget(first, second);
}

extern "C" void bg_QMainWindow_removeDockWidget_QDockWidget_X(QMainWindow *_self_, QDockWidget* dockwidget) {
  return _self_->removeDockWidget(dockwidget);
}

extern "C" bool bg_QMainWindow_restoreDockWidget_QDockWidget_X(QMainWindow *_self_, QDockWidget* dockwidget) {
  return _self_->restoreDockWidget(dockwidget);
}

extern "C" Qt::DockWidgetArea bg_QMainWindow_dockWidgetArea_QDockWidget_X(QMainWindow *_self_, QDockWidget* dockwidget) {
  return _self_->dockWidgetArea(dockwidget);
}

extern "C" QByteArray* bg_QMainWindow_saveState_int(QMainWindow *_self_, int version) {
  return new (UseGC) QByteArray (_self_->saveState(version));
}

extern "C" bool bg_QMainWindow_restoreState_const_QByteArray_R_int(QMainWindow *_self_, const QByteArray& state, int version) {
  return _self_->restoreState(state, version);
}

extern "C" QMenu* bg_QMainWindow_createPopupMenu_(QMainWindow *_self_) {
  return _self_->createPopupMenu();
}

extern "C" void bg_QMainWindow_setAnimated_bool(QMainWindow *_self_, bool enabled) {
  return _self_->setAnimated(enabled);
}

extern "C" void bg_QMainWindow_setDockNestingEnabled_bool(QMainWindow *_self_, bool enabled) {
  return _self_->setDockNestingEnabled(enabled);
}

extern "C" void bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(QMainWindow *_self_, bool set) {
  return _self_->setUnifiedTitleAndToolBarOnMac(set);
}

extern "C" QMetaObject::Connection* bg_QMainWindow_iconSizeChanged_CONNECT_CrystalProc_void__const_QSizeR_(QMainWindow *_self_, CrystalProc<void, const QSize*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMainWindow::*)(const QSize &))&QMainWindow::iconSizeChanged, [_proc_](const QSize& iconSize){
  _proc_(new (UseGC) QSize (iconSize));
}));
}


extern "C" void bg_QMainWindow_iconSizeChanged_const_QSize_R(QMainWindow *_self_, const QSize& iconSize) {
  return _self_->iconSizeChanged(iconSize);
}

extern "C" QMetaObject::Connection* bg_QMainWindow_toolButtonStyleChanged_CONNECT_CrystalProc_void__Qt__ToolButtonStyle_(QMainWindow *_self_, CrystalProc<void, Qt::ToolButtonStyle> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMainWindow::*)(Qt::ToolButtonStyle))&QMainWindow::toolButtonStyleChanged, [_proc_](Qt::ToolButtonStyle toolButtonStyle){
  _proc_(toolButtonStyle);
}));
}


extern "C" void bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(QMainWindow *_self_, Qt::ToolButtonStyle toolButtonStyle) {
  return _self_->toolButtonStyleChanged(toolButtonStyle);
}

extern "C" QMetaObject::Connection* bg_QMainWindow_tabifiedDockWidgetActivated_CONNECT_CrystalProc_void__QDockWidgetX_(QMainWindow *_self_, CrystalProc<void, QDockWidget*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QMainWindow::*)(QDockWidget *))&QMainWindow::tabifiedDockWidgetActivated, [_proc_](QDockWidget* dockWidget){
  _proc_(dockWidget);
}));
}


extern "C" void bg_QMainWindow_tabifiedDockWidgetActivated_QDockWidget_X(QMainWindow *_self_, QDockWidget* dockWidget) {
  return _self_->tabifiedDockWidgetActivated(dockWidget);
}

extern "C" void bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(QMainWindow *_self_, QContextMenuEvent* event) {
  return _self_->contextMenuEvent(event);
}

extern "C" bool bg_QMainWindow_event_QEvent_X(QMainWindow *_self_, QEvent* event) {
  return _self_->event(event);
}

extern "C" const QMetaObject* bg_QDialog_metaObject_(QDialog *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QDialog_qt_metacast_const_char_X(QDialog *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QDialog::tr(s, c, n));
}

extern "C" CrystalString bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QDialog::trUtf8(s, c, n));
}

extern "C" QDialog* bg_QDialog_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QDialog(parent);
}

extern "C" QDialog* bg_QDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QDialog(parent, f);
}

extern "C" int bg_QDialog_result_(QDialog *_self_) {
  return _self_->result();
}

extern "C" void bg_QDialog_setVisible_bool(QDialog *_self_, bool visible) {
  return _self_->setVisible(visible);
}

extern "C" void bg_QDialog_setOrientation_Qt__Orientation(QDialog *_self_, Qt::Orientation orientation) {
  return _self_->setOrientation(orientation);
}

extern "C" Qt::Orientation bg_QDialog_orientation_(QDialog *_self_) {
  return _self_->orientation();
}

extern "C" void bg_QDialog_setExtension_QWidget_X(QDialog *_self_, QWidget* extension) {
  return _self_->setExtension(extension);
}

extern "C" QWidget* bg_QDialog_extension_(QDialog *_self_) {
  return _self_->extension();
}

extern "C" QSize* bg_QDialog_sizeHint_(QDialog *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QDialog_minimumSizeHint_(QDialog *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QDialog_setSizeGripEnabled_bool(QDialog *_self_, bool unnamed_arg_0) {
  return _self_->setSizeGripEnabled(unnamed_arg_0);
}

extern "C" bool bg_QDialog_isSizeGripEnabled_(QDialog *_self_) {
  return _self_->isSizeGripEnabled();
}

extern "C" void bg_QDialog_setModal_bool(QDialog *_self_, bool modal) {
  return _self_->setModal(modal);
}

extern "C" void bg_QDialog_setResult_int(QDialog *_self_, int r) {
  return _self_->setResult(r);
}

extern "C" QMetaObject::Connection* bg_QDialog_finished_CONNECT_CrystalProc_void__int_(QDialog *_self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDialog::*)(int))&QDialog::finished, [_proc_](int result){
  _proc_(result);
}));
}


extern "C" void bg_QDialog_finished_int(QDialog *_self_, int result) {
  return _self_->finished(result);
}

extern "C" QMetaObject::Connection* bg_QDialog_accepted_CONNECT_CrystalProc_void_(QDialog *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDialog::*)())&QDialog::accepted, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QDialog_accepted_(QDialog *_self_) {
  return _self_->accepted();
}

extern "C" QMetaObject::Connection* bg_QDialog_rejected_CONNECT_CrystalProc_void_(QDialog *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QDialog::*)())&QDialog::rejected, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QDialog_rejected_(QDialog *_self_) {
  return _self_->rejected();
}

extern "C" void bg_QDialog_open_(QDialog *_self_) {
  return _self_->open();
}

extern "C" int bg_QDialog_exec_(QDialog *_self_) {
  return _self_->exec();
}

extern "C" void bg_QDialog_done_int(QDialog *_self_, int unnamed_arg_0) {
  return _self_->done(unnamed_arg_0);
}

extern "C" void bg_QDialog_accept_(QDialog *_self_) {
  return _self_->accept();
}

extern "C" void bg_QDialog_reject_(QDialog *_self_) {
  return _self_->reject();
}

extern "C" void bg_QDialog_showExtension_bool(QDialog *_self_, bool unnamed_arg_0) {
  return _self_->showExtension(unnamed_arg_0);
}

extern "C" QDialog* bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X(QDialogPrivate& unnamed_arg_0, QWidget* parent) {
  return new (UseGC) BgInherit_QDialog(unnamed_arg_0, parent);
}

extern "C" QDialog* bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(QDialogPrivate& unnamed_arg_0, QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QDialog(unnamed_arg_0, parent, f);
}

extern "C" void bg_QDialog_keyPressEvent_QKeyEvent_X(QDialog *_self_, QKeyEvent* unnamed_arg_0) {
  return _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_closeEvent_QCloseEvent_X(QDialog *_self_, QCloseEvent* unnamed_arg_0) {
  return _self_->closeEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_showEvent_QShowEvent_X(QDialog *_self_, QShowEvent* unnamed_arg_0) {
  return _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_resizeEvent_QResizeEvent_X(QDialog *_self_, QResizeEvent* unnamed_arg_0) {
  return _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QDialog_contextMenuEvent_QContextMenuEvent_X(QDialog *_self_, QContextMenuEvent* unnamed_arg_0) {
  return _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" bool bg_QDialog_eventFilter_QObject_X_QEvent_X(QDialog *_self_, QObject* unnamed_arg_0, QEvent* unnamed_arg_1) {
  return _self_->eventFilter(unnamed_arg_0, unnamed_arg_1);
}

extern "C" void bg_QDialog_adjustPosition_QWidget_X(QDialog *_self_, QWidget* unnamed_arg_0) {
  return _self_->adjustPosition(unnamed_arg_0);
}

extern "C" const QMetaObject* bg_QLabel_metaObject_(QLabel *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QLabel_qt_metacast_const_char_X(QLabel *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLabel::tr(s, c, n));
}

extern "C" CrystalString bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLabel::trUtf8(s, c, n));
}

extern "C" QLabel* bg_QLabel_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QLabel(parent);
}

extern "C" QLabel* bg_QLabel_CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QLabel(parent, f);
}

extern "C" QLabel* bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget* parent) {
  return new (UseGC) BgInherit_QLabel(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QLabel* bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(const CrystalString text, QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QLabel(QString::fromUtf8(text.ptr, text.size), parent, f);
}

extern "C" CrystalString bg_QLabel_text_(QLabel *_self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" const QPixmap* bg_QLabel_pixmap_(QLabel *_self_) {
  return _self_->pixmap();
}

extern "C" const QPicture* bg_QLabel_picture_(QLabel *_self_) {
  return _self_->picture();
}

extern "C" QMovie* bg_QLabel_movie_(QLabel *_self_) {
  return _self_->movie();
}

extern "C" Qt::TextFormat bg_QLabel_textFormat_(QLabel *_self_) {
  return _self_->textFormat();
}

extern "C" void bg_QLabel_setTextFormat_Qt__TextFormat(QLabel *_self_, Qt::TextFormat unnamed_arg_0) {
  return _self_->setTextFormat(unnamed_arg_0);
}

extern "C" Qt::Alignment bg_QLabel_alignment_(QLabel *_self_) {
  return _self_->alignment();
}

extern "C" void bg_QLabel_setAlignment_Qt__Alignment(QLabel *_self_, Qt::Alignment unnamed_arg_0) {
  return _self_->setAlignment(unnamed_arg_0);
}

extern "C" void bg_QLabel_setWordWrap_bool(QLabel *_self_, bool on) {
  return _self_->setWordWrap(on);
}

extern "C" bool bg_QLabel_wordWrap_(QLabel *_self_) {
  return _self_->wordWrap();
}

extern "C" int bg_QLabel_indent_(QLabel *_self_) {
  return _self_->indent();
}

extern "C" void bg_QLabel_setIndent_int(QLabel *_self_, int unnamed_arg_0) {
  return _self_->setIndent(unnamed_arg_0);
}

extern "C" int bg_QLabel_margin_(QLabel *_self_) {
  return _self_->margin();
}

extern "C" void bg_QLabel_setMargin_int(QLabel *_self_, int unnamed_arg_0) {
  return _self_->setMargin(unnamed_arg_0);
}

extern "C" bool bg_QLabel_hasScaledContents_(QLabel *_self_) {
  return _self_->hasScaledContents();
}

extern "C" void bg_QLabel_setScaledContents_bool(QLabel *_self_, bool unnamed_arg_0) {
  return _self_->setScaledContents(unnamed_arg_0);
}

extern "C" QSize* bg_QLabel_sizeHint_(QLabel *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QLabel_minimumSizeHint_(QLabel *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QLabel_setBuddy_QWidget_X(QLabel *_self_, QWidget* unnamed_arg_0) {
  return _self_->setBuddy(unnamed_arg_0);
}

extern "C" QWidget* bg_QLabel_buddy_(QLabel *_self_) {
  return _self_->buddy();
}

extern "C" int bg_QLabel_heightForWidth_int(QLabel *_self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" bool bg_QLabel_openExternalLinks_(QLabel *_self_) {
  return _self_->openExternalLinks();
}

extern "C" void bg_QLabel_setOpenExternalLinks_bool(QLabel *_self_, bool open) {
  return _self_->setOpenExternalLinks(open);
}

extern "C" void bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(QLabel *_self_, Qt::TextInteractionFlags flags) {
  return _self_->setTextInteractionFlags(flags);
}

extern "C" Qt::TextInteractionFlags bg_QLabel_textInteractionFlags_(QLabel *_self_) {
  return _self_->textInteractionFlags();
}

extern "C" void bg_QLabel_setSelection_int_int(QLabel *_self_, int unnamed_arg_0, int unnamed_arg_1) {
  return _self_->setSelection(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QLabel_hasSelectedText_(QLabel *_self_) {
  return _self_->hasSelectedText();
}

extern "C" CrystalString bg_QLabel_selectedText_(QLabel *_self_) {
  return qstring_to_crystal(_self_->selectedText());
}

extern "C" int bg_QLabel_selectionStart_(QLabel *_self_) {
  return _self_->selectionStart();
}

extern "C" void bg_QLabel_setText_const_QString_R(QLabel *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QLabel_setPixmap_const_QPixmap_R(QLabel *_self_, const QPixmap& unnamed_arg_0) {
  return _self_->setPixmap(unnamed_arg_0);
}

extern "C" void bg_QLabel_setPicture_const_QPicture_R(QLabel *_self_, const QPicture& unnamed_arg_0) {
  return _self_->setPicture(unnamed_arg_0);
}

extern "C" void bg_QLabel_setMovie_QMovie_X(QLabel *_self_, QMovie* movie) {
  return _self_->setMovie(movie);
}

extern "C" void bg_QLabel_setNum_int(QLabel *_self_, int unnamed_arg_0) {
  return _self_->setNum(unnamed_arg_0);
}

extern "C" void bg_QLabel_setNum_double(QLabel *_self_, double unnamed_arg_0) {
  return _self_->setNum(unnamed_arg_0);
}

extern "C" void bg_QLabel_clear_(QLabel *_self_) {
  return _self_->clear();
}

extern "C" QMetaObject::Connection* bg_QLabel_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(QLabel *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLabel::*)(const QString &))&QLabel::linkActivated, [_proc_](const QString& link){
  _proc_(qstring_to_crystal(link));
}));
}


extern "C" void bg_QLabel_linkActivated_const_QString_R(QLabel *_self_, const CrystalString link) {
  return _self_->linkActivated(QString::fromUtf8(link.ptr, link.size));
}

extern "C" QMetaObject::Connection* bg_QLabel_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(QLabel *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLabel::*)(const QString &))&QLabel::linkHovered, [_proc_](const QString& link){
  _proc_(qstring_to_crystal(link));
}));
}


extern "C" void bg_QLabel_linkHovered_const_QString_R(QLabel *_self_, const CrystalString link) {
  return _self_->linkHovered(QString::fromUtf8(link.ptr, link.size));
}

extern "C" bool bg_QLabel_event_QEvent_X(QLabel *_self_, QEvent* e) {
  return _self_->event(e);
}

extern "C" void bg_QLabel_keyPressEvent_QKeyEvent_X(QLabel *_self_, QKeyEvent* ev) {
  return _self_->keyPressEvent(ev);
}

extern "C" void bg_QLabel_paintEvent_QPaintEvent_X(QLabel *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QLabel_changeEvent_QEvent_X(QLabel *_self_, QEvent* unnamed_arg_0) {
  return _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QLabel_mousePressEvent_QMouseEvent_X(QLabel *_self_, QMouseEvent* ev) {
  return _self_->mousePressEvent(ev);
}

extern "C" void bg_QLabel_mouseMoveEvent_QMouseEvent_X(QLabel *_self_, QMouseEvent* ev) {
  return _self_->mouseMoveEvent(ev);
}

extern "C" void bg_QLabel_mouseReleaseEvent_QMouseEvent_X(QLabel *_self_, QMouseEvent* ev) {
  return _self_->mouseReleaseEvent(ev);
}

extern "C" void bg_QLabel_contextMenuEvent_QContextMenuEvent_X(QLabel *_self_, QContextMenuEvent* ev) {
  return _self_->contextMenuEvent(ev);
}

extern "C" void bg_QLabel_focusInEvent_QFocusEvent_X(QLabel *_self_, QFocusEvent* ev) {
  return _self_->focusInEvent(ev);
}

extern "C" void bg_QLabel_focusOutEvent_QFocusEvent_X(QLabel *_self_, QFocusEvent* ev) {
  return _self_->focusOutEvent(ev);
}

extern "C" bool bg_QLabel_focusNextPrevChild_bool(QLabel *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" const QMetaObject* bg_QLCDNumber_metaObject_(QLCDNumber *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QLCDNumber_qt_metacast_const_char_X(QLCDNumber *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLCDNumber::tr(s, c, n));
}

extern "C" CrystalString bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLCDNumber::trUtf8(s, c, n));
}

extern "C" QLCDNumber* bg_QLCDNumber_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QLCDNumber(parent);
}

extern "C" QLCDNumber* bg_QLCDNumber_CONSTRUCT_uint_QWidget_X(uint numDigits, QWidget* parent) {
  return new (UseGC) BgInherit_QLCDNumber(numDigits, parent);
}

extern "C" bool bg_QLCDNumber_smallDecimalPoint_(QLCDNumber *_self_) {
  return _self_->smallDecimalPoint();
}

extern "C" int bg_QLCDNumber_digitCount_(QLCDNumber *_self_) {
  return _self_->digitCount();
}

extern "C" void bg_QLCDNumber_setDigitCount_int(QLCDNumber *_self_, int nDigits) {
  return _self_->setDigitCount(nDigits);
}

extern "C" bool bg_QLCDNumber_checkOverflow_double(QLCDNumber *_self_, double num) {
  return _self_->checkOverflow(num);
}

extern "C" bool bg_QLCDNumber_checkOverflow_int(QLCDNumber *_self_, int num) {
  return _self_->checkOverflow(num);
}

extern "C" QLCDNumber::Mode bg_QLCDNumber_mode_(QLCDNumber *_self_) {
  return _self_->mode();
}

extern "C" void bg_QLCDNumber_setMode_QLCDNumber__Mode(QLCDNumber *_self_, QLCDNumber::Mode unnamed_arg_0) {
  return _self_->setMode(unnamed_arg_0);
}

extern "C" QLCDNumber::SegmentStyle bg_QLCDNumber_segmentStyle_(QLCDNumber *_self_) {
  return _self_->segmentStyle();
}

extern "C" void bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(QLCDNumber *_self_, QLCDNumber::SegmentStyle unnamed_arg_0) {
  return _self_->setSegmentStyle(unnamed_arg_0);
}

extern "C" double bg_QLCDNumber_value_(QLCDNumber *_self_) {
  return _self_->value();
}

extern "C" int bg_QLCDNumber_intValue_(QLCDNumber *_self_) {
  return _self_->intValue();
}

extern "C" QSize* bg_QLCDNumber_sizeHint_(QLCDNumber *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" void bg_QLCDNumber_display_const_QString_R(QLCDNumber *_self_, const CrystalString str) {
  return _self_->display(QString::fromUtf8(str.ptr, str.size));
}

extern "C" void bg_QLCDNumber_display_int(QLCDNumber *_self_, int num) {
  return _self_->display(num);
}

extern "C" void bg_QLCDNumber_display_double(QLCDNumber *_self_, double num) {
  return _self_->display(num);
}

extern "C" void bg_QLCDNumber_setHexMode_(QLCDNumber *_self_) {
  return _self_->setHexMode();
}

extern "C" void bg_QLCDNumber_setDecMode_(QLCDNumber *_self_) {
  return _self_->setDecMode();
}

extern "C" void bg_QLCDNumber_setOctMode_(QLCDNumber *_self_) {
  return _self_->setOctMode();
}

extern "C" void bg_QLCDNumber_setBinMode_(QLCDNumber *_self_) {
  return _self_->setBinMode();
}

extern "C" void bg_QLCDNumber_setSmallDecimalPoint_bool(QLCDNumber *_self_, bool unnamed_arg_0) {
  return _self_->setSmallDecimalPoint(unnamed_arg_0);
}

extern "C" QMetaObject::Connection* bg_QLCDNumber_overflow_CONNECT_CrystalProc_void_(QLCDNumber *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLCDNumber::*)())&QLCDNumber::overflow, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QLCDNumber_overflow_(QLCDNumber *_self_) {
  return _self_->overflow();
}

extern "C" bool bg_QLCDNumber_event_QEvent_X(QLCDNumber *_self_, QEvent* e) {
  return _self_->event(e);
}

extern "C" void bg_QLCDNumber_paintEvent_QPaintEvent_X(QLCDNumber *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" const QMetaObject* bg_QPushButton_metaObject_(QPushButton *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QPushButton_qt_metacast_const_char_X(QPushButton *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QPushButton::tr(s, c, n));
}

extern "C" CrystalString bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QPushButton::trUtf8(s, c, n));
}

extern "C" QPushButton* bg_QPushButton_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QPushButton(parent);
}

extern "C" QPushButton* bg_QPushButton_CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget* parent) {
  return new (UseGC) BgInherit_QPushButton(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QPushButton* bg_QPushButton_CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(const QIcon& icon, const CrystalString text, QWidget* parent) {
  return new (UseGC) BgInherit_QPushButton(icon, QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QSize* bg_QPushButton_sizeHint_(QPushButton *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QPushButton_minimumSizeHint_(QPushButton *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" bool bg_QPushButton_autoDefault_(QPushButton *_self_) {
  return _self_->autoDefault();
}

extern "C" void bg_QPushButton_setAutoDefault_bool(QPushButton *_self_, bool unnamed_arg_0) {
  return _self_->setAutoDefault(unnamed_arg_0);
}

extern "C" bool bg_QPushButton_isDefault_(QPushButton *_self_) {
  return _self_->isDefault();
}

extern "C" void bg_QPushButton_setDefault_bool(QPushButton *_self_, bool unnamed_arg_0) {
  return _self_->setDefault(unnamed_arg_0);
}

extern "C" void bg_QPushButton_setMenu_QMenu_X(QPushButton *_self_, QMenu* menu) {
  return _self_->setMenu(menu);
}

extern "C" QMenu* bg_QPushButton_menu_(QPushButton *_self_) {
  return _self_->menu();
}

extern "C" void bg_QPushButton_setFlat_bool(QPushButton *_self_, bool unnamed_arg_0) {
  return _self_->setFlat(unnamed_arg_0);
}

extern "C" bool bg_QPushButton_isFlat_(QPushButton *_self_) {
  return _self_->isFlat();
}

extern "C" void bg_QPushButton_showMenu_(QPushButton *_self_) {
  return _self_->showMenu();
}

extern "C" bool bg_QPushButton_event_QEvent_X(QPushButton *_self_, QEvent* e) {
  return _self_->event(e);
}

extern "C" void bg_QPushButton_paintEvent_QPaintEvent_X(QPushButton *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_keyPressEvent_QKeyEvent_X(QPushButton *_self_, QKeyEvent* unnamed_arg_0) {
  return _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_focusInEvent_QFocusEvent_X(QPushButton *_self_, QFocusEvent* unnamed_arg_0) {
  return _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_focusOutEvent_QFocusEvent_X(QPushButton *_self_, QFocusEvent* unnamed_arg_0) {
  return _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QPushButton_initStyleOption_QStyleOptionButton_X(QPushButton *_self_, QStyleOptionButton* option) {
  return _self_->initStyleOption(option);
}

extern "C" QPushButton* bg_QPushButton_CONSTRUCT_QPushButtonPrivate_R_QWidget_X(QPushButtonPrivate& dd, QWidget* parent) {
  return new (UseGC) BgInherit_QPushButton(dd, parent);
}

extern "C" const QMetaObject* bg_QCheckBox_metaObject_(QCheckBox *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QCheckBox_qt_metacast_const_char_X(QCheckBox *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QCheckBox::tr(s, c, n));
}

extern "C" CrystalString bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QCheckBox::trUtf8(s, c, n));
}

extern "C" QCheckBox* bg_QCheckBox_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QCheckBox(parent);
}

extern "C" QCheckBox* bg_QCheckBox_CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget* parent) {
  return new (UseGC) BgInherit_QCheckBox(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QSize* bg_QCheckBox_sizeHint_(QCheckBox *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QCheckBox_minimumSizeHint_(QCheckBox *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" void bg_QCheckBox_setTristate_bool(QCheckBox *_self_, bool y) {
  return _self_->setTristate(y);
}

extern "C" bool bg_QCheckBox_isTristate_(QCheckBox *_self_) {
  return _self_->isTristate();
}

extern "C" Qt::CheckState bg_QCheckBox_checkState_(QCheckBox *_self_) {
  return _self_->checkState();
}

extern "C" void bg_QCheckBox_setCheckState_Qt__CheckState(QCheckBox *_self_, Qt::CheckState state) {
  return _self_->setCheckState(state);
}

extern "C" QMetaObject::Connection* bg_QCheckBox_stateChanged_CONNECT_CrystalProc_void__int_(QCheckBox *_self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCheckBox::*)(int))&QCheckBox::stateChanged, [_proc_](int unnamed_arg_0){
  _proc_(unnamed_arg_0);
}));
}


extern "C" void bg_QCheckBox_stateChanged_int(QCheckBox *_self_, int unnamed_arg_0) {
  return _self_->stateChanged(unnamed_arg_0);
}

extern "C" bool bg_QCheckBox_event_QEvent_X(QCheckBox *_self_, QEvent* e) {
  return _self_->event(e);
}

extern "C" bool bg_QCheckBox_hitButton_const_QPoint_R(QCheckBox *_self_, const QPoint pos) {
  return _self_->hitButton(pos);
}

extern "C" void bg_QCheckBox_checkStateSet_(QCheckBox *_self_) {
  return _self_->checkStateSet();
}

extern "C" void bg_QCheckBox_nextCheckState_(QCheckBox *_self_) {
  return _self_->nextCheckState();
}

extern "C" void bg_QCheckBox_paintEvent_QPaintEvent_X(QCheckBox *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(QCheckBox *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QCheckBox_initStyleOption_QStyleOptionButton_X(QCheckBox *_self_, QStyleOptionButton* option) {
  return _self_->initStyleOption(option);
}

extern "C" const QMetaObject* bg_QCoreApplication_metaObject_(QCoreApplication *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QCoreApplication_qt_metacast_const_char_X(QCoreApplication *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QCoreApplication::tr(s, c, n));
}

extern "C" CrystalString bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QCoreApplication::trUtf8(s, c, n));
}

extern "C" QCoreApplication* bg_QCoreApplication_CONSTRUCT_int_R_char_XX_int(int& argc, char** argv, int unnamed_arg_2) {
  return new (UseGC) BgInherit_QCoreApplication(argc, argv, unnamed_arg_2);
}

extern "C" QStringList* bg_QCoreApplication_arguments_STATIC_() {
  return new (UseGC) QStringList (QCoreApplication::arguments());
}

extern "C" void bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(Qt::ApplicationAttribute attribute, bool on) {
  return QCoreApplication::setAttribute(attribute, on);
}

extern "C" bool bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(Qt::ApplicationAttribute attribute) {
  return QCoreApplication::testAttribute(attribute);
}

extern "C" void bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(const CrystalString orgDomain) {
  return QCoreApplication::setOrganizationDomain(QString::fromUtf8(orgDomain.ptr, orgDomain.size));
}

extern "C" CrystalString bg_QCoreApplication_organizationDomain_STATIC_() {
  return qstring_to_crystal(QCoreApplication::organizationDomain());
}

extern "C" void bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(const CrystalString orgName) {
  return QCoreApplication::setOrganizationName(QString::fromUtf8(orgName.ptr, orgName.size));
}

extern "C" CrystalString bg_QCoreApplication_organizationName_STATIC_() {
  return qstring_to_crystal(QCoreApplication::organizationName());
}

extern "C" void bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(const CrystalString application) {
  return QCoreApplication::setApplicationName(QString::fromUtf8(application.ptr, application.size));
}

extern "C" CrystalString bg_QCoreApplication_applicationName_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationName());
}

extern "C" void bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(const CrystalString version) {
  return QCoreApplication::setApplicationVersion(QString::fromUtf8(version.ptr, version.size));
}

extern "C" CrystalString bg_QCoreApplication_applicationVersion_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationVersion());
}

extern "C" void bg_QCoreApplication_setSetuidAllowed_STATIC_bool(bool allow) {
  return QCoreApplication::setSetuidAllowed(allow);
}

extern "C" bool bg_QCoreApplication_isSetuidAllowed_STATIC_() {
  return QCoreApplication::isSetuidAllowed();
}

extern "C" QCoreApplication* bg_QCoreApplication_instance_STATIC_() {
  return QCoreApplication::instance();
}

extern "C" int bg_QCoreApplication_exec_STATIC_() {
  return QCoreApplication::exec();
}

extern "C" void bg_QCoreApplication_processEvents_STATIC_() {
  return QCoreApplication::processEvents();
}

extern "C" void bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(QEventLoop::ProcessEventsFlags flags) {
  return QCoreApplication::processEvents(flags);
}

extern "C" void bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(QEventLoop::ProcessEventsFlags flags, int maxtime) {
  return QCoreApplication::processEvents(flags, maxtime);
}

extern "C" void bg_QCoreApplication_exit_STATIC_int(int retcode) {
  return QCoreApplication::exit(retcode);
}

extern "C" bool bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(QObject* receiver, QEvent* event) {
  return QCoreApplication::sendEvent(receiver, event);
}

extern "C" void bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(QObject* receiver, QEvent* event, int priority) {
  return QCoreApplication::postEvent(receiver, event, priority);
}

extern "C" void bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(QObject* receiver, int event_type) {
  return QCoreApplication::sendPostedEvents(receiver, event_type);
}

extern "C" void bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(QObject* receiver, int eventType) {
  return QCoreApplication::removePostedEvents(receiver, eventType);
}

extern "C" bool bg_QCoreApplication_hasPendingEvents_STATIC_() {
  return QCoreApplication::hasPendingEvents();
}

extern "C" QAbstractEventDispatcher* bg_QCoreApplication_eventDispatcher_STATIC_() {
  return QCoreApplication::eventDispatcher();
}

extern "C" void bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(QAbstractEventDispatcher* eventDispatcher) {
  return QCoreApplication::setEventDispatcher(eventDispatcher);
}

extern "C" bool bg_QCoreApplication_notify_QObject_X_QEvent_X(QCoreApplication *_self_, QObject* unnamed_arg_0, QEvent* unnamed_arg_1) {
  return _self_->notify(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QCoreApplication_startingUp_STATIC_() {
  return QCoreApplication::startingUp();
}

extern "C" bool bg_QCoreApplication_closingDown_STATIC_() {
  return QCoreApplication::closingDown();
}

extern "C" CrystalString bg_QCoreApplication_applicationDirPath_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationDirPath());
}

extern "C" CrystalString bg_QCoreApplication_applicationFilePath_STATIC_() {
  return qstring_to_crystal(QCoreApplication::applicationFilePath());
}

extern "C" qint64 bg_QCoreApplication_applicationPid_STATIC_() {
  return QCoreApplication::applicationPid();
}

extern "C" void bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(const QStringList& unnamed_arg_0) {
  return QCoreApplication::setLibraryPaths(unnamed_arg_0);
}

extern "C" QStringList* bg_QCoreApplication_libraryPaths_STATIC_() {
  return new (UseGC) QStringList (QCoreApplication::libraryPaths());
}

extern "C" void bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return QCoreApplication::addLibraryPath(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return QCoreApplication::removeLibraryPath(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" bool bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(QTranslator* messageFile) {
  return QCoreApplication::installTranslator(messageFile);
}

extern "C" bool bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(QTranslator* messageFile) {
  return QCoreApplication::removeTranslator(messageFile);
}

extern "C" CrystalString bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(const char* context, const char* key, const char* disambiguation, int n) {
  return qstring_to_crystal(QCoreApplication::translate(context, key, disambiguation, n));
}

extern "C" void bg_QCoreApplication_flush_STATIC_() {
  return QCoreApplication::flush();
}

extern "C" void bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(QCoreApplication *_self_, QAbstractNativeEventFilter* filterObj) {
  return _self_->installNativeEventFilter(filterObj);
}

extern "C" void bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(QCoreApplication *_self_, QAbstractNativeEventFilter* filterObj) {
  return _self_->removeNativeEventFilter(filterObj);
}

extern "C" bool bg_QCoreApplication_isQuitLockEnabled_STATIC_() {
  return QCoreApplication::isQuitLockEnabled();
}

extern "C" void bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(bool enabled) {
  return QCoreApplication::setQuitLockEnabled(enabled);
}

extern "C" void bg_QCoreApplication_quit_STATIC_() {
  return QCoreApplication::quit();
}

extern "C" QMetaObject::Connection* bg_QCoreApplication_organizationNameChanged_CONNECT_CrystalProc_void_(QCoreApplication *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::organizationNameChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QCoreApplication_organizationNameChanged_(QCoreApplication *_self_) {
  return _self_->organizationNameChanged();
}

extern "C" QMetaObject::Connection* bg_QCoreApplication_organizationDomainChanged_CONNECT_CrystalProc_void_(QCoreApplication *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::organizationDomainChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QCoreApplication_organizationDomainChanged_(QCoreApplication *_self_) {
  return _self_->organizationDomainChanged();
}

extern "C" QMetaObject::Connection* bg_QCoreApplication_applicationNameChanged_CONNECT_CrystalProc_void_(QCoreApplication *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::applicationNameChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QCoreApplication_applicationNameChanged_(QCoreApplication *_self_) {
  return _self_->applicationNameChanged();
}

extern "C" QMetaObject::Connection* bg_QCoreApplication_applicationVersionChanged_CONNECT_CrystalProc_void_(QCoreApplication *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QCoreApplication::*)())&QCoreApplication::applicationVersionChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QCoreApplication_applicationVersionChanged_(QCoreApplication *_self_) {
  return _self_->applicationVersionChanged();
}

extern "C" bool bg_QCoreApplication_event_QEvent_X(QCoreApplication *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(QCoreApplication *_self_, QEvent* unnamed_arg_0, QObject* receiver, QPostEventList* unnamed_arg_2) {
  return _self_->compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
}

extern "C" QCoreApplication* bg_QCoreApplication_CONSTRUCT_QCoreApplicationPrivate_R(QCoreApplicationPrivate& p) {
  return new (UseGC) BgInherit_QCoreApplication(p);
}

extern "C" const QMetaObject* bg_QGuiApplication_metaObject_(QGuiApplication *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QGuiApplication_qt_metacast_const_char_X(QGuiApplication *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGuiApplication::tr(s, c, n));
}

extern "C" CrystalString bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGuiApplication::trUtf8(s, c, n));
}

extern "C" QGuiApplication* bg_QGuiApplication_CONSTRUCT_int_R_char_XX_int(int& argc, char** argv, int unnamed_arg_2) {
  return new (UseGC) BgInherit_QGuiApplication(argc, argv, unnamed_arg_2);
}

extern "C" void bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(const CrystalString name) {
  return QGuiApplication::setApplicationDisplayName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" CrystalString bg_QGuiApplication_applicationDisplayName_STATIC_() {
  return qstring_to_crystal(QGuiApplication::applicationDisplayName());
}

extern "C" void bg_QGuiApplication_setDesktopFileName_STATIC_const_QString_R(const CrystalString name) {
  return QGuiApplication::setDesktopFileName(QString::fromUtf8(name.ptr, name.size));
}

extern "C" CrystalString bg_QGuiApplication_desktopFileName_STATIC_() {
  return qstring_to_crystal(QGuiApplication::desktopFileName());
}

extern "C" QWindowList* bg_QGuiApplication_allWindows_STATIC_() {
  return new (UseGC) QWindowList (QGuiApplication::allWindows());
}

extern "C" QWindowList* bg_QGuiApplication_topLevelWindows_STATIC_() {
  return new (UseGC) QWindowList (QGuiApplication::topLevelWindows());
}

extern "C" QWindow* bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(const QPoint pos) {
  return QGuiApplication::topLevelAt(pos);
}

extern "C" void bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(const QIcon& icon) {
  return QGuiApplication::setWindowIcon(icon);
}

extern "C" QIcon* bg_QGuiApplication_windowIcon_STATIC_() {
  return new (UseGC) QIcon (QGuiApplication::windowIcon());
}

extern "C" CrystalString bg_QGuiApplication_platformName_STATIC_() {
  return qstring_to_crystal(QGuiApplication::platformName());
}

extern "C" QWindow* bg_QGuiApplication_modalWindow_STATIC_() {
  return QGuiApplication::modalWindow();
}

extern "C" QWindow* bg_QGuiApplication_focusWindow_STATIC_() {
  return QGuiApplication::focusWindow();
}

extern "C" QObject* bg_QGuiApplication_focusObject_STATIC_() {
  return QGuiApplication::focusObject();
}

extern "C" QScreen* bg_QGuiApplication_primaryScreen_STATIC_() {
  return QGuiApplication::primaryScreen();
}

extern "C" qreal bg_QGuiApplication_devicePixelRatio_(QGuiApplication *_self_) {
  return _self_->devicePixelRatio();
}

extern "C" QCursor* bg_QGuiApplication_overrideCursor_STATIC_() {
  return QGuiApplication::overrideCursor();
}

extern "C" void bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(const QCursor& unnamed_arg_0) {
  return QGuiApplication::setOverrideCursor(unnamed_arg_0);
}

extern "C" void bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(const QCursor& unnamed_arg_0) {
  return QGuiApplication::changeOverrideCursor(unnamed_arg_0);
}

extern "C" void bg_QGuiApplication_restoreOverrideCursor_STATIC_() {
  return QGuiApplication::restoreOverrideCursor();
}

extern "C" QFont* bg_QGuiApplication_font_STATIC_() {
  return new (UseGC) QFont (QGuiApplication::font());
}

extern "C" void bg_QGuiApplication_setFont_STATIC_const_QFont_R(const QFont& unnamed_arg_0) {
  return QGuiApplication::setFont(unnamed_arg_0);
}

extern "C" QClipboard* bg_QGuiApplication_clipboard_STATIC_() {
  return QGuiApplication::clipboard();
}

extern "C" QPalette* bg_QGuiApplication_palette_STATIC_() {
  return new (UseGC) QPalette (QGuiApplication::palette());
}

extern "C" void bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(const QPalette& pal) {
  return QGuiApplication::setPalette(pal);
}

extern "C" Qt::KeyboardModifiers bg_QGuiApplication_keyboardModifiers_STATIC_() {
  return QGuiApplication::keyboardModifiers();
}

extern "C" Qt::KeyboardModifiers bg_QGuiApplication_queryKeyboardModifiers_STATIC_() {
  return QGuiApplication::queryKeyboardModifiers();
}

extern "C" Qt::MouseButtons bg_QGuiApplication_mouseButtons_STATIC_() {
  return QGuiApplication::mouseButtons();
}

extern "C" void bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(Qt::LayoutDirection direction) {
  return QGuiApplication::setLayoutDirection(direction);
}

extern "C" Qt::LayoutDirection bg_QGuiApplication_layoutDirection_STATIC_() {
  return QGuiApplication::layoutDirection();
}

extern "C" bool bg_QGuiApplication_isRightToLeft_STATIC_() {
  return QGuiApplication::isRightToLeft();
}

extern "C" bool bg_QGuiApplication_isLeftToRight_STATIC_() {
  return QGuiApplication::isLeftToRight();
}

extern "C" QStyleHints* bg_QGuiApplication_styleHints_STATIC_() {
  return QGuiApplication::styleHints();
}

extern "C" void bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(bool on) {
  return QGuiApplication::setDesktopSettingsAware(on);
}

extern "C" bool bg_QGuiApplication_desktopSettingsAware_STATIC_() {
  return QGuiApplication::desktopSettingsAware();
}

extern "C" QInputMethod* bg_QGuiApplication_inputMethod_STATIC_() {
  return QGuiApplication::inputMethod();
}

extern "C" QPlatformNativeInterface* bg_QGuiApplication_platformNativeInterface_STATIC_() {
  return QGuiApplication::platformNativeInterface();
}

extern "C" void bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(bool quit) {
  return QGuiApplication::setQuitOnLastWindowClosed(quit);
}

extern "C" bool bg_QGuiApplication_quitOnLastWindowClosed_STATIC_() {
  return QGuiApplication::quitOnLastWindowClosed();
}

extern "C" Qt::ApplicationState bg_QGuiApplication_applicationState_STATIC_() {
  return QGuiApplication::applicationState();
}

extern "C" int bg_QGuiApplication_exec_STATIC_() {
  return QGuiApplication::exec();
}

extern "C" bool bg_QGuiApplication_notify_QObject_X_QEvent_X(QGuiApplication *_self_, QObject* unnamed_arg_0, QEvent* unnamed_arg_1) {
  return _self_->notify(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QGuiApplication_isSessionRestored_(QGuiApplication *_self_) {
  return _self_->isSessionRestored();
}

extern "C" CrystalString bg_QGuiApplication_sessionId_(QGuiApplication *_self_) {
  return qstring_to_crystal(_self_->sessionId());
}

extern "C" CrystalString bg_QGuiApplication_sessionKey_(QGuiApplication *_self_) {
  return qstring_to_crystal(_self_->sessionKey());
}

extern "C" bool bg_QGuiApplication_isSavingSession_(QGuiApplication *_self_) {
  return _self_->isSavingSession();
}

extern "C" bool bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_() {
  return QGuiApplication::isFallbackSessionManagementEnabled();
}

extern "C" void bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(bool unnamed_arg_0) {
  return QGuiApplication::setFallbackSessionManagementEnabled(unnamed_arg_0);
}

extern "C" void bg_QGuiApplication_sync_STATIC_() {
  return QGuiApplication::sync();
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_fontDatabaseChanged_CONNECT_CrystalProc_void_(QGuiApplication *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)())&QGuiApplication::fontDatabaseChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGuiApplication_fontDatabaseChanged_(QGuiApplication *_self_) {
  return _self_->fontDatabaseChanged();
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_screenAdded_CONNECT_CrystalProc_void__QScreenX_(QGuiApplication *_self_, CrystalProc<void, QScreen*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QScreen *))&QGuiApplication::screenAdded, [_proc_](QScreen* screen){
  _proc_(screen);
}));
}


extern "C" void bg_QGuiApplication_screenAdded_QScreen_X(QGuiApplication *_self_, QScreen* screen) {
  return _self_->screenAdded(screen);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_screenRemoved_CONNECT_CrystalProc_void__QScreenX_(QGuiApplication *_self_, CrystalProc<void, QScreen*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QScreen *))&QGuiApplication::screenRemoved, [_proc_](QScreen* screen){
  _proc_(screen);
}));
}


extern "C" void bg_QGuiApplication_screenRemoved_QScreen_X(QGuiApplication *_self_, QScreen* screen) {
  return _self_->screenRemoved(screen);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_primaryScreenChanged_CONNECT_CrystalProc_void__QScreenX_(QGuiApplication *_self_, CrystalProc<void, QScreen*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QScreen *))&QGuiApplication::primaryScreenChanged, [_proc_](QScreen* screen){
  _proc_(screen);
}));
}


extern "C" void bg_QGuiApplication_primaryScreenChanged_QScreen_X(QGuiApplication *_self_, QScreen* screen) {
  return _self_->primaryScreenChanged(screen);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_lastWindowClosed_CONNECT_CrystalProc_void_(QGuiApplication *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)())&QGuiApplication::lastWindowClosed, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGuiApplication_lastWindowClosed_(QGuiApplication *_self_) {
  return _self_->lastWindowClosed();
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_focusObjectChanged_CONNECT_CrystalProc_void__QObjectX_(QGuiApplication *_self_, CrystalProc<void, QObject*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QObject *))&QGuiApplication::focusObjectChanged, [_proc_](QObject* focusObject){
  _proc_(focusObject);
}));
}


extern "C" void bg_QGuiApplication_focusObjectChanged_QObject_X(QGuiApplication *_self_, QObject* focusObject) {
  return _self_->focusObjectChanged(focusObject);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_focusWindowChanged_CONNECT_CrystalProc_void__QWindowX_(QGuiApplication *_self_, CrystalProc<void, QWindow*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QWindow *))&QGuiApplication::focusWindowChanged, [_proc_](QWindow* focusWindow){
  _proc_(focusWindow);
}));
}


extern "C" void bg_QGuiApplication_focusWindowChanged_QWindow_X(QGuiApplication *_self_, QWindow* focusWindow) {
  return _self_->focusWindowChanged(focusWindow);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_applicationStateChanged_CONNECT_CrystalProc_void__Qt__ApplicationState_(QGuiApplication *_self_, CrystalProc<void, Qt::ApplicationState> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(Qt::ApplicationState))&QGuiApplication::applicationStateChanged, [_proc_](Qt::ApplicationState state){
  _proc_(state);
}));
}


extern "C" void bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(QGuiApplication *_self_, Qt::ApplicationState state) {
  return _self_->applicationStateChanged(state);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_layoutDirectionChanged_CONNECT_CrystalProc_void__Qt__LayoutDirection_(QGuiApplication *_self_, CrystalProc<void, Qt::LayoutDirection> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(Qt::LayoutDirection))&QGuiApplication::layoutDirectionChanged, [_proc_](Qt::LayoutDirection direction){
  _proc_(direction);
}));
}


extern "C" void bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(QGuiApplication *_self_, Qt::LayoutDirection direction) {
  return _self_->layoutDirectionChanged(direction);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_commitDataRequest_CONNECT_CrystalProc_void__QSessionManagerR_(QGuiApplication *_self_, CrystalProc<void, QSessionManager&> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QSessionManager &))&QGuiApplication::commitDataRequest, [_proc_](QSessionManager& sessionManager){
  _proc_((sessionManager));
}));
}


extern "C" void bg_QGuiApplication_commitDataRequest_QSessionManager_R(QGuiApplication *_self_, QSessionManager& sessionManager) {
  return _self_->commitDataRequest(sessionManager);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_saveStateRequest_CONNECT_CrystalProc_void__QSessionManagerR_(QGuiApplication *_self_, CrystalProc<void, QSessionManager&> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(QSessionManager &))&QGuiApplication::saveStateRequest, [_proc_](QSessionManager& sessionManager){
  _proc_((sessionManager));
}));
}


extern "C" void bg_QGuiApplication_saveStateRequest_QSessionManager_R(QGuiApplication *_self_, QSessionManager& sessionManager) {
  return _self_->saveStateRequest(sessionManager);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_paletteChanged_CONNECT_CrystalProc_void__const_QPaletteR_(QGuiApplication *_self_, CrystalProc<void, const QPalette*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)(const QPalette &))&QGuiApplication::paletteChanged, [_proc_](const QPalette& pal){
  _proc_(new (UseGC) QPalette (pal));
}));
}


extern "C" void bg_QGuiApplication_paletteChanged_const_QPalette_R(QGuiApplication *_self_, const QPalette& pal) {
  return _self_->paletteChanged(pal);
}

extern "C" QMetaObject::Connection* bg_QGuiApplication_applicationDisplayNameChanged_CONNECT_CrystalProc_void_(QGuiApplication *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGuiApplication::*)())&QGuiApplication::applicationDisplayNameChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGuiApplication_applicationDisplayNameChanged_(QGuiApplication *_self_) {
  return _self_->applicationDisplayNameChanged();
}

extern "C" bool bg_QGuiApplication_event_QEvent_X(QGuiApplication *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(QGuiApplication *_self_, QEvent* unnamed_arg_0, QObject* receiver, QPostEventList* unnamed_arg_2) {
  return _self_->compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
}

extern "C" QGuiApplication* bg_QGuiApplication_CONSTRUCT_QGuiApplicationPrivate_R(QGuiApplicationPrivate& p) {
  return new (UseGC) BgInherit_QGuiApplication(p);
}

extern "C" const QMetaObject* bg_QApplication_metaObject_(QApplication *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QApplication_qt_metacast_const_char_X(QApplication *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QApplication::tr(s, c, n));
}

extern "C" CrystalString bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QApplication::trUtf8(s, c, n));
}

extern "C" QApplication* bg_QApplication_CONSTRUCT_int_R_char_XX_int(int& argc, char** argv, int unnamed_arg_2) {
  return new (UseGC) BgInherit_QApplication(argc, argv, unnamed_arg_2);
}

extern "C" QStyle* bg_QApplication_style_STATIC_() {
  return QApplication::style();
}

extern "C" void bg_QApplication_setStyle_STATIC_QStyle_X(QStyle* unnamed_arg_0) {
  return QApplication::setStyle(unnamed_arg_0);
}

extern "C" QStyle* bg_QApplication_setStyle_STATIC_const_QString_R(const CrystalString unnamed_arg_0) {
  return QApplication::setStyle(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" int bg_QApplication_colorSpec_STATIC_() {
  return QApplication::colorSpec();
}

extern "C" void bg_QApplication_setColorSpec_STATIC_int(int unnamed_arg_0) {
  return QApplication::setColorSpec(unnamed_arg_0);
}

extern "C" QPalette* bg_QApplication_palette_STATIC_const_QWidget_X(const QWidget* unnamed_arg_0) {
  return new (UseGC) QPalette (QApplication::palette(unnamed_arg_0));
}

extern "C" QPalette* bg_QApplication_palette_STATIC_const_char_X(const char* className) {
  return new (UseGC) QPalette (QApplication::palette(className));
}

extern "C" void bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(const QPalette& unnamed_arg_0, const char* className) {
  return QApplication::setPalette(unnamed_arg_0, className);
}

extern "C" QFont* bg_QApplication_font_STATIC_() {
  return new (UseGC) QFont (QApplication::font());
}

extern "C" QFont* bg_QApplication_font_STATIC_const_QWidget_X(const QWidget* unnamed_arg_0) {
  return new (UseGC) QFont (QApplication::font(unnamed_arg_0));
}

extern "C" QFont* bg_QApplication_font_STATIC_const_char_X(const char* className) {
  return new (UseGC) QFont (QApplication::font(className));
}

extern "C" void bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(const QFont& unnamed_arg_0, const char* className) {
  return QApplication::setFont(unnamed_arg_0, className);
}

extern "C" QFontMetrics* bg_QApplication_fontMetrics_STATIC_() {
  return new (UseGC) QFontMetrics (QApplication::fontMetrics());
}

extern "C" void bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(const QIcon& icon) {
  return QApplication::setWindowIcon(icon);
}

extern "C" QIcon* bg_QApplication_windowIcon_STATIC_() {
  return new (UseGC) QIcon (QApplication::windowIcon());
}

extern "C" QWidgetList* bg_QApplication_allWidgets_STATIC_() {
  return new (UseGC) QWidgetList (QApplication::allWidgets());
}

extern "C" QWidgetList* bg_QApplication_topLevelWidgets_STATIC_() {
  return new (UseGC) QWidgetList (QApplication::topLevelWidgets());
}

extern "C" QDesktopWidget* bg_QApplication_desktop_STATIC_() {
  return QApplication::desktop();
}

extern "C" QWidget* bg_QApplication_activePopupWidget_STATIC_() {
  return QApplication::activePopupWidget();
}

extern "C" QWidget* bg_QApplication_activeModalWidget_STATIC_() {
  return QApplication::activeModalWidget();
}

extern "C" QWidget* bg_QApplication_focusWidget_STATIC_() {
  return QApplication::focusWidget();
}

extern "C" QWidget* bg_QApplication_activeWindow_STATIC_() {
  return QApplication::activeWindow();
}

extern "C" void bg_QApplication_setActiveWindow_STATIC_QWidget_X(QWidget* act) {
  return QApplication::setActiveWindow(act);
}

extern "C" QWidget* bg_QApplication_widgetAt_STATIC_const_QPoint_R(const QPoint p) {
  return QApplication::widgetAt(p);
}

extern "C" QWidget* bg_QApplication_widgetAt_STATIC_int_int(int x, int y) {
  return QApplication::widgetAt(x, y);
}

extern "C" QWidget* bg_QApplication_topLevelAt_STATIC_const_QPoint_R(const QPoint p) {
  return QApplication::topLevelAt(p);
}

extern "C" QWidget* bg_QApplication_topLevelAt_STATIC_int_int(int x, int y) {
  return QApplication::topLevelAt(x, y);
}

extern "C" void bg_QApplication_beep_STATIC_() {
  return QApplication::beep();
}

extern "C" void bg_QApplication_alert_STATIC_QWidget_X_int(QWidget* widget, int duration) {
  return QApplication::alert(widget, duration);
}

extern "C" void bg_QApplication_setCursorFlashTime_STATIC_int(int unnamed_arg_0) {
  return QApplication::setCursorFlashTime(unnamed_arg_0);
}

extern "C" int bg_QApplication_cursorFlashTime_STATIC_() {
  return QApplication::cursorFlashTime();
}

extern "C" void bg_QApplication_setDoubleClickInterval_STATIC_int(int unnamed_arg_0) {
  return QApplication::setDoubleClickInterval(unnamed_arg_0);
}

extern "C" int bg_QApplication_doubleClickInterval_STATIC_() {
  return QApplication::doubleClickInterval();
}

extern "C" void bg_QApplication_setKeyboardInputInterval_STATIC_int(int unnamed_arg_0) {
  return QApplication::setKeyboardInputInterval(unnamed_arg_0);
}

extern "C" int bg_QApplication_keyboardInputInterval_STATIC_() {
  return QApplication::keyboardInputInterval();
}

extern "C" void bg_QApplication_setWheelScrollLines_STATIC_int(int unnamed_arg_0) {
  return QApplication::setWheelScrollLines(unnamed_arg_0);
}

extern "C" int bg_QApplication_wheelScrollLines_STATIC_() {
  return QApplication::wheelScrollLines();
}

extern "C" void bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(const QSize& unnamed_arg_0) {
  return QApplication::setGlobalStrut(unnamed_arg_0);
}

extern "C" QSize* bg_QApplication_globalStrut_STATIC_() {
  return new (UseGC) QSize (QApplication::globalStrut());
}

extern "C" void bg_QApplication_setStartDragTime_STATIC_int(int ms) {
  return QApplication::setStartDragTime(ms);
}

extern "C" int bg_QApplication_startDragTime_STATIC_() {
  return QApplication::startDragTime();
}

extern "C" void bg_QApplication_setStartDragDistance_STATIC_int(int l) {
  return QApplication::setStartDragDistance(l);
}

extern "C" int bg_QApplication_startDragDistance_STATIC_() {
  return QApplication::startDragDistance();
}

extern "C" bool bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(Qt::UIEffect unnamed_arg_0) {
  return QApplication::isEffectEnabled(unnamed_arg_0);
}

extern "C" void bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(Qt::UIEffect unnamed_arg_0, bool enable) {
  return QApplication::setEffectEnabled(unnamed_arg_0, enable);
}

extern "C" int bg_QApplication_exec_STATIC_() {
  return QApplication::exec();
}

extern "C" bool bg_QApplication_notify_QObject_X_QEvent_X(QApplication *_self_, QObject* unnamed_arg_0, QEvent* unnamed_arg_1) {
  return _self_->notify(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QMetaObject::Connection* bg_QApplication_focusChanged_CONNECT_CrystalProc_void__QWidgetX__QWidgetX_(QApplication *_self_, CrystalProc<void, QWidget*, QWidget*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QApplication::*)(QWidget *, QWidget *))&QApplication::focusChanged, [_proc_](QWidget* old, QWidget* now){
  _proc_(old, now);
}));
}


extern "C" void bg_QApplication_focusChanged_QWidget_X_QWidget_X(QApplication *_self_, QWidget* old, QWidget* now) {
  return _self_->focusChanged(old, now);
}

extern "C" CrystalString bg_QApplication_styleSheet_(QApplication *_self_) {
  return qstring_to_crystal(_self_->styleSheet());
}

extern "C" void bg_QApplication_setStyleSheet_const_QString_R(QApplication *_self_, const CrystalString sheet) {
  return _self_->setStyleSheet(QString::fromUtf8(sheet.ptr, sheet.size));
}

extern "C" void bg_QApplication_setAutoSipEnabled_const_bool(QApplication *_self_, const bool enabled) {
  return _self_->setAutoSipEnabled(enabled);
}

extern "C" bool bg_QApplication_autoSipEnabled_(QApplication *_self_) {
  return _self_->autoSipEnabled();
}

extern "C" void bg_QApplication_closeAllWindows_STATIC_() {
  return QApplication::closeAllWindows();
}

extern "C" void bg_QApplication_aboutQt_STATIC_() {
  return QApplication::aboutQt();
}

extern "C" bool bg_QApplication_event_QEvent_X(QApplication *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" bool bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(QApplication *_self_, QEvent* unnamed_arg_0, QObject* receiver, QPostEventList* unnamed_arg_2) {
  return _self_->compressEvent(unnamed_arg_0, receiver, unnamed_arg_2);
}

extern "C" QImage* bg_QImage_CONSTRUCT_() {
  return new (UseGC) QImage();
}

extern "C" QImage* bg_QImage_CONSTRUCT_const_QSize_R_QImage__Format(const QSize& size, QImage::Format format) {
  return new (UseGC) QImage(size, format);
}

extern "C" QImage* bg_QImage_CONSTRUCT_int_int_QImage__Format(int width, int height, QImage::Format format) {
  return new (UseGC) QImage(width, height, format);
}

extern "C" QImage* bg_QImage_CONSTRUCT_const_char_Xconst_X(const char** xpm) {
  return new (UseGC) QImage(xpm);
}

extern "C" QImage* bg_QImage_CONSTRUCT_const_QString_R_const_char_X(const CrystalString fileName, const char* format) {
  return new (UseGC) QImage(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" void bg_QImage_swap_QImage_R(QImage *_self_, QImage& other) {
  return _self_->swap(other);
}

extern "C" bool bg_QImage_isNull_(QImage *_self_) {
  return _self_->isNull();
}

extern "C" int bg_QImage_devType_(QImage *_self_) {
  return _self_->devType();
}

extern "C" void bg_QImage_detach_(QImage *_self_) {
  return _self_->detach();
}

extern "C" bool bg_QImage_isDetached_(QImage *_self_) {
  return _self_->isDetached();
}

extern "C" QImage* bg_QImage_copy_(QImage *_self_) {
  return new (UseGC) QImage (_self_->copy());
}

extern "C" QImage* bg_QImage_copy_const_QRect_R(QImage *_self_, const QRect& rect) {
  return new (UseGC) QImage (_self_->copy(rect));
}

extern "C" QImage* bg_QImage_copy_int_int_int_int(QImage *_self_, int x, int y, int w, int h) {
  return new (UseGC) QImage (_self_->copy(x, y, w, h));
}

extern "C" QImage::Format bg_QImage_format_(QImage *_self_) {
  return _self_->format();
}

extern "C" QImage* bg_QImage_convertToFormat_QImage__Format(QImage *_self_, QImage::Format f) {
  return new (UseGC) QImage (_self_->convertToFormat(f));
}

extern "C" QImage* bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(QImage *_self_, QImage::Format f, Qt::ImageConversionFlags flags) {
  return new (UseGC) QImage (_self_->convertToFormat(f, flags));
}

extern "C" bool bg_QImage_reinterpretAsFormat_QImage__Format(QImage *_self_, QImage::Format f) {
  return _self_->reinterpretAsFormat(f);
}

extern "C" int bg_QImage_width_(QImage *_self_) {
  return _self_->width();
}

extern "C" int bg_QImage_height_(QImage *_self_) {
  return _self_->height();
}

extern "C" QSize* bg_QImage_size_(QImage *_self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" QRect* bg_QImage_rect_(QImage *_self_) {
  return new (UseGC) QRect (_self_->rect());
}

extern "C" int bg_QImage_depth_(QImage *_self_) {
  return _self_->depth();
}

extern "C" int bg_QImage_colorCount_(QImage *_self_) {
  return _self_->colorCount();
}

extern "C" int bg_QImage_bitPlaneCount_(QImage *_self_) {
  return _self_->bitPlaneCount();
}

extern "C" void bg_QImage_setColorCount_int(QImage *_self_, int unnamed_arg_0) {
  return _self_->setColorCount(unnamed_arg_0);
}

extern "C" bool bg_QImage_allGray_(QImage *_self_) {
  return _self_->allGray();
}

extern "C" bool bg_QImage_isGrayscale_(QImage *_self_) {
  return _self_->isGrayscale();
}

extern "C" uchar* bg_QImage_bits_(QImage *_self_) {
  return _self_->bits();
}

extern "C" const uchar* bg_QImage_constBits_(QImage *_self_) {
  return _self_->constBits();
}

extern "C" int bg_QImage_byteCount_(QImage *_self_) {
  return _self_->byteCount();
}

extern "C" uchar* bg_QImage_scanLine_int(QImage *_self_, int unnamed_arg_0) {
  return _self_->scanLine(unnamed_arg_0);
}

extern "C" const uchar* bg_QImage_constScanLine_int(QImage *_self_, int unnamed_arg_0) {
  return _self_->constScanLine(unnamed_arg_0);
}

extern "C" int bg_QImage_bytesPerLine_(QImage *_self_) {
  return _self_->bytesPerLine();
}

extern "C" bool bg_QImage_valid_int_int(QImage *_self_, int x, int y) {
  return _self_->valid(x, y);
}

extern "C" bool bg_QImage_valid_const_QPoint_R(QImage *_self_, const QPoint pt) {
  return _self_->valid(pt);
}

extern "C" int bg_QImage_pixelIndex_int_int(QImage *_self_, int x, int y) {
  return _self_->pixelIndex(x, y);
}

extern "C" int bg_QImage_pixelIndex_const_QPoint_R(QImage *_self_, const QPoint pt) {
  return _self_->pixelIndex(pt);
}

extern "C" void bg_QImage_setPixel_int_int_uint(QImage *_self_, int x, int y, uint index_or_rgb) {
  return _self_->setPixel(x, y, index_or_rgb);
}

extern "C" void bg_QImage_setPixel_const_QPoint_R_uint(QImage *_self_, const QPoint pt, uint index_or_rgb) {
  return _self_->setPixel(pt, index_or_rgb);
}

extern "C" QColor* bg_QImage_pixelColor_int_int(QImage *_self_, int x, int y) {
  return new (UseGC) QColor (_self_->pixelColor(x, y));
}

extern "C" QColor* bg_QImage_pixelColor_const_QPoint_R(QImage *_self_, const QPoint pt) {
  return new (UseGC) QColor (_self_->pixelColor(pt));
}

extern "C" void bg_QImage_setPixelColor_int_int_const_QColor_R(QImage *_self_, int x, int y, const QColor& c) {
  return _self_->setPixelColor(x, y, c);
}

extern "C" void bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(QImage *_self_, const QPoint pt, const QColor& c) {
  return _self_->setPixelColor(pt, c);
}

extern "C" qreal bg_QImage_devicePixelRatio_(QImage *_self_) {
  return _self_->devicePixelRatio();
}

extern "C" void bg_QImage_setDevicePixelRatio_qreal(QImage *_self_, qreal scaleFactor) {
  return _self_->setDevicePixelRatio(scaleFactor);
}

extern "C" void bg_QImage_fill_uint(QImage *_self_, uint pixel) {
  return _self_->fill(pixel);
}

extern "C" void bg_QImage_fill_const_QColor_R(QImage *_self_, const QColor& color) {
  return _self_->fill(color);
}

extern "C" void bg_QImage_fill_Qt__GlobalColor(QImage *_self_, Qt::GlobalColor color) {
  return _self_->fill(color);
}

extern "C" bool bg_QImage_hasAlphaChannel_(QImage *_self_) {
  return _self_->hasAlphaChannel();
}

extern "C" void bg_QImage_setAlphaChannel_const_QImage_R(QImage *_self_, const QImage& alphaChannel) {
  return _self_->setAlphaChannel(alphaChannel);
}

extern "C" QImage* bg_QImage_alphaChannel_(QImage *_self_) {
  return new (UseGC) QImage (_self_->alphaChannel());
}

extern "C" QImage* bg_QImage_createAlphaMask_(QImage *_self_) {
  return new (UseGC) QImage (_self_->createAlphaMask());
}

extern "C" QImage* bg_QImage_createAlphaMask_Qt__ImageConversionFlags(QImage *_self_, Qt::ImageConversionFlags flags) {
  return new (UseGC) QImage (_self_->createAlphaMask(flags));
}

extern "C" QImage* bg_QImage_createHeuristicMask_bool(QImage *_self_, bool clipTight) {
  return new (UseGC) QImage (_self_->createHeuristicMask(clipTight));
}

extern "C" QImage* bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(QImage *_self_, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaled(w, h, aspectMode, mode));
}

extern "C" QImage* bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(QImage *_self_, const QSize& s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaled(s, aspectMode, mode));
}

extern "C" QImage* bg_QImage_scaledToWidth_int_Qt__TransformationMode(QImage *_self_, int w, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaledToWidth(w, mode));
}

extern "C" QImage* bg_QImage_scaledToHeight_int_Qt__TransformationMode(QImage *_self_, int h, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->scaledToHeight(h, mode));
}

extern "C" QImage* bg_QImage_transformed_const_QMatrix_R_Qt__TransformationMode(QImage *_self_, const QMatrix& matrix, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->transformed(matrix, mode));
}

extern "C" QMatrix* bg_QImage_trueMatrix_STATIC_const_QMatrix_R_int_int(const QMatrix& unnamed_arg_0, int w, int h) {
  return new (UseGC) QMatrix (QImage::trueMatrix(unnamed_arg_0, w, h));
}

extern "C" QImage* bg_QImage_transformed_const_QTransform_R_Qt__TransformationMode(QImage *_self_, const QTransform& matrix, Qt::TransformationMode mode) {
  return new (UseGC) QImage (_self_->transformed(matrix, mode));
}

extern "C" QTransform* bg_QImage_trueMatrix_STATIC_const_QTransform_R_int_int(const QTransform& unnamed_arg_0, int w, int h) {
  return new (UseGC) QTransform (QImage::trueMatrix(unnamed_arg_0, w, h));
}

extern "C" QImage* bg_QImage_mirrored_bool_bool(QImage *_self_, bool horizontally, bool vertically) {
  return new (UseGC) QImage (_self_->mirrored(horizontally, vertically));
}

extern "C" QImage* bg_QImage_rgbSwapped_(QImage *_self_) {
  return new (UseGC) QImage (_self_->rgbSwapped());
}

extern "C" void bg_QImage_invertPixels_QImage__InvertMode(QImage *_self_, QImage::InvertMode unnamed_arg_0) {
  return _self_->invertPixels(unnamed_arg_0);
}

extern "C" bool bg_QImage_load_QIODevice_X_const_char_X(QImage *_self_, QIODevice* device, const char* format) {
  return _self_->load(device, format);
}

extern "C" bool bg_QImage_load_const_QString_R_const_char_X(QImage *_self_, const CrystalString fileName, const char* format) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" bool bg_QImage_loadFromData_const_uchar_X_int_const_char_X(QImage *_self_, const uchar* buf, int len, const char* format) {
  return _self_->loadFromData(buf, len, format);
}

extern "C" bool bg_QImage_loadFromData_const_QByteArray_R_const_char_X(QImage *_self_, const QByteArray& data, const char* aformat) {
  return _self_->loadFromData(data, aformat);
}

extern "C" bool bg_QImage_save_const_QString_R_const_char_X_int(QImage *_self_, const CrystalString fileName, const char* format, int quality) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size), format, quality);
}

extern "C" bool bg_QImage_save_QIODevice_X_const_char_X_int(QImage *_self_, QIODevice* device, const char* format, int quality) {
  return _self_->save(device, format, quality);
}

extern "C" QImage* bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(const uchar* data, int size, const char* format) {
  return new (UseGC) QImage (QImage::fromData(data, size, format));
}

extern "C" QImage* bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(const QByteArray& data, const char* format) {
  return new (UseGC) QImage (QImage::fromData(data, format));
}

extern "C" qint64 bg_QImage_cacheKey_(QImage *_self_) {
  return _self_->cacheKey();
}

extern "C" QPaintEngine* bg_QImage_paintEngine_(QImage *_self_) {
  return _self_->paintEngine();
}

extern "C" int bg_QImage_dotsPerMeterX_(QImage *_self_) {
  return _self_->dotsPerMeterX();
}

extern "C" int bg_QImage_dotsPerMeterY_(QImage *_self_) {
  return _self_->dotsPerMeterY();
}

extern "C" void bg_QImage_setDotsPerMeterX_int(QImage *_self_, int unnamed_arg_0) {
  return _self_->setDotsPerMeterX(unnamed_arg_0);
}

extern "C" void bg_QImage_setDotsPerMeterY_int(QImage *_self_, int unnamed_arg_0) {
  return _self_->setDotsPerMeterY(unnamed_arg_0);
}

extern "C" QPoint bg_QImage_offset_(QImage *_self_) {
  return _self_->offset();
}

extern "C" void bg_QImage_setOffset_const_QPoint_R(QImage *_self_, const QPoint unnamed_arg_0) {
  return _self_->setOffset(unnamed_arg_0);
}

extern "C" QStringList* bg_QImage_textKeys_(QImage *_self_) {
  return new (UseGC) QStringList (_self_->textKeys());
}

extern "C" CrystalString bg_QImage_text_(QImage *_self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" CrystalString bg_QImage_text_const_QString_R(QImage *_self_, const CrystalString key) {
  return qstring_to_crystal(_self_->text(QString::fromUtf8(key.ptr, key.size)));
}

extern "C" void bg_QImage_setText_const_QString_R_const_QString_R(QImage *_self_, const CrystalString key, const CrystalString value) {
  return _self_->setText(QString::fromUtf8(key.ptr, key.size), QString::fromUtf8(value.ptr, value.size));
}

extern "C" int bg_QImage_metric_QPaintDevice__PaintDeviceMetric(QImage *_self_, QPaintDevice::PaintDeviceMetric metric) {
  return _self_->metric(metric);
}

extern "C" QImage* bg_QImage_mirrored_helper_bool_bool(QImage *_self_, bool horizontal, bool vertical) {
  return new (UseGC) QImage (_self_->mirrored_helper(horizontal, vertical));
}

extern "C" QImage* bg_QImage_rgbSwapped_helper_(QImage *_self_) {
  return new (UseGC) QImage (_self_->rgbSwapped_helper());
}

extern "C" void bg_QImage_mirrored_inplace_bool_bool(QImage *_self_, bool horizontal, bool vertical) {
  return _self_->mirrored_inplace(horizontal, vertical);
}

extern "C" void bg_QImage_rgbSwapped_inplace_(QImage *_self_) {
  return _self_->rgbSwapped_inplace();
}

extern "C" QImage* bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(QImage *_self_, QImage::Format format, Qt::ImageConversionFlags flags) {
  return new (UseGC) QImage (_self_->convertToFormat_helper(format, flags));
}

extern "C" bool bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(QImage *_self_, QImage::Format format, Qt::ImageConversionFlags flags) {
  return _self_->convertToFormat_inplace(format, flags);
}

extern "C" QImage* bg_QImage_smoothScaled_int_int(QImage *_self_, int w, int h) {
  return new (UseGC) QImage (_self_->smoothScaled(w, h));
}

extern "C" QPixmap* bg_QPixmap_CONSTRUCT_() {
  return new (UseGC) QPixmap();
}

extern "C" QPixmap* bg_QPixmap_CONSTRUCT_QPlatformPixmap_X(QPlatformPixmap* data) {
  return new (UseGC) QPixmap(data);
}

extern "C" QPixmap* bg_QPixmap_CONSTRUCT_int_int(int w, int h) {
  return new (UseGC) QPixmap(w, h);
}

extern "C" QPixmap* bg_QPixmap_CONSTRUCT_const_QSize_R(const QSize& unnamed_arg_0) {
  return new (UseGC) QPixmap(unnamed_arg_0);
}

extern "C" QPixmap* bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X(const CrystalString fileName, const char* format) {
  return new (UseGC) QPixmap(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" QPixmap* bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(const CrystalString fileName, const char* format, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap(QString::fromUtf8(fileName.ptr, fileName.size), format, flags);
}

extern "C" QPixmap* bg_QPixmap_CONSTRUCT_const_char_Xconst_X(const char** xpm) {
  return new (UseGC) QPixmap(xpm);
}

extern "C" void bg_QPixmap_swap_QPixmap_R(QPixmap *_self_, QPixmap& other) {
  return _self_->swap(other);
}

extern "C" bool bg_QPixmap_isNull_(QPixmap *_self_) {
  return _self_->isNull();
}

extern "C" int bg_QPixmap_devType_(QPixmap *_self_) {
  return _self_->devType();
}

extern "C" int bg_QPixmap_width_(QPixmap *_self_) {
  return _self_->width();
}

extern "C" int bg_QPixmap_height_(QPixmap *_self_) {
  return _self_->height();
}

extern "C" QSize* bg_QPixmap_size_(QPixmap *_self_) {
  return new (UseGC) QSize (_self_->size());
}

extern "C" QRect* bg_QPixmap_rect_(QPixmap *_self_) {
  return new (UseGC) QRect (_self_->rect());
}

extern "C" int bg_QPixmap_depth_(QPixmap *_self_) {
  return _self_->depth();
}

extern "C" int bg_QPixmap_defaultDepth_STATIC_() {
  return QPixmap::defaultDepth();
}

extern "C" void bg_QPixmap_fill_(QPixmap *_self_) {
  return _self_->fill();
}

extern "C" void bg_QPixmap_fill_const_QColor_R(QPixmap *_self_, const QColor& fillColor) {
  return _self_->fill(fillColor);
}

extern "C" void bg_QPixmap_fill_const_QPaintDevice_X_const_QPoint_R(QPixmap *_self_, const QPaintDevice* device, const QPoint ofs) {
  return _self_->fill(device, ofs);
}

extern "C" void bg_QPixmap_fill_const_QPaintDevice_X_int_int(QPixmap *_self_, const QPaintDevice* device, int xofs, int yofs) {
  return _self_->fill(device, xofs, yofs);
}

extern "C" QBitmap* bg_QPixmap_mask_(QPixmap *_self_) {
  return new (UseGC) QBitmap (_self_->mask());
}

extern "C" void bg_QPixmap_setMask_const_QBitmap_R(QPixmap *_self_, const QBitmap& unnamed_arg_0) {
  return _self_->setMask(unnamed_arg_0);
}

extern "C" qreal bg_QPixmap_devicePixelRatio_(QPixmap *_self_) {
  return _self_->devicePixelRatio();
}

extern "C" void bg_QPixmap_setDevicePixelRatio_qreal(QPixmap *_self_, qreal scaleFactor) {
  return _self_->setDevicePixelRatio(scaleFactor);
}

extern "C" bool bg_QPixmap_hasAlpha_(QPixmap *_self_) {
  return _self_->hasAlpha();
}

extern "C" bool bg_QPixmap_hasAlphaChannel_(QPixmap *_self_) {
  return _self_->hasAlphaChannel();
}

extern "C" QBitmap* bg_QPixmap_createHeuristicMask_bool(QPixmap *_self_, bool clipTight) {
  return new (UseGC) QBitmap (_self_->createHeuristicMask(clipTight));
}

extern "C" QBitmap* bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(QPixmap *_self_, const QColor& maskColor, Qt::MaskMode mode) {
  return new (UseGC) QBitmap (_self_->createMaskFromColor(maskColor, mode));
}

extern "C" QPixmap* bg_QPixmap_grabWidget_STATIC_QObject_X_const_QRect_R(QObject* widget, const QRect& rect) {
  return new (UseGC) QPixmap (QPixmap::grabWidget(widget, rect));
}

extern "C" QPixmap* bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int_int(QObject* widget, int x, int y, int w, int h) {
  return new (UseGC) QPixmap (QPixmap::grabWidget(widget, x, y, w, h));
}

extern "C" QPixmap* bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(QPixmap *_self_, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaled(w, h, aspectMode, mode));
}

extern "C" QPixmap* bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(QPixmap *_self_, const QSize& s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaled(s, aspectMode, mode));
}

extern "C" QPixmap* bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(QPixmap *_self_, int w, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaledToWidth(w, mode));
}

extern "C" QPixmap* bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(QPixmap *_self_, int h, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->scaledToHeight(h, mode));
}

extern "C" QPixmap* bg_QPixmap_transformed_const_QMatrix_R_Qt__TransformationMode(QPixmap *_self_, const QMatrix& unnamed_arg_0, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->transformed(unnamed_arg_0, mode));
}

extern "C" QMatrix* bg_QPixmap_trueMatrix_STATIC_const_QMatrix_R_int_int(const QMatrix& m, int w, int h) {
  return new (UseGC) QMatrix (QPixmap::trueMatrix(m, w, h));
}

extern "C" QPixmap* bg_QPixmap_transformed_const_QTransform_R_Qt__TransformationMode(QPixmap *_self_, const QTransform& unnamed_arg_0, Qt::TransformationMode mode) {
  return new (UseGC) QPixmap (_self_->transformed(unnamed_arg_0, mode));
}

extern "C" QTransform* bg_QPixmap_trueMatrix_STATIC_const_QTransform_R_int_int(const QTransform& m, int w, int h) {
  return new (UseGC) QTransform (QPixmap::trueMatrix(m, w, h));
}

extern "C" QImage* bg_QPixmap_toImage_(QPixmap *_self_) {
  return new (UseGC) QImage (_self_->toImage());
}

extern "C" QPixmap* bg_QPixmap_fromImage_STATIC_const_QImage_R(const QImage& image) {
  return new (UseGC) QPixmap (QPixmap::fromImage(image));
}

extern "C" QPixmap* bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(const QImage& image, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap (QPixmap::fromImage(image, flags));
}

extern "C" QPixmap* bg_QPixmap_fromImageReader_STATIC_QImageReader_X(QImageReader* imageReader) {
  return new (UseGC) QPixmap (QPixmap::fromImageReader(imageReader));
}

extern "C" QPixmap* bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(QImageReader* imageReader, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap (QPixmap::fromImageReader(imageReader, flags));
}

extern "C" bool bg_QPixmap_load_const_QString_R_const_char_X(QPixmap *_self_, const CrystalString fileName, const char* format) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size), format);
}

extern "C" bool bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(QPixmap *_self_, const CrystalString fileName, const char* format, Qt::ImageConversionFlags flags) {
  return _self_->load(QString::fromUtf8(fileName.ptr, fileName.size), format, flags);
}

extern "C" bool bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(QPixmap *_self_, const uchar* buf, uint len, const char* format) {
  return _self_->loadFromData(buf, len, format);
}

extern "C" bool bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(QPixmap *_self_, const uchar* buf, uint len, const char* format, Qt::ImageConversionFlags flags) {
  return _self_->loadFromData(buf, len, format, flags);
}

extern "C" bool bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(QPixmap *_self_, const QByteArray& data, const char* format) {
  return _self_->loadFromData(data, format);
}

extern "C" bool bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(QPixmap *_self_, const QByteArray& data, const char* format, Qt::ImageConversionFlags flags) {
  return _self_->loadFromData(data, format, flags);
}

extern "C" bool bg_QPixmap_save_const_QString_R_const_char_X_int(QPixmap *_self_, const CrystalString fileName, const char* format, int quality) {
  return _self_->save(QString::fromUtf8(fileName.ptr, fileName.size), format, quality);
}

extern "C" bool bg_QPixmap_save_QIODevice_X_const_char_X_int(QPixmap *_self_, QIODevice* device, const char* format, int quality) {
  return _self_->save(device, format, quality);
}

extern "C" bool bg_QPixmap_convertFromImage_const_QImage_R(QPixmap *_self_, const QImage& img) {
  return _self_->convertFromImage(img);
}

extern "C" bool bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(QPixmap *_self_, const QImage& img, Qt::ImageConversionFlags flags) {
  return _self_->convertFromImage(img, flags);
}

extern "C" QPixmap* bg_QPixmap_copy_int_int_int_int(QPixmap *_self_, int x, int y, int width, int height) {
  return new (UseGC) QPixmap (_self_->copy(x, y, width, height));
}

extern "C" QPixmap* bg_QPixmap_copy_(QPixmap *_self_) {
  return new (UseGC) QPixmap (_self_->copy());
}

extern "C" QPixmap* bg_QPixmap_copy_const_QRect_R(QPixmap *_self_, const QRect& rect) {
  return new (UseGC) QPixmap (_self_->copy(rect));
}

extern "C" void bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(QPixmap *_self_, int dx, int dy, int x, int y, int width, int height, QRegion* exposed) {
  return _self_->scroll(dx, dy, x, y, width, height, exposed);
}

extern "C" void bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(QPixmap *_self_, int dx, int dy, const QRect& rect, QRegion* exposed) {
  return _self_->scroll(dx, dy, rect, exposed);
}

extern "C" qint64 bg_QPixmap_cacheKey_(QPixmap *_self_) {
  return _self_->cacheKey();
}

extern "C" bool bg_QPixmap_isDetached_(QPixmap *_self_) {
  return _self_->isDetached();
}

extern "C" void bg_QPixmap_detach_(QPixmap *_self_) {
  return _self_->detach();
}

extern "C" bool bg_QPixmap_isQBitmap_(QPixmap *_self_) {
  return _self_->isQBitmap();
}

extern "C" QPaintEngine* bg_QPixmap_paintEngine_(QPixmap *_self_) {
  return _self_->paintEngine();
}

extern "C" int bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(QPixmap *_self_, QPaintDevice::PaintDeviceMetric unnamed_arg_0) {
  return _self_->metric(unnamed_arg_0);
}

extern "C" QPixmap* bg_QPixmap_fromImageInPlace_STATIC_QImage_R(QImage& image) {
  return new (UseGC) QPixmap (QPixmap::fromImageInPlace(image));
}

extern "C" QPixmap* bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(QImage& image, Qt::ImageConversionFlags flags) {
  return new (UseGC) QPixmap (QPixmap::fromImageInPlace(image, flags));
}

extern "C" QPlatformPixmap* bg_QPixmap_handle_(QPixmap *_self_) {
  return _self_->handle();
}

extern "C" const QMetaObject* bg_QEventLoop_metaObject_(QEventLoop *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QEventLoop_qt_metacast_const_char_X(QEventLoop *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QEventLoop::tr(s, c, n));
}

extern "C" CrystalString bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QEventLoop::trUtf8(s, c, n));
}

extern "C" QEventLoop* bg_QEventLoop_CONSTRUCT_QObject_X(QObject* parent) {
  return new (UseGC) BgInherit_QEventLoop(parent);
}

extern "C" bool bg_QEventLoop_processEvents_(QEventLoop *_self_) {
  return _self_->processEvents();
}

extern "C" bool bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(QEventLoop *_self_, QEventLoop::ProcessEventsFlags flags) {
  return _self_->processEvents(flags);
}

extern "C" void bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(QEventLoop *_self_, QEventLoop::ProcessEventsFlags flags, int maximumTime) {
  return _self_->processEvents(flags, maximumTime);
}

extern "C" int bg_QEventLoop_exec_(QEventLoop *_self_) {
  return _self_->exec();
}

extern "C" int bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(QEventLoop *_self_, QEventLoop::ProcessEventsFlags flags) {
  return _self_->exec(flags);
}

extern "C" void bg_QEventLoop_exit_int(QEventLoop *_self_, int returnCode) {
  return _self_->exit(returnCode);
}

extern "C" bool bg_QEventLoop_isRunning_(QEventLoop *_self_) {
  return _self_->isRunning();
}

extern "C" void bg_QEventLoop_wakeUp_(QEventLoop *_self_) {
  return _self_->wakeUp();
}

extern "C" bool bg_QEventLoop_event_QEvent_X(QEventLoop *_self_, QEvent* event) {
  return _self_->event(event);
}

extern "C" void bg_QEventLoop_quit_(QEventLoop *_self_) {
  return _self_->quit();
}

extern "C" const QMetaObject* bg_QTabWidget_metaObject_(QTabWidget *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QTabWidget_qt_metacast_const_char_X(QTabWidget *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QTabWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QTabWidget::trUtf8(s, c, n));
}

extern "C" QTabWidget* bg_QTabWidget_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QTabWidget(parent);
}

extern "C" int bg_QTabWidget_addTab_QWidget_X_const_QString_R(QTabWidget *_self_, QWidget* widget, const CrystalString unnamed_arg_1) {
  return _self_->addTab(widget, QString::fromUtf8(unnamed_arg_1.ptr, unnamed_arg_1.size));
}

extern "C" int bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(QTabWidget *_self_, QWidget* widget, const QIcon& icon, const CrystalString label) {
  return _self_->addTab(widget, icon, QString::fromUtf8(label.ptr, label.size));
}

extern "C" int bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(QTabWidget *_self_, int index, QWidget* widget, const CrystalString unnamed_arg_2) {
  return _self_->insertTab(index, widget, QString::fromUtf8(unnamed_arg_2.ptr, unnamed_arg_2.size));
}

extern "C" int bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(QTabWidget *_self_, int index, QWidget* widget, const QIcon& icon, const CrystalString label) {
  return _self_->insertTab(index, widget, icon, QString::fromUtf8(label.ptr, label.size));
}

extern "C" void bg_QTabWidget_removeTab_int(QTabWidget *_self_, int index) {
  return _self_->removeTab(index);
}

extern "C" bool bg_QTabWidget_isTabEnabled_int(QTabWidget *_self_, int index) {
  return _self_->isTabEnabled(index);
}

extern "C" void bg_QTabWidget_setTabEnabled_int_bool(QTabWidget *_self_, int index, bool unnamed_arg_1) {
  return _self_->setTabEnabled(index, unnamed_arg_1);
}

extern "C" CrystalString bg_QTabWidget_tabText_int(QTabWidget *_self_, int index) {
  return qstring_to_crystal(_self_->tabText(index));
}

extern "C" void bg_QTabWidget_setTabText_int_const_QString_R(QTabWidget *_self_, int index, const CrystalString unnamed_arg_1) {
  return _self_->setTabText(index, QString::fromUtf8(unnamed_arg_1.ptr, unnamed_arg_1.size));
}

extern "C" QIcon* bg_QTabWidget_tabIcon_int(QTabWidget *_self_, int index) {
  return new (UseGC) QIcon (_self_->tabIcon(index));
}

extern "C" void bg_QTabWidget_setTabIcon_int_const_QIcon_R(QTabWidget *_self_, int index, const QIcon& icon) {
  return _self_->setTabIcon(index, icon);
}

extern "C" void bg_QTabWidget_setTabToolTip_int_const_QString_R(QTabWidget *_self_, int index, const CrystalString tip) {
  return _self_->setTabToolTip(index, QString::fromUtf8(tip.ptr, tip.size));
}

extern "C" CrystalString bg_QTabWidget_tabToolTip_int(QTabWidget *_self_, int index) {
  return qstring_to_crystal(_self_->tabToolTip(index));
}

extern "C" void bg_QTabWidget_setTabWhatsThis_int_const_QString_R(QTabWidget *_self_, int index, const CrystalString text) {
  return _self_->setTabWhatsThis(index, QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QTabWidget_tabWhatsThis_int(QTabWidget *_self_, int index) {
  return qstring_to_crystal(_self_->tabWhatsThis(index));
}

extern "C" int bg_QTabWidget_currentIndex_(QTabWidget *_self_) {
  return _self_->currentIndex();
}

extern "C" QWidget* bg_QTabWidget_currentWidget_(QTabWidget *_self_) {
  return _self_->currentWidget();
}

extern "C" QWidget* bg_QTabWidget_widget_int(QTabWidget *_self_, int index) {
  return _self_->widget(index);
}

extern "C" int bg_QTabWidget_indexOf_QWidget_X(QTabWidget *_self_, QWidget* widget) {
  return _self_->indexOf(widget);
}

extern "C" int bg_QTabWidget_count_(QTabWidget *_self_) {
  return _self_->count();
}

extern "C" QTabWidget::TabPosition bg_QTabWidget_tabPosition_(QTabWidget *_self_) {
  return _self_->tabPosition();
}

extern "C" void bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(QTabWidget *_self_, QTabWidget::TabPosition unnamed_arg_0) {
  return _self_->setTabPosition(unnamed_arg_0);
}

extern "C" bool bg_QTabWidget_tabsClosable_(QTabWidget *_self_) {
  return _self_->tabsClosable();
}

extern "C" void bg_QTabWidget_setTabsClosable_bool(QTabWidget *_self_, bool closeable) {
  return _self_->setTabsClosable(closeable);
}

extern "C" bool bg_QTabWidget_isMovable_(QTabWidget *_self_) {
  return _self_->isMovable();
}

extern "C" void bg_QTabWidget_setMovable_bool(QTabWidget *_self_, bool movable) {
  return _self_->setMovable(movable);
}

extern "C" QTabWidget::TabShape bg_QTabWidget_tabShape_(QTabWidget *_self_) {
  return _self_->tabShape();
}

extern "C" void bg_QTabWidget_setTabShape_QTabWidget__TabShape(QTabWidget *_self_, QTabWidget::TabShape s) {
  return _self_->setTabShape(s);
}

extern "C" QSize* bg_QTabWidget_sizeHint_(QTabWidget *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QTabWidget_minimumSizeHint_(QTabWidget *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" int bg_QTabWidget_heightForWidth_int(QTabWidget *_self_, int width) {
  return _self_->heightForWidth(width);
}

extern "C" bool bg_QTabWidget_hasHeightForWidth_(QTabWidget *_self_) {
  return _self_->hasHeightForWidth();
}

extern "C" void bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(QTabWidget *_self_, QWidget* w, Qt::Corner corner) {
  return _self_->setCornerWidget(w, corner);
}

extern "C" QWidget* bg_QTabWidget_cornerWidget_Qt__Corner(QTabWidget *_self_, Qt::Corner corner) {
  return _self_->cornerWidget(corner);
}

extern "C" Qt::TextElideMode bg_QTabWidget_elideMode_(QTabWidget *_self_) {
  return _self_->elideMode();
}

extern "C" void bg_QTabWidget_setElideMode_Qt__TextElideMode(QTabWidget *_self_, Qt::TextElideMode unnamed_arg_0) {
  return _self_->setElideMode(unnamed_arg_0);
}

extern "C" QSize* bg_QTabWidget_iconSize_(QTabWidget *_self_) {
  return new (UseGC) QSize (_self_->iconSize());
}

extern "C" void bg_QTabWidget_setIconSize_const_QSize_R(QTabWidget *_self_, const QSize& size) {
  return _self_->setIconSize(size);
}

extern "C" bool bg_QTabWidget_usesScrollButtons_(QTabWidget *_self_) {
  return _self_->usesScrollButtons();
}

extern "C" void bg_QTabWidget_setUsesScrollButtons_bool(QTabWidget *_self_, bool useButtons) {
  return _self_->setUsesScrollButtons(useButtons);
}

extern "C" bool bg_QTabWidget_documentMode_(QTabWidget *_self_) {
  return _self_->documentMode();
}

extern "C" void bg_QTabWidget_setDocumentMode_bool(QTabWidget *_self_, bool set) {
  return _self_->setDocumentMode(set);
}

extern "C" bool bg_QTabWidget_tabBarAutoHide_(QTabWidget *_self_) {
  return _self_->tabBarAutoHide();
}

extern "C" void bg_QTabWidget_setTabBarAutoHide_bool(QTabWidget *_self_, bool enabled) {
  return _self_->setTabBarAutoHide(enabled);
}

extern "C" void bg_QTabWidget_clear_(QTabWidget *_self_) {
  return _self_->clear();
}

extern "C" QTabBar* bg_QTabWidget_tabBar_(QTabWidget *_self_) {
  return _self_->tabBar();
}

extern "C" void bg_QTabWidget_setCurrentIndex_int(QTabWidget *_self_, int index) {
  return _self_->setCurrentIndex(index);
}

extern "C" void bg_QTabWidget_setCurrentWidget_QWidget_X(QTabWidget *_self_, QWidget* widget) {
  return _self_->setCurrentWidget(widget);
}

extern "C" QMetaObject::Connection* bg_QTabWidget_currentChanged_CONNECT_CrystalProc_void__int_(QTabWidget *_self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::currentChanged, [_proc_](int index){
  _proc_(index);
}));
}


extern "C" void bg_QTabWidget_currentChanged_int(QTabWidget *_self_, int index) {
  return _self_->currentChanged(index);
}

extern "C" QMetaObject::Connection* bg_QTabWidget_tabCloseRequested_CONNECT_CrystalProc_void__int_(QTabWidget *_self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::tabCloseRequested, [_proc_](int index){
  _proc_(index);
}));
}


extern "C" void bg_QTabWidget_tabCloseRequested_int(QTabWidget *_self_, int index) {
  return _self_->tabCloseRequested(index);
}

extern "C" QMetaObject::Connection* bg_QTabWidget_tabBarClicked_CONNECT_CrystalProc_void__int_(QTabWidget *_self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::tabBarClicked, [_proc_](int index){
  _proc_(index);
}));
}


extern "C" void bg_QTabWidget_tabBarClicked_int(QTabWidget *_self_, int index) {
  return _self_->tabBarClicked(index);
}

extern "C" QMetaObject::Connection* bg_QTabWidget_tabBarDoubleClicked_CONNECT_CrystalProc_void__int_(QTabWidget *_self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTabWidget::*)(int))&QTabWidget::tabBarDoubleClicked, [_proc_](int index){
  _proc_(index);
}));
}


extern "C" void bg_QTabWidget_tabBarDoubleClicked_int(QTabWidget *_self_, int index) {
  return _self_->tabBarDoubleClicked(index);
}

extern "C" void bg_QTabWidget_tabInserted_int(QTabWidget *_self_, int index) {
  return _self_->tabInserted(index);
}

extern "C" void bg_QTabWidget_tabRemoved_int(QTabWidget *_self_, int index) {
  return _self_->tabRemoved(index);
}

extern "C" void bg_QTabWidget_showEvent_QShowEvent_X(QTabWidget *_self_, QShowEvent* unnamed_arg_0) {
  return _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_resizeEvent_QResizeEvent_X(QTabWidget *_self_, QResizeEvent* unnamed_arg_0) {
  return _self_->resizeEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_keyPressEvent_QKeyEvent_X(QTabWidget *_self_, QKeyEvent* unnamed_arg_0) {
  return _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_paintEvent_QPaintEvent_X(QTabWidget *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_setTabBar_QTabBar_X(QTabWidget *_self_, QTabBar* unnamed_arg_0) {
  return _self_->setTabBar(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_changeEvent_QEvent_X(QTabWidget *_self_, QEvent* unnamed_arg_0) {
  return _self_->changeEvent(unnamed_arg_0);
}

extern "C" bool bg_QTabWidget_event_QEvent_X(QTabWidget *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" void bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(QTabWidget *_self_, QStyleOptionTabWidgetFrame* option) {
  return _self_->initStyleOption(option);
}

extern "C" QLayoutItem* bg_QLayoutItem_CONSTRUCT_() {
  return new (UseGC) BgInherit_QLayoutItem();
}

extern "C" QLayoutItem* bg_QLayoutItem_CONSTRUCT_Qt__Alignment(Qt::Alignment alignment) {
  return new (UseGC) BgInherit_QLayoutItem(alignment);
}

extern "C" QSize* bg_QLayoutItem_sizeHint_(QLayoutItem *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QLayoutItem_minimumSize_(QLayoutItem *_self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize* bg_QLayoutItem_maximumSize_(QLayoutItem *_self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" Qt::Orientations bg_QLayoutItem_expandingDirections_(QLayoutItem *_self_) {
  return _self_->expandingDirections();
}

extern "C" void bg_QLayoutItem_setGeometry_const_QRect_R(QLayoutItem *_self_, const QRect& unnamed_arg_0) {
  return _self_->setGeometry(unnamed_arg_0);
}

extern "C" QRect* bg_QLayoutItem_geometry_(QLayoutItem *_self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" bool bg_QLayoutItem_isEmpty_(QLayoutItem *_self_) {
  return _self_->isEmpty();
}

extern "C" bool bg_QLayoutItem_hasHeightForWidth_(QLayoutItem *_self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QLayoutItem_heightForWidth_int(QLayoutItem *_self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" int bg_QLayoutItem_minimumHeightForWidth_int(QLayoutItem *_self_, int unnamed_arg_0) {
  return _self_->minimumHeightForWidth(unnamed_arg_0);
}

extern "C" void bg_QLayoutItem_invalidate_(QLayoutItem *_self_) {
  return _self_->invalidate();
}

extern "C" QWidget* bg_QLayoutItem_widget_(QLayoutItem *_self_) {
  return _self_->widget();
}

extern "C" QLayout* bg_QLayoutItem_layout_(QLayoutItem *_self_) {
  return _self_->layout();
}

extern "C" QSpacerItem* bg_QLayoutItem_spacerItem_(QLayoutItem *_self_) {
  return _self_->spacerItem();
}

extern "C" Qt::Alignment bg_QLayoutItem_alignment_(QLayoutItem *_self_) {
  return _self_->alignment();
}

extern "C" void bg_QLayoutItem_setAlignment_Qt__Alignment(QLayoutItem *_self_, Qt::Alignment a) {
  return _self_->setAlignment(a);
}

extern "C" const QMetaObject* bg_QLayout_metaObject_(QLayout *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QLayout_qt_metacast_const_char_X(QLayout *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLayout::trUtf8(s, c, n));
}

extern "C" QLayout* bg_QLayout_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QLayout(parent);
}

extern "C" QLayout* bg_QLayout_CONSTRUCT_() {
  return new (UseGC) BgInherit_QLayout();
}

extern "C" int bg_QLayout_margin_(QLayout *_self_) {
  return _self_->margin();
}

extern "C" int bg_QLayout_spacing_(QLayout *_self_) {
  return _self_->spacing();
}

extern "C" void bg_QLayout_setMargin_int(QLayout *_self_, int unnamed_arg_0) {
  return _self_->setMargin(unnamed_arg_0);
}

extern "C" void bg_QLayout_setSpacing_int(QLayout *_self_, int unnamed_arg_0) {
  return _self_->setSpacing(unnamed_arg_0);
}

extern "C" void bg_QLayout_setContentsMargins_int_int_int_int(QLayout *_self_, int left, int top, int right, int bottom) {
  return _self_->setContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QLayout_setContentsMargins_const_QMargins_R(QLayout *_self_, const QMargins& margins) {
  return _self_->setContentsMargins(margins);
}

extern "C" void bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(QLayout *_self_, int* left, int* top, int* right, int* bottom) {
  return _self_->getContentsMargins(left, top, right, bottom);
}

extern "C" QMargins* bg_QLayout_contentsMargins_(QLayout *_self_) {
  return new (UseGC) QMargins (_self_->contentsMargins());
}

extern "C" QRect* bg_QLayout_contentsRect_(QLayout *_self_) {
  return new (UseGC) QRect (_self_->contentsRect());
}

extern "C" bool bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(QLayout *_self_, QWidget* w, Qt::Alignment alignment) {
  return _self_->setAlignment(w, alignment);
}

extern "C" bool bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(QLayout *_self_, QLayout* l, Qt::Alignment alignment) {
  return _self_->setAlignment(l, alignment);
}

extern "C" void bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(QLayout *_self_, QLayout::SizeConstraint unnamed_arg_0) {
  return _self_->setSizeConstraint(unnamed_arg_0);
}

extern "C" QLayout::SizeConstraint bg_QLayout_sizeConstraint_(QLayout *_self_) {
  return _self_->sizeConstraint();
}

extern "C" void bg_QLayout_setMenuBar_QWidget_X(QLayout *_self_, QWidget* w) {
  return _self_->setMenuBar(w);
}

extern "C" QWidget* bg_QLayout_menuBar_(QLayout *_self_) {
  return _self_->menuBar();
}

extern "C" QWidget* bg_QLayout_parentWidget_(QLayout *_self_) {
  return _self_->parentWidget();
}

extern "C" void bg_QLayout_invalidate_(QLayout *_self_) {
  return _self_->invalidate();
}

extern "C" QRect* bg_QLayout_geometry_(QLayout *_self_) {
  return new (UseGC) QRect (_self_->geometry());
}

extern "C" bool bg_QLayout_activate_(QLayout *_self_) {
  return _self_->activate();
}

extern "C" void bg_QLayout_update_(QLayout *_self_) {
  return _self_->update();
}

extern "C" void bg_QLayout_addWidget_QWidget_X(QLayout *_self_, QWidget* w) {
  return _self_->addWidget(w);
}

extern "C" void bg_QLayout_addItem_QLayoutItem_X(QLayout *_self_, QLayoutItem* unnamed_arg_0) {
  return _self_->addItem(unnamed_arg_0);
}

extern "C" void bg_QLayout_removeWidget_QWidget_X(QLayout *_self_, QWidget* w) {
  return _self_->removeWidget(w);
}

extern "C" void bg_QLayout_removeItem_QLayoutItem_X(QLayout *_self_, QLayoutItem* unnamed_arg_0) {
  return _self_->removeItem(unnamed_arg_0);
}

extern "C" Qt::Orientations bg_QLayout_expandingDirections_(QLayout *_self_) {
  return _self_->expandingDirections();
}

extern "C" QSize* bg_QLayout_minimumSize_(QLayout *_self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize* bg_QLayout_maximumSize_(QLayout *_self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" void bg_QLayout_setGeometry_const_QRect_R(QLayout *_self_, const QRect& unnamed_arg_0) {
  return _self_->setGeometry(unnamed_arg_0);
}

extern "C" QLayoutItem* bg_QLayout_itemAt_int(QLayout *_self_, int index) {
  return _self_->itemAt(index);
}

extern "C" QLayoutItem* bg_QLayout_takeAt_int(QLayout *_self_, int index) {
  return _self_->takeAt(index);
}

extern "C" int bg_QLayout_indexOf_QWidget_X(QLayout *_self_, QWidget* unnamed_arg_0) {
  return _self_->indexOf(unnamed_arg_0);
}

extern "C" int bg_QLayout_count_(QLayout *_self_) {
  return _self_->count();
}

extern "C" bool bg_QLayout_isEmpty_(QLayout *_self_) {
  return _self_->isEmpty();
}

extern "C" QLayoutItem* bg_QLayout_replaceWidget_QWidget_X_QWidget_X(QLayout *_self_, QWidget* from, QWidget* to) {
  return _self_->replaceWidget(from, to);
}

extern "C" QLayoutItem* bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(QLayout *_self_, QWidget* from, QWidget* to, Qt::FindChildOptions options) {
  return _self_->replaceWidget(from, to, options);
}

extern "C" int bg_QLayout_totalHeightForWidth_int(QLayout *_self_, int w) {
  return _self_->totalHeightForWidth(w);
}

extern "C" QSize* bg_QLayout_totalMinimumSize_(QLayout *_self_) {
  return new (UseGC) QSize (_self_->totalMinimumSize());
}

extern "C" QSize* bg_QLayout_totalMaximumSize_(QLayout *_self_) {
  return new (UseGC) QSize (_self_->totalMaximumSize());
}

extern "C" QSize* bg_QLayout_totalSizeHint_(QLayout *_self_) {
  return new (UseGC) QSize (_self_->totalSizeHint());
}

extern "C" QLayout* bg_QLayout_layout_(QLayout *_self_) {
  return _self_->layout();
}

extern "C" void bg_QLayout_setEnabled_bool(QLayout *_self_, bool unnamed_arg_0) {
  return _self_->setEnabled(unnamed_arg_0);
}

extern "C" bool bg_QLayout_isEnabled_(QLayout *_self_) {
  return _self_->isEnabled();
}

extern "C" QSize* bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(const QWidget* w, const QSize& s) {
  return new (UseGC) QSize (QLayout::closestAcceptableSize(w, s));
}

extern "C" void bg_QLayout_widgetEvent_QEvent_X(QLayout *_self_, QEvent* unnamed_arg_0) {
  return _self_->widgetEvent(unnamed_arg_0);
}

extern "C" void bg_QLayout_childEvent_QChildEvent_X(QLayout *_self_, QChildEvent* e) {
  return _self_->childEvent(e);
}

extern "C" void bg_QLayout_addChildLayout_QLayout_X(QLayout *_self_, QLayout* l) {
  return _self_->addChildLayout(l);
}

extern "C" void bg_QLayout_addChildWidget_QWidget_X(QLayout *_self_, QWidget* w) {
  return _self_->addChildWidget(w);
}

extern "C" bool bg_QLayout_adoptLayout_QLayout_X(QLayout *_self_, QLayout* layout) {
  return _self_->adoptLayout(layout);
}

extern "C" QRect* bg_QLayout_alignmentRect_const_QRect_R(QLayout *_self_, const QRect& unnamed_arg_0) {
  return new (UseGC) QRect (_self_->alignmentRect(unnamed_arg_0));
}

extern "C" QLayout* bg_QLayout_CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(QLayoutPrivate& d, QLayout* unnamed_arg_1, QWidget* unnamed_arg_2) {
  return new (UseGC) BgInherit_QLayout(d, unnamed_arg_1, unnamed_arg_2);
}

extern "C" const QMetaObject* bg_QBoxLayout_metaObject_(QBoxLayout *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QBoxLayout_qt_metacast_const_char_X(QBoxLayout *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QBoxLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QBoxLayout::trUtf8(s, c, n));
}

extern "C" QBoxLayout* bg_QBoxLayout_CONSTRUCT_QBoxLayout__Direction_QWidget_X(QBoxLayout::Direction unnamed_arg_0, QWidget* parent) {
  return new (UseGC) BgInherit_QBoxLayout(unnamed_arg_0, parent);
}

extern "C" QBoxLayout::Direction bg_QBoxLayout_direction_(QBoxLayout *_self_) {
  return _self_->direction();
}

extern "C" void bg_QBoxLayout_setDirection_QBoxLayout__Direction(QBoxLayout *_self_, QBoxLayout::Direction unnamed_arg_0) {
  return _self_->setDirection(unnamed_arg_0);
}

extern "C" void bg_QBoxLayout_addSpacing_int(QBoxLayout *_self_, int size) {
  return _self_->addSpacing(size);
}

extern "C" void bg_QBoxLayout_addStretch_int(QBoxLayout *_self_, int stretch) {
  return _self_->addStretch(stretch);
}

extern "C" void bg_QBoxLayout_addSpacerItem_QSpacerItem_X(QBoxLayout *_self_, QSpacerItem* spacerItem) {
  return _self_->addSpacerItem(spacerItem);
}

extern "C" void bg_QBoxLayout_addWidget_QWidget_X_int(QBoxLayout *_self_, QWidget* unnamed_arg_0, int stretch) {
  return _self_->addWidget(unnamed_arg_0, stretch);
}

extern "C" void bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(QBoxLayout *_self_, QWidget* unnamed_arg_0, int stretch, Qt::Alignment alignment) {
  return _self_->addWidget(unnamed_arg_0, stretch, alignment);
}

extern "C" void bg_QBoxLayout_addLayout_QLayout_X_int(QBoxLayout *_self_, QLayout* layout, int stretch) {
  return _self_->addLayout(layout, stretch);
}

extern "C" void bg_QBoxLayout_addStrut_int(QBoxLayout *_self_, int unnamed_arg_0) {
  return _self_->addStrut(unnamed_arg_0);
}

extern "C" void bg_QBoxLayout_addItem_QLayoutItem_X(QBoxLayout *_self_, QLayoutItem* unnamed_arg_0) {
  return _self_->addItem(unnamed_arg_0);
}

extern "C" void bg_QBoxLayout_insertSpacing_int_int(QBoxLayout *_self_, int index, int size) {
  return _self_->insertSpacing(index, size);
}

extern "C" void bg_QBoxLayout_insertStretch_int_int(QBoxLayout *_self_, int index, int stretch) {
  return _self_->insertStretch(index, stretch);
}

extern "C" void bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(QBoxLayout *_self_, int index, QSpacerItem* spacerItem) {
  return _self_->insertSpacerItem(index, spacerItem);
}

extern "C" void bg_QBoxLayout_insertWidget_int_QWidget_X_int(QBoxLayout *_self_, int index, QWidget* widget, int stretch) {
  return _self_->insertWidget(index, widget, stretch);
}

extern "C" void bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(QBoxLayout *_self_, int index, QWidget* widget, int stretch, Qt::Alignment alignment) {
  return _self_->insertWidget(index, widget, stretch, alignment);
}

extern "C" void bg_QBoxLayout_insertLayout_int_QLayout_X_int(QBoxLayout *_self_, int index, QLayout* layout, int stretch) {
  return _self_->insertLayout(index, layout, stretch);
}

extern "C" void bg_QBoxLayout_insertItem_int_QLayoutItem_X(QBoxLayout *_self_, int index, QLayoutItem* unnamed_arg_1) {
  return _self_->insertItem(index, unnamed_arg_1);
}

extern "C" int bg_QBoxLayout_spacing_(QBoxLayout *_self_) {
  return _self_->spacing();
}

extern "C" void bg_QBoxLayout_setSpacing_int(QBoxLayout *_self_, int spacing) {
  return _self_->setSpacing(spacing);
}

extern "C" bool bg_QBoxLayout_setStretchFactor_QWidget_X_int(QBoxLayout *_self_, QWidget* w, int stretch) {
  return _self_->setStretchFactor(w, stretch);
}

extern "C" bool bg_QBoxLayout_setStretchFactor_QLayout_X_int(QBoxLayout *_self_, QLayout* l, int stretch) {
  return _self_->setStretchFactor(l, stretch);
}

extern "C" void bg_QBoxLayout_setStretch_int_int(QBoxLayout *_self_, int index, int stretch) {
  return _self_->setStretch(index, stretch);
}

extern "C" int bg_QBoxLayout_stretch_int(QBoxLayout *_self_, int index) {
  return _self_->stretch(index);
}

extern "C" QSize* bg_QBoxLayout_sizeHint_(QBoxLayout *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QBoxLayout_minimumSize_(QBoxLayout *_self_) {
  return new (UseGC) QSize (_self_->minimumSize());
}

extern "C" QSize* bg_QBoxLayout_maximumSize_(QBoxLayout *_self_) {
  return new (UseGC) QSize (_self_->maximumSize());
}

extern "C" bool bg_QBoxLayout_hasHeightForWidth_(QBoxLayout *_self_) {
  return _self_->hasHeightForWidth();
}

extern "C" int bg_QBoxLayout_heightForWidth_int(QBoxLayout *_self_, int unnamed_arg_0) {
  return _self_->heightForWidth(unnamed_arg_0);
}

extern "C" int bg_QBoxLayout_minimumHeightForWidth_int(QBoxLayout *_self_, int unnamed_arg_0) {
  return _self_->minimumHeightForWidth(unnamed_arg_0);
}

extern "C" Qt::Orientations bg_QBoxLayout_expandingDirections_(QBoxLayout *_self_) {
  return _self_->expandingDirections();
}

extern "C" void bg_QBoxLayout_invalidate_(QBoxLayout *_self_) {
  return _self_->invalidate();
}

extern "C" QLayoutItem* bg_QBoxLayout_itemAt_int(QBoxLayout *_self_, int unnamed_arg_0) {
  return _self_->itemAt(unnamed_arg_0);
}

extern "C" QLayoutItem* bg_QBoxLayout_takeAt_int(QBoxLayout *_self_, int unnamed_arg_0) {
  return _self_->takeAt(unnamed_arg_0);
}

extern "C" int bg_QBoxLayout_count_(QBoxLayout *_self_) {
  return _self_->count();
}

extern "C" void bg_QBoxLayout_setGeometry_const_QRect_R(QBoxLayout *_self_, const QRect& unnamed_arg_0) {
  return _self_->setGeometry(unnamed_arg_0);
}

extern "C" const QMetaObject* bg_QHBoxLayout_metaObject_(QHBoxLayout *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QHBoxLayout_qt_metacast_const_char_X(QHBoxLayout *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QHBoxLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QHBoxLayout::trUtf8(s, c, n));
}

extern "C" QHBoxLayout* bg_QHBoxLayout_CONSTRUCT_() {
  return new (UseGC) BgInherit_QHBoxLayout();
}

extern "C" QHBoxLayout* bg_QHBoxLayout_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QHBoxLayout(parent);
}

extern "C" const QMetaObject* bg_QVBoxLayout_metaObject_(QVBoxLayout *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QVBoxLayout_qt_metacast_const_char_X(QVBoxLayout *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QVBoxLayout::tr(s, c, n));
}

extern "C" CrystalString bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QVBoxLayout::trUtf8(s, c, n));
}

extern "C" QVBoxLayout* bg_QVBoxLayout_CONSTRUCT_() {
  return new (UseGC) BgInherit_QVBoxLayout();
}

extern "C" QVBoxLayout* bg_QVBoxLayout_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QVBoxLayout(parent);
}

extern "C" QKeySequence* bg_QKeySequence_CONSTRUCT_() {
  return new (UseGC) QKeySequence();
}

extern "C" QKeySequence* bg_QKeySequence_CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(const CrystalString key, QKeySequence::SequenceFormat format) {
  return new (UseGC) QKeySequence(QString::fromUtf8(key.ptr, key.size), format);
}

extern "C" QKeySequence* bg_QKeySequence_CONSTRUCT_int_int_int_int(int k1, int k2, int k3, int k4) {
  return new (UseGC) QKeySequence(k1, k2, k3, k4);
}

extern "C" QKeySequence* bg_QKeySequence_CONSTRUCT_QKeySequence__StandardKey(QKeySequence::StandardKey key) {
  return new (UseGC) QKeySequence(key);
}

extern "C" int bg_QKeySequence_count_(QKeySequence *_self_) {
  return _self_->count();
}

extern "C" bool bg_QKeySequence_isEmpty_(QKeySequence *_self_) {
  return _self_->isEmpty();
}

extern "C" CrystalString bg_QKeySequence_toString_QKeySequence__SequenceFormat(QKeySequence *_self_, QKeySequence::SequenceFormat format) {
  return qstring_to_crystal(_self_->toString(format));
}

extern "C" QKeySequence* bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(const CrystalString str, QKeySequence::SequenceFormat format) {
  return new (UseGC) QKeySequence (QKeySequence::fromString(QString::fromUtf8(str.ptr, str.size), format));
}

extern "C" QKeySequence::SequenceMatch bg_QKeySequence_matches_const_QKeySequence_R(QKeySequence *_self_, const QKeySequence& seq) {
  return _self_->matches(seq);
}

extern "C" QKeySequence* bg_QKeySequence_mnemonic_STATIC_const_QString_R(const CrystalString text) {
  return new (UseGC) QKeySequence (QKeySequence::mnemonic(QString::fromUtf8(text.ptr, text.size)));
}

extern "C" void bg_QKeySequence_swap_QKeySequence_R(QKeySequence *_self_, QKeySequence& other) {
  return _self_->swap(other);
}

extern "C" bool bg_QKeySequence_isDetached_(QKeySequence *_self_) {
  return _self_->isDetached();
}

extern "C" const QMetaObject* bg_QLineEdit_metaObject_(QLineEdit *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QLineEdit_qt_metacast_const_char_X(QLineEdit *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLineEdit::tr(s, c, n));
}

extern "C" CrystalString bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QLineEdit::trUtf8(s, c, n));
}

extern "C" QLineEdit* bg_QLineEdit_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QLineEdit(parent);
}

extern "C" QLineEdit* bg_QLineEdit_CONSTRUCT_const_QString_R_QWidget_X(const CrystalString unnamed_arg_0, QWidget* parent) {
  return new (UseGC) BgInherit_QLineEdit(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size), parent);
}

extern "C" CrystalString bg_QLineEdit_text_(QLineEdit *_self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" CrystalString bg_QLineEdit_displayText_(QLineEdit *_self_) {
  return qstring_to_crystal(_self_->displayText());
}

extern "C" CrystalString bg_QLineEdit_placeholderText_(QLineEdit *_self_) {
  return qstring_to_crystal(_self_->placeholderText());
}

extern "C" void bg_QLineEdit_setPlaceholderText_const_QString_R(QLineEdit *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setPlaceholderText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" int bg_QLineEdit_maxLength_(QLineEdit *_self_) {
  return _self_->maxLength();
}

extern "C" void bg_QLineEdit_setMaxLength_int(QLineEdit *_self_, int unnamed_arg_0) {
  return _self_->setMaxLength(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_setFrame_bool(QLineEdit *_self_, bool unnamed_arg_0) {
  return _self_->setFrame(unnamed_arg_0);
}

extern "C" bool bg_QLineEdit_hasFrame_(QLineEdit *_self_) {
  return _self_->hasFrame();
}

extern "C" void bg_QLineEdit_setClearButtonEnabled_bool(QLineEdit *_self_, bool enable) {
  return _self_->setClearButtonEnabled(enable);
}

extern "C" bool bg_QLineEdit_isClearButtonEnabled_(QLineEdit *_self_) {
  return _self_->isClearButtonEnabled();
}

extern "C" QLineEdit::EchoMode bg_QLineEdit_echoMode_(QLineEdit *_self_) {
  return _self_->echoMode();
}

extern "C" void bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(QLineEdit *_self_, QLineEdit::EchoMode unnamed_arg_0) {
  return _self_->setEchoMode(unnamed_arg_0);
}

extern "C" bool bg_QLineEdit_isReadOnly_(QLineEdit *_self_) {
  return _self_->isReadOnly();
}

extern "C" void bg_QLineEdit_setReadOnly_bool(QLineEdit *_self_, bool unnamed_arg_0) {
  return _self_->setReadOnly(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_setValidator_const_QValidator_X(QLineEdit *_self_, const QValidator* unnamed_arg_0) {
  return _self_->setValidator(unnamed_arg_0);
}

extern "C" const QValidator* bg_QLineEdit_validator_(QLineEdit *_self_) {
  return _self_->validator();
}

extern "C" void bg_QLineEdit_setCompleter_QCompleter_X(QLineEdit *_self_, QCompleter* completer) {
  return _self_->setCompleter(completer);
}

extern "C" QCompleter* bg_QLineEdit_completer_(QLineEdit *_self_) {
  return _self_->completer();
}

extern "C" QSize* bg_QLineEdit_sizeHint_(QLineEdit *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QSize* bg_QLineEdit_minimumSizeHint_(QLineEdit *_self_) {
  return new (UseGC) QSize (_self_->minimumSizeHint());
}

extern "C" int bg_QLineEdit_cursorPosition_(QLineEdit *_self_) {
  return _self_->cursorPosition();
}

extern "C" void bg_QLineEdit_setCursorPosition_int(QLineEdit *_self_, int unnamed_arg_0) {
  return _self_->setCursorPosition(unnamed_arg_0);
}

extern "C" int bg_QLineEdit_cursorPositionAt_const_QPoint_R(QLineEdit *_self_, const QPoint pos) {
  return _self_->cursorPositionAt(pos);
}

extern "C" void bg_QLineEdit_setAlignment_Qt__Alignment(QLineEdit *_self_, Qt::Alignment flag) {
  return _self_->setAlignment(flag);
}

extern "C" Qt::Alignment bg_QLineEdit_alignment_(QLineEdit *_self_) {
  return _self_->alignment();
}

extern "C" void bg_QLineEdit_cursorForward_bool_int(QLineEdit *_self_, bool mark, int steps) {
  return _self_->cursorForward(mark, steps);
}

extern "C" void bg_QLineEdit_cursorBackward_bool_int(QLineEdit *_self_, bool mark, int steps) {
  return _self_->cursorBackward(mark, steps);
}

extern "C" void bg_QLineEdit_cursorWordForward_bool(QLineEdit *_self_, bool mark) {
  return _self_->cursorWordForward(mark);
}

extern "C" void bg_QLineEdit_cursorWordBackward_bool(QLineEdit *_self_, bool mark) {
  return _self_->cursorWordBackward(mark);
}

extern "C" void bg_QLineEdit_backspace_(QLineEdit *_self_) {
  return _self_->backspace();
}

extern "C" void bg_QLineEdit_del_(QLineEdit *_self_) {
  return _self_->del();
}

extern "C" void bg_QLineEdit_home_bool(QLineEdit *_self_, bool mark) {
  return _self_->home(mark);
}

extern "C" void bg_QLineEdit_end_bool(QLineEdit *_self_, bool mark) {
  return _self_->end(mark);
}

extern "C" bool bg_QLineEdit_isModified_(QLineEdit *_self_) {
  return _self_->isModified();
}

extern "C" void bg_QLineEdit_setModified_bool(QLineEdit *_self_, bool unnamed_arg_0) {
  return _self_->setModified(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_setSelection_int_int(QLineEdit *_self_, int unnamed_arg_0, int unnamed_arg_1) {
  return _self_->setSelection(unnamed_arg_0, unnamed_arg_1);
}

extern "C" bool bg_QLineEdit_hasSelectedText_(QLineEdit *_self_) {
  return _self_->hasSelectedText();
}

extern "C" CrystalString bg_QLineEdit_selectedText_(QLineEdit *_self_) {
  return qstring_to_crystal(_self_->selectedText());
}

extern "C" int bg_QLineEdit_selectionStart_(QLineEdit *_self_) {
  return _self_->selectionStart();
}

extern "C" bool bg_QLineEdit_isUndoAvailable_(QLineEdit *_self_) {
  return _self_->isUndoAvailable();
}

extern "C" bool bg_QLineEdit_isRedoAvailable_(QLineEdit *_self_) {
  return _self_->isRedoAvailable();
}

extern "C" void bg_QLineEdit_setDragEnabled_bool(QLineEdit *_self_, bool b) {
  return _self_->setDragEnabled(b);
}

extern "C" bool bg_QLineEdit_dragEnabled_(QLineEdit *_self_) {
  return _self_->dragEnabled();
}

extern "C" void bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(QLineEdit *_self_, Qt::CursorMoveStyle style) {
  return _self_->setCursorMoveStyle(style);
}

extern "C" Qt::CursorMoveStyle bg_QLineEdit_cursorMoveStyle_(QLineEdit *_self_) {
  return _self_->cursorMoveStyle();
}

extern "C" CrystalString bg_QLineEdit_inputMask_(QLineEdit *_self_) {
  return qstring_to_crystal(_self_->inputMask());
}

extern "C" void bg_QLineEdit_setInputMask_const_QString_R(QLineEdit *_self_, const CrystalString inputMask) {
  return _self_->setInputMask(QString::fromUtf8(inputMask.ptr, inputMask.size));
}

extern "C" bool bg_QLineEdit_hasAcceptableInput_(QLineEdit *_self_) {
  return _self_->hasAcceptableInput();
}

extern "C" void bg_QLineEdit_setTextMargins_int_int_int_int(QLineEdit *_self_, int left, int top, int right, int bottom) {
  return _self_->setTextMargins(left, top, right, bottom);
}

extern "C" void bg_QLineEdit_setTextMargins_const_QMargins_R(QLineEdit *_self_, const QMargins& margins) {
  return _self_->setTextMargins(margins);
}

extern "C" void bg_QLineEdit_getTextMargins_int_X_int_X_int_X_int_X(QLineEdit *_self_, int* left, int* top, int* right, int* bottom) {
  return _self_->getTextMargins(left, top, right, bottom);
}

extern "C" QMargins* bg_QLineEdit_textMargins_(QLineEdit *_self_) {
  return new (UseGC) QMargins (_self_->textMargins());
}

extern "C" void bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(QLineEdit *_self_, QAction* action, QLineEdit::ActionPosition position) {
  return _self_->addAction(action, position);
}

extern "C" QAction* bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(QLineEdit *_self_, const QIcon& icon, QLineEdit::ActionPosition position) {
  return _self_->addAction(icon, position);
}

extern "C" void bg_QLineEdit_setText_const_QString_R(QLineEdit *_self_, const CrystalString unnamed_arg_0) {
  return _self_->setText(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" void bg_QLineEdit_clear_(QLineEdit *_self_) {
  return _self_->clear();
}

extern "C" void bg_QLineEdit_selectAll_(QLineEdit *_self_) {
  return _self_->selectAll();
}

extern "C" void bg_QLineEdit_undo_(QLineEdit *_self_) {
  return _self_->undo();
}

extern "C" void bg_QLineEdit_redo_(QLineEdit *_self_) {
  return _self_->redo();
}

extern "C" void bg_QLineEdit_cut_(QLineEdit *_self_) {
  return _self_->cut();
}

extern "C" void bg_QLineEdit_copy_(QLineEdit *_self_) {
  return _self_->copy();
}

extern "C" void bg_QLineEdit_paste_(QLineEdit *_self_) {
  return _self_->paste();
}

extern "C" void bg_QLineEdit_deselect_(QLineEdit *_self_) {
  return _self_->deselect();
}

extern "C" void bg_QLineEdit_insert_const_QString_R(QLineEdit *_self_, const CrystalString unnamed_arg_0) {
  return _self_->insert(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" QMenu* bg_QLineEdit_createStandardContextMenu_(QLineEdit *_self_) {
  return _self_->createStandardContextMenu();
}

extern "C" QMetaObject::Connection* bg_QLineEdit_textChanged_CONNECT_CrystalProc_void__const_CrystalString_(QLineEdit *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)(const QString &))&QLineEdit::textChanged, [_proc_](const QString& unnamed_arg_0){
  _proc_(qstring_to_crystal(unnamed_arg_0));
}));
}


extern "C" void bg_QLineEdit_textChanged_const_QString_R(QLineEdit *_self_, const CrystalString unnamed_arg_0) {
  return _self_->textChanged(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" QMetaObject::Connection* bg_QLineEdit_textEdited_CONNECT_CrystalProc_void__const_CrystalString_(QLineEdit *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)(const QString &))&QLineEdit::textEdited, [_proc_](const QString& unnamed_arg_0){
  _proc_(qstring_to_crystal(unnamed_arg_0));
}));
}


extern "C" void bg_QLineEdit_textEdited_const_QString_R(QLineEdit *_self_, const CrystalString unnamed_arg_0) {
  return _self_->textEdited(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" QMetaObject::Connection* bg_QLineEdit_cursorPositionChanged_CONNECT_CrystalProc_void__int__int_(QLineEdit *_self_, CrystalProc<void, int, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)(int, int))&QLineEdit::cursorPositionChanged, [_proc_](int unnamed_arg_0, int unnamed_arg_1){
  _proc_(unnamed_arg_0, unnamed_arg_1);
}));
}


extern "C" void bg_QLineEdit_cursorPositionChanged_int_int(QLineEdit *_self_, int unnamed_arg_0, int unnamed_arg_1) {
  return _self_->cursorPositionChanged(unnamed_arg_0, unnamed_arg_1);
}

extern "C" QMetaObject::Connection* bg_QLineEdit_returnPressed_CONNECT_CrystalProc_void_(QLineEdit *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)())&QLineEdit::returnPressed, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QLineEdit_returnPressed_(QLineEdit *_self_) {
  return _self_->returnPressed();
}

extern "C" QMetaObject::Connection* bg_QLineEdit_editingFinished_CONNECT_CrystalProc_void_(QLineEdit *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)())&QLineEdit::editingFinished, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QLineEdit_editingFinished_(QLineEdit *_self_) {
  return _self_->editingFinished();
}

extern "C" QMetaObject::Connection* bg_QLineEdit_selectionChanged_CONNECT_CrystalProc_void_(QLineEdit *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QLineEdit::*)())&QLineEdit::selectionChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QLineEdit_selectionChanged_(QLineEdit *_self_) {
  return _self_->selectionChanged();
}

extern "C" void bg_QLineEdit_mousePressEvent_QMouseEvent_X(QLineEdit *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mousePressEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(QLineEdit *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseMoveEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(QLineEdit *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseReleaseEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(QLineEdit *_self_, QMouseEvent* unnamed_arg_0) {
  return _self_->mouseDoubleClickEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_keyPressEvent_QKeyEvent_X(QLineEdit *_self_, QKeyEvent* unnamed_arg_0) {
  return _self_->keyPressEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_focusInEvent_QFocusEvent_X(QLineEdit *_self_, QFocusEvent* unnamed_arg_0) {
  return _self_->focusInEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_focusOutEvent_QFocusEvent_X(QLineEdit *_self_, QFocusEvent* unnamed_arg_0) {
  return _self_->focusOutEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_paintEvent_QPaintEvent_X(QLineEdit *_self_, QPaintEvent* unnamed_arg_0) {
  return _self_->paintEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(QLineEdit *_self_, QDragEnterEvent* unnamed_arg_0) {
  return _self_->dragEnterEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(QLineEdit *_self_, QDragMoveEvent* e) {
  return _self_->dragMoveEvent(e);
}

extern "C" void bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(QLineEdit *_self_, QDragLeaveEvent* e) {
  return _self_->dragLeaveEvent(e);
}

extern "C" void bg_QLineEdit_dropEvent_QDropEvent_X(QLineEdit *_self_, QDropEvent* unnamed_arg_0) {
  return _self_->dropEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_changeEvent_QEvent_X(QLineEdit *_self_, QEvent* unnamed_arg_0) {
  return _self_->changeEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(QLineEdit *_self_, QContextMenuEvent* unnamed_arg_0) {
  return _self_->contextMenuEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(QLineEdit *_self_, QInputMethodEvent* unnamed_arg_0) {
  return _self_->inputMethodEvent(unnamed_arg_0);
}

extern "C" void bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(QLineEdit *_self_, QStyleOptionFrame* option) {
  return _self_->initStyleOption(option);
}

extern "C" bool bg_QLineEdit_event_QEvent_X(QLineEdit *_self_, QEvent* unnamed_arg_0) {
  return _self_->event(unnamed_arg_0);
}

extern "C" QRect* bg_QLineEdit_cursorRect_(QLineEdit *_self_) {
  return new (UseGC) QRect (_self_->cursorRect());
}

extern "C" const QMetaObject* bg_QTextEdit_metaObject_(QTextEdit *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QTextEdit_qt_metacast_const_char_X(QTextEdit *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QTextEdit::tr(s, c, n));
}

extern "C" CrystalString bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QTextEdit::trUtf8(s, c, n));
}

extern "C" QTextEdit* bg_QTextEdit_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QTextEdit(parent);
}

extern "C" QTextEdit* bg_QTextEdit_CONSTRUCT_const_QString_R_QWidget_X(const CrystalString text, QWidget* parent) {
  return new (UseGC) BgInherit_QTextEdit(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" void bg_QTextEdit_setDocument_QTextDocument_X(QTextEdit *_self_, QTextDocument* document) {
  return _self_->setDocument(document);
}

extern "C" QTextDocument* bg_QTextEdit_document_(QTextEdit *_self_) {
  return _self_->document();
}

extern "C" void bg_QTextEdit_setPlaceholderText_const_QString_R(QTextEdit *_self_, const CrystalString placeholderText) {
  return _self_->setPlaceholderText(QString::fromUtf8(placeholderText.ptr, placeholderText.size));
}

extern "C" CrystalString bg_QTextEdit_placeholderText_(QTextEdit *_self_) {
  return qstring_to_crystal(_self_->placeholderText());
}

extern "C" void bg_QTextEdit_setTextCursor_const_QTextCursor_R(QTextEdit *_self_, const QTextCursor& cursor) {
  return _self_->setTextCursor(cursor);
}

extern "C" QTextCursor* bg_QTextEdit_textCursor_(QTextEdit *_self_) {
  return new (UseGC) QTextCursor (_self_->textCursor());
}

extern "C" bool bg_QTextEdit_isReadOnly_(QTextEdit *_self_) {
  return _self_->isReadOnly();
}

extern "C" void bg_QTextEdit_setReadOnly_bool(QTextEdit *_self_, bool ro) {
  return _self_->setReadOnly(ro);
}

extern "C" void bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(QTextEdit *_self_, Qt::TextInteractionFlags flags) {
  return _self_->setTextInteractionFlags(flags);
}

extern "C" Qt::TextInteractionFlags bg_QTextEdit_textInteractionFlags_(QTextEdit *_self_) {
  return _self_->textInteractionFlags();
}

extern "C" qreal bg_QTextEdit_fontPointSize_(QTextEdit *_self_) {
  return _self_->fontPointSize();
}

extern "C" CrystalString bg_QTextEdit_fontFamily_(QTextEdit *_self_) {
  return qstring_to_crystal(_self_->fontFamily());
}

extern "C" int bg_QTextEdit_fontWeight_(QTextEdit *_self_) {
  return _self_->fontWeight();
}

extern "C" bool bg_QTextEdit_fontUnderline_(QTextEdit *_self_) {
  return _self_->fontUnderline();
}

extern "C" bool bg_QTextEdit_fontItalic_(QTextEdit *_self_) {
  return _self_->fontItalic();
}

extern "C" QColor* bg_QTextEdit_textColor_(QTextEdit *_self_) {
  return new (UseGC) QColor (_self_->textColor());
}

extern "C" QColor* bg_QTextEdit_textBackgroundColor_(QTextEdit *_self_) {
  return new (UseGC) QColor (_self_->textBackgroundColor());
}

extern "C" QFont* bg_QTextEdit_currentFont_(QTextEdit *_self_) {
  return new (UseGC) QFont (_self_->currentFont());
}

extern "C" Qt::Alignment bg_QTextEdit_alignment_(QTextEdit *_self_) {
  return _self_->alignment();
}

extern "C" void bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(QTextEdit *_self_, const QTextCharFormat& modifier) {
  return _self_->mergeCurrentCharFormat(modifier);
}

extern "C" void bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(QTextEdit *_self_, const QTextCharFormat& format) {
  return _self_->setCurrentCharFormat(format);
}

extern "C" QTextCharFormat* bg_QTextEdit_currentCharFormat_(QTextEdit *_self_) {
  return new (UseGC) QTextCharFormat (_self_->currentCharFormat());
}

extern "C" QTextEdit::AutoFormatting bg_QTextEdit_autoFormatting_(QTextEdit *_self_) {
  return _self_->autoFormatting();
}

extern "C" void bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(QTextEdit *_self_, QTextEdit::AutoFormatting features) {
  return _self_->setAutoFormatting(features);
}

extern "C" bool bg_QTextEdit_tabChangesFocus_(QTextEdit *_self_) {
  return _self_->tabChangesFocus();
}

extern "C" void bg_QTextEdit_setTabChangesFocus_bool(QTextEdit *_self_, bool b) {
  return _self_->setTabChangesFocus(b);
}

extern "C" void bg_QTextEdit_setDocumentTitle_const_QString_R(QTextEdit *_self_, const CrystalString title) {
  return _self_->setDocumentTitle(QString::fromUtf8(title.ptr, title.size));
}

extern "C" CrystalString bg_QTextEdit_documentTitle_(QTextEdit *_self_) {
  return qstring_to_crystal(_self_->documentTitle());
}

extern "C" bool bg_QTextEdit_isUndoRedoEnabled_(QTextEdit *_self_) {
  return _self_->isUndoRedoEnabled();
}

extern "C" void bg_QTextEdit_setUndoRedoEnabled_bool(QTextEdit *_self_, bool enable) {
  return _self_->setUndoRedoEnabled(enable);
}

extern "C" QTextEdit::LineWrapMode bg_QTextEdit_lineWrapMode_(QTextEdit *_self_) {
  return _self_->lineWrapMode();
}

extern "C" void bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(QTextEdit *_self_, QTextEdit::LineWrapMode mode) {
  return _self_->setLineWrapMode(mode);
}

extern "C" int bg_QTextEdit_lineWrapColumnOrWidth_(QTextEdit *_self_) {
  return _self_->lineWrapColumnOrWidth();
}

extern "C" void bg_QTextEdit_setLineWrapColumnOrWidth_int(QTextEdit *_self_, int w) {
  return _self_->setLineWrapColumnOrWidth(w);
}

extern "C" QTextOption::WrapMode bg_QTextEdit_wordWrapMode_(QTextEdit *_self_) {
  return _self_->wordWrapMode();
}

extern "C" void bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(QTextEdit *_self_, QTextOption::WrapMode policy) {
  return _self_->setWordWrapMode(policy);
}

extern "C" bool bg_QTextEdit_find_const_QString_R(QTextEdit *_self_, const CrystalString exp) {
  return _self_->find(QString::fromUtf8(exp.ptr, exp.size));
}

extern "C" bool bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(QTextEdit *_self_, const CrystalString exp, QTextDocument::FindFlags options) {
  return _self_->find(QString::fromUtf8(exp.ptr, exp.size), options);
}

extern "C" bool bg_QTextEdit_find_const_QRegExp_R(QTextEdit *_self_, const QRegExp& exp) {
  return _self_->find(exp);
}

extern "C" bool bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(QTextEdit *_self_, const QRegExp& exp, QTextDocument::FindFlags options) {
  return _self_->find(exp, options);
}

extern "C" CrystalString bg_QTextEdit_toPlainText_(QTextEdit *_self_) {
  return qstring_to_crystal(_self_->toPlainText());
}

extern "C" CrystalString bg_QTextEdit_toHtml_(QTextEdit *_self_) {
  return qstring_to_crystal(_self_->toHtml());
}

extern "C" void bg_QTextEdit_ensureCursorVisible_(QTextEdit *_self_) {
  return _self_->ensureCursorVisible();
}

extern "C" QMenu* bg_QTextEdit_createStandardContextMenu_(QTextEdit *_self_) {
  return _self_->createStandardContextMenu();
}

extern "C" QMenu* bg_QTextEdit_createStandardContextMenu_const_QPoint_R(QTextEdit *_self_, const QPoint position) {
  return _self_->createStandardContextMenu(position);
}

extern "C" QTextCursor* bg_QTextEdit_cursorForPosition_const_QPoint_R(QTextEdit *_self_, const QPoint pos) {
  return new (UseGC) QTextCursor (_self_->cursorForPosition(pos));
}

extern "C" QRect* bg_QTextEdit_cursorRect_const_QTextCursor_R(QTextEdit *_self_, const QTextCursor& cursor) {
  return new (UseGC) QRect (_self_->cursorRect(cursor));
}

extern "C" QRect* bg_QTextEdit_cursorRect_(QTextEdit *_self_) {
  return new (UseGC) QRect (_self_->cursorRect());
}

extern "C" CrystalString bg_QTextEdit_anchorAt_const_QPoint_R(QTextEdit *_self_, const QPoint pos) {
  return qstring_to_crystal(_self_->anchorAt(pos));
}

extern "C" bool bg_QTextEdit_overwriteMode_(QTextEdit *_self_) {
  return _self_->overwriteMode();
}

extern "C" void bg_QTextEdit_setOverwriteMode_bool(QTextEdit *_self_, bool overwrite) {
  return _self_->setOverwriteMode(overwrite);
}

extern "C" int bg_QTextEdit_tabStopWidth_(QTextEdit *_self_) {
  return _self_->tabStopWidth();
}

extern "C" void bg_QTextEdit_setTabStopWidth_int(QTextEdit *_self_, int width) {
  return _self_->setTabStopWidth(width);
}

extern "C" int bg_QTextEdit_cursorWidth_(QTextEdit *_self_) {
  return _self_->cursorWidth();
}

extern "C" void bg_QTextEdit_setCursorWidth_int(QTextEdit *_self_, int width) {
  return _self_->setCursorWidth(width);
}

extern "C" bool bg_QTextEdit_acceptRichText_(QTextEdit *_self_) {
  return _self_->acceptRichText();
}

extern "C" void bg_QTextEdit_setAcceptRichText_bool(QTextEdit *_self_, bool accept) {
  return _self_->setAcceptRichText(accept);
}

extern "C" void bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(QTextEdit *_self_, QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode) {
  return _self_->moveCursor(operation, mode);
}

extern "C" bool bg_QTextEdit_canPaste_(QTextEdit *_self_) {
  return _self_->canPaste();
}

extern "C" void bg_QTextEdit_print_QPagedPaintDevice_X(QTextEdit *_self_, QPagedPaintDevice* printer) {
  return _self_->print(printer);
}

extern "C" void bg_QTextEdit_setFontPointSize_qreal(QTextEdit *_self_, qreal s) {
  return _self_->setFontPointSize(s);
}

extern "C" void bg_QTextEdit_setFontFamily_const_QString_R(QTextEdit *_self_, const CrystalString fontFamily) {
  return _self_->setFontFamily(QString::fromUtf8(fontFamily.ptr, fontFamily.size));
}

extern "C" void bg_QTextEdit_setFontWeight_int(QTextEdit *_self_, int w) {
  return _self_->setFontWeight(w);
}

extern "C" void bg_QTextEdit_setFontUnderline_bool(QTextEdit *_self_, bool b) {
  return _self_->setFontUnderline(b);
}

extern "C" void bg_QTextEdit_setFontItalic_bool(QTextEdit *_self_, bool b) {
  return _self_->setFontItalic(b);
}

extern "C" void bg_QTextEdit_setTextColor_const_QColor_R(QTextEdit *_self_, const QColor& c) {
  return _self_->setTextColor(c);
}

extern "C" void bg_QTextEdit_setTextBackgroundColor_const_QColor_R(QTextEdit *_self_, const QColor& c) {
  return _self_->setTextBackgroundColor(c);
}

extern "C" void bg_QTextEdit_setCurrentFont_const_QFont_R(QTextEdit *_self_, const QFont& f) {
  return _self_->setCurrentFont(f);
}

extern "C" void bg_QTextEdit_setAlignment_Qt__Alignment(QTextEdit *_self_, Qt::Alignment a) {
  return _self_->setAlignment(a);
}

extern "C" void bg_QTextEdit_setPlainText_const_QString_R(QTextEdit *_self_, const CrystalString text) {
  return _self_->setPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_setHtml_const_QString_R(QTextEdit *_self_, const CrystalString text) {
  return _self_->setHtml(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_setText_const_QString_R(QTextEdit *_self_, const CrystalString text) {
  return _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_cut_(QTextEdit *_self_) {
  return _self_->cut();
}

extern "C" void bg_QTextEdit_copy_(QTextEdit *_self_) {
  return _self_->copy();
}

extern "C" void bg_QTextEdit_paste_(QTextEdit *_self_) {
  return _self_->paste();
}

extern "C" void bg_QTextEdit_undo_(QTextEdit *_self_) {
  return _self_->undo();
}

extern "C" void bg_QTextEdit_redo_(QTextEdit *_self_) {
  return _self_->redo();
}

extern "C" void bg_QTextEdit_clear_(QTextEdit *_self_) {
  return _self_->clear();
}

extern "C" void bg_QTextEdit_selectAll_(QTextEdit *_self_) {
  return _self_->selectAll();
}

extern "C" void bg_QTextEdit_insertPlainText_const_QString_R(QTextEdit *_self_, const CrystalString text) {
  return _self_->insertPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_insertHtml_const_QString_R(QTextEdit *_self_, const CrystalString text) {
  return _self_->insertHtml(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_append_const_QString_R(QTextEdit *_self_, const CrystalString text) {
  return _self_->append(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextEdit_scrollToAnchor_const_QString_R(QTextEdit *_self_, const CrystalString name) {
  return _self_->scrollToAnchor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" void bg_QTextEdit_zoomIn_int(QTextEdit *_self_, int range) {
  return _self_->zoomIn(range);
}

extern "C" void bg_QTextEdit_zoomOut_int(QTextEdit *_self_, int range) {
  return _self_->zoomOut(range);
}

extern "C" QMetaObject::Connection* bg_QTextEdit_textChanged_CONNECT_CrystalProc_void_(QTextEdit *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)())&QTextEdit::textChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QTextEdit_textChanged_(QTextEdit *_self_) {
  return _self_->textChanged();
}

extern "C" QMetaObject::Connection* bg_QTextEdit_undoAvailable_CONNECT_CrystalProc_void__bool_(QTextEdit *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(bool))&QTextEdit::undoAvailable, [_proc_](bool b){
  _proc_(b);
}));
}


extern "C" void bg_QTextEdit_undoAvailable_bool(QTextEdit *_self_, bool b) {
  return _self_->undoAvailable(b);
}

extern "C" QMetaObject::Connection* bg_QTextEdit_redoAvailable_CONNECT_CrystalProc_void__bool_(QTextEdit *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(bool))&QTextEdit::redoAvailable, [_proc_](bool b){
  _proc_(b);
}));
}


extern "C" void bg_QTextEdit_redoAvailable_bool(QTextEdit *_self_, bool b) {
  return _self_->redoAvailable(b);
}

extern "C" QMetaObject::Connection* bg_QTextEdit_currentCharFormatChanged_CONNECT_CrystalProc_void__const_QTextCharFormatR_(QTextEdit *_self_, CrystalProc<void, const QTextCharFormat*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(const QTextCharFormat &))&QTextEdit::currentCharFormatChanged, [_proc_](const QTextCharFormat& format){
  _proc_(new (UseGC) QTextCharFormat (format));
}));
}


extern "C" void bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(QTextEdit *_self_, const QTextCharFormat& format) {
  return _self_->currentCharFormatChanged(format);
}

extern "C" QMetaObject::Connection* bg_QTextEdit_copyAvailable_CONNECT_CrystalProc_void__bool_(QTextEdit *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)(bool))&QTextEdit::copyAvailable, [_proc_](bool b){
  _proc_(b);
}));
}


extern "C" void bg_QTextEdit_copyAvailable_bool(QTextEdit *_self_, bool b) {
  return _self_->copyAvailable(b);
}

extern "C" QMetaObject::Connection* bg_QTextEdit_selectionChanged_CONNECT_CrystalProc_void_(QTextEdit *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)())&QTextEdit::selectionChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QTextEdit_selectionChanged_(QTextEdit *_self_) {
  return _self_->selectionChanged();
}

extern "C" QMetaObject::Connection* bg_QTextEdit_cursorPositionChanged_CONNECT_CrystalProc_void_(QTextEdit *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextEdit::*)())&QTextEdit::cursorPositionChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QTextEdit_cursorPositionChanged_(QTextEdit *_self_) {
  return _self_->cursorPositionChanged();
}

extern "C" bool bg_QTextEdit_event_QEvent_X(QTextEdit *_self_, QEvent* e) {
  return _self_->event(e);
}

extern "C" void bg_QTextEdit_timerEvent_QTimerEvent_X(QTextEdit *_self_, QTimerEvent* e) {
  return _self_->timerEvent(e);
}

extern "C" void bg_QTextEdit_keyPressEvent_QKeyEvent_X(QTextEdit *_self_, QKeyEvent* e) {
  return _self_->keyPressEvent(e);
}

extern "C" void bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(QTextEdit *_self_, QKeyEvent* e) {
  return _self_->keyReleaseEvent(e);
}

extern "C" void bg_QTextEdit_resizeEvent_QResizeEvent_X(QTextEdit *_self_, QResizeEvent* e) {
  return _self_->resizeEvent(e);
}

extern "C" void bg_QTextEdit_paintEvent_QPaintEvent_X(QTextEdit *_self_, QPaintEvent* e) {
  return _self_->paintEvent(e);
}

extern "C" void bg_QTextEdit_mousePressEvent_QMouseEvent_X(QTextEdit *_self_, QMouseEvent* e) {
  return _self_->mousePressEvent(e);
}

extern "C" void bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(QTextEdit *_self_, QMouseEvent* e) {
  return _self_->mouseMoveEvent(e);
}

extern "C" void bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(QTextEdit *_self_, QMouseEvent* e) {
  return _self_->mouseReleaseEvent(e);
}

extern "C" void bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(QTextEdit *_self_, QMouseEvent* e) {
  return _self_->mouseDoubleClickEvent(e);
}

extern "C" bool bg_QTextEdit_focusNextPrevChild_bool(QTextEdit *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(QTextEdit *_self_, QContextMenuEvent* e) {
  return _self_->contextMenuEvent(e);
}

extern "C" void bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(QTextEdit *_self_, QDragEnterEvent* e) {
  return _self_->dragEnterEvent(e);
}

extern "C" void bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(QTextEdit *_self_, QDragLeaveEvent* e) {
  return _self_->dragLeaveEvent(e);
}

extern "C" void bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(QTextEdit *_self_, QDragMoveEvent* e) {
  return _self_->dragMoveEvent(e);
}

extern "C" void bg_QTextEdit_dropEvent_QDropEvent_X(QTextEdit *_self_, QDropEvent* e) {
  return _self_->dropEvent(e);
}

extern "C" void bg_QTextEdit_focusInEvent_QFocusEvent_X(QTextEdit *_self_, QFocusEvent* e) {
  return _self_->focusInEvent(e);
}

extern "C" void bg_QTextEdit_focusOutEvent_QFocusEvent_X(QTextEdit *_self_, QFocusEvent* e) {
  return _self_->focusOutEvent(e);
}

extern "C" void bg_QTextEdit_showEvent_QShowEvent_X(QTextEdit *_self_, QShowEvent* unnamed_arg_0) {
  return _self_->showEvent(unnamed_arg_0);
}

extern "C" void bg_QTextEdit_changeEvent_QEvent_X(QTextEdit *_self_, QEvent* e) {
  return _self_->changeEvent(e);
}

extern "C" void bg_QTextEdit_wheelEvent_QWheelEvent_X(QTextEdit *_self_, QWheelEvent* e) {
  return _self_->wheelEvent(e);
}

extern "C" QMimeData* bg_QTextEdit_createMimeDataFromSelection_(QTextEdit *_self_) {
  return _self_->createMimeDataFromSelection();
}

extern "C" bool bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(QTextEdit *_self_, const QMimeData* source) {
  return _self_->canInsertFromMimeData(source);
}

extern "C" void bg_QTextEdit_insertFromMimeData_const_QMimeData_X(QTextEdit *_self_, const QMimeData* source) {
  return _self_->insertFromMimeData(source);
}

extern "C" void bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(QTextEdit *_self_, QInputMethodEvent* unnamed_arg_0) {
  return _self_->inputMethodEvent(unnamed_arg_0);
}

extern "C" QTextEdit* bg_QTextEdit_CONSTRUCT_QTextEditPrivate_R_QWidget_X(QTextEditPrivate& dd, QWidget* parent) {
  return new (UseGC) BgInherit_QTextEdit(dd, parent);
}

extern "C" void bg_QTextEdit_scrollContentsBy_int_int(QTextEdit *_self_, int dx, int dy) {
  return _self_->scrollContentsBy(dx, dy);
}

extern "C" void bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(QTextEdit *_self_, const QTextCursor& cursor) {
  return _self_->doSetTextCursor(cursor);
}

extern "C" void bg_QTextEdit_zoomInF_float(QTextEdit *_self_, float range) {
  return _self_->zoomInF(range);
}

extern "C" const QMetaObject* bg_QFileDialog_metaObject_(QFileDialog *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QFileDialog_qt_metacast_const_char_X(QFileDialog *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QFileDialog::tr(s, c, n));
}

extern "C" CrystalString bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QFileDialog::trUtf8(s, c, n));
}

extern "C" QFileDialog* bg_QFileDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(QWidget* parent, Qt::WindowFlags f) {
  return new (UseGC) BgInherit_QFileDialog(parent, f);
}

extern "C" QFileDialog* bg_QFileDialog_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QFileDialog(parent);
}

extern "C" QFileDialog* bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return new (UseGC) BgInherit_QFileDialog(parent, QString::fromUtf8(caption.ptr, caption.size));
}

extern "C" QFileDialog* bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString directory) {
  return new (UseGC) BgInherit_QFileDialog(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(directory.ptr, directory.size));
}

extern "C" QFileDialog* bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString directory, const CrystalString filter) {
  return new (UseGC) BgInherit_QFileDialog(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(directory.ptr, directory.size), QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" void bg_QFileDialog_setDirectory_const_QString_R(QFileDialog *_self_, const CrystalString directory) {
  return _self_->setDirectory(QString::fromUtf8(directory.ptr, directory.size));
}

extern "C" void bg_QFileDialog_setDirectory_const_QDir_R(QFileDialog *_self_, const QDir& directory) {
  return _self_->setDirectory(directory);
}

extern "C" QDir* bg_QFileDialog_directory_(QFileDialog *_self_) {
  return new (UseGC) QDir (_self_->directory());
}

extern "C" void bg_QFileDialog_setDirectoryUrl_const_QUrl_R(QFileDialog *_self_, const QUrl& directory) {
  return _self_->setDirectoryUrl(directory);
}

extern "C" QUrl* bg_QFileDialog_directoryUrl_(QFileDialog *_self_) {
  return new (UseGC) QUrl (_self_->directoryUrl());
}

extern "C" void bg_QFileDialog_selectFile_const_QString_R(QFileDialog *_self_, const CrystalString filename) {
  return _self_->selectFile(QString::fromUtf8(filename.ptr, filename.size));
}

extern "C" QStringList* bg_QFileDialog_selectedFiles_(QFileDialog *_self_) {
  return new (UseGC) QStringList (_self_->selectedFiles());
}

extern "C" void bg_QFileDialog_selectUrl_const_QUrl_R(QFileDialog *_self_, const QUrl& url) {
  return _self_->selectUrl(url);
}

extern "C" QList<QUrl>* bg_QFileDialog_selectedUrls_(QFileDialog *_self_) {
  return new (UseGC) QList<QUrl> (_self_->selectedUrls());
}

extern "C" void bg_QFileDialog_setNameFilterDetailsVisible_bool(QFileDialog *_self_, bool enabled) {
  return _self_->setNameFilterDetailsVisible(enabled);
}

extern "C" bool bg_QFileDialog_isNameFilterDetailsVisible_(QFileDialog *_self_) {
  return _self_->isNameFilterDetailsVisible();
}

extern "C" void bg_QFileDialog_setNameFilter_const_QString_R(QFileDialog *_self_, const CrystalString filter) {
  return _self_->setNameFilter(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" void bg_QFileDialog_setNameFilters_const_QStringList_R(QFileDialog *_self_, const QStringList& filters) {
  return _self_->setNameFilters(filters);
}

extern "C" QStringList* bg_QFileDialog_nameFilters_(QFileDialog *_self_) {
  return new (UseGC) QStringList (_self_->nameFilters());
}

extern "C" void bg_QFileDialog_selectNameFilter_const_QString_R(QFileDialog *_self_, const CrystalString filter) {
  return _self_->selectNameFilter(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" CrystalString bg_QFileDialog_selectedMimeTypeFilter_(QFileDialog *_self_) {
  return qstring_to_crystal(_self_->selectedMimeTypeFilter());
}

extern "C" CrystalString bg_QFileDialog_selectedNameFilter_(QFileDialog *_self_) {
  return qstring_to_crystal(_self_->selectedNameFilter());
}

extern "C" void bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(QFileDialog *_self_, const QStringList& filters) {
  return _self_->setMimeTypeFilters(filters);
}

extern "C" QStringList* bg_QFileDialog_mimeTypeFilters_(QFileDialog *_self_) {
  return new (UseGC) QStringList (_self_->mimeTypeFilters());
}

extern "C" void bg_QFileDialog_selectMimeTypeFilter_const_QString_R(QFileDialog *_self_, const CrystalString filter) {
  return _self_->selectMimeTypeFilter(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" QDir::Filters bg_QFileDialog_filter_(QFileDialog *_self_) {
  return _self_->filter();
}

extern "C" void bg_QFileDialog_setFilter_QDir__Filters(QFileDialog *_self_, QDir::Filters filters) {
  return _self_->setFilter(filters);
}

extern "C" void bg_QFileDialog_setViewMode_QFileDialog__ViewMode(QFileDialog *_self_, QFileDialog::ViewMode mode) {
  return _self_->setViewMode(mode);
}

extern "C" QFileDialog::ViewMode bg_QFileDialog_viewMode_(QFileDialog *_self_) {
  return _self_->viewMode();
}

extern "C" void bg_QFileDialog_setFileMode_QFileDialog__FileMode(QFileDialog *_self_, QFileDialog::FileMode mode) {
  return _self_->setFileMode(mode);
}

extern "C" QFileDialog::FileMode bg_QFileDialog_fileMode_(QFileDialog *_self_) {
  return _self_->fileMode();
}

extern "C" void bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(QFileDialog *_self_, QFileDialog::AcceptMode mode) {
  return _self_->setAcceptMode(mode);
}

extern "C" QFileDialog::AcceptMode bg_QFileDialog_acceptMode_(QFileDialog *_self_) {
  return _self_->acceptMode();
}

extern "C" void bg_QFileDialog_setReadOnly_bool(QFileDialog *_self_, bool enabled) {
  return _self_->setReadOnly(enabled);
}

extern "C" bool bg_QFileDialog_isReadOnly_(QFileDialog *_self_) {
  return _self_->isReadOnly();
}

extern "C" void bg_QFileDialog_setResolveSymlinks_bool(QFileDialog *_self_, bool enabled) {
  return _self_->setResolveSymlinks(enabled);
}

extern "C" bool bg_QFileDialog_resolveSymlinks_(QFileDialog *_self_) {
  return _self_->resolveSymlinks();
}

extern "C" void bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(QFileDialog *_self_, const QList<QUrl>& urls) {
  return _self_->setSidebarUrls(urls);
}

extern "C" QList<QUrl>* bg_QFileDialog_sidebarUrls_(QFileDialog *_self_) {
  return new (UseGC) QList<QUrl> (_self_->sidebarUrls());
}

extern "C" QByteArray* bg_QFileDialog_saveState_(QFileDialog *_self_) {
  return new (UseGC) QByteArray (_self_->saveState());
}

extern "C" bool bg_QFileDialog_restoreState_const_QByteArray_R(QFileDialog *_self_, const QByteArray& state) {
  return _self_->restoreState(state);
}

extern "C" void bg_QFileDialog_setConfirmOverwrite_bool(QFileDialog *_self_, bool enabled) {
  return _self_->setConfirmOverwrite(enabled);
}

extern "C" bool bg_QFileDialog_confirmOverwrite_(QFileDialog *_self_) {
  return _self_->confirmOverwrite();
}

extern "C" void bg_QFileDialog_setDefaultSuffix_const_QString_R(QFileDialog *_self_, const CrystalString suffix) {
  return _self_->setDefaultSuffix(QString::fromUtf8(suffix.ptr, suffix.size));
}

extern "C" CrystalString bg_QFileDialog_defaultSuffix_(QFileDialog *_self_) {
  return qstring_to_crystal(_self_->defaultSuffix());
}

extern "C" void bg_QFileDialog_setHistory_const_QStringList_R(QFileDialog *_self_, const QStringList& paths) {
  return _self_->setHistory(paths);
}

extern "C" QStringList* bg_QFileDialog_history_(QFileDialog *_self_) {
  return new (UseGC) QStringList (_self_->history());
}

extern "C" void bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(QFileDialog *_self_, QAbstractItemDelegate* delegate) {
  return _self_->setItemDelegate(delegate);
}

extern "C" QAbstractItemDelegate* bg_QFileDialog_itemDelegate_(QFileDialog *_self_) {
  return _self_->itemDelegate();
}

extern "C" void bg_QFileDialog_setIconProvider_QFileIconProvider_X(QFileDialog *_self_, QFileIconProvider* provider) {
  return _self_->setIconProvider(provider);
}

extern "C" QFileIconProvider* bg_QFileDialog_iconProvider_(QFileDialog *_self_) {
  return _self_->iconProvider();
}

extern "C" void bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(QFileDialog *_self_, QFileDialog::DialogLabel label, const CrystalString text) {
  return _self_->setLabelText(label, QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QFileDialog_labelText_QFileDialog__DialogLabel(QFileDialog *_self_, QFileDialog::DialogLabel label) {
  return qstring_to_crystal(_self_->labelText(label));
}

extern "C" void bg_QFileDialog_setSupportedSchemes_const_QStringList_R(QFileDialog *_self_, const QStringList& schemes) {
  return _self_->setSupportedSchemes(schemes);
}

extern "C" QStringList* bg_QFileDialog_supportedSchemes_(QFileDialog *_self_) {
  return new (UseGC) QStringList (_self_->supportedSchemes());
}

extern "C" void bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(QFileDialog *_self_, QAbstractProxyModel* model) {
  return _self_->setProxyModel(model);
}

extern "C" QAbstractProxyModel* bg_QFileDialog_proxyModel_(QFileDialog *_self_) {
  return _self_->proxyModel();
}

extern "C" void bg_QFileDialog_setOption_QFileDialog__Option_bool(QFileDialog *_self_, QFileDialog::Option option, bool on) {
  return _self_->setOption(option, on);
}

extern "C" bool bg_QFileDialog_testOption_QFileDialog__Option(QFileDialog *_self_, QFileDialog::Option option) {
  return _self_->testOption(option);
}

extern "C" void bg_QFileDialog_setOptions_QFileDialog__Options(QFileDialog *_self_, QFileDialog::Options options) {
  return _self_->setOptions(options);
}

extern "C" QFileDialog::Options bg_QFileDialog_options_(QFileDialog *_self_) {
  return _self_->options();
}

extern "C" void bg_QFileDialog_open_QObject_X_const_char_X(QFileDialog *_self_, QObject* receiver, const char* member) {
  return _self_->open(receiver, member);
}

extern "C" void bg_QFileDialog_setVisible_bool(QFileDialog *_self_, bool visible) {
  return _self_->setVisible(visible);
}

extern "C" QMetaObject::Connection* bg_QFileDialog_fileSelected_CONNECT_CrystalProc_void__const_CrystalString_(QFileDialog *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::fileSelected, [_proc_](const QString& file){
  _proc_(qstring_to_crystal(file));
}));
}


extern "C" void bg_QFileDialog_fileSelected_const_QString_R(QFileDialog *_self_, const CrystalString file) {
  return _self_->fileSelected(QString::fromUtf8(file.ptr, file.size));
}

extern "C" QMetaObject::Connection* bg_QFileDialog_filesSelected_CONNECT_CrystalProc_void__const_QStringListR_(QFileDialog *_self_, CrystalProc<void, const QStringList*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QStringList &))&QFileDialog::filesSelected, [_proc_](const QStringList& files){
  _proc_(new (UseGC) QStringList (files));
}));
}


extern "C" void bg_QFileDialog_filesSelected_const_QStringList_R(QFileDialog *_self_, const QStringList& files) {
  return _self_->filesSelected(files);
}

extern "C" QMetaObject::Connection* bg_QFileDialog_currentChanged_CONNECT_CrystalProc_void__const_CrystalString_(QFileDialog *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::currentChanged, [_proc_](const QString& path){
  _proc_(qstring_to_crystal(path));
}));
}


extern "C" void bg_QFileDialog_currentChanged_const_QString_R(QFileDialog *_self_, const CrystalString path) {
  return _self_->currentChanged(QString::fromUtf8(path.ptr, path.size));
}

extern "C" QMetaObject::Connection* bg_QFileDialog_directoryEntered_CONNECT_CrystalProc_void__const_CrystalString_(QFileDialog *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::directoryEntered, [_proc_](const QString& directory){
  _proc_(qstring_to_crystal(directory));
}));
}


extern "C" void bg_QFileDialog_directoryEntered_const_QString_R(QFileDialog *_self_, const CrystalString directory) {
  return _self_->directoryEntered(QString::fromUtf8(directory.ptr, directory.size));
}

extern "C" QMetaObject::Connection* bg_QFileDialog_urlSelected_CONNECT_CrystalProc_void__const_QUrlR_(QFileDialog *_self_, CrystalProc<void, const QUrl*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QUrl &))&QFileDialog::urlSelected, [_proc_](const QUrl& url){
  _proc_(new (UseGC) QUrl (url));
}));
}


extern "C" void bg_QFileDialog_urlSelected_const_QUrl_R(QFileDialog *_self_, const QUrl& url) {
  return _self_->urlSelected(url);
}

extern "C" QMetaObject::Connection* bg_QFileDialog_urlsSelected_CONNECT_CrystalProc_void__const_QList_QUrl_R_(QFileDialog *_self_, CrystalProc<void, const QList<QUrl>*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QList<QUrl> &))&QFileDialog::urlsSelected, [_proc_](const QList<QUrl>& urls){
  _proc_(new (UseGC) QList<QUrl> (urls));
}));
}


extern "C" void bg_QFileDialog_urlsSelected_const_QList_QUrl__R(QFileDialog *_self_, const QList<QUrl>& urls) {
  return _self_->urlsSelected(urls);
}

extern "C" QMetaObject::Connection* bg_QFileDialog_currentUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(QFileDialog *_self_, CrystalProc<void, const QUrl*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QUrl &))&QFileDialog::currentUrlChanged, [_proc_](const QUrl& url){
  _proc_(new (UseGC) QUrl (url));
}));
}


extern "C" void bg_QFileDialog_currentUrlChanged_const_QUrl_R(QFileDialog *_self_, const QUrl& url) {
  return _self_->currentUrlChanged(url);
}

extern "C" QMetaObject::Connection* bg_QFileDialog_directoryUrlEntered_CONNECT_CrystalProc_void__const_QUrlR_(QFileDialog *_self_, CrystalProc<void, const QUrl*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QUrl &))&QFileDialog::directoryUrlEntered, [_proc_](const QUrl& directory){
  _proc_(new (UseGC) QUrl (directory));
}));
}


extern "C" void bg_QFileDialog_directoryUrlEntered_const_QUrl_R(QFileDialog *_self_, const QUrl& directory) {
  return _self_->directoryUrlEntered(directory);
}

extern "C" QMetaObject::Connection* bg_QFileDialog_filterSelected_CONNECT_CrystalProc_void__const_CrystalString_(QFileDialog *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QFileDialog::*)(const QString &))&QFileDialog::filterSelected, [_proc_](const QString& filter){
  _proc_(qstring_to_crystal(filter));
}));
}


extern "C" void bg_QFileDialog_filterSelected_const_QString_R(QFileDialog *_self_, const CrystalString filter) {
  return _self_->filterSelected(QString::fromUtf8(filter.ptr, filter.size));
}

extern "C" CrystalString bg_QFileDialog_getOpenFileName_STATIC_QWidget_X(QWidget* parent) {
  return qstring_to_crystal(QFileDialog::getOpenFileName(parent));
}

extern "C" CrystalString bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return qstring_to_crystal(QFileDialog::getOpenFileName(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" CrystalString bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString dir) {
  return qstring_to_crystal(QFileDialog::getOpenFileName(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size)));
}

extern "C" CrystalString bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString dir, const CrystalString filter) {
  return qstring_to_crystal(QFileDialog::getOpenFileName(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size), QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" QUrl* bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X(QWidget* parent) {
  return new (UseGC) QUrl (QFileDialog::getOpenFileUrl(parent));
}

extern "C" QUrl* bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return new (UseGC) QUrl (QFileDialog::getOpenFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QUrl* bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget* parent, const CrystalString caption, const QUrl& dir) {
  return new (UseGC) QUrl (QFileDialog::getOpenFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" QUrl* bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(QWidget* parent, const CrystalString caption, const QUrl& dir, const CrystalString filter) {
  return new (UseGC) QUrl (QFileDialog::getOpenFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" CrystalString bg_QFileDialog_getSaveFileName_STATIC_QWidget_X(QWidget* parent) {
  return qstring_to_crystal(QFileDialog::getSaveFileName(parent));
}

extern "C" CrystalString bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return qstring_to_crystal(QFileDialog::getSaveFileName(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" CrystalString bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString dir) {
  return qstring_to_crystal(QFileDialog::getSaveFileName(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size)));
}

extern "C" CrystalString bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString dir, const CrystalString filter) {
  return qstring_to_crystal(QFileDialog::getSaveFileName(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size), QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" QUrl* bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X(QWidget* parent) {
  return new (UseGC) QUrl (QFileDialog::getSaveFileUrl(parent));
}

extern "C" QUrl* bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return new (UseGC) QUrl (QFileDialog::getSaveFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QUrl* bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget* parent, const CrystalString caption, const QUrl& dir) {
  return new (UseGC) QUrl (QFileDialog::getSaveFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" QUrl* bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(QWidget* parent, const CrystalString caption, const QUrl& dir, const CrystalString filter) {
  return new (UseGC) QUrl (QFileDialog::getSaveFileUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" CrystalString bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X(QWidget* parent) {
  return qstring_to_crystal(QFileDialog::getExistingDirectory(parent));
}

extern "C" CrystalString bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return qstring_to_crystal(QFileDialog::getExistingDirectory(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" CrystalString bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString dir) {
  return qstring_to_crystal(QFileDialog::getExistingDirectory(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size)));
}

extern "C" CrystalString bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(QWidget* parent, const CrystalString caption, const CrystalString dir, QFileDialog::Options options) {
  return qstring_to_crystal(QFileDialog::getExistingDirectory(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size), options));
}

extern "C" QUrl* bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X(QWidget* parent) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent));
}

extern "C" QUrl* bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QUrl* bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget* parent, const CrystalString caption, const QUrl& dir) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" QUrl* bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(QWidget* parent, const CrystalString caption, const QUrl& dir, QFileDialog::Options options) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, options));
}

extern "C" QUrl* bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(QWidget* parent, const CrystalString caption, const QUrl& dir, QFileDialog::Options options, const QStringList& supportedSchemes) {
  return new (UseGC) QUrl (QFileDialog::getExistingDirectoryUrl(parent, QString::fromUtf8(caption.ptr, caption.size), dir, options, supportedSchemes));
}

extern "C" QStringList* bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X(QWidget* parent) {
  return new (UseGC) QStringList (QFileDialog::getOpenFileNames(parent));
}

extern "C" QStringList* bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return new (UseGC) QStringList (QFileDialog::getOpenFileNames(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QStringList* bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString dir) {
  return new (UseGC) QStringList (QFileDialog::getOpenFileNames(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size)));
}

extern "C" QStringList* bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(QWidget* parent, const CrystalString caption, const CrystalString dir, const CrystalString filter) {
  return new (UseGC) QStringList (QFileDialog::getOpenFileNames(parent, QString::fromUtf8(caption.ptr, caption.size), QString::fromUtf8(dir.ptr, dir.size), QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" QList<QUrl>* bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X(QWidget* parent) {
  return new (UseGC) QList<QUrl> (QFileDialog::getOpenFileUrls(parent));
}

extern "C" QList<QUrl>* bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(QWidget* parent, const CrystalString caption) {
  return new (UseGC) QList<QUrl> (QFileDialog::getOpenFileUrls(parent, QString::fromUtf8(caption.ptr, caption.size)));
}

extern "C" QList<QUrl>* bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(QWidget* parent, const CrystalString caption, const QUrl& dir) {
  return new (UseGC) QList<QUrl> (QFileDialog::getOpenFileUrls(parent, QString::fromUtf8(caption.ptr, caption.size), dir));
}

extern "C" QList<QUrl>* bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(QWidget* parent, const CrystalString caption, const QUrl& dir, const CrystalString filter) {
  return new (UseGC) QList<QUrl> (QFileDialog::getOpenFileUrls(parent, QString::fromUtf8(caption.ptr, caption.size), dir, QString::fromUtf8(filter.ptr, filter.size)));
}

extern "C" QFileDialog* bg_QFileDialog_CONSTRUCT_const_QFileDialogArgs_R(const QFileDialogArgs& args) {
  return new (UseGC) BgInherit_QFileDialog(args);
}

extern "C" void bg_QFileDialog_done_int(QFileDialog *_self_, int result) {
  return _self_->done(result);
}

extern "C" void bg_QFileDialog_accept_(QFileDialog *_self_) {
  return _self_->accept();
}

extern "C" void bg_QFileDialog_changeEvent_QEvent_X(QFileDialog *_self_, QEvent* e) {
  return _self_->changeEvent(e);
}

extern "C" QTextOption* bg_QTextOption_CONSTRUCT_() {
  return new (UseGC) QTextOption();
}

extern "C" QTextOption* bg_QTextOption_CONSTRUCT_Qt__Alignment(Qt::Alignment alignment) {
  return new (UseGC) QTextOption(alignment);
}

extern "C" void bg_QTextOption_setAlignment_Qt__Alignment(QTextOption *_self_, Qt::Alignment alignment) {
  return _self_->setAlignment(alignment);
}

extern "C" Qt::Alignment bg_QTextOption_alignment_(QTextOption *_self_) {
  return _self_->alignment();
}

extern "C" void bg_QTextOption_setTextDirection_Qt__LayoutDirection(QTextOption *_self_, Qt::LayoutDirection aDirection) {
  return _self_->setTextDirection(aDirection);
}

extern "C" Qt::LayoutDirection bg_QTextOption_textDirection_(QTextOption *_self_) {
  return _self_->textDirection();
}

extern "C" void bg_QTextOption_setWrapMode_QTextOption__WrapMode(QTextOption *_self_, QTextOption::WrapMode wrap) {
  return _self_->setWrapMode(wrap);
}

extern "C" QTextOption::WrapMode bg_QTextOption_wrapMode_(QTextOption *_self_) {
  return _self_->wrapMode();
}

extern "C" void bg_QTextOption_setFlags_QTextOption__Flags(QTextOption *_self_, QTextOption::Flags flags) {
  return _self_->setFlags(flags);
}

extern "C" QTextOption::Flags bg_QTextOption_flags_(QTextOption *_self_) {
  return _self_->flags();
}

extern "C" void bg_QTextOption_setTabStop_qreal(QTextOption *_self_, qreal tabStop) {
  return _self_->setTabStop(tabStop);
}

extern "C" qreal bg_QTextOption_tabStop_(QTextOption *_self_) {
  return _self_->tabStop();
}

extern "C" void bg_QTextOption_setUseDesignMetrics_bool(QTextOption *_self_, bool b) {
  return _self_->setUseDesignMetrics(b);
}

extern "C" bool bg_QTextOption_useDesignMetrics_(QTextOption *_self_) {
  return _self_->useDesignMetrics();
}

extern "C" const QMetaObject* bg_QTextDocument_metaObject_(QTextDocument *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QTextDocument_qt_metacast_const_char_X(QTextDocument *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QTextDocument::tr(s, c, n));
}

extern "C" CrystalString bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QTextDocument::trUtf8(s, c, n));
}

extern "C" QTextDocument* bg_QTextDocument_CONSTRUCT_QObject_X(QObject* parent) {
  return new (UseGC) BgInherit_QTextDocument(parent);
}

extern "C" QTextDocument* bg_QTextDocument_CONSTRUCT_const_QString_R_QObject_X(const CrystalString text, QObject* parent) {
  return new (UseGC) BgInherit_QTextDocument(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" QTextDocument* bg_QTextDocument_clone_QObject_X(QTextDocument *_self_, QObject* parent) {
  return _self_->clone(parent);
}

extern "C" bool bg_QTextDocument_isEmpty_(QTextDocument *_self_) {
  return _self_->isEmpty();
}

extern "C" void bg_QTextDocument_clear_(QTextDocument *_self_) {
  return _self_->clear();
}

extern "C" void bg_QTextDocument_setUndoRedoEnabled_bool(QTextDocument *_self_, bool enable) {
  return _self_->setUndoRedoEnabled(enable);
}

extern "C" bool bg_QTextDocument_isUndoRedoEnabled_(QTextDocument *_self_) {
  return _self_->isUndoRedoEnabled();
}

extern "C" bool bg_QTextDocument_isUndoAvailable_(QTextDocument *_self_) {
  return _self_->isUndoAvailable();
}

extern "C" bool bg_QTextDocument_isRedoAvailable_(QTextDocument *_self_) {
  return _self_->isRedoAvailable();
}

extern "C" int bg_QTextDocument_availableUndoSteps_(QTextDocument *_self_) {
  return _self_->availableUndoSteps();
}

extern "C" int bg_QTextDocument_availableRedoSteps_(QTextDocument *_self_) {
  return _self_->availableRedoSteps();
}

extern "C" int bg_QTextDocument_revision_(QTextDocument *_self_) {
  return _self_->revision();
}

extern "C" void bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(QTextDocument *_self_, QAbstractTextDocumentLayout* layout) {
  return _self_->setDocumentLayout(layout);
}

extern "C" QAbstractTextDocumentLayout* bg_QTextDocument_documentLayout_(QTextDocument *_self_) {
  return _self_->documentLayout();
}

extern "C" void bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(QTextDocument *_self_, QTextDocument::MetaInformation info, const CrystalString unnamed_arg_1) {
  return _self_->setMetaInformation(info, QString::fromUtf8(unnamed_arg_1.ptr, unnamed_arg_1.size));
}

extern "C" CrystalString bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(QTextDocument *_self_, QTextDocument::MetaInformation info) {
  return qstring_to_crystal(_self_->metaInformation(info));
}

extern "C" CrystalString bg_QTextDocument_toHtml_(QTextDocument *_self_) {
  return qstring_to_crystal(_self_->toHtml());
}

extern "C" CrystalString bg_QTextDocument_toHtml_const_QByteArray_R(QTextDocument *_self_, const QByteArray& encoding) {
  return qstring_to_crystal(_self_->toHtml(encoding));
}

extern "C" void bg_QTextDocument_setHtml_const_QString_R(QTextDocument *_self_, const CrystalString html) {
  return _self_->setHtml(QString::fromUtf8(html.ptr, html.size));
}

extern "C" CrystalString bg_QTextDocument_toRawText_(QTextDocument *_self_) {
  return qstring_to_crystal(_self_->toRawText());
}

extern "C" CrystalString bg_QTextDocument_toPlainText_(QTextDocument *_self_) {
  return qstring_to_crystal(_self_->toPlainText());
}

extern "C" void bg_QTextDocument_setPlainText_const_QString_R(QTextDocument *_self_, const CrystalString text) {
  return _self_->setPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QChar* bg_QTextDocument_characterAt_int(QTextDocument *_self_, int pos) {
  return new (UseGC) QChar (_self_->characterAt(pos));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QString_R_int(QTextDocument *_self_, const CrystalString subString, int from) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), from));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(QTextDocument *_self_, const CrystalString subString, int from, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), from, options));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(QTextDocument *_self_, const CrystalString subString, const QTextCursor& cursor) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), cursor));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(QTextDocument *_self_, const CrystalString subString, const QTextCursor& cursor, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(QString::fromUtf8(subString.ptr, subString.size), cursor, options));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegExp_R_int(QTextDocument *_self_, const QRegExp& expr, int from) {
  return new (UseGC) QTextCursor (_self_->find(expr, from));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(QTextDocument *_self_, const QRegExp& expr, int from, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, from, options));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(QTextDocument *_self_, const QRegExp& expr, const QTextCursor& cursor) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(QTextDocument *_self_, const QRegExp& expr, const QTextCursor& cursor, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor, options));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegularExpression_R_int(QTextDocument *_self_, const QRegularExpression& expr, int from) {
  return new (UseGC) QTextCursor (_self_->find(expr, from));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(QTextDocument *_self_, const QRegularExpression& expr, int from, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, from, options));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(QTextDocument *_self_, const QRegularExpression& expr, const QTextCursor& cursor) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor));
}

extern "C" QTextCursor* bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(QTextDocument *_self_, const QRegularExpression& expr, const QTextCursor& cursor, QTextDocument::FindFlags options) {
  return new (UseGC) QTextCursor (_self_->find(expr, cursor, options));
}

extern "C" QTextFrame* bg_QTextDocument_frameAt_int(QTextDocument *_self_, int pos) {
  return _self_->frameAt(pos);
}

extern "C" QTextFrame* bg_QTextDocument_rootFrame_(QTextDocument *_self_) {
  return _self_->rootFrame();
}

extern "C" QTextObject* bg_QTextDocument_object_int(QTextDocument *_self_, int objectIndex) {
  return _self_->object(objectIndex);
}

extern "C" QTextObject* bg_QTextDocument_objectForFormat_const_QTextFormat_R(QTextDocument *_self_, const QTextFormat& unnamed_arg_0) {
  return _self_->objectForFormat(unnamed_arg_0);
}

extern "C" QTextBlock* bg_QTextDocument_findBlock_int(QTextDocument *_self_, int pos) {
  return new (UseGC) QTextBlock (_self_->findBlock(pos));
}

extern "C" QTextBlock* bg_QTextDocument_findBlockByNumber_int(QTextDocument *_self_, int blockNumber) {
  return new (UseGC) QTextBlock (_self_->findBlockByNumber(blockNumber));
}

extern "C" QTextBlock* bg_QTextDocument_findBlockByLineNumber_int(QTextDocument *_self_, int blockNumber) {
  return new (UseGC) QTextBlock (_self_->findBlockByLineNumber(blockNumber));
}

extern "C" QTextBlock* bg_QTextDocument_begin_(QTextDocument *_self_) {
  return new (UseGC) QTextBlock (_self_->begin());
}

extern "C" QTextBlock* bg_QTextDocument_end_(QTextDocument *_self_) {
  return new (UseGC) QTextBlock (_self_->end());
}

extern "C" QTextBlock* bg_QTextDocument_firstBlock_(QTextDocument *_self_) {
  return new (UseGC) QTextBlock (_self_->firstBlock());
}

extern "C" QTextBlock* bg_QTextDocument_lastBlock_(QTextDocument *_self_) {
  return new (UseGC) QTextBlock (_self_->lastBlock());
}

extern "C" void bg_QTextDocument_setPageSize_const_QSizeF_R(QTextDocument *_self_, const QSizeF& size) {
  return _self_->setPageSize(size);
}

extern "C" QSizeF* bg_QTextDocument_pageSize_(QTextDocument *_self_) {
  return new (UseGC) QSizeF (_self_->pageSize());
}

extern "C" void bg_QTextDocument_setDefaultFont_const_QFont_R(QTextDocument *_self_, const QFont& font) {
  return _self_->setDefaultFont(font);
}

extern "C" QFont* bg_QTextDocument_defaultFont_(QTextDocument *_self_) {
  return new (UseGC) QFont (_self_->defaultFont());
}

extern "C" int bg_QTextDocument_pageCount_(QTextDocument *_self_) {
  return _self_->pageCount();
}

extern "C" bool bg_QTextDocument_isModified_(QTextDocument *_self_) {
  return _self_->isModified();
}

extern "C" void bg_QTextDocument_print_QPagedPaintDevice_X(QTextDocument *_self_, QPagedPaintDevice* printer) {
  return _self_->print(printer);
}

extern "C" void bg_QTextDocument_markContentsDirty_int_int(QTextDocument *_self_, int from, int length) {
  return _self_->markContentsDirty(from, length);
}

extern "C" void bg_QTextDocument_setUseDesignMetrics_bool(QTextDocument *_self_, bool b) {
  return _self_->setUseDesignMetrics(b);
}

extern "C" bool bg_QTextDocument_useDesignMetrics_(QTextDocument *_self_) {
  return _self_->useDesignMetrics();
}

extern "C" void bg_QTextDocument_drawContents_QPainter_X(QTextDocument *_self_, QPainter* painter) {
  return _self_->drawContents(painter);
}

extern "C" void bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(QTextDocument *_self_, QPainter* painter, const QRectF& rect) {
  return _self_->drawContents(painter, rect);
}

extern "C" void bg_QTextDocument_setTextWidth_qreal(QTextDocument *_self_, qreal width) {
  return _self_->setTextWidth(width);
}

extern "C" qreal bg_QTextDocument_textWidth_(QTextDocument *_self_) {
  return _self_->textWidth();
}

extern "C" qreal bg_QTextDocument_idealWidth_(QTextDocument *_self_) {
  return _self_->idealWidth();
}

extern "C" qreal bg_QTextDocument_indentWidth_(QTextDocument *_self_) {
  return _self_->indentWidth();
}

extern "C" void bg_QTextDocument_setIndentWidth_qreal(QTextDocument *_self_, qreal width) {
  return _self_->setIndentWidth(width);
}

extern "C" qreal bg_QTextDocument_documentMargin_(QTextDocument *_self_) {
  return _self_->documentMargin();
}

extern "C" void bg_QTextDocument_setDocumentMargin_qreal(QTextDocument *_self_, qreal margin) {
  return _self_->setDocumentMargin(margin);
}

extern "C" void bg_QTextDocument_adjustSize_(QTextDocument *_self_) {
  return _self_->adjustSize();
}

extern "C" QSizeF* bg_QTextDocument_size_(QTextDocument *_self_) {
  return new (UseGC) QSizeF (_self_->size());
}

extern "C" int bg_QTextDocument_blockCount_(QTextDocument *_self_) {
  return _self_->blockCount();
}

extern "C" int bg_QTextDocument_lineCount_(QTextDocument *_self_) {
  return _self_->lineCount();
}

extern "C" int bg_QTextDocument_characterCount_(QTextDocument *_self_) {
  return _self_->characterCount();
}

extern "C" void bg_QTextDocument_setDefaultStyleSheet_const_QString_R(QTextDocument *_self_, const CrystalString sheet) {
  return _self_->setDefaultStyleSheet(QString::fromUtf8(sheet.ptr, sheet.size));
}

extern "C" CrystalString bg_QTextDocument_defaultStyleSheet_(QTextDocument *_self_) {
  return qstring_to_crystal(_self_->defaultStyleSheet());
}

extern "C" void bg_QTextDocument_undo_QTextCursor_X(QTextDocument *_self_, QTextCursor* cursor) {
  return _self_->undo(cursor);
}

extern "C" void bg_QTextDocument_redo_QTextCursor_X(QTextDocument *_self_, QTextCursor* cursor) {
  return _self_->redo(cursor);
}

extern "C" void bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(QTextDocument *_self_, QTextDocument::Stacks historyToClear) {
  return _self_->clearUndoRedoStacks(historyToClear);
}

extern "C" int bg_QTextDocument_maximumBlockCount_(QTextDocument *_self_) {
  return _self_->maximumBlockCount();
}

extern "C" void bg_QTextDocument_setMaximumBlockCount_int(QTextDocument *_self_, int maximum) {
  return _self_->setMaximumBlockCount(maximum);
}

extern "C" QTextOption* bg_QTextDocument_defaultTextOption_(QTextDocument *_self_) {
  return new (UseGC) QTextOption (_self_->defaultTextOption());
}

extern "C" void bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(QTextDocument *_self_, const QTextOption& option) {
  return _self_->setDefaultTextOption(option);
}

extern "C" QUrl* bg_QTextDocument_baseUrl_(QTextDocument *_self_) {
  return new (UseGC) QUrl (_self_->baseUrl());
}

extern "C" void bg_QTextDocument_setBaseUrl_const_QUrl_R(QTextDocument *_self_, const QUrl& url) {
  return _self_->setBaseUrl(url);
}

extern "C" Qt::CursorMoveStyle bg_QTextDocument_defaultCursorMoveStyle_(QTextDocument *_self_) {
  return _self_->defaultCursorMoveStyle();
}

extern "C" void bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(QTextDocument *_self_, Qt::CursorMoveStyle style) {
  return _self_->setDefaultCursorMoveStyle(style);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_contentsChange_CONNECT_CrystalProc_void__int__int__int_(QTextDocument *_self_, CrystalProc<void, int, int, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(int, int, int))&QTextDocument::contentsChange, [_proc_](int from, int charsRemoved, int charsAdded){
  _proc_(from, charsRemoved, charsAdded);
}));
}


extern "C" void bg_QTextDocument_contentsChange_int_int_int(QTextDocument *_self_, int from, int charsRemoved, int charsAdded) {
  return _self_->contentsChange(from, charsRemoved, charsAdded);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_contentsChanged_CONNECT_CrystalProc_void_(QTextDocument *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)())&QTextDocument::contentsChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QTextDocument_contentsChanged_(QTextDocument *_self_) {
  return _self_->contentsChanged();
}

extern "C" QMetaObject::Connection* bg_QTextDocument_undoAvailable_CONNECT_CrystalProc_void__bool_(QTextDocument *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(bool))&QTextDocument::undoAvailable, [_proc_](bool unnamed_arg_0){
  _proc_(unnamed_arg_0);
}));
}


extern "C" void bg_QTextDocument_undoAvailable_bool(QTextDocument *_self_, bool unnamed_arg_0) {
  return _self_->undoAvailable(unnamed_arg_0);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_redoAvailable_CONNECT_CrystalProc_void__bool_(QTextDocument *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(bool))&QTextDocument::redoAvailable, [_proc_](bool unnamed_arg_0){
  _proc_(unnamed_arg_0);
}));
}


extern "C" void bg_QTextDocument_redoAvailable_bool(QTextDocument *_self_, bool unnamed_arg_0) {
  return _self_->redoAvailable(unnamed_arg_0);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_undoCommandAdded_CONNECT_CrystalProc_void_(QTextDocument *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)())&QTextDocument::undoCommandAdded, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QTextDocument_undoCommandAdded_(QTextDocument *_self_) {
  return _self_->undoCommandAdded();
}

extern "C" QMetaObject::Connection* bg_QTextDocument_modificationChanged_CONNECT_CrystalProc_void__bool_(QTextDocument *_self_, CrystalProc<void, bool> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(bool))&QTextDocument::modificationChanged, [_proc_](bool m){
  _proc_(m);
}));
}


extern "C" void bg_QTextDocument_modificationChanged_bool(QTextDocument *_self_, bool m) {
  return _self_->modificationChanged(m);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_cursorPositionChanged_CONNECT_CrystalProc_void__const_QTextCursorR_(QTextDocument *_self_, CrystalProc<void, const QTextCursor*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(const QTextCursor &))&QTextDocument::cursorPositionChanged, [_proc_](const QTextCursor& cursor){
  _proc_(new (UseGC) QTextCursor (cursor));
}));
}


extern "C" void bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(QTextDocument *_self_, const QTextCursor& cursor) {
  return _self_->cursorPositionChanged(cursor);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_blockCountChanged_CONNECT_CrystalProc_void__int_(QTextDocument *_self_, CrystalProc<void, int> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(int))&QTextDocument::blockCountChanged, [_proc_](int newBlockCount){
  _proc_(newBlockCount);
}));
}


extern "C" void bg_QTextDocument_blockCountChanged_int(QTextDocument *_self_, int newBlockCount) {
  return _self_->blockCountChanged(newBlockCount);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_baseUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(QTextDocument *_self_, CrystalProc<void, const QUrl*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)(const QUrl &))&QTextDocument::baseUrlChanged, [_proc_](const QUrl& url){
  _proc_(new (UseGC) QUrl (url));
}));
}


extern "C" void bg_QTextDocument_baseUrlChanged_const_QUrl_R(QTextDocument *_self_, const QUrl& url) {
  return _self_->baseUrlChanged(url);
}

extern "C" QMetaObject::Connection* bg_QTextDocument_documentLayoutChanged_CONNECT_CrystalProc_void_(QTextDocument *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QTextDocument::*)())&QTextDocument::documentLayoutChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QTextDocument_documentLayoutChanged_(QTextDocument *_self_) {
  return _self_->documentLayoutChanged();
}

extern "C" void bg_QTextDocument_undo_(QTextDocument *_self_) {
  return _self_->undo();
}

extern "C" void bg_QTextDocument_redo_(QTextDocument *_self_) {
  return _self_->redo();
}

extern "C" void bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(QTextDocument *_self_, QAbstractUndoItem* unnamed_arg_0) {
  return _self_->appendUndoItem(unnamed_arg_0);
}

extern "C" void bg_QTextDocument_setModified_bool(QTextDocument *_self_, bool m) {
  return _self_->setModified(m);
}

extern "C" QTextObject* bg_QTextDocument_createObject_const_QTextFormat_R(QTextDocument *_self_, const QTextFormat& f) {
  return _self_->createObject(f);
}

extern "C" QTextDocument* bg_QTextDocument_CONSTRUCT_QTextDocumentPrivate_R_QObject_X(QTextDocumentPrivate& dd, QObject* parent) {
  return new (UseGC) BgInherit_QTextDocument(dd, parent);
}

extern "C" QTextDocumentPrivate* bg_QTextDocument_docHandle_(QTextDocument *_self_) {
  return _self_->docHandle();
}

extern "C" QTextCursor* bg_QTextCursor_CONSTRUCT_() {
  return new (UseGC) QTextCursor();
}

extern "C" QTextCursor* bg_QTextCursor_CONSTRUCT_QTextDocument_X(QTextDocument* document) {
  return new (UseGC) QTextCursor(document);
}

extern "C" QTextCursor* bg_QTextCursor_CONSTRUCT_QTextDocumentPrivate_X_int(QTextDocumentPrivate* p, int pos) {
  return new (UseGC) QTextCursor(p, pos);
}

extern "C" QTextCursor* bg_QTextCursor_CONSTRUCT_QTextCursorPrivate_X(QTextCursorPrivate* d) {
  return new (UseGC) QTextCursor(d);
}

extern "C" QTextCursor* bg_QTextCursor_CONSTRUCT_QTextFrame_X(QTextFrame* frame) {
  return new (UseGC) QTextCursor(frame);
}

extern "C" QTextCursor* bg_QTextCursor_CONSTRUCT_const_QTextBlock_R(const QTextBlock& block) {
  return new (UseGC) QTextCursor(block);
}

extern "C" void bg_QTextCursor_swap_QTextCursor_R(QTextCursor *_self_, QTextCursor& other) {
  return _self_->swap(other);
}

extern "C" bool bg_QTextCursor_isNull_(QTextCursor *_self_) {
  return _self_->isNull();
}

extern "C" void bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(QTextCursor *_self_, int pos, QTextCursor::MoveMode mode) {
  return _self_->setPosition(pos, mode);
}

extern "C" int bg_QTextCursor_position_(QTextCursor *_self_) {
  return _self_->position();
}

extern "C" int bg_QTextCursor_positionInBlock_(QTextCursor *_self_) {
  return _self_->positionInBlock();
}

extern "C" int bg_QTextCursor_anchor_(QTextCursor *_self_) {
  return _self_->anchor();
}

extern "C" void bg_QTextCursor_insertText_const_QString_R(QTextCursor *_self_, const CrystalString text) {
  return _self_->insertText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" void bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(QTextCursor *_self_, const CrystalString text, const QTextCharFormat& format) {
  return _self_->insertText(QString::fromUtf8(text.ptr, text.size), format);
}

extern "C" bool bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(QTextCursor *_self_, QTextCursor::MoveOperation op, QTextCursor::MoveMode unnamed_arg_1, int n) {
  return _self_->movePosition(op, unnamed_arg_1, n);
}

extern "C" bool bg_QTextCursor_visualNavigation_(QTextCursor *_self_) {
  return _self_->visualNavigation();
}

extern "C" void bg_QTextCursor_setVisualNavigation_bool(QTextCursor *_self_, bool b) {
  return _self_->setVisualNavigation(b);
}

extern "C" void bg_QTextCursor_setVerticalMovementX_int(QTextCursor *_self_, int x) {
  return _self_->setVerticalMovementX(x);
}

extern "C" int bg_QTextCursor_verticalMovementX_(QTextCursor *_self_) {
  return _self_->verticalMovementX();
}

extern "C" void bg_QTextCursor_setKeepPositionOnInsert_bool(QTextCursor *_self_, bool b) {
  return _self_->setKeepPositionOnInsert(b);
}

extern "C" bool bg_QTextCursor_keepPositionOnInsert_(QTextCursor *_self_) {
  return _self_->keepPositionOnInsert();
}

extern "C" void bg_QTextCursor_deleteChar_(QTextCursor *_self_) {
  return _self_->deleteChar();
}

extern "C" void bg_QTextCursor_deletePreviousChar_(QTextCursor *_self_) {
  return _self_->deletePreviousChar();
}

extern "C" void bg_QTextCursor_select_QTextCursor__SelectionType(QTextCursor *_self_, QTextCursor::SelectionType selection) {
  return _self_->select(selection);
}

extern "C" bool bg_QTextCursor_hasSelection_(QTextCursor *_self_) {
  return _self_->hasSelection();
}

extern "C" bool bg_QTextCursor_hasComplexSelection_(QTextCursor *_self_) {
  return _self_->hasComplexSelection();
}

extern "C" void bg_QTextCursor_removeSelectedText_(QTextCursor *_self_) {
  return _self_->removeSelectedText();
}

extern "C" void bg_QTextCursor_clearSelection_(QTextCursor *_self_) {
  return _self_->clearSelection();
}

extern "C" int bg_QTextCursor_selectionStart_(QTextCursor *_self_) {
  return _self_->selectionStart();
}

extern "C" int bg_QTextCursor_selectionEnd_(QTextCursor *_self_) {
  return _self_->selectionEnd();
}

extern "C" CrystalString bg_QTextCursor_selectedText_(QTextCursor *_self_) {
  return qstring_to_crystal(_self_->selectedText());
}

extern "C" QTextDocumentFragment* bg_QTextCursor_selection_(QTextCursor *_self_) {
  return new (UseGC) QTextDocumentFragment (_self_->selection());
}

extern "C" void bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(QTextCursor *_self_, int* firstRow, int* numRows, int* firstColumn, int* numColumns) {
  return _self_->selectedTableCells(firstRow, numRows, firstColumn, numColumns);
}

extern "C" QTextBlock* bg_QTextCursor_block_(QTextCursor *_self_) {
  return new (UseGC) QTextBlock (_self_->block());
}

extern "C" QTextCharFormat* bg_QTextCursor_charFormat_(QTextCursor *_self_) {
  return new (UseGC) QTextCharFormat (_self_->charFormat());
}

extern "C" void bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(QTextCursor *_self_, const QTextCharFormat& format) {
  return _self_->setCharFormat(format);
}

extern "C" void bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(QTextCursor *_self_, const QTextCharFormat& modifier) {
  return _self_->mergeCharFormat(modifier);
}

extern "C" QTextBlockFormat* bg_QTextCursor_blockFormat_(QTextCursor *_self_) {
  return new (UseGC) QTextBlockFormat (_self_->blockFormat());
}

extern "C" void bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(QTextCursor *_self_, const QTextBlockFormat& format) {
  return _self_->setBlockFormat(format);
}

extern "C" void bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(QTextCursor *_self_, const QTextBlockFormat& modifier) {
  return _self_->mergeBlockFormat(modifier);
}

extern "C" QTextCharFormat* bg_QTextCursor_blockCharFormat_(QTextCursor *_self_) {
  return new (UseGC) QTextCharFormat (_self_->blockCharFormat());
}

extern "C" void bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(QTextCursor *_self_, const QTextCharFormat& format) {
  return _self_->setBlockCharFormat(format);
}

extern "C" void bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(QTextCursor *_self_, const QTextCharFormat& modifier) {
  return _self_->mergeBlockCharFormat(modifier);
}

extern "C" bool bg_QTextCursor_atBlockStart_(QTextCursor *_self_) {
  return _self_->atBlockStart();
}

extern "C" bool bg_QTextCursor_atBlockEnd_(QTextCursor *_self_) {
  return _self_->atBlockEnd();
}

extern "C" bool bg_QTextCursor_atStart_(QTextCursor *_self_) {
  return _self_->atStart();
}

extern "C" bool bg_QTextCursor_atEnd_(QTextCursor *_self_) {
  return _self_->atEnd();
}

extern "C" void bg_QTextCursor_insertBlock_(QTextCursor *_self_) {
  return _self_->insertBlock();
}

extern "C" void bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(QTextCursor *_self_, const QTextBlockFormat& format) {
  return _self_->insertBlock(format);
}

extern "C" void bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(QTextCursor *_self_, const QTextBlockFormat& format, const QTextCharFormat& charFormat) {
  return _self_->insertBlock(format, charFormat);
}

extern "C" QTextList* bg_QTextCursor_insertList_const_QTextListFormat_R(QTextCursor *_self_, const QTextListFormat& format) {
  return _self_->insertList(format);
}

extern "C" QTextList* bg_QTextCursor_insertList_QTextListFormat__Style(QTextCursor *_self_, QTextListFormat::Style style) {
  return _self_->insertList(style);
}

extern "C" QTextList* bg_QTextCursor_createList_const_QTextListFormat_R(QTextCursor *_self_, const QTextListFormat& format) {
  return _self_->createList(format);
}

extern "C" QTextList* bg_QTextCursor_createList_QTextListFormat__Style(QTextCursor *_self_, QTextListFormat::Style style) {
  return _self_->createList(style);
}

extern "C" QTextList* bg_QTextCursor_currentList_(QTextCursor *_self_) {
  return _self_->currentList();
}

extern "C" QTextTable* bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(QTextCursor *_self_, int rows, int cols, const QTextTableFormat& format) {
  return _self_->insertTable(rows, cols, format);
}

extern "C" QTextTable* bg_QTextCursor_insertTable_int_int(QTextCursor *_self_, int rows, int cols) {
  return _self_->insertTable(rows, cols);
}

extern "C" QTextTable* bg_QTextCursor_currentTable_(QTextCursor *_self_) {
  return _self_->currentTable();
}

extern "C" QTextFrame* bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(QTextCursor *_self_, const QTextFrameFormat& format) {
  return _self_->insertFrame(format);
}

extern "C" QTextFrame* bg_QTextCursor_currentFrame_(QTextCursor *_self_) {
  return _self_->currentFrame();
}

extern "C" void bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(QTextCursor *_self_, const QTextDocumentFragment& fragment) {
  return _self_->insertFragment(fragment);
}

extern "C" void bg_QTextCursor_insertHtml_const_QString_R(QTextCursor *_self_, const CrystalString html) {
  return _self_->insertHtml(QString::fromUtf8(html.ptr, html.size));
}

extern "C" void bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(QTextCursor *_self_, const QTextImageFormat& format, QTextFrameFormat::Position alignment) {
  return _self_->insertImage(format, alignment);
}

extern "C" void bg_QTextCursor_insertImage_const_QTextImageFormat_R(QTextCursor *_self_, const QTextImageFormat& format) {
  return _self_->insertImage(format);
}

extern "C" void bg_QTextCursor_insertImage_const_QString_R(QTextCursor *_self_, const CrystalString name) {
  return _self_->insertImage(QString::fromUtf8(name.ptr, name.size));
}

extern "C" void bg_QTextCursor_insertImage_const_QImage_R(QTextCursor *_self_, const QImage& image) {
  return _self_->insertImage(image);
}

extern "C" void bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(QTextCursor *_self_, const QImage& image, const CrystalString name) {
  return _self_->insertImage(image, QString::fromUtf8(name.ptr, name.size));
}

extern "C" void bg_QTextCursor_beginEditBlock_(QTextCursor *_self_) {
  return _self_->beginEditBlock();
}

extern "C" void bg_QTextCursor_joinPreviousEditBlock_(QTextCursor *_self_) {
  return _self_->joinPreviousEditBlock();
}

extern "C" void bg_QTextCursor_endEditBlock_(QTextCursor *_self_) {
  return _self_->endEditBlock();
}

extern "C" bool bg_QTextCursor_isCopyOf_const_QTextCursor_R(QTextCursor *_self_, const QTextCursor& other) {
  return _self_->isCopyOf(other);
}

extern "C" int bg_QTextCursor_blockNumber_(QTextCursor *_self_) {
  return _self_->blockNumber();
}

extern "C" int bg_QTextCursor_columnNumber_(QTextCursor *_self_) {
  return _self_->columnNumber();
}

extern "C" QTextDocument* bg_QTextCursor_document_(QTextCursor *_self_) {
  return _self_->document();
}

extern "C" QDir* bg_QDir_CONSTRUCT_() {
  return new (UseGC) QDir();
}

extern "C" QDir* bg_QDir_CONSTRUCT_const_QString_R(const CrystalString path) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size));
}

extern "C" QDir* bg_QDir_CONSTRUCT_const_QString_R_const_QString_R(const CrystalString path, const CrystalString nameFilter) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size), QString::fromUtf8(nameFilter.ptr, nameFilter.size));
}

extern "C" QDir* bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(const CrystalString path, const CrystalString nameFilter, QDir::SortFlags sort) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size), QString::fromUtf8(nameFilter.ptr, nameFilter.size), sort);
}

extern "C" QDir* bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(const CrystalString path, const CrystalString nameFilter, QDir::SortFlags sort, QDir::Filters filter) {
  return new (UseGC) QDir(QString::fromUtf8(path.ptr, path.size), QString::fromUtf8(nameFilter.ptr, nameFilter.size), sort, filter);
}

extern "C" void bg_QDir_swap_QDir_R(QDir *_self_, QDir& other) {
  return _self_->swap(other);
}

extern "C" void bg_QDir_setPath_const_QString_R(QDir *_self_, const CrystalString path) {
  return _self_->setPath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" CrystalString bg_QDir_path_(QDir *_self_) {
  return qstring_to_crystal(_self_->path());
}

extern "C" CrystalString bg_QDir_absolutePath_(QDir *_self_) {
  return qstring_to_crystal(_self_->absolutePath());
}

extern "C" CrystalString bg_QDir_canonicalPath_(QDir *_self_) {
  return qstring_to_crystal(_self_->canonicalPath());
}

extern "C" void bg_QDir_addResourceSearchPath_STATIC_const_QString_R(const CrystalString path) {
  return QDir::addResourceSearchPath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" void bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(const CrystalString prefix, const QStringList& searchPaths) {
  return QDir::setSearchPaths(QString::fromUtf8(prefix.ptr, prefix.size), searchPaths);
}

extern "C" void bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(const CrystalString prefix, const CrystalString path) {
  return QDir::addSearchPath(QString::fromUtf8(prefix.ptr, prefix.size), QString::fromUtf8(path.ptr, path.size));
}

extern "C" QStringList* bg_QDir_searchPaths_STATIC_const_QString_R(const CrystalString prefix) {
  return new (UseGC) QStringList (QDir::searchPaths(QString::fromUtf8(prefix.ptr, prefix.size)));
}

extern "C" CrystalString bg_QDir_dirName_(QDir *_self_) {
  return qstring_to_crystal(_self_->dirName());
}

extern "C" CrystalString bg_QDir_filePath_const_QString_R(QDir *_self_, const CrystalString fileName) {
  return qstring_to_crystal(_self_->filePath(QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" CrystalString bg_QDir_absoluteFilePath_const_QString_R(QDir *_self_, const CrystalString fileName) {
  return qstring_to_crystal(_self_->absoluteFilePath(QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" CrystalString bg_QDir_relativeFilePath_const_QString_R(QDir *_self_, const CrystalString fileName) {
  return qstring_to_crystal(_self_->relativeFilePath(QString::fromUtf8(fileName.ptr, fileName.size)));
}

extern "C" CrystalString bg_QDir_toNativeSeparators_STATIC_const_QString_R(const CrystalString pathName) {
  return qstring_to_crystal(QDir::toNativeSeparators(QString::fromUtf8(pathName.ptr, pathName.size)));
}

extern "C" CrystalString bg_QDir_fromNativeSeparators_STATIC_const_QString_R(const CrystalString pathName) {
  return qstring_to_crystal(QDir::fromNativeSeparators(QString::fromUtf8(pathName.ptr, pathName.size)));
}

extern "C" bool bg_QDir_cd_const_QString_R(QDir *_self_, const CrystalString dirName) {
  return _self_->cd(QString::fromUtf8(dirName.ptr, dirName.size));
}

extern "C" bool bg_QDir_cdUp_(QDir *_self_) {
  return _self_->cdUp();
}

extern "C" QStringList* bg_QDir_nameFilters_(QDir *_self_) {
  return new (UseGC) QStringList (_self_->nameFilters());
}

extern "C" void bg_QDir_setNameFilters_const_QStringList_R(QDir *_self_, const QStringList& nameFilters) {
  return _self_->setNameFilters(nameFilters);
}

extern "C" QDir::Filters bg_QDir_filter_(QDir *_self_) {
  return _self_->filter();
}

extern "C" void bg_QDir_setFilter_QDir__Filters(QDir *_self_, QDir::Filters filter) {
  return _self_->setFilter(filter);
}

extern "C" QDir::SortFlags bg_QDir_sorting_(QDir *_self_) {
  return _self_->sorting();
}

extern "C" void bg_QDir_setSorting_QDir__SortFlags(QDir *_self_, QDir::SortFlags sort) {
  return _self_->setSorting(sort);
}

extern "C" uint bg_QDir_count_(QDir *_self_) {
  return _self_->count();
}

extern "C" bool bg_QDir_isEmpty_(QDir *_self_) {
  return _self_->isEmpty();
}

extern "C" bool bg_QDir_isEmpty_QDir__Filters(QDir *_self_, QDir::Filters filters) {
  return _self_->isEmpty(filters);
}

extern "C" QStringList* bg_QDir_nameFiltersFromString_STATIC_const_QString_R(const CrystalString nameFilter) {
  return new (UseGC) QStringList (QDir::nameFiltersFromString(QString::fromUtf8(nameFilter.ptr, nameFilter.size)));
}

extern "C" QStringList* bg_QDir_entryList_(QDir *_self_) {
  return new (UseGC) QStringList (_self_->entryList());
}

extern "C" QStringList* bg_QDir_entryList_QDir__Filters(QDir *_self_, QDir::Filters filters) {
  return new (UseGC) QStringList (_self_->entryList(filters));
}

extern "C" QStringList* bg_QDir_entryList_QDir__Filters_QDir__SortFlags(QDir *_self_, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QStringList (_self_->entryList(filters, sort));
}

extern "C" QStringList* bg_QDir_entryList_const_QStringList_R(QDir *_self_, const QStringList& nameFilters) {
  return new (UseGC) QStringList (_self_->entryList(nameFilters));
}

extern "C" QStringList* bg_QDir_entryList_const_QStringList_R_QDir__Filters(QDir *_self_, const QStringList& nameFilters, QDir::Filters filters) {
  return new (UseGC) QStringList (_self_->entryList(nameFilters, filters));
}

extern "C" QStringList* bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(QDir *_self_, const QStringList& nameFilters, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QStringList (_self_->entryList(nameFilters, filters, sort));
}

extern "C" QFileInfoList* bg_QDir_entryInfoList_(QDir *_self_) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList());
}

extern "C" QFileInfoList* bg_QDir_entryInfoList_QDir__Filters(QDir *_self_, QDir::Filters filters) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(filters));
}

extern "C" QFileInfoList* bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(QDir *_self_, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(filters, sort));
}

extern "C" QFileInfoList* bg_QDir_entryInfoList_const_QStringList_R(QDir *_self_, const QStringList& nameFilters) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(nameFilters));
}

extern "C" QFileInfoList* bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(QDir *_self_, const QStringList& nameFilters, QDir::Filters filters) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(nameFilters, filters));
}

extern "C" QFileInfoList* bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(QDir *_self_, const QStringList& nameFilters, QDir::Filters filters, QDir::SortFlags sort) {
  return new (UseGC) QFileInfoList (_self_->entryInfoList(nameFilters, filters, sort));
}

extern "C" bool bg_QDir_mkdir_const_QString_R(QDir *_self_, const CrystalString dirName) {
  return _self_->mkdir(QString::fromUtf8(dirName.ptr, dirName.size));
}

extern "C" bool bg_QDir_rmdir_const_QString_R(QDir *_self_, const CrystalString dirName) {
  return _self_->rmdir(QString::fromUtf8(dirName.ptr, dirName.size));
}

extern "C" bool bg_QDir_mkpath_const_QString_R(QDir *_self_, const CrystalString dirPath) {
  return _self_->mkpath(QString::fromUtf8(dirPath.ptr, dirPath.size));
}

extern "C" bool bg_QDir_rmpath_const_QString_R(QDir *_self_, const CrystalString dirPath) {
  return _self_->rmpath(QString::fromUtf8(dirPath.ptr, dirPath.size));
}

extern "C" bool bg_QDir_removeRecursively_(QDir *_self_) {
  return _self_->removeRecursively();
}

extern "C" bool bg_QDir_isReadable_(QDir *_self_) {
  return _self_->isReadable();
}

extern "C" bool bg_QDir_exists_(QDir *_self_) {
  return _self_->exists();
}

extern "C" bool bg_QDir_isRoot_(QDir *_self_) {
  return _self_->isRoot();
}

extern "C" bool bg_QDir_isRelativePath_STATIC_const_QString_R(const CrystalString path) {
  return QDir::isRelativePath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" bool bg_QDir_isAbsolutePath_STATIC_const_QString_R(const CrystalString path) {
  return QDir::isAbsolutePath(QString::fromUtf8(path.ptr, path.size));
}

extern "C" bool bg_QDir_isRelative_(QDir *_self_) {
  return _self_->isRelative();
}

extern "C" bool bg_QDir_isAbsolute_(QDir *_self_) {
  return _self_->isAbsolute();
}

extern "C" bool bg_QDir_makeAbsolute_(QDir *_self_) {
  return _self_->makeAbsolute();
}

extern "C" bool bg_QDir_remove_const_QString_R(QDir *_self_, const CrystalString fileName) {
  return _self_->remove(QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QDir_rename_const_QString_R_const_QString_R(QDir *_self_, const CrystalString oldName, const CrystalString newName) {
  return _self_->rename(QString::fromUtf8(oldName.ptr, oldName.size), QString::fromUtf8(newName.ptr, newName.size));
}

extern "C" bool bg_QDir_exists_const_QString_R(QDir *_self_, const CrystalString name) {
  return _self_->exists(QString::fromUtf8(name.ptr, name.size));
}

extern "C" QFileInfoList* bg_QDir_drives_STATIC_() {
  return new (UseGC) QFileInfoList (QDir::drives());
}

extern "C" QChar* bg_QDir_listSeparator_STATIC_() {
  return new (UseGC) QChar (QDir::listSeparator());
}

extern "C" QChar* bg_QDir_separator_STATIC_() {
  return new (UseGC) QChar (QDir::separator());
}

extern "C" bool bg_QDir_setCurrent_STATIC_const_QString_R(const CrystalString path) {
  return QDir::setCurrent(QString::fromUtf8(path.ptr, path.size));
}

extern "C" QDir* bg_QDir_current_STATIC_() {
  return new (UseGC) QDir (QDir::current());
}

extern "C" CrystalString bg_QDir_currentPath_STATIC_() {
  return qstring_to_crystal(QDir::currentPath());
}

extern "C" QDir* bg_QDir_home_STATIC_() {
  return new (UseGC) QDir (QDir::home());
}

extern "C" CrystalString bg_QDir_homePath_STATIC_() {
  return qstring_to_crystal(QDir::homePath());
}

extern "C" QDir* bg_QDir_root_STATIC_() {
  return new (UseGC) QDir (QDir::root());
}

extern "C" CrystalString bg_QDir_rootPath_STATIC_() {
  return qstring_to_crystal(QDir::rootPath());
}

extern "C" QDir* bg_QDir_temp_STATIC_() {
  return new (UseGC) QDir (QDir::temp());
}

extern "C" CrystalString bg_QDir_tempPath_STATIC_() {
  return qstring_to_crystal(QDir::tempPath());
}

extern "C" bool bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(const QStringList& filters, const CrystalString fileName) {
  return QDir::match(filters, QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" bool bg_QDir_match_STATIC_const_QString_R_const_QString_R(const CrystalString filter, const CrystalString fileName) {
  return QDir::match(QString::fromUtf8(filter.ptr, filter.size), QString::fromUtf8(fileName.ptr, fileName.size));
}

extern "C" CrystalString bg_QDir_cleanPath_STATIC_const_QString_R(const CrystalString path) {
  return qstring_to_crystal(QDir::cleanPath(QString::fromUtf8(path.ptr, path.size)));
}

extern "C" void bg_QDir_refresh_(QDir *_self_) {
  return _self_->refresh();
}

extern "C" QDir* bg_QDir_CONSTRUCT_QDirPrivate_R(QDirPrivate& d) {
  return new (UseGC) QDir(d);
}

extern "C" QGraphicsItem* bg_QGraphicsItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsItem(parent);
}

extern "C" QGraphicsScene* bg_QGraphicsItem_scene_(QGraphicsItem *_self_) {
  return _self_->scene();
}

extern "C" QGraphicsItem* bg_QGraphicsItem_parentItem_(QGraphicsItem *_self_) {
  return _self_->parentItem();
}

extern "C" QGraphicsItem* bg_QGraphicsItem_topLevelItem_(QGraphicsItem *_self_) {
  return _self_->topLevelItem();
}

extern "C" QGraphicsObject* bg_QGraphicsItem_parentObject_(QGraphicsItem *_self_) {
  return _self_->parentObject();
}

extern "C" QGraphicsWidget* bg_QGraphicsItem_parentWidget_(QGraphicsItem *_self_) {
  return _self_->parentWidget();
}

extern "C" QGraphicsWidget* bg_QGraphicsItem_topLevelWidget_(QGraphicsItem *_self_) {
  return _self_->topLevelWidget();
}

extern "C" QGraphicsWidget* bg_QGraphicsItem_window_(QGraphicsItem *_self_) {
  return _self_->window();
}

extern "C" QGraphicsItem* bg_QGraphicsItem_panel_(QGraphicsItem *_self_) {
  return _self_->panel();
}

extern "C" void bg_QGraphicsItem_setParentItem_QGraphicsItem_X(QGraphicsItem *_self_, QGraphicsItem* parent) {
  return _self_->setParentItem(parent);
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsItem_childItems_(QGraphicsItem *_self_) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->childItems());
}

extern "C" bool bg_QGraphicsItem_isWidget_(QGraphicsItem *_self_) {
  return _self_->isWidget();
}

extern "C" bool bg_QGraphicsItem_isWindow_(QGraphicsItem *_self_) {
  return _self_->isWindow();
}

extern "C" bool bg_QGraphicsItem_isPanel_(QGraphicsItem *_self_) {
  return _self_->isPanel();
}

extern "C" QGraphicsObject* bg_QGraphicsItem_toGraphicsObject_(QGraphicsItem *_self_) {
  return _self_->toGraphicsObject();
}

extern "C" QGraphicsItemGroup* bg_QGraphicsItem_group_(QGraphicsItem *_self_) {
  return _self_->group();
}

extern "C" void bg_QGraphicsItem_setGroup_QGraphicsItemGroup_X(QGraphicsItem *_self_, QGraphicsItemGroup* group) {
  return _self_->setGroup(group);
}

extern "C" QGraphicsItem::GraphicsItemFlags bg_QGraphicsItem_flags_(QGraphicsItem *_self_) {
  return _self_->flags();
}

extern "C" void bg_QGraphicsItem_setFlag_QGraphicsItem__GraphicsItemFlag_bool(QGraphicsItem *_self_, QGraphicsItem::GraphicsItemFlag flag, bool enabled) {
  return _self_->setFlag(flag, enabled);
}

extern "C" void bg_QGraphicsItem_setFlags_QGraphicsItem__GraphicsItemFlags(QGraphicsItem *_self_, QGraphicsItem::GraphicsItemFlags flags) {
  return _self_->setFlags(flags);
}

extern "C" QGraphicsItem::CacheMode bg_QGraphicsItem_cacheMode_(QGraphicsItem *_self_) {
  return _self_->cacheMode();
}

extern "C" void bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode(QGraphicsItem *_self_, QGraphicsItem::CacheMode mode) {
  return _self_->setCacheMode(mode);
}

extern "C" void bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode_const_QSize_R(QGraphicsItem *_self_, QGraphicsItem::CacheMode mode, const QSize& cacheSize) {
  return _self_->setCacheMode(mode, cacheSize);
}

extern "C" QGraphicsItem::PanelModality bg_QGraphicsItem_panelModality_(QGraphicsItem *_self_) {
  return _self_->panelModality();
}

extern "C" void bg_QGraphicsItem_setPanelModality_QGraphicsItem__PanelModality(QGraphicsItem *_self_, QGraphicsItem::PanelModality panelModality) {
  return _self_->setPanelModality(panelModality);
}

extern "C" bool bg_QGraphicsItem_isBlockedByModalPanel_QGraphicsItem_XX(QGraphicsItem *_self_, QGraphicsItem** blockingPanel) {
  return _self_->isBlockedByModalPanel(blockingPanel);
}

extern "C" CrystalString bg_QGraphicsItem_toolTip_(QGraphicsItem *_self_) {
  return qstring_to_crystal(_self_->toolTip());
}

extern "C" void bg_QGraphicsItem_setToolTip_const_QString_R(QGraphicsItem *_self_, const CrystalString toolTip) {
  return _self_->setToolTip(QString::fromUtf8(toolTip.ptr, toolTip.size));
}

extern "C" QCursor* bg_QGraphicsItem_cursor_(QGraphicsItem *_self_) {
  return new (UseGC) QCursor (_self_->cursor());
}

extern "C" void bg_QGraphicsItem_setCursor_const_QCursor_R(QGraphicsItem *_self_, const QCursor& cursor) {
  return _self_->setCursor(cursor);
}

extern "C" bool bg_QGraphicsItem_hasCursor_(QGraphicsItem *_self_) {
  return _self_->hasCursor();
}

extern "C" void bg_QGraphicsItem_unsetCursor_(QGraphicsItem *_self_) {
  return _self_->unsetCursor();
}

extern "C" bool bg_QGraphicsItem_isVisible_(QGraphicsItem *_self_) {
  return _self_->isVisible();
}

extern "C" bool bg_QGraphicsItem_isVisibleTo_const_QGraphicsItem_X(QGraphicsItem *_self_, const QGraphicsItem* parent) {
  return _self_->isVisibleTo(parent);
}

extern "C" void bg_QGraphicsItem_setVisible_bool(QGraphicsItem *_self_, bool visible) {
  return _self_->setVisible(visible);
}

extern "C" void bg_QGraphicsItem_hide_(QGraphicsItem *_self_) {
  return _self_->hide();
}

extern "C" void bg_QGraphicsItem_show_(QGraphicsItem *_self_) {
  return _self_->show();
}

extern "C" bool bg_QGraphicsItem_isEnabled_(QGraphicsItem *_self_) {
  return _self_->isEnabled();
}

extern "C" void bg_QGraphicsItem_setEnabled_bool(QGraphicsItem *_self_, bool enabled) {
  return _self_->setEnabled(enabled);
}

extern "C" bool bg_QGraphicsItem_isSelected_(QGraphicsItem *_self_) {
  return _self_->isSelected();
}

extern "C" void bg_QGraphicsItem_setSelected_bool(QGraphicsItem *_self_, bool selected) {
  return _self_->setSelected(selected);
}

extern "C" bool bg_QGraphicsItem_acceptDrops_(QGraphicsItem *_self_) {
  return _self_->acceptDrops();
}

extern "C" void bg_QGraphicsItem_setAcceptDrops_bool(QGraphicsItem *_self_, bool on) {
  return _self_->setAcceptDrops(on);
}

extern "C" qreal bg_QGraphicsItem_opacity_(QGraphicsItem *_self_) {
  return _self_->opacity();
}

extern "C" qreal bg_QGraphicsItem_effectiveOpacity_(QGraphicsItem *_self_) {
  return _self_->effectiveOpacity();
}

extern "C" void bg_QGraphicsItem_setOpacity_qreal(QGraphicsItem *_self_, qreal opacity) {
  return _self_->setOpacity(opacity);
}

extern "C" QGraphicsEffect* bg_QGraphicsItem_graphicsEffect_(QGraphicsItem *_self_) {
  return _self_->graphicsEffect();
}

extern "C" void bg_QGraphicsItem_setGraphicsEffect_QGraphicsEffect_X(QGraphicsItem *_self_, QGraphicsEffect* effect) {
  return _self_->setGraphicsEffect(effect);
}

extern "C" Qt::MouseButtons bg_QGraphicsItem_acceptedMouseButtons_(QGraphicsItem *_self_) {
  return _self_->acceptedMouseButtons();
}

extern "C" void bg_QGraphicsItem_setAcceptedMouseButtons_Qt__MouseButtons(QGraphicsItem *_self_, Qt::MouseButtons buttons) {
  return _self_->setAcceptedMouseButtons(buttons);
}

extern "C" bool bg_QGraphicsItem_acceptHoverEvents_(QGraphicsItem *_self_) {
  return _self_->acceptHoverEvents();
}

extern "C" void bg_QGraphicsItem_setAcceptHoverEvents_bool(QGraphicsItem *_self_, bool enabled) {
  return _self_->setAcceptHoverEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_acceptTouchEvents_(QGraphicsItem *_self_) {
  return _self_->acceptTouchEvents();
}

extern "C" void bg_QGraphicsItem_setAcceptTouchEvents_bool(QGraphicsItem *_self_, bool enabled) {
  return _self_->setAcceptTouchEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_filtersChildEvents_(QGraphicsItem *_self_) {
  return _self_->filtersChildEvents();
}

extern "C" void bg_QGraphicsItem_setFiltersChildEvents_bool(QGraphicsItem *_self_, bool enabled) {
  return _self_->setFiltersChildEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_handlesChildEvents_(QGraphicsItem *_self_) {
  return _self_->handlesChildEvents();
}

extern "C" void bg_QGraphicsItem_setHandlesChildEvents_bool(QGraphicsItem *_self_, bool enabled) {
  return _self_->setHandlesChildEvents(enabled);
}

extern "C" bool bg_QGraphicsItem_isActive_(QGraphicsItem *_self_) {
  return _self_->isActive();
}

extern "C" void bg_QGraphicsItem_setActive_bool(QGraphicsItem *_self_, bool active) {
  return _self_->setActive(active);
}

extern "C" bool bg_QGraphicsItem_hasFocus_(QGraphicsItem *_self_) {
  return _self_->hasFocus();
}

extern "C" void bg_QGraphicsItem_setFocus_Qt__FocusReason(QGraphicsItem *_self_, Qt::FocusReason focusReason) {
  return _self_->setFocus(focusReason);
}

extern "C" void bg_QGraphicsItem_clearFocus_(QGraphicsItem *_self_) {
  return _self_->clearFocus();
}

extern "C" QGraphicsItem* bg_QGraphicsItem_focusProxy_(QGraphicsItem *_self_) {
  return _self_->focusProxy();
}

extern "C" void bg_QGraphicsItem_setFocusProxy_QGraphicsItem_X(QGraphicsItem *_self_, QGraphicsItem* item) {
  return _self_->setFocusProxy(item);
}

extern "C" QGraphicsItem* bg_QGraphicsItem_focusItem_(QGraphicsItem *_self_) {
  return _self_->focusItem();
}

extern "C" QGraphicsItem* bg_QGraphicsItem_focusScopeItem_(QGraphicsItem *_self_) {
  return _self_->focusScopeItem();
}

extern "C" void bg_QGraphicsItem_grabMouse_(QGraphicsItem *_self_) {
  return _self_->grabMouse();
}

extern "C" void bg_QGraphicsItem_ungrabMouse_(QGraphicsItem *_self_) {
  return _self_->ungrabMouse();
}

extern "C" void bg_QGraphicsItem_grabKeyboard_(QGraphicsItem *_self_) {
  return _self_->grabKeyboard();
}

extern "C" void bg_QGraphicsItem_ungrabKeyboard_(QGraphicsItem *_self_) {
  return _self_->ungrabKeyboard();
}

extern "C" QPointF* bg_QGraphicsItem_pos_(QGraphicsItem *_self_) {
  return new (UseGC) QPointF (_self_->pos());
}

extern "C" qreal bg_QGraphicsItem_x_(QGraphicsItem *_self_) {
  return _self_->x();
}

extern "C" void bg_QGraphicsItem_setX_qreal(QGraphicsItem *_self_, qreal x) {
  return _self_->setX(x);
}

extern "C" qreal bg_QGraphicsItem_y_(QGraphicsItem *_self_) {
  return _self_->y();
}

extern "C" void bg_QGraphicsItem_setY_qreal(QGraphicsItem *_self_, qreal y) {
  return _self_->setY(y);
}

extern "C" QPointF* bg_QGraphicsItem_scenePos_(QGraphicsItem *_self_) {
  return new (UseGC) QPointF (_self_->scenePos());
}

extern "C" void bg_QGraphicsItem_setPos_const_QPointF_R(QGraphicsItem *_self_, const QPointF& pos) {
  return _self_->setPos(pos);
}

extern "C" void bg_QGraphicsItem_setPos_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y) {
  return _self_->setPos(x, y);
}

extern "C" void bg_QGraphicsItem_moveBy_qreal_qreal(QGraphicsItem *_self_, qreal dx, qreal dy) {
  return _self_->moveBy(dx, dy);
}

extern "C" void bg_QGraphicsItem_ensureVisible_(QGraphicsItem *_self_) {
  return _self_->ensureVisible();
}

extern "C" void bg_QGraphicsItem_ensureVisible_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return _self_->ensureVisible(rect);
}

extern "C" void bg_QGraphicsItem_ensureVisible_const_QRectF_R_int(QGraphicsItem *_self_, const QRectF& rect, int xmargin) {
  return _self_->ensureVisible(rect, xmargin);
}

extern "C" void bg_QGraphicsItem_ensureVisible_const_QRectF_R_int_int(QGraphicsItem *_self_, const QRectF& rect, int xmargin, int ymargin) {
  return _self_->ensureVisible(rect, xmargin, ymargin);
}

extern "C" void bg_QGraphicsItem_ensureVisible_qreal_qreal_qreal_qreal_int_int(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin) {
  return _self_->ensureVisible(x, y, w, h, xmargin, ymargin);
}

extern "C" QMatrix* bg_QGraphicsItem_matrix_(QGraphicsItem *_self_) {
  return new (UseGC) QMatrix (_self_->matrix());
}

extern "C" QMatrix* bg_QGraphicsItem_sceneMatrix_(QGraphicsItem *_self_) {
  return new (UseGC) QMatrix (_self_->sceneMatrix());
}

extern "C" void bg_QGraphicsItem_setMatrix_const_QMatrix_R_bool(QGraphicsItem *_self_, const QMatrix& matrix, bool combine) {
  return _self_->setMatrix(matrix, combine);
}

extern "C" void bg_QGraphicsItem_resetMatrix_(QGraphicsItem *_self_) {
  return _self_->resetMatrix();
}

extern "C" QTransform* bg_QGraphicsItem_transform_(QGraphicsItem *_self_) {
  return new (UseGC) QTransform (_self_->transform());
}

extern "C" QTransform* bg_QGraphicsItem_sceneTransform_(QGraphicsItem *_self_) {
  return new (UseGC) QTransform (_self_->sceneTransform());
}

extern "C" QTransform* bg_QGraphicsItem_deviceTransform_const_QTransform_R(QGraphicsItem *_self_, const QTransform& viewportTransform) {
  return new (UseGC) QTransform (_self_->deviceTransform(viewportTransform));
}

extern "C" QTransform* bg_QGraphicsItem_itemTransform_const_QGraphicsItem_X_bool_X(QGraphicsItem *_self_, const QGraphicsItem* other, bool* ok) {
  return new (UseGC) QTransform (_self_->itemTransform(other, ok));
}

extern "C" void bg_QGraphicsItem_setTransform_const_QTransform_R_bool(QGraphicsItem *_self_, const QTransform& matrix, bool combine) {
  return _self_->setTransform(matrix, combine);
}

extern "C" void bg_QGraphicsItem_resetTransform_(QGraphicsItem *_self_) {
  return _self_->resetTransform();
}

extern "C" void bg_QGraphicsItem_setRotation_qreal(QGraphicsItem *_self_, qreal angle) {
  return _self_->setRotation(angle);
}

extern "C" qreal bg_QGraphicsItem_rotation_(QGraphicsItem *_self_) {
  return _self_->rotation();
}

extern "C" void bg_QGraphicsItem_setScale_qreal(QGraphicsItem *_self_, qreal scale) {
  return _self_->setScale(scale);
}

extern "C" qreal bg_QGraphicsItem_scale_(QGraphicsItem *_self_) {
  return _self_->scale();
}

extern "C" QList<QGraphicsTransform *>* bg_QGraphicsItem_transformations_(QGraphicsItem *_self_) {
  return new (UseGC) QList<QGraphicsTransform *> (_self_->transformations());
}

extern "C" void bg_QGraphicsItem_setTransformations_const_QList_QGraphicsTransform_X__R(QGraphicsItem *_self_, const QList<QGraphicsTransform *>& transformations) {
  return _self_->setTransformations(transformations);
}

extern "C" QPointF* bg_QGraphicsItem_transformOriginPoint_(QGraphicsItem *_self_) {
  return new (UseGC) QPointF (_self_->transformOriginPoint());
}

extern "C" void bg_QGraphicsItem_setTransformOriginPoint_const_QPointF_R(QGraphicsItem *_self_, const QPointF& origin) {
  return _self_->setTransformOriginPoint(origin);
}

extern "C" void bg_QGraphicsItem_setTransformOriginPoint_qreal_qreal(QGraphicsItem *_self_, qreal ax, qreal ay) {
  return _self_->setTransformOriginPoint(ax, ay);
}

extern "C" void bg_QGraphicsItem_advance_int(QGraphicsItem *_self_, int phase) {
  return _self_->advance(phase);
}

extern "C" qreal bg_QGraphicsItem_zValue_(QGraphicsItem *_self_) {
  return _self_->zValue();
}

extern "C" void bg_QGraphicsItem_setZValue_qreal(QGraphicsItem *_self_, qreal z) {
  return _self_->setZValue(z);
}

extern "C" void bg_QGraphicsItem_stackBefore_const_QGraphicsItem_X(QGraphicsItem *_self_, const QGraphicsItem* sibling) {
  return _self_->stackBefore(sibling);
}

extern "C" QRectF* bg_QGraphicsItem_boundingRect_(QGraphicsItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QRectF* bg_QGraphicsItem_childrenBoundingRect_(QGraphicsItem *_self_) {
  return new (UseGC) QRectF (_self_->childrenBoundingRect());
}

extern "C" QRectF* bg_QGraphicsItem_sceneBoundingRect_(QGraphicsItem *_self_) {
  return new (UseGC) QRectF (_self_->sceneBoundingRect());
}

extern "C" QPainterPath* bg_QGraphicsItem_shape_(QGraphicsItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsItem_isClipped_(QGraphicsItem *_self_) {
  return _self_->isClipped();
}

extern "C" QPainterPath* bg_QGraphicsItem_clipPath_(QGraphicsItem *_self_) {
  return new (UseGC) QPainterPath (_self_->clipPath());
}

extern "C" bool bg_QGraphicsItem_contains_const_QPointF_R(QGraphicsItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" bool bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(QGraphicsItem *_self_, const QGraphicsItem* other, Qt::ItemSelectionMode mode) {
  return _self_->collidesWithItem(other, mode);
}

extern "C" bool bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(QGraphicsItem *_self_, const QPainterPath& path, Qt::ItemSelectionMode mode) {
  return _self_->collidesWithPath(path, mode);
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsItem_collidingItems_Qt__ItemSelectionMode(QGraphicsItem *_self_, Qt::ItemSelectionMode mode) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->collidingItems(mode));
}

extern "C" bool bg_QGraphicsItem_isObscured_(QGraphicsItem *_self_) {
  return _self_->isObscured();
}

extern "C" bool bg_QGraphicsItem_isObscured_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return _self_->isObscured(rect);
}

extern "C" bool bg_QGraphicsItem_isObscured_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->isObscured(x, y, w, h);
}

extern "C" bool bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsItem_opaqueArea_(QGraphicsItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" QRegion* bg_QGraphicsItem_boundingRegion_const_QTransform_R(QGraphicsItem *_self_, const QTransform& itemToDeviceTransform) {
  return new (UseGC) QRegion (_self_->boundingRegion(itemToDeviceTransform));
}

extern "C" qreal bg_QGraphicsItem_boundingRegionGranularity_(QGraphicsItem *_self_) {
  return _self_->boundingRegionGranularity();
}

extern "C" void bg_QGraphicsItem_setBoundingRegionGranularity_qreal(QGraphicsItem *_self_, qreal granularity) {
  return _self_->setBoundingRegionGranularity(granularity);
}

extern "C" void bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" void bg_QGraphicsItem_update_(QGraphicsItem *_self_) {
  return _self_->update();
}

extern "C" void bg_QGraphicsItem_update_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return _self_->update(rect);
}

extern "C" void bg_QGraphicsItem_update_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal width, qreal height) {
  return _self_->update(x, y, width, height);
}

extern "C" void bg_QGraphicsItem_scroll_qreal_qreal(QGraphicsItem *_self_, qreal dx, qreal dy) {
  return _self_->scroll(dx, dy);
}

extern "C" void bg_QGraphicsItem_scroll_qreal_qreal_const_QRectF_R(QGraphicsItem *_self_, qreal dx, qreal dy, const QRectF& rect) {
  return _self_->scroll(dx, dy, rect);
}

extern "C" QPointF* bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPointF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QPointF& point) {
  return new (UseGC) QPointF (_self_->mapToItem(item, point));
}

extern "C" QPointF* bg_QGraphicsItem_mapToParent_const_QPointF_R(QGraphicsItem *_self_, const QPointF& point) {
  return new (UseGC) QPointF (_self_->mapToParent(point));
}

extern "C" QPointF* bg_QGraphicsItem_mapToScene_const_QPointF_R(QGraphicsItem *_self_, const QPointF& point) {
  return new (UseGC) QPointF (_self_->mapToScene(point));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QRectF& rect) {
  return new (UseGC) QPolygonF (_self_->mapToItem(item, rect));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToParent_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QPolygonF (_self_->mapToParent(rect));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToScene_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QPolygonF (_self_->mapToScene(rect));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QRectF& rect) {
  return new (UseGC) QRectF (_self_->mapRectToItem(item, rect));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectToParent_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QRectF (_self_->mapRectToParent(rect));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectToScene_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QRectF (_self_->mapRectToScene(rect));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPolygonF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QPolygonF& polygon) {
  return new (UseGC) QPolygonF (_self_->mapToItem(item, polygon));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToParent_const_QPolygonF_R(QGraphicsItem *_self_, const QPolygonF& polygon) {
  return new (UseGC) QPolygonF (_self_->mapToParent(polygon));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToScene_const_QPolygonF_R(QGraphicsItem *_self_, const QPolygonF& polygon) {
  return new (UseGC) QPolygonF (_self_->mapToScene(polygon));
}

extern "C" QPainterPath* bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPainterPath_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapToItem(item, path));
}

extern "C" QPainterPath* bg_QGraphicsItem_mapToParent_const_QPainterPath_R(QGraphicsItem *_self_, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapToParent(path));
}

extern "C" QPainterPath* bg_QGraphicsItem_mapToScene_const_QPainterPath_R(QGraphicsItem *_self_, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapToScene(path));
}

extern "C" QPointF* bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPointF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QPointF& point) {
  return new (UseGC) QPointF (_self_->mapFromItem(item, point));
}

extern "C" QPointF* bg_QGraphicsItem_mapFromParent_const_QPointF_R(QGraphicsItem *_self_, const QPointF& point) {
  return new (UseGC) QPointF (_self_->mapFromParent(point));
}

extern "C" QPointF* bg_QGraphicsItem_mapFromScene_const_QPointF_R(QGraphicsItem *_self_, const QPointF& point) {
  return new (UseGC) QPointF (_self_->mapFromScene(point));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QRectF& rect) {
  return new (UseGC) QPolygonF (_self_->mapFromItem(item, rect));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromParent_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QPolygonF (_self_->mapFromParent(rect));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromScene_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QPolygonF (_self_->mapFromScene(rect));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_const_QRectF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QRectF& rect) {
  return new (UseGC) QRectF (_self_->mapRectFromItem(item, rect));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectFromParent_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QRectF (_self_->mapRectFromParent(rect));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectFromScene_const_QRectF_R(QGraphicsItem *_self_, const QRectF& rect) {
  return new (UseGC) QRectF (_self_->mapRectFromScene(rect));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPolygonF_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QPolygonF& polygon) {
  return new (UseGC) QPolygonF (_self_->mapFromItem(item, polygon));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromParent_const_QPolygonF_R(QGraphicsItem *_self_, const QPolygonF& polygon) {
  return new (UseGC) QPolygonF (_self_->mapFromParent(polygon));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromScene_const_QPolygonF_R(QGraphicsItem *_self_, const QPolygonF& polygon) {
  return new (UseGC) QPolygonF (_self_->mapFromScene(polygon));
}

extern "C" QPainterPath* bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPainterPath_R(QGraphicsItem *_self_, const QGraphicsItem* item, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapFromItem(item, path));
}

extern "C" QPainterPath* bg_QGraphicsItem_mapFromParent_const_QPainterPath_R(QGraphicsItem *_self_, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapFromParent(path));
}

extern "C" QPainterPath* bg_QGraphicsItem_mapFromScene_const_QPainterPath_R(QGraphicsItem *_self_, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapFromScene(path));
}

extern "C" QPointF* bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal(QGraphicsItem *_self_, const QGraphicsItem* item, qreal x, qreal y) {
  return new (UseGC) QPointF (_self_->mapToItem(item, x, y));
}

extern "C" QPointF* bg_QGraphicsItem_mapToParent_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y) {
  return new (UseGC) QPointF (_self_->mapToParent(x, y));
}

extern "C" QPointF* bg_QGraphicsItem_mapToScene_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y) {
  return new (UseGC) QPointF (_self_->mapToScene(x, y));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, const QGraphicsItem* item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapToItem(item, x, y, w, h));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToParent_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapToParent(x, y, w, h));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapToScene_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapToScene(x, y, w, h));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, const QGraphicsItem* item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectToItem(item, x, y, w, h));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectToParent_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectToParent(x, y, w, h));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectToScene_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectToScene(x, y, w, h));
}

extern "C" QPointF* bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal(QGraphicsItem *_self_, const QGraphicsItem* item, qreal x, qreal y) {
  return new (UseGC) QPointF (_self_->mapFromItem(item, x, y));
}

extern "C" QPointF* bg_QGraphicsItem_mapFromParent_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y) {
  return new (UseGC) QPointF (_self_->mapFromParent(x, y));
}

extern "C" QPointF* bg_QGraphicsItem_mapFromScene_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y) {
  return new (UseGC) QPointF (_self_->mapFromScene(x, y));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, const QGraphicsItem* item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapFromItem(item, x, y, w, h));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromParent_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapFromParent(x, y, w, h));
}

extern "C" QPolygonF* bg_QGraphicsItem_mapFromScene_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygonF (_self_->mapFromScene(x, y, w, h));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, const QGraphicsItem* item, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectFromItem(item, x, y, w, h));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectFromParent_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectFromParent(x, y, w, h));
}

extern "C" QRectF* bg_QGraphicsItem_mapRectFromScene_qreal_qreal_qreal_qreal(QGraphicsItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QRectF (_self_->mapRectFromScene(x, y, w, h));
}

extern "C" bool bg_QGraphicsItem_isAncestorOf_const_QGraphicsItem_X(QGraphicsItem *_self_, const QGraphicsItem* child) {
  return _self_->isAncestorOf(child);
}

extern "C" QGraphicsItem* bg_QGraphicsItem_commonAncestorItem_const_QGraphicsItem_X(QGraphicsItem *_self_, const QGraphicsItem* other) {
  return _self_->commonAncestorItem(other);
}

extern "C" bool bg_QGraphicsItem_isUnderMouse_(QGraphicsItem *_self_) {
  return _self_->isUnderMouse();
}

extern "C" Qt::InputMethodHints bg_QGraphicsItem_inputMethodHints_(QGraphicsItem *_self_) {
  return _self_->inputMethodHints();
}

extern "C" void bg_QGraphicsItem_setInputMethodHints_Qt__InputMethodHints(QGraphicsItem *_self_, Qt::InputMethodHints hints) {
  return _self_->setInputMethodHints(hints);
}

extern "C" int bg_QGraphicsItem_type_(QGraphicsItem *_self_) {
  return _self_->type();
}

extern "C" void bg_QGraphicsItem_installSceneEventFilter_QGraphicsItem_X(QGraphicsItem *_self_, QGraphicsItem* filterItem) {
  return _self_->installSceneEventFilter(filterItem);
}

extern "C" void bg_QGraphicsItem_removeSceneEventFilter_QGraphicsItem_X(QGraphicsItem *_self_, QGraphicsItem* filterItem) {
  return _self_->removeSceneEventFilter(filterItem);
}

extern "C" void bg_QGraphicsItem_updateMicroFocus_(QGraphicsItem *_self_) {
  return _self_->updateMicroFocus();
}

extern "C" bool bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(QGraphicsItem *_self_, QGraphicsItem* watched, QEvent* event) {
  return _self_->sceneEventFilter(watched, event);
}

extern "C" bool bg_QGraphicsItem_sceneEvent_QEvent_X(QGraphicsItem *_self_, QEvent* event) {
  return _self_->sceneEvent(event);
}

extern "C" void bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(QGraphicsItem *_self_, QGraphicsSceneContextMenuEvent* event) {
  return _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(QGraphicsItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsItem_focusInEvent_QFocusEvent_X(QGraphicsItem *_self_, QFocusEvent* event) {
  return _self_->focusInEvent(event);
}

extern "C" void bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(QGraphicsItem *_self_, QFocusEvent* event) {
  return _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(QGraphicsItem *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverEnterEvent(event);
}

extern "C" void bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(QGraphicsItem *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverMoveEvent(event);
}

extern "C" void bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(QGraphicsItem *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverLeaveEvent(event);
}

extern "C" void bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(QGraphicsItem *_self_, QKeyEvent* event) {
  return _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(QGraphicsItem *_self_, QKeyEvent* event) {
  return _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(QGraphicsItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(QGraphicsItem *_self_, QGraphicsSceneWheelEvent* event) {
  return _self_->wheelEvent(event);
}

extern "C" void bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(QGraphicsItem *_self_, QInputMethodEvent* event) {
  return _self_->inputMethodEvent(event);
}

extern "C" bool bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(QGraphicsItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" QGraphicsItem* bg_QGraphicsItem_CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(QGraphicsItemPrivate& dd, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsItem(dd, parent);
}

extern "C" void bg_QGraphicsItem_addToIndex_(QGraphicsItem *_self_) {
  return _self_->addToIndex();
}

extern "C" void bg_QGraphicsItem_removeFromIndex_(QGraphicsItem *_self_) {
  return _self_->removeFromIndex();
}

extern "C" void bg_QGraphicsItem_prepareGeometryChange_(QGraphicsItem *_self_) {
  return _self_->prepareGeometryChange();
}

extern "C" const QMetaObject* bg_QGraphicsScene_metaObject_(QGraphicsScene *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QGraphicsScene_qt_metacast_const_char_X(QGraphicsScene *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsScene::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsScene_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsScene::trUtf8(s, c, n));
}

extern "C" QGraphicsScene* bg_QGraphicsScene_CONSTRUCT_QObject_X(QObject* parent) {
  return new (UseGC) BgInherit_QGraphicsScene(parent);
}

extern "C" QGraphicsScene* bg_QGraphicsScene_CONSTRUCT_const_QRectF_R_QObject_X(const QRectF& sceneRect, QObject* parent) {
  return new (UseGC) BgInherit_QGraphicsScene(sceneRect, parent);
}

extern "C" QGraphicsScene* bg_QGraphicsScene_CONSTRUCT_qreal_qreal_qreal_qreal_QObject_X(qreal x, qreal y, qreal width, qreal height, QObject* parent) {
  return new (UseGC) BgInherit_QGraphicsScene(x, y, width, height, parent);
}

extern "C" QRectF* bg_QGraphicsScene_sceneRect_(QGraphicsScene *_self_) {
  return new (UseGC) QRectF (_self_->sceneRect());
}

extern "C" qreal bg_QGraphicsScene_width_(QGraphicsScene *_self_) {
  return _self_->width();
}

extern "C" qreal bg_QGraphicsScene_height_(QGraphicsScene *_self_) {
  return _self_->height();
}

extern "C" void bg_QGraphicsScene_setSceneRect_const_QRectF_R(QGraphicsScene *_self_, const QRectF& rect) {
  return _self_->setSceneRect(rect);
}

extern "C" void bg_QGraphicsScene_setSceneRect_qreal_qreal_qreal_qreal(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->setSceneRect(x, y, w, h);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X(QGraphicsScene *_self_, QPainter* painter) {
  return _self_->render(painter);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X_const_QRectF_R(QGraphicsScene *_self_, QPainter* painter, const QRectF& target) {
  return _self_->render(painter, target);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R(QGraphicsScene *_self_, QPainter* painter, const QRectF& target, const QRectF& source) {
  return _self_->render(painter, target, source);
}

extern "C" void bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R_Qt__AspectRatioMode(QGraphicsScene *_self_, QPainter* painter, const QRectF& target, const QRectF& source, Qt::AspectRatioMode aspectRatioMode) {
  return _self_->render(painter, target, source, aspectRatioMode);
}

extern "C" QGraphicsScene::ItemIndexMethod bg_QGraphicsScene_itemIndexMethod_(QGraphicsScene *_self_) {
  return _self_->itemIndexMethod();
}

extern "C" void bg_QGraphicsScene_setItemIndexMethod_QGraphicsScene__ItemIndexMethod(QGraphicsScene *_self_, QGraphicsScene::ItemIndexMethod method) {
  return _self_->setItemIndexMethod(method);
}

extern "C" bool bg_QGraphicsScene_isSortCacheEnabled_(QGraphicsScene *_self_) {
  return _self_->isSortCacheEnabled();
}

extern "C" void bg_QGraphicsScene_setSortCacheEnabled_bool(QGraphicsScene *_self_, bool enabled) {
  return _self_->setSortCacheEnabled(enabled);
}

extern "C" int bg_QGraphicsScene_bspTreeDepth_(QGraphicsScene *_self_) {
  return _self_->bspTreeDepth();
}

extern "C" void bg_QGraphicsScene_setBspTreeDepth_int(QGraphicsScene *_self_, int depth) {
  return _self_->setBspTreeDepth(depth);
}

extern "C" QRectF* bg_QGraphicsScene_itemsBoundingRect_(QGraphicsScene *_self_) {
  return new (UseGC) QRectF (_self_->itemsBoundingRect());
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_Qt__SortOrder(QGraphicsScene *_self_, Qt::SortOrder order) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(order));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene *_self_, const QPointF& pos, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(pos, mode, order));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene *_self_, const QPointF& pos, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform& deviceTransform) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(pos, mode, order, deviceTransform));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene *_self_, const QRectF& rect, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(rect, mode, order));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene *_self_, const QRectF& rect, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform& deviceTransform) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(rect, mode, order, deviceTransform));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene *_self_, const QPolygonF& polygon, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(polygon, mode, order));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene *_self_, const QPolygonF& polygon, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform& deviceTransform) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(polygon, mode, order, deviceTransform));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene *_self_, const QPainterPath& path, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(path, mode, order));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene *_self_, const QPainterPath& path, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform& deviceTransform) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(path, mode, order, deviceTransform));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_collidingItems_const_QGraphicsItem_X_Qt__ItemSelectionMode(QGraphicsScene *_self_, const QGraphicsItem* item, Qt::ItemSelectionMode mode) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->collidingItems(item, mode));
}

extern "C" QGraphicsItem* bg_QGraphicsScene_itemAt_const_QPointF_R_const_QTransform_R(QGraphicsScene *_self_, const QPointF& pos, const QTransform& deviceTransform) {
  return _self_->itemAt(pos, deviceTransform);
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode, Qt::SortOrder order) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(x, y, w, h, mode, order));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode, Qt::SortOrder order, const QTransform& deviceTransform) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(x, y, w, h, mode, order, deviceTransform));
}

extern "C" QGraphicsItem* bg_QGraphicsScene_itemAt_qreal_qreal_const_QTransform_R(QGraphicsScene *_self_, qreal x, qreal y, const QTransform& deviceTransform) {
  return _self_->itemAt(x, y, deviceTransform);
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsScene_selectedItems_(QGraphicsScene *_self_) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->selectedItems());
}

extern "C" QPainterPath* bg_QGraphicsScene_selectionArea_(QGraphicsScene *_self_) {
  return new (UseGC) QPainterPath (_self_->selectionArea());
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_const_QTransform_R(QGraphicsScene *_self_, const QPainterPath& path, const QTransform& deviceTransform) {
  return _self_->setSelectionArea(path, deviceTransform);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode(QGraphicsScene *_self_, const QPainterPath& path, Qt::ItemSelectionMode mode) {
  return _self_->setSelectionArea(path, mode);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode_const_QTransform_R(QGraphicsScene *_self_, const QPainterPath& path, Qt::ItemSelectionMode mode, const QTransform& deviceTransform) {
  return _self_->setSelectionArea(path, mode, deviceTransform);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode(QGraphicsScene *_self_, const QPainterPath& path, Qt::ItemSelectionOperation selectionOperation, Qt::ItemSelectionMode mode) {
  return _self_->setSelectionArea(path, selectionOperation, mode);
}

extern "C" void bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode_const_QTransform_R(QGraphicsScene *_self_, const QPainterPath& path, Qt::ItemSelectionOperation selectionOperation, Qt::ItemSelectionMode mode, const QTransform& deviceTransform) {
  return _self_->setSelectionArea(path, selectionOperation, mode, deviceTransform);
}

extern "C" QGraphicsItemGroup* bg_QGraphicsScene_createItemGroup_const_QList_QGraphicsItem_X__R(QGraphicsScene *_self_, const QList<QGraphicsItem *>& items) {
  return _self_->createItemGroup(items);
}

extern "C" void bg_QGraphicsScene_destroyItemGroup_QGraphicsItemGroup_X(QGraphicsScene *_self_, QGraphicsItemGroup* group) {
  return _self_->destroyItemGroup(group);
}

extern "C" void bg_QGraphicsScene_addItem_QGraphicsItem_X(QGraphicsScene *_self_, QGraphicsItem* item) {
  return _self_->addItem(item);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsScene_addEllipse_const_QRectF_R(QGraphicsScene *_self_, const QRectF& rect) {
  return _self_->addEllipse(rect);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R(QGraphicsScene *_self_, const QRectF& rect, const QPen& pen) {
  return _self_->addEllipse(rect, pen);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R_const_QBrush_R(QGraphicsScene *_self_, const QRectF& rect, const QPen& pen, const QBrush& brush) {
  return _self_->addEllipse(rect, pen, brush);
}

extern "C" QGraphicsLineItem* bg_QGraphicsScene_addLine_const_QLineF_R(QGraphicsScene *_self_, const QLineF& line) {
  return _self_->addLine(line);
}

extern "C" QGraphicsLineItem* bg_QGraphicsScene_addLine_const_QLineF_R_const_QPen_R(QGraphicsScene *_self_, const QLineF& line, const QPen& pen) {
  return _self_->addLine(line, pen);
}

extern "C" QGraphicsPathItem* bg_QGraphicsScene_addPath_const_QPainterPath_R(QGraphicsScene *_self_, const QPainterPath& path) {
  return _self_->addPath(path);
}

extern "C" QGraphicsPathItem* bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R(QGraphicsScene *_self_, const QPainterPath& path, const QPen& pen) {
  return _self_->addPath(path, pen);
}

extern "C" QGraphicsPathItem* bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R_const_QBrush_R(QGraphicsScene *_self_, const QPainterPath& path, const QPen& pen, const QBrush& brush) {
  return _self_->addPath(path, pen, brush);
}

extern "C" QGraphicsPixmapItem* bg_QGraphicsScene_addPixmap_const_QPixmap_R(QGraphicsScene *_self_, const QPixmap& pixmap) {
  return _self_->addPixmap(pixmap);
}

extern "C" QGraphicsPolygonItem* bg_QGraphicsScene_addPolygon_const_QPolygonF_R(QGraphicsScene *_self_, const QPolygonF& polygon) {
  return _self_->addPolygon(polygon);
}

extern "C" QGraphicsPolygonItem* bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R(QGraphicsScene *_self_, const QPolygonF& polygon, const QPen& pen) {
  return _self_->addPolygon(polygon, pen);
}

extern "C" QGraphicsPolygonItem* bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R_const_QBrush_R(QGraphicsScene *_self_, const QPolygonF& polygon, const QPen& pen, const QBrush& brush) {
  return _self_->addPolygon(polygon, pen, brush);
}

extern "C" QGraphicsRectItem* bg_QGraphicsScene_addRect_const_QRectF_R(QGraphicsScene *_self_, const QRectF& rect) {
  return _self_->addRect(rect);
}

extern "C" QGraphicsRectItem* bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R(QGraphicsScene *_self_, const QRectF& rect, const QPen& pen) {
  return _self_->addRect(rect, pen);
}

extern "C" QGraphicsRectItem* bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R_const_QBrush_R(QGraphicsScene *_self_, const QRectF& rect, const QPen& pen, const QBrush& brush) {
  return _self_->addRect(rect, pen, brush);
}

extern "C" QGraphicsTextItem* bg_QGraphicsScene_addText_const_QString_R(QGraphicsScene *_self_, const CrystalString text) {
  return _self_->addText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QGraphicsTextItem* bg_QGraphicsScene_addText_const_QString_R_const_QFont_R(QGraphicsScene *_self_, const CrystalString text, const QFont& font) {
  return _self_->addText(QString::fromUtf8(text.ptr, text.size), font);
}

extern "C" QGraphicsSimpleTextItem* bg_QGraphicsScene_addSimpleText_const_QString_R(QGraphicsScene *_self_, const CrystalString text) {
  return _self_->addSimpleText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QGraphicsSimpleTextItem* bg_QGraphicsScene_addSimpleText_const_QString_R_const_QFont_R(QGraphicsScene *_self_, const CrystalString text, const QFont& font) {
  return _self_->addSimpleText(QString::fromUtf8(text.ptr, text.size), font);
}

extern "C" QGraphicsProxyWidget* bg_QGraphicsScene_addWidget_QWidget_X(QGraphicsScene *_self_, QWidget* widget) {
  return _self_->addWidget(widget);
}

extern "C" QGraphicsProxyWidget* bg_QGraphicsScene_addWidget_QWidget_X_Qt__WindowFlags(QGraphicsScene *_self_, QWidget* widget, Qt::WindowFlags wFlags) {
  return _self_->addWidget(widget, wFlags);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->addEllipse(x, y, w, h);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h, const QPen& pen) {
  return _self_->addEllipse(x, y, w, h, pen);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h, const QPen& pen, const QBrush& brush) {
  return _self_->addEllipse(x, y, w, h, pen, brush);
}

extern "C" QGraphicsLineItem* bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal(QGraphicsScene *_self_, qreal x1, qreal y1, qreal x2, qreal y2) {
  return _self_->addLine(x1, y1, x2, y2);
}

extern "C" QGraphicsLineItem* bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal_const_QPen_R(QGraphicsScene *_self_, qreal x1, qreal y1, qreal x2, qreal y2, const QPen& pen) {
  return _self_->addLine(x1, y1, x2, y2, pen);
}

extern "C" QGraphicsRectItem* bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->addRect(x, y, w, h);
}

extern "C" QGraphicsRectItem* bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h, const QPen& pen) {
  return _self_->addRect(x, y, w, h, pen);
}

extern "C" QGraphicsRectItem* bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h, const QPen& pen, const QBrush& brush) {
  return _self_->addRect(x, y, w, h, pen, brush);
}

extern "C" void bg_QGraphicsScene_removeItem_QGraphicsItem_X(QGraphicsScene *_self_, QGraphicsItem* item) {
  return _self_->removeItem(item);
}

extern "C" QGraphicsItem* bg_QGraphicsScene_focusItem_(QGraphicsScene *_self_) {
  return _self_->focusItem();
}

extern "C" void bg_QGraphicsScene_setFocusItem_QGraphicsItem_X_Qt__FocusReason(QGraphicsScene *_self_, QGraphicsItem* item, Qt::FocusReason focusReason) {
  return _self_->setFocusItem(item, focusReason);
}

extern "C" bool bg_QGraphicsScene_hasFocus_(QGraphicsScene *_self_) {
  return _self_->hasFocus();
}

extern "C" void bg_QGraphicsScene_setFocus_Qt__FocusReason(QGraphicsScene *_self_, Qt::FocusReason focusReason) {
  return _self_->setFocus(focusReason);
}

extern "C" void bg_QGraphicsScene_clearFocus_(QGraphicsScene *_self_) {
  return _self_->clearFocus();
}

extern "C" void bg_QGraphicsScene_setStickyFocus_bool(QGraphicsScene *_self_, bool enabled) {
  return _self_->setStickyFocus(enabled);
}

extern "C" bool bg_QGraphicsScene_stickyFocus_(QGraphicsScene *_self_) {
  return _self_->stickyFocus();
}

extern "C" QGraphicsItem* bg_QGraphicsScene_mouseGrabberItem_(QGraphicsScene *_self_) {
  return _self_->mouseGrabberItem();
}

extern "C" QBrush* bg_QGraphicsScene_backgroundBrush_(QGraphicsScene *_self_) {
  return new (UseGC) QBrush (_self_->backgroundBrush());
}

extern "C" void bg_QGraphicsScene_setBackgroundBrush_const_QBrush_R(QGraphicsScene *_self_, const QBrush& brush) {
  return _self_->setBackgroundBrush(brush);
}

extern "C" QBrush* bg_QGraphicsScene_foregroundBrush_(QGraphicsScene *_self_) {
  return new (UseGC) QBrush (_self_->foregroundBrush());
}

extern "C" void bg_QGraphicsScene_setForegroundBrush_const_QBrush_R(QGraphicsScene *_self_, const QBrush& brush) {
  return _self_->setForegroundBrush(brush);
}

extern "C" QList<QGraphicsView *>* bg_QGraphicsScene_views_(QGraphicsScene *_self_) {
  return new (UseGC) QList<QGraphicsView *> (_self_->views());
}

extern "C" void bg_QGraphicsScene_update_qreal_qreal_qreal_qreal(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->update(x, y, w, h);
}

extern "C" void bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->invalidate(x, y, w, h);
}

extern "C" void bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal_QGraphicsScene__SceneLayers(QGraphicsScene *_self_, qreal x, qreal y, qreal w, qreal h, QGraphicsScene::SceneLayers layers) {
  return _self_->invalidate(x, y, w, h, layers);
}

extern "C" QStyle* bg_QGraphicsScene_style_(QGraphicsScene *_self_) {
  return _self_->style();
}

extern "C" void bg_QGraphicsScene_setStyle_QStyle_X(QGraphicsScene *_self_, QStyle* style) {
  return _self_->setStyle(style);
}

extern "C" QFont* bg_QGraphicsScene_font_(QGraphicsScene *_self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QGraphicsScene_setFont_const_QFont_R(QGraphicsScene *_self_, const QFont& font) {
  return _self_->setFont(font);
}

extern "C" QPalette* bg_QGraphicsScene_palette_(QGraphicsScene *_self_) {
  return new (UseGC) QPalette (_self_->palette());
}

extern "C" void bg_QGraphicsScene_setPalette_const_QPalette_R(QGraphicsScene *_self_, const QPalette& palette) {
  return _self_->setPalette(palette);
}

extern "C" bool bg_QGraphicsScene_isActive_(QGraphicsScene *_self_) {
  return _self_->isActive();
}

extern "C" QGraphicsItem* bg_QGraphicsScene_activePanel_(QGraphicsScene *_self_) {
  return _self_->activePanel();
}

extern "C" void bg_QGraphicsScene_setActivePanel_QGraphicsItem_X(QGraphicsScene *_self_, QGraphicsItem* item) {
  return _self_->setActivePanel(item);
}

extern "C" QGraphicsWidget* bg_QGraphicsScene_activeWindow_(QGraphicsScene *_self_) {
  return _self_->activeWindow();
}

extern "C" void bg_QGraphicsScene_setActiveWindow_QGraphicsWidget_X(QGraphicsScene *_self_, QGraphicsWidget* widget) {
  return _self_->setActiveWindow(widget);
}

extern "C" bool bg_QGraphicsScene_sendEvent_QGraphicsItem_X_QEvent_X(QGraphicsScene *_self_, QGraphicsItem* item, QEvent* event) {
  return _self_->sendEvent(item, event);
}

extern "C" qreal bg_QGraphicsScene_minimumRenderSize_(QGraphicsScene *_self_) {
  return _self_->minimumRenderSize();
}

extern "C" void bg_QGraphicsScene_setMinimumRenderSize_qreal(QGraphicsScene *_self_, qreal minSize) {
  return _self_->setMinimumRenderSize(minSize);
}

extern "C" void bg_QGraphicsScene_update_(QGraphicsScene *_self_) {
  return _self_->update();
}

extern "C" void bg_QGraphicsScene_update_const_QRectF_R(QGraphicsScene *_self_, const QRectF& rect) {
  return _self_->update(rect);
}

extern "C" void bg_QGraphicsScene_invalidate_(QGraphicsScene *_self_) {
  return _self_->invalidate();
}

extern "C" void bg_QGraphicsScene_invalidate_const_QRectF_R(QGraphicsScene *_self_, const QRectF& rect) {
  return _self_->invalidate(rect);
}

extern "C" void bg_QGraphicsScene_invalidate_const_QRectF_R_QGraphicsScene__SceneLayers(QGraphicsScene *_self_, const QRectF& rect, QGraphicsScene::SceneLayers layers) {
  return _self_->invalidate(rect, layers);
}

extern "C" void bg_QGraphicsScene_advance_(QGraphicsScene *_self_) {
  return _self_->advance();
}

extern "C" void bg_QGraphicsScene_clearSelection_(QGraphicsScene *_self_) {
  return _self_->clearSelection();
}

extern "C" void bg_QGraphicsScene_clear_(QGraphicsScene *_self_) {
  return _self_->clear();
}

extern "C" bool bg_QGraphicsScene_event_QEvent_X(QGraphicsScene *_self_, QEvent* event) {
  return _self_->event(event);
}

extern "C" bool bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(QGraphicsScene *_self_, QObject* watched, QEvent* event) {
  return _self_->eventFilter(watched, event);
}

extern "C" void bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(QGraphicsScene *_self_, QGraphicsSceneContextMenuEvent* event) {
  return _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(QGraphicsScene *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsScene_focusInEvent_QFocusEvent_X(QGraphicsScene *_self_, QFocusEvent* event) {
  return _self_->focusInEvent(event);
}

extern "C" void bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(QGraphicsScene *_self_, QFocusEvent* event) {
  return _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(QGraphicsScene *_self_, QGraphicsSceneHelpEvent* event) {
  return _self_->helpEvent(event);
}

extern "C" void bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(QGraphicsScene *_self_, QKeyEvent* event) {
  return _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(QGraphicsScene *_self_, QKeyEvent* event) {
  return _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(QGraphicsScene *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(QGraphicsScene *_self_, QGraphicsSceneWheelEvent* event) {
  return _self_->wheelEvent(event);
}

extern "C" void bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(QGraphicsScene *_self_, QInputMethodEvent* event) {
  return _self_->inputMethodEvent(event);
}

extern "C" void bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(QGraphicsScene *_self_, QPainter* painter, const QRectF& rect) {
  return _self_->drawBackground(painter, rect);
}

extern "C" void bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(QGraphicsScene *_self_, QPainter* painter, const QRectF& rect) {
  return _self_->drawForeground(painter, rect);
}

extern "C" void bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsScene *_self_, QPainter* painter, int numItems, QGraphicsItem** items, const QStyleOptionGraphicsItem* options, QWidget* widget) {
  return _self_->drawItems(painter, numItems, items, options, widget);
}

extern "C" bool bg_QGraphicsScene_focusNextPrevChild_bool(QGraphicsScene *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" QMetaObject::Connection* bg_QGraphicsScene_sceneRectChanged_CONNECT_CrystalProc_void__const_QRectFR_(QGraphicsScene *_self_, CrystalProc<void, const QRectF*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsScene::*)(const QRectF &))&QGraphicsScene::sceneRectChanged, [_proc_](const QRectF& rect){
  _proc_(new (UseGC) QRectF (rect));
}));
}


extern "C" void bg_QGraphicsScene_sceneRectChanged_const_QRectF_R(QGraphicsScene *_self_, const QRectF& rect) {
  return _self_->sceneRectChanged(rect);
}

extern "C" QMetaObject::Connection* bg_QGraphicsScene_selectionChanged_CONNECT_CrystalProc_void_(QGraphicsScene *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsScene::*)())&QGraphicsScene::selectionChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsScene_selectionChanged_(QGraphicsScene *_self_) {
  return _self_->selectionChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsScene_focusItemChanged_CONNECT_CrystalProc_void__QGraphicsItemX__QGraphicsItemX__Qt__FocusReason_(QGraphicsScene *_self_, CrystalProc<void, QGraphicsItem*, QGraphicsItem*, Qt::FocusReason> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsScene::*)(QGraphicsItem *, QGraphicsItem *, Qt::FocusReason))&QGraphicsScene::focusItemChanged, [_proc_](QGraphicsItem* newFocus, QGraphicsItem* oldFocus, Qt::FocusReason reason){
  _proc_(newFocus, oldFocus, reason);
}));
}


extern "C" void bg_QGraphicsScene_focusItemChanged_QGraphicsItem_X_QGraphicsItem_X_Qt__FocusReason(QGraphicsScene *_self_, QGraphicsItem* newFocus, QGraphicsItem* oldFocus, Qt::FocusReason reason) {
  return _self_->focusItemChanged(newFocus, oldFocus, reason);
}

extern "C" const QMetaObject* bg_QGraphicsView_metaObject_(QGraphicsView *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QGraphicsView_qt_metacast_const_char_X(QGraphicsView *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsView::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsView_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsView::trUtf8(s, c, n));
}

extern "C" QGraphicsView* bg_QGraphicsView_CONSTRUCT_QWidget_X(QWidget* parent) {
  return new (UseGC) BgInherit_QGraphicsView(parent);
}

extern "C" QGraphicsView* bg_QGraphicsView_CONSTRUCT_QGraphicsScene_X_QWidget_X(QGraphicsScene* scene, QWidget* parent) {
  return new (UseGC) BgInherit_QGraphicsView(scene, parent);
}

extern "C" QSize* bg_QGraphicsView_sizeHint_(QGraphicsView *_self_) {
  return new (UseGC) QSize (_self_->sizeHint());
}

extern "C" QPainter::RenderHints bg_QGraphicsView_renderHints_(QGraphicsView *_self_) {
  return _self_->renderHints();
}

extern "C" void bg_QGraphicsView_setRenderHint_QPainter__RenderHint_bool(QGraphicsView *_self_, QPainter::RenderHint hint, bool enabled) {
  return _self_->setRenderHint(hint, enabled);
}

extern "C" void bg_QGraphicsView_setRenderHints_QPainter__RenderHints(QGraphicsView *_self_, QPainter::RenderHints hints) {
  return _self_->setRenderHints(hints);
}

extern "C" Qt::Alignment bg_QGraphicsView_alignment_(QGraphicsView *_self_) {
  return _self_->alignment();
}

extern "C" void bg_QGraphicsView_setAlignment_Qt__Alignment(QGraphicsView *_self_, Qt::Alignment alignment) {
  return _self_->setAlignment(alignment);
}

extern "C" QGraphicsView::ViewportAnchor bg_QGraphicsView_transformationAnchor_(QGraphicsView *_self_) {
  return _self_->transformationAnchor();
}

extern "C" void bg_QGraphicsView_setTransformationAnchor_QGraphicsView__ViewportAnchor(QGraphicsView *_self_, QGraphicsView::ViewportAnchor anchor) {
  return _self_->setTransformationAnchor(anchor);
}

extern "C" QGraphicsView::ViewportAnchor bg_QGraphicsView_resizeAnchor_(QGraphicsView *_self_) {
  return _self_->resizeAnchor();
}

extern "C" void bg_QGraphicsView_setResizeAnchor_QGraphicsView__ViewportAnchor(QGraphicsView *_self_, QGraphicsView::ViewportAnchor anchor) {
  return _self_->setResizeAnchor(anchor);
}

extern "C" QGraphicsView::ViewportUpdateMode bg_QGraphicsView_viewportUpdateMode_(QGraphicsView *_self_) {
  return _self_->viewportUpdateMode();
}

extern "C" void bg_QGraphicsView_setViewportUpdateMode_QGraphicsView__ViewportUpdateMode(QGraphicsView *_self_, QGraphicsView::ViewportUpdateMode mode) {
  return _self_->setViewportUpdateMode(mode);
}

extern "C" QGraphicsView::OptimizationFlags bg_QGraphicsView_optimizationFlags_(QGraphicsView *_self_) {
  return _self_->optimizationFlags();
}

extern "C" void bg_QGraphicsView_setOptimizationFlag_QGraphicsView__OptimizationFlag_bool(QGraphicsView *_self_, QGraphicsView::OptimizationFlag flag, bool enabled) {
  return _self_->setOptimizationFlag(flag, enabled);
}

extern "C" void bg_QGraphicsView_setOptimizationFlags_QGraphicsView__OptimizationFlags(QGraphicsView *_self_, QGraphicsView::OptimizationFlags flags) {
  return _self_->setOptimizationFlags(flags);
}

extern "C" QGraphicsView::DragMode bg_QGraphicsView_dragMode_(QGraphicsView *_self_) {
  return _self_->dragMode();
}

extern "C" void bg_QGraphicsView_setDragMode_QGraphicsView__DragMode(QGraphicsView *_self_, QGraphicsView::DragMode mode) {
  return _self_->setDragMode(mode);
}

extern "C" Qt::ItemSelectionMode bg_QGraphicsView_rubberBandSelectionMode_(QGraphicsView *_self_) {
  return _self_->rubberBandSelectionMode();
}

extern "C" void bg_QGraphicsView_setRubberBandSelectionMode_Qt__ItemSelectionMode(QGraphicsView *_self_, Qt::ItemSelectionMode mode) {
  return _self_->setRubberBandSelectionMode(mode);
}

extern "C" QRect* bg_QGraphicsView_rubberBandRect_(QGraphicsView *_self_) {
  return new (UseGC) QRect (_self_->rubberBandRect());
}

extern "C" QGraphicsView::CacheMode bg_QGraphicsView_cacheMode_(QGraphicsView *_self_) {
  return _self_->cacheMode();
}

extern "C" void bg_QGraphicsView_setCacheMode_QGraphicsView__CacheMode(QGraphicsView *_self_, QGraphicsView::CacheMode mode) {
  return _self_->setCacheMode(mode);
}

extern "C" void bg_QGraphicsView_resetCachedContent_(QGraphicsView *_self_) {
  return _self_->resetCachedContent();
}

extern "C" bool bg_QGraphicsView_isInteractive_(QGraphicsView *_self_) {
  return _self_->isInteractive();
}

extern "C" void bg_QGraphicsView_setInteractive_bool(QGraphicsView *_self_, bool allowed) {
  return _self_->setInteractive(allowed);
}

extern "C" QGraphicsScene* bg_QGraphicsView_scene_(QGraphicsView *_self_) {
  return _self_->scene();
}

extern "C" void bg_QGraphicsView_setScene_QGraphicsScene_X(QGraphicsView *_self_, QGraphicsScene* scene) {
  return _self_->setScene(scene);
}

extern "C" QRectF* bg_QGraphicsView_sceneRect_(QGraphicsView *_self_) {
  return new (UseGC) QRectF (_self_->sceneRect());
}

extern "C" void bg_QGraphicsView_setSceneRect_const_QRectF_R(QGraphicsView *_self_, const QRectF& rect) {
  return _self_->setSceneRect(rect);
}

extern "C" void bg_QGraphicsView_setSceneRect_qreal_qreal_qreal_qreal(QGraphicsView *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->setSceneRect(x, y, w, h);
}

extern "C" QMatrix* bg_QGraphicsView_matrix_(QGraphicsView *_self_) {
  return new (UseGC) QMatrix (_self_->matrix());
}

extern "C" void bg_QGraphicsView_setMatrix_const_QMatrix_R_bool(QGraphicsView *_self_, const QMatrix& matrix, bool combine) {
  return _self_->setMatrix(matrix, combine);
}

extern "C" void bg_QGraphicsView_resetMatrix_(QGraphicsView *_self_) {
  return _self_->resetMatrix();
}

extern "C" QTransform* bg_QGraphicsView_transform_(QGraphicsView *_self_) {
  return new (UseGC) QTransform (_self_->transform());
}

extern "C" QTransform* bg_QGraphicsView_viewportTransform_(QGraphicsView *_self_) {
  return new (UseGC) QTransform (_self_->viewportTransform());
}

extern "C" bool bg_QGraphicsView_isTransformed_(QGraphicsView *_self_) {
  return _self_->isTransformed();
}

extern "C" void bg_QGraphicsView_setTransform_const_QTransform_R_bool(QGraphicsView *_self_, const QTransform& matrix, bool combine) {
  return _self_->setTransform(matrix, combine);
}

extern "C" void bg_QGraphicsView_resetTransform_(QGraphicsView *_self_) {
  return _self_->resetTransform();
}

extern "C" void bg_QGraphicsView_rotate_qreal(QGraphicsView *_self_, qreal angle) {
  return _self_->rotate(angle);
}

extern "C" void bg_QGraphicsView_scale_qreal_qreal(QGraphicsView *_self_, qreal sx, qreal sy) {
  return _self_->scale(sx, sy);
}

extern "C" void bg_QGraphicsView_shear_qreal_qreal(QGraphicsView *_self_, qreal sh, qreal sv) {
  return _self_->shear(sh, sv);
}

extern "C" void bg_QGraphicsView_translate_qreal_qreal(QGraphicsView *_self_, qreal dx, qreal dy) {
  return _self_->translate(dx, dy);
}

extern "C" void bg_QGraphicsView_centerOn_const_QPointF_R(QGraphicsView *_self_, const QPointF& pos) {
  return _self_->centerOn(pos);
}

extern "C" void bg_QGraphicsView_centerOn_qreal_qreal(QGraphicsView *_self_, qreal x, qreal y) {
  return _self_->centerOn(x, y);
}

extern "C" void bg_QGraphicsView_centerOn_const_QGraphicsItem_X(QGraphicsView *_self_, const QGraphicsItem* item) {
  return _self_->centerOn(item);
}

extern "C" void bg_QGraphicsView_ensureVisible_const_QRectF_R_int_int(QGraphicsView *_self_, const QRectF& rect, int xmargin, int ymargin) {
  return _self_->ensureVisible(rect, xmargin, ymargin);
}

extern "C" void bg_QGraphicsView_ensureVisible_qreal_qreal_qreal_qreal_int_int(QGraphicsView *_self_, qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin) {
  return _self_->ensureVisible(x, y, w, h, xmargin, ymargin);
}

extern "C" void bg_QGraphicsView_ensureVisible_const_QGraphicsItem_X_int_int(QGraphicsView *_self_, const QGraphicsItem* item, int xmargin, int ymargin) {
  return _self_->ensureVisible(item, xmargin, ymargin);
}

extern "C" void bg_QGraphicsView_fitInView_const_QRectF_R_Qt__AspectRatioMode(QGraphicsView *_self_, const QRectF& rect, Qt::AspectRatioMode aspectRadioMode) {
  return _self_->fitInView(rect, aspectRadioMode);
}

extern "C" void bg_QGraphicsView_fitInView_qreal_qreal_qreal_qreal_Qt__AspectRatioMode(QGraphicsView *_self_, qreal x, qreal y, qreal w, qreal h, Qt::AspectRatioMode aspectRadioMode) {
  return _self_->fitInView(x, y, w, h, aspectRadioMode);
}

extern "C" void bg_QGraphicsView_fitInView_const_QGraphicsItem_X_Qt__AspectRatioMode(QGraphicsView *_self_, const QGraphicsItem* item, Qt::AspectRatioMode aspectRadioMode) {
  return _self_->fitInView(item, aspectRadioMode);
}

extern "C" void bg_QGraphicsView_render_QPainter_X(QGraphicsView *_self_, QPainter* painter) {
  return _self_->render(painter);
}

extern "C" void bg_QGraphicsView_render_QPainter_X_const_QRectF_R(QGraphicsView *_self_, QPainter* painter, const QRectF& target) {
  return _self_->render(painter, target);
}

extern "C" void bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R(QGraphicsView *_self_, QPainter* painter, const QRectF& target, const QRect& source) {
  return _self_->render(painter, target, source);
}

extern "C" void bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R_Qt__AspectRatioMode(QGraphicsView *_self_, QPainter* painter, const QRectF& target, const QRect& source, Qt::AspectRatioMode aspectRatioMode) {
  return _self_->render(painter, target, source, aspectRatioMode);
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsView_items_(QGraphicsView *_self_) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items());
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsView_items_const_QPoint_R(QGraphicsView *_self_, const QPoint pos) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(pos));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsView_items_int_int(QGraphicsView *_self_, int x, int y) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(x, y));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsView_items_const_QRect_R_Qt__ItemSelectionMode(QGraphicsView *_self_, const QRect& rect, Qt::ItemSelectionMode mode) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(rect, mode));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsView_items_int_int_int_int_Qt__ItemSelectionMode(QGraphicsView *_self_, int x, int y, int w, int h, Qt::ItemSelectionMode mode) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(x, y, w, h, mode));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsView_items_const_QPolygon_R_Qt__ItemSelectionMode(QGraphicsView *_self_, const QPolygon& polygon, Qt::ItemSelectionMode mode) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(polygon, mode));
}

extern "C" QList<QGraphicsItem *>* bg_QGraphicsView_items_const_QPainterPath_R_Qt__ItemSelectionMode(QGraphicsView *_self_, const QPainterPath& path, Qt::ItemSelectionMode mode) {
  return new (UseGC) QList<QGraphicsItem *> (_self_->items(path, mode));
}

extern "C" QGraphicsItem* bg_QGraphicsView_itemAt_const_QPoint_R(QGraphicsView *_self_, const QPoint pos) {
  return _self_->itemAt(pos);
}

extern "C" QGraphicsItem* bg_QGraphicsView_itemAt_int_int(QGraphicsView *_self_, int x, int y) {
  return _self_->itemAt(x, y);
}

extern "C" QPointF* bg_QGraphicsView_mapToScene_const_QPoint_R(QGraphicsView *_self_, const QPoint point) {
  return new (UseGC) QPointF (_self_->mapToScene(point));
}

extern "C" QPolygonF* bg_QGraphicsView_mapToScene_const_QRect_R(QGraphicsView *_self_, const QRect& rect) {
  return new (UseGC) QPolygonF (_self_->mapToScene(rect));
}

extern "C" QPolygonF* bg_QGraphicsView_mapToScene_const_QPolygon_R(QGraphicsView *_self_, const QPolygon& polygon) {
  return new (UseGC) QPolygonF (_self_->mapToScene(polygon));
}

extern "C" QPainterPath* bg_QGraphicsView_mapToScene_const_QPainterPath_R(QGraphicsView *_self_, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapToScene(path));
}

extern "C" QPoint bg_QGraphicsView_mapFromScene_const_QPointF_R(QGraphicsView *_self_, const QPointF& point) {
  return _self_->mapFromScene(point);
}

extern "C" QPolygon* bg_QGraphicsView_mapFromScene_const_QRectF_R(QGraphicsView *_self_, const QRectF& rect) {
  return new (UseGC) QPolygon (_self_->mapFromScene(rect));
}

extern "C" QPolygon* bg_QGraphicsView_mapFromScene_const_QPolygonF_R(QGraphicsView *_self_, const QPolygonF& polygon) {
  return new (UseGC) QPolygon (_self_->mapFromScene(polygon));
}

extern "C" QPainterPath* bg_QGraphicsView_mapFromScene_const_QPainterPath_R(QGraphicsView *_self_, const QPainterPath& path) {
  return new (UseGC) QPainterPath (_self_->mapFromScene(path));
}

extern "C" QPointF* bg_QGraphicsView_mapToScene_int_int(QGraphicsView *_self_, int x, int y) {
  return new (UseGC) QPointF (_self_->mapToScene(x, y));
}

extern "C" QPolygonF* bg_QGraphicsView_mapToScene_int_int_int_int(QGraphicsView *_self_, int x, int y, int w, int h) {
  return new (UseGC) QPolygonF (_self_->mapToScene(x, y, w, h));
}

extern "C" QPoint bg_QGraphicsView_mapFromScene_qreal_qreal(QGraphicsView *_self_, qreal x, qreal y) {
  return _self_->mapFromScene(x, y);
}

extern "C" QPolygon* bg_QGraphicsView_mapFromScene_qreal_qreal_qreal_qreal(QGraphicsView *_self_, qreal x, qreal y, qreal w, qreal h) {
  return new (UseGC) QPolygon (_self_->mapFromScene(x, y, w, h));
}

extern "C" QBrush* bg_QGraphicsView_backgroundBrush_(QGraphicsView *_self_) {
  return new (UseGC) QBrush (_self_->backgroundBrush());
}

extern "C" void bg_QGraphicsView_setBackgroundBrush_const_QBrush_R(QGraphicsView *_self_, const QBrush& brush) {
  return _self_->setBackgroundBrush(brush);
}

extern "C" QBrush* bg_QGraphicsView_foregroundBrush_(QGraphicsView *_self_) {
  return new (UseGC) QBrush (_self_->foregroundBrush());
}

extern "C" void bg_QGraphicsView_setForegroundBrush_const_QBrush_R(QGraphicsView *_self_, const QBrush& brush) {
  return _self_->setForegroundBrush(brush);
}

extern "C" void bg_QGraphicsView_invalidateScene_(QGraphicsView *_self_) {
  return _self_->invalidateScene();
}

extern "C" void bg_QGraphicsView_invalidateScene_const_QRectF_R(QGraphicsView *_self_, const QRectF& rect) {
  return _self_->invalidateScene(rect);
}

extern "C" void bg_QGraphicsView_invalidateScene_const_QRectF_R_QGraphicsScene__SceneLayers(QGraphicsView *_self_, const QRectF& rect, QGraphicsScene::SceneLayers layers) {
  return _self_->invalidateScene(rect, layers);
}

extern "C" void bg_QGraphicsView_updateSceneRect_const_QRectF_R(QGraphicsView *_self_, const QRectF& rect) {
  return _self_->updateSceneRect(rect);
}

extern "C" QMetaObject::Connection* bg_QGraphicsView_rubberBandChanged_CONNECT_CrystalProc_void__QRectR__QPointFR__QPointFR_(QGraphicsView *_self_, CrystalProc<void, QRect*, QPointF*, QPointF*> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsView::*)(QRect, QPointF, QPointF))&QGraphicsView::rubberBandChanged, [_proc_](QRect viewportRect, QPointF fromScenePoint, QPointF toScenePoint){
  _proc_(new (UseGC) QRect (viewportRect), new (UseGC) QPointF (fromScenePoint), new (UseGC) QPointF (toScenePoint));
}));
}


extern "C" void bg_QGraphicsView_rubberBandChanged_QRect_QPointF_QPointF(QGraphicsView *_self_, QRect& viewportRect, QPointF& fromScenePoint, QPointF& toScenePoint) {
  return _self_->rubberBandChanged(viewportRect, fromScenePoint, toScenePoint);
}

extern "C" void bg_QGraphicsView_setupViewport_QWidget_X(QGraphicsView *_self_, QWidget* widget) {
  return _self_->setupViewport(widget);
}

extern "C" QGraphicsView* bg_QGraphicsView_CONSTRUCT_QGraphicsViewPrivate_R_QWidget_X(QGraphicsViewPrivate& unnamed_arg_0, QWidget* parent) {
  return new (UseGC) BgInherit_QGraphicsView(unnamed_arg_0, parent);
}

extern "C" bool bg_QGraphicsView_event_QEvent_X(QGraphicsView *_self_, QEvent* event) {
  return _self_->event(event);
}

extern "C" bool bg_QGraphicsView_viewportEvent_QEvent_X(QGraphicsView *_self_, QEvent* event) {
  return _self_->viewportEvent(event);
}

extern "C" void bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(QGraphicsView *_self_, QContextMenuEvent* event) {
  return _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(QGraphicsView *_self_, QDragEnterEvent* event) {
  return _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(QGraphicsView *_self_, QDragLeaveEvent* event) {
  return _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(QGraphicsView *_self_, QDragMoveEvent* event) {
  return _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsView_dropEvent_QDropEvent_X(QGraphicsView *_self_, QDropEvent* event) {
  return _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsView_focusInEvent_QFocusEvent_X(QGraphicsView *_self_, QFocusEvent* event) {
  return _self_->focusInEvent(event);
}

extern "C" bool bg_QGraphicsView_focusNextPrevChild_bool(QGraphicsView *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QGraphicsView_focusOutEvent_QFocusEvent_X(QGraphicsView *_self_, QFocusEvent* event) {
  return _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsView_keyPressEvent_QKeyEvent_X(QGraphicsView *_self_, QKeyEvent* event) {
  return _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(QGraphicsView *_self_, QKeyEvent* event) {
  return _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(QGraphicsView *_self_, QMouseEvent* event) {
  return _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsView_mousePressEvent_QMouseEvent_X(QGraphicsView *_self_, QMouseEvent* event) {
  return _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(QGraphicsView *_self_, QMouseEvent* event) {
  return _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(QGraphicsView *_self_, QMouseEvent* event) {
  return _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsView_wheelEvent_QWheelEvent_X(QGraphicsView *_self_, QWheelEvent* event) {
  return _self_->wheelEvent(event);
}

extern "C" void bg_QGraphicsView_paintEvent_QPaintEvent_X(QGraphicsView *_self_, QPaintEvent* event) {
  return _self_->paintEvent(event);
}

extern "C" void bg_QGraphicsView_resizeEvent_QResizeEvent_X(QGraphicsView *_self_, QResizeEvent* event) {
  return _self_->resizeEvent(event);
}

extern "C" void bg_QGraphicsView_scrollContentsBy_int_int(QGraphicsView *_self_, int dx, int dy) {
  return _self_->scrollContentsBy(dx, dy);
}

extern "C" void bg_QGraphicsView_showEvent_QShowEvent_X(QGraphicsView *_self_, QShowEvent* event) {
  return _self_->showEvent(event);
}

extern "C" void bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(QGraphicsView *_self_, QInputMethodEvent* event) {
  return _self_->inputMethodEvent(event);
}

extern "C" void bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(QGraphicsView *_self_, QPainter* painter, const QRectF& rect) {
  return _self_->drawBackground(painter, rect);
}

extern "C" void bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(QGraphicsView *_self_, QPainter* painter, const QRectF& rect) {
  return _self_->drawForeground(painter, rect);
}

extern "C" void bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(QGraphicsView *_self_, QPainter* painter, int numItems, QGraphicsItem** items, const QStyleOptionGraphicsItem* options) {
  return _self_->drawItems(painter, numItems, items, options);
}

extern "C" const QMetaObject* bg_QGraphicsObject_metaObject_(QGraphicsObject *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QGraphicsObject_qt_metacast_const_char_X(QGraphicsObject *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsObject::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsObject_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsObject::trUtf8(s, c, n));
}

extern "C" QGraphicsObject* bg_QGraphicsObject_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsObject(parent);
}

extern "C" void bg_QGraphicsObject_grabGesture_Qt__GestureType(QGraphicsObject *_self_, Qt::GestureType type) {
  return _self_->grabGesture(type);
}

extern "C" void bg_QGraphicsObject_grabGesture_Qt__GestureType_Qt__GestureFlags(QGraphicsObject *_self_, Qt::GestureType type, Qt::GestureFlags flags) {
  return _self_->grabGesture(type, flags);
}

extern "C" void bg_QGraphicsObject_ungrabGesture_Qt__GestureType(QGraphicsObject *_self_, Qt::GestureType type) {
  return _self_->ungrabGesture(type);
}

extern "C" void bg_QGraphicsObject_updateMicroFocus_(QGraphicsObject *_self_) {
  return _self_->updateMicroFocus();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_parentChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::parentChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_parentChanged_(QGraphicsObject *_self_) {
  return _self_->parentChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_opacityChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::opacityChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_opacityChanged_(QGraphicsObject *_self_) {
  return _self_->opacityChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_visibleChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::visibleChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_visibleChanged_(QGraphicsObject *_self_) {
  return _self_->visibleChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_enabledChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::enabledChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_enabledChanged_(QGraphicsObject *_self_) {
  return _self_->enabledChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_xChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::xChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_xChanged_(QGraphicsObject *_self_) {
  return _self_->xChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_yChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::yChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_yChanged_(QGraphicsObject *_self_) {
  return _self_->yChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_zChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::zChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_zChanged_(QGraphicsObject *_self_) {
  return _self_->zChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_rotationChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::rotationChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_rotationChanged_(QGraphicsObject *_self_) {
  return _self_->rotationChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_scaleChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::scaleChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_scaleChanged_(QGraphicsObject *_self_) {
  return _self_->scaleChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_childrenChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::childrenChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_childrenChanged_(QGraphicsObject *_self_) {
  return _self_->childrenChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_widthChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::widthChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_widthChanged_(QGraphicsObject *_self_) {
  return _self_->widthChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsObject_heightChanged_CONNECT_CrystalProc_void_(QGraphicsObject *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsObject::*)())&QGraphicsObject::heightChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsObject_heightChanged_(QGraphicsObject *_self_) {
  return _self_->heightChanged();
}

extern "C" QGraphicsObject* bg_QGraphicsObject_CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(QGraphicsItemPrivate& dd, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsObject(dd, parent);
}

extern "C" bool bg_QGraphicsObject_event_QEvent_X(QGraphicsObject *_self_, QEvent* ev) {
  return _self_->event(ev);
}

extern "C" const QMetaObject* bg_QGraphicsWidget_metaObject_(QGraphicsWidget *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QGraphicsWidget_qt_metacast_const_char_X(QGraphicsWidget *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsWidget::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsWidget_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsWidget::trUtf8(s, c, n));
}

extern "C" QGraphicsWidget* bg_QGraphicsWidget_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsWidget(parent);
}

extern "C" QGraphicsWidget* bg_QGraphicsWidget_CONSTRUCT_QGraphicsItem_X_Qt__WindowFlags(QGraphicsItem* parent, Qt::WindowFlags wFlags) {
  return new (UseGC) BgInherit_QGraphicsWidget(parent, wFlags);
}

extern "C" QGraphicsLayout* bg_QGraphicsWidget_layout_(QGraphicsWidget *_self_) {
  return _self_->layout();
}

extern "C" void bg_QGraphicsWidget_setLayout_QGraphicsLayout_X(QGraphicsWidget *_self_, QGraphicsLayout* layout) {
  return _self_->setLayout(layout);
}

extern "C" void bg_QGraphicsWidget_adjustSize_(QGraphicsWidget *_self_) {
  return _self_->adjustSize();
}

extern "C" Qt::LayoutDirection bg_QGraphicsWidget_layoutDirection_(QGraphicsWidget *_self_) {
  return _self_->layoutDirection();
}

extern "C" void bg_QGraphicsWidget_setLayoutDirection_Qt__LayoutDirection(QGraphicsWidget *_self_, Qt::LayoutDirection direction) {
  return _self_->setLayoutDirection(direction);
}

extern "C" void bg_QGraphicsWidget_unsetLayoutDirection_(QGraphicsWidget *_self_) {
  return _self_->unsetLayoutDirection();
}

extern "C" QStyle* bg_QGraphicsWidget_style_(QGraphicsWidget *_self_) {
  return _self_->style();
}

extern "C" void bg_QGraphicsWidget_setStyle_QStyle_X(QGraphicsWidget *_self_, QStyle* style) {
  return _self_->setStyle(style);
}

extern "C" QFont* bg_QGraphicsWidget_font_(QGraphicsWidget *_self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QGraphicsWidget_setFont_const_QFont_R(QGraphicsWidget *_self_, const QFont& font) {
  return _self_->setFont(font);
}

extern "C" QPalette* bg_QGraphicsWidget_palette_(QGraphicsWidget *_self_) {
  return new (UseGC) QPalette (_self_->palette());
}

extern "C" void bg_QGraphicsWidget_setPalette_const_QPalette_R(QGraphicsWidget *_self_, const QPalette& palette) {
  return _self_->setPalette(palette);
}

extern "C" bool bg_QGraphicsWidget_autoFillBackground_(QGraphicsWidget *_self_) {
  return _self_->autoFillBackground();
}

extern "C" void bg_QGraphicsWidget_setAutoFillBackground_bool(QGraphicsWidget *_self_, bool enabled) {
  return _self_->setAutoFillBackground(enabled);
}

extern "C" void bg_QGraphicsWidget_resize_const_QSizeF_R(QGraphicsWidget *_self_, const QSizeF& size) {
  return _self_->resize(size);
}

extern "C" void bg_QGraphicsWidget_resize_qreal_qreal(QGraphicsWidget *_self_, qreal w, qreal h) {
  return _self_->resize(w, h);
}

extern "C" QSizeF* bg_QGraphicsWidget_size_(QGraphicsWidget *_self_) {
  return new (UseGC) QSizeF (_self_->size());
}

extern "C" void bg_QGraphicsWidget_setGeometry_const_QRectF_R(QGraphicsWidget *_self_, const QRectF& rect) {
  return _self_->setGeometry(rect);
}

extern "C" void bg_QGraphicsWidget_setGeometry_qreal_qreal_qreal_qreal(QGraphicsWidget *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->setGeometry(x, y, w, h);
}

extern "C" QRectF* bg_QGraphicsWidget_rect_(QGraphicsWidget *_self_) {
  return new (UseGC) QRectF (_self_->rect());
}

extern "C" void bg_QGraphicsWidget_setContentsMargins_qreal_qreal_qreal_qreal(QGraphicsWidget *_self_, qreal left, qreal top, qreal right, qreal bottom) {
  return _self_->setContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(QGraphicsWidget *_self_, qreal* left, qreal* top, qreal* right, qreal* bottom) {
  return _self_->getContentsMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_setWindowFrameMargins_qreal_qreal_qreal_qreal(QGraphicsWidget *_self_, qreal left, qreal top, qreal right, qreal bottom) {
  return _self_->setWindowFrameMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_getWindowFrameMargins_qreal_X_qreal_X_qreal_X_qreal_X(QGraphicsWidget *_self_, qreal* left, qreal* top, qreal* right, qreal* bottom) {
  return _self_->getWindowFrameMargins(left, top, right, bottom);
}

extern "C" void bg_QGraphicsWidget_unsetWindowFrameMargins_(QGraphicsWidget *_self_) {
  return _self_->unsetWindowFrameMargins();
}

extern "C" QRectF* bg_QGraphicsWidget_windowFrameGeometry_(QGraphicsWidget *_self_) {
  return new (UseGC) QRectF (_self_->windowFrameGeometry());
}

extern "C" QRectF* bg_QGraphicsWidget_windowFrameRect_(QGraphicsWidget *_self_) {
  return new (UseGC) QRectF (_self_->windowFrameRect());
}

extern "C" Qt::WindowFlags bg_QGraphicsWidget_windowFlags_(QGraphicsWidget *_self_) {
  return _self_->windowFlags();
}

extern "C" Qt::WindowType bg_QGraphicsWidget_windowType_(QGraphicsWidget *_self_) {
  return _self_->windowType();
}

extern "C" void bg_QGraphicsWidget_setWindowFlags_Qt__WindowFlags(QGraphicsWidget *_self_, Qt::WindowFlags wFlags) {
  return _self_->setWindowFlags(wFlags);
}

extern "C" bool bg_QGraphicsWidget_isActiveWindow_(QGraphicsWidget *_self_) {
  return _self_->isActiveWindow();
}

extern "C" void bg_QGraphicsWidget_setWindowTitle_const_QString_R(QGraphicsWidget *_self_, const CrystalString title) {
  return _self_->setWindowTitle(QString::fromUtf8(title.ptr, title.size));
}

extern "C" CrystalString bg_QGraphicsWidget_windowTitle_(QGraphicsWidget *_self_) {
  return qstring_to_crystal(_self_->windowTitle());
}

extern "C" Qt::FocusPolicy bg_QGraphicsWidget_focusPolicy_(QGraphicsWidget *_self_) {
  return _self_->focusPolicy();
}

extern "C" void bg_QGraphicsWidget_setFocusPolicy_Qt__FocusPolicy(QGraphicsWidget *_self_, Qt::FocusPolicy policy) {
  return _self_->setFocusPolicy(policy);
}

extern "C" void bg_QGraphicsWidget_setTabOrder_STATIC_QGraphicsWidget_X_QGraphicsWidget_X(QGraphicsWidget* first, QGraphicsWidget* second) {
  return QGraphicsWidget::setTabOrder(first, second);
}

extern "C" QGraphicsWidget* bg_QGraphicsWidget_focusWidget_(QGraphicsWidget *_self_) {
  return _self_->focusWidget();
}

extern "C" int bg_QGraphicsWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(QGraphicsWidget *_self_, const QKeySequence& sequence, Qt::ShortcutContext context) {
  return _self_->grabShortcut(sequence, context);
}

extern "C" void bg_QGraphicsWidget_releaseShortcut_int(QGraphicsWidget *_self_, int id) {
  return _self_->releaseShortcut(id);
}

extern "C" void bg_QGraphicsWidget_setShortcutEnabled_int_bool(QGraphicsWidget *_self_, int id, bool enabled) {
  return _self_->setShortcutEnabled(id, enabled);
}

extern "C" void bg_QGraphicsWidget_setShortcutAutoRepeat_int_bool(QGraphicsWidget *_self_, int id, bool enabled) {
  return _self_->setShortcutAutoRepeat(id, enabled);
}

extern "C" void bg_QGraphicsWidget_addAction_QAction_X(QGraphicsWidget *_self_, QAction* action) {
  return _self_->addAction(action);
}

extern "C" void bg_QGraphicsWidget_insertAction_QAction_X_QAction_X(QGraphicsWidget *_self_, QAction* before, QAction* action) {
  return _self_->insertAction(before, action);
}

extern "C" void bg_QGraphicsWidget_removeAction_QAction_X(QGraphicsWidget *_self_, QAction* action) {
  return _self_->removeAction(action);
}

extern "C" void bg_QGraphicsWidget_setAttribute_Qt__WidgetAttribute_bool(QGraphicsWidget *_self_, Qt::WidgetAttribute attribute, bool on) {
  return _self_->setAttribute(attribute, on);
}

extern "C" bool bg_QGraphicsWidget_testAttribute_Qt__WidgetAttribute(QGraphicsWidget *_self_, Qt::WidgetAttribute attribute) {
  return _self_->testAttribute(attribute);
}

extern "C" int bg_QGraphicsWidget_type_(QGraphicsWidget *_self_) {
  return _self_->type();
}

extern "C" void bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsWidget *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" void bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsWidget *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paintWindowFrame(painter, option, widget);
}

extern "C" QRectF* bg_QGraphicsWidget_boundingRect_(QGraphicsWidget *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsWidget_shape_(QGraphicsWidget *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" QMetaObject::Connection* bg_QGraphicsWidget_geometryChanged_CONNECT_CrystalProc_void_(QGraphicsWidget *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsWidget::*)())&QGraphicsWidget::geometryChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsWidget_geometryChanged_(QGraphicsWidget *_self_) {
  return _self_->geometryChanged();
}

extern "C" QMetaObject::Connection* bg_QGraphicsWidget_layoutChanged_CONNECT_CrystalProc_void_(QGraphicsWidget *_self_, CrystalProc<void> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsWidget::*)())&QGraphicsWidget::layoutChanged, [_proc_](){
  _proc_();
}));
}


extern "C" void bg_QGraphicsWidget_layoutChanged_(QGraphicsWidget *_self_) {
  return _self_->layoutChanged();
}

extern "C" bool bg_QGraphicsWidget_close_(QGraphicsWidget *_self_) {
  return _self_->close();
}

extern "C" void bg_QGraphicsWidget_initStyleOption_QStyleOption_X(QGraphicsWidget *_self_, QStyleOption* option) {
  return _self_->initStyleOption(option);
}

extern "C" QSizeF* bg_QGraphicsWidget_sizeHint_Qt__SizeHint(QGraphicsWidget *_self_, Qt::SizeHint which) {
  return new (UseGC) QSizeF (_self_->sizeHint(which));
}

extern "C" QSizeF* bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(QGraphicsWidget *_self_, Qt::SizeHint which, const QSizeF& constraint) {
  return new (UseGC) QSizeF (_self_->sizeHint(which, constraint));
}

extern "C" void bg_QGraphicsWidget_updateGeometry_(QGraphicsWidget *_self_) {
  return _self_->updateGeometry();
}

extern "C" bool bg_QGraphicsWidget_sceneEvent_QEvent_X(QGraphicsWidget *_self_, QEvent* event) {
  return _self_->sceneEvent(event);
}

extern "C" bool bg_QGraphicsWidget_windowFrameEvent_QEvent_X(QGraphicsWidget *_self_, QEvent* e) {
  return _self_->windowFrameEvent(e);
}

extern "C" Qt::WindowFrameSection bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(QGraphicsWidget *_self_, const QPointF& pos) {
  return _self_->windowFrameSectionAt(pos);
}

extern "C" bool bg_QGraphicsWidget_event_QEvent_X(QGraphicsWidget *_self_, QEvent* event) {
  return _self_->event(event);
}

extern "C" void bg_QGraphicsWidget_changeEvent_QEvent_X(QGraphicsWidget *_self_, QEvent* event) {
  return _self_->changeEvent(event);
}

extern "C" void bg_QGraphicsWidget_closeEvent_QCloseEvent_X(QGraphicsWidget *_self_, QCloseEvent* event) {
  return _self_->closeEvent(event);
}

extern "C" void bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(QGraphicsWidget *_self_, QFocusEvent* event) {
  return _self_->focusInEvent(event);
}

extern "C" bool bg_QGraphicsWidget_focusNextPrevChild_bool(QGraphicsWidget *_self_, bool next) {
  return _self_->focusNextPrevChild(next);
}

extern "C" void bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(QGraphicsWidget *_self_, QFocusEvent* event) {
  return _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsWidget_hideEvent_QHideEvent_X(QGraphicsWidget *_self_, QHideEvent* event) {
  return _self_->hideEvent(event);
}

extern "C" void bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(QGraphicsWidget *_self_, QGraphicsSceneMoveEvent* event) {
  return _self_->moveEvent(event);
}

extern "C" void bg_QGraphicsWidget_polishEvent_(QGraphicsWidget *_self_) {
  return _self_->polishEvent();
}

extern "C" void bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(QGraphicsWidget *_self_, QGraphicsSceneResizeEvent* event) {
  return _self_->resizeEvent(event);
}

extern "C" void bg_QGraphicsWidget_showEvent_QShowEvent_X(QGraphicsWidget *_self_, QShowEvent* event) {
  return _self_->showEvent(event);
}

extern "C" void bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(QGraphicsWidget *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverMoveEvent(event);
}

extern "C" void bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(QGraphicsWidget *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverLeaveEvent(event);
}

extern "C" void bg_QGraphicsWidget_grabMouseEvent_QEvent_X(QGraphicsWidget *_self_, QEvent* event) {
  return _self_->grabMouseEvent(event);
}

extern "C" void bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(QGraphicsWidget *_self_, QEvent* event) {
  return _self_->ungrabMouseEvent(event);
}

extern "C" void bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(QGraphicsWidget *_self_, QEvent* event) {
  return _self_->grabKeyboardEvent(event);
}

extern "C" void bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(QGraphicsWidget *_self_, QEvent* event) {
  return _self_->ungrabKeyboardEvent(event);
}

extern "C" QGraphicsWidget* bg_QGraphicsWidget_CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X(QGraphicsWidgetPrivate& unnamed_arg_0, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsWidget(unnamed_arg_0, parent);
}

extern "C" QGraphicsWidget* bg_QGraphicsWidget_CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X_Qt__WindowFlags(QGraphicsWidgetPrivate& unnamed_arg_0, QGraphicsItem* parent, Qt::WindowFlags wFlags) {
  return new (UseGC) BgInherit_QGraphicsWidget(unnamed_arg_0, parent, wFlags);
}

extern "C" const QMetaObject* bg_QGraphicsTextItem_metaObject_(QGraphicsTextItem *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QGraphicsTextItem_qt_metacast_const_char_X(QGraphicsTextItem *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsTextItem::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsTextItem_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsTextItem::trUtf8(s, c, n));
}

extern "C" QGraphicsTextItem* bg_QGraphicsTextItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsTextItem(parent);
}

extern "C" QGraphicsTextItem* bg_QGraphicsTextItem_CONSTRUCT_const_QString_R_QGraphicsItem_X(const CrystalString text, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsTextItem(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" CrystalString bg_QGraphicsTextItem_toHtml_(QGraphicsTextItem *_self_) {
  return qstring_to_crystal(_self_->toHtml());
}

extern "C" void bg_QGraphicsTextItem_setHtml_const_QString_R(QGraphicsTextItem *_self_, const CrystalString html) {
  return _self_->setHtml(QString::fromUtf8(html.ptr, html.size));
}

extern "C" CrystalString bg_QGraphicsTextItem_toPlainText_(QGraphicsTextItem *_self_) {
  return qstring_to_crystal(_self_->toPlainText());
}

extern "C" void bg_QGraphicsTextItem_setPlainText_const_QString_R(QGraphicsTextItem *_self_, const CrystalString text) {
  return _self_->setPlainText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" QFont* bg_QGraphicsTextItem_font_(QGraphicsTextItem *_self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" void bg_QGraphicsTextItem_setFont_const_QFont_R(QGraphicsTextItem *_self_, const QFont& font) {
  return _self_->setFont(font);
}

extern "C" void bg_QGraphicsTextItem_setDefaultTextColor_const_QColor_R(QGraphicsTextItem *_self_, const QColor& c) {
  return _self_->setDefaultTextColor(c);
}

extern "C" QColor* bg_QGraphicsTextItem_defaultTextColor_(QGraphicsTextItem *_self_) {
  return new (UseGC) QColor (_self_->defaultTextColor());
}

extern "C" QRectF* bg_QGraphicsTextItem_boundingRect_(QGraphicsTextItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsTextItem_shape_(QGraphicsTextItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsTextItem_contains_const_QPointF_R(QGraphicsTextItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsTextItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsTextItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsTextItem_opaqueArea_(QGraphicsTextItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsTextItem_type_(QGraphicsTextItem *_self_) {
  return _self_->type();
}

extern "C" void bg_QGraphicsTextItem_setTextWidth_qreal(QGraphicsTextItem *_self_, qreal width) {
  return _self_->setTextWidth(width);
}

extern "C" qreal bg_QGraphicsTextItem_textWidth_(QGraphicsTextItem *_self_) {
  return _self_->textWidth();
}

extern "C" void bg_QGraphicsTextItem_adjustSize_(QGraphicsTextItem *_self_) {
  return _self_->adjustSize();
}

extern "C" void bg_QGraphicsTextItem_setDocument_QTextDocument_X(QGraphicsTextItem *_self_, QTextDocument* document) {
  return _self_->setDocument(document);
}

extern "C" QTextDocument* bg_QGraphicsTextItem_document_(QGraphicsTextItem *_self_) {
  return _self_->document();
}

extern "C" void bg_QGraphicsTextItem_setTextInteractionFlags_Qt__TextInteractionFlags(QGraphicsTextItem *_self_, Qt::TextInteractionFlags flags) {
  return _self_->setTextInteractionFlags(flags);
}

extern "C" Qt::TextInteractionFlags bg_QGraphicsTextItem_textInteractionFlags_(QGraphicsTextItem *_self_) {
  return _self_->textInteractionFlags();
}

extern "C" void bg_QGraphicsTextItem_setTabChangesFocus_bool(QGraphicsTextItem *_self_, bool b) {
  return _self_->setTabChangesFocus(b);
}

extern "C" bool bg_QGraphicsTextItem_tabChangesFocus_(QGraphicsTextItem *_self_) {
  return _self_->tabChangesFocus();
}

extern "C" void bg_QGraphicsTextItem_setOpenExternalLinks_bool(QGraphicsTextItem *_self_, bool open) {
  return _self_->setOpenExternalLinks(open);
}

extern "C" bool bg_QGraphicsTextItem_openExternalLinks_(QGraphicsTextItem *_self_) {
  return _self_->openExternalLinks();
}

extern "C" void bg_QGraphicsTextItem_setTextCursor_const_QTextCursor_R(QGraphicsTextItem *_self_, const QTextCursor& cursor) {
  return _self_->setTextCursor(cursor);
}

extern "C" QTextCursor* bg_QGraphicsTextItem_textCursor_(QGraphicsTextItem *_self_) {
  return new (UseGC) QTextCursor (_self_->textCursor());
}

extern "C" QMetaObject::Connection* bg_QGraphicsTextItem_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(QGraphicsTextItem *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsTextItem::*)(const QString &))&QGraphicsTextItem::linkActivated, [_proc_](const QString& unnamed_arg_0){
  _proc_(qstring_to_crystal(unnamed_arg_0));
}));
}


extern "C" void bg_QGraphicsTextItem_linkActivated_const_QString_R(QGraphicsTextItem *_self_, const CrystalString unnamed_arg_0) {
  return _self_->linkActivated(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" QMetaObject::Connection* bg_QGraphicsTextItem_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(QGraphicsTextItem *_self_, CrystalProc<void, const CrystalString> _proc_) {
  return new (UseGC) QMetaObject::Connection (QObject::connect(_self_, (void(QGraphicsTextItem::*)(const QString &))&QGraphicsTextItem::linkHovered, [_proc_](const QString& unnamed_arg_0){
  _proc_(qstring_to_crystal(unnamed_arg_0));
}));
}


extern "C" void bg_QGraphicsTextItem_linkHovered_const_QString_R(QGraphicsTextItem *_self_, const CrystalString unnamed_arg_0) {
  return _self_->linkHovered(QString::fromUtf8(unnamed_arg_0.ptr, unnamed_arg_0.size));
}

extern "C" bool bg_QGraphicsTextItem_sceneEvent_QEvent_X(QGraphicsTextItem *_self_, QEvent* event) {
  return _self_->sceneEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mousePressEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseMoveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseReleaseEvent(event);
}

extern "C" void bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneMouseEvent* event) {
  return _self_->mouseDoubleClickEvent(event);
}

extern "C" void bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneContextMenuEvent* event) {
  return _self_->contextMenuEvent(event);
}

extern "C" void bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(QGraphicsTextItem *_self_, QKeyEvent* event) {
  return _self_->keyPressEvent(event);
}

extern "C" void bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(QGraphicsTextItem *_self_, QKeyEvent* event) {
  return _self_->keyReleaseEvent(event);
}

extern "C" void bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(QGraphicsTextItem *_self_, QFocusEvent* event) {
  return _self_->focusInEvent(event);
}

extern "C" void bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(QGraphicsTextItem *_self_, QFocusEvent* event) {
  return _self_->focusOutEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragEnterEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragLeaveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dragMoveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneDragDropEvent* event) {
  return _self_->dropEvent(event);
}

extern "C" void bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(QGraphicsTextItem *_self_, QInputMethodEvent* event) {
  return _self_->inputMethodEvent(event);
}

extern "C" void bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverEnterEvent(event);
}

extern "C" void bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverMoveEvent(event);
}

extern "C" void bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(QGraphicsTextItem *_self_, QGraphicsSceneHoverEvent* event) {
  return _self_->hoverLeaveEvent(event);
}

extern "C" bool bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(QGraphicsTextItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" const QMetaObject* bg_QGraphicsTransform_metaObject_(QGraphicsTransform *_self_) {
  return _self_->metaObject();
}

extern "C" void* bg_QGraphicsTransform_qt_metacast_const_char_X(QGraphicsTransform *_self_, const char* unnamed_arg_0) {
  return _self_->qt_metacast(unnamed_arg_0);
}

extern "C" CrystalString bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsTransform::tr(s, c, n));
}

extern "C" CrystalString bg_QGraphicsTransform_trUtf8_STATIC_const_char_X_const_char_X_int(const char* s, const char* c, int n) {
  return qstring_to_crystal(QGraphicsTransform::trUtf8(s, c, n));
}

extern "C" QGraphicsTransform* bg_QGraphicsTransform_CONSTRUCT_QObject_X(QObject* parent) {
  return new (UseGC) BgInherit_QGraphicsTransform(parent);
}

extern "C" void bg_QGraphicsTransform_applyTo_QMatrix4x4_X(QGraphicsTransform *_self_, QMatrix4x4* matrix) {
  return _self_->applyTo(matrix);
}

extern "C" void bg_QGraphicsTransform_update_(QGraphicsTransform *_self_) {
  return _self_->update();
}

extern "C" QGraphicsTransform* bg_QGraphicsTransform_CONSTRUCT_QGraphicsTransformPrivate_R_QObject_X(QGraphicsTransformPrivate& p, QObject* parent) {
  return new (UseGC) BgInherit_QGraphicsTransform(p, parent);
}

extern "C" QAbstractGraphicsShapeItem* bg_QAbstractGraphicsShapeItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QAbstractGraphicsShapeItem(parent);
}

extern "C" QPen* bg_QAbstractGraphicsShapeItem_pen_(QAbstractGraphicsShapeItem *_self_) {
  return new (UseGC) QPen (_self_->pen());
}

extern "C" void bg_QAbstractGraphicsShapeItem_setPen_const_QPen_R(QAbstractGraphicsShapeItem *_self_, const QPen& pen) {
  return _self_->setPen(pen);
}

extern "C" QBrush* bg_QAbstractGraphicsShapeItem_brush_(QAbstractGraphicsShapeItem *_self_) {
  return new (UseGC) QBrush (_self_->brush());
}

extern "C" void bg_QAbstractGraphicsShapeItem_setBrush_const_QBrush_R(QAbstractGraphicsShapeItem *_self_, const QBrush& brush) {
  return _self_->setBrush(brush);
}

extern "C" bool bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(QAbstractGraphicsShapeItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QAbstractGraphicsShapeItem_opaqueArea_(QAbstractGraphicsShapeItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" QAbstractGraphicsShapeItem* bg_QAbstractGraphicsShapeItem_CONSTRUCT_QAbstractGraphicsShapeItemPrivate_R_QGraphicsItem_X(QAbstractGraphicsShapeItemPrivate& dd, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QAbstractGraphicsShapeItem(dd, parent);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsEllipseItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsEllipseItem(parent);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsEllipseItem_CONSTRUCT_const_QRectF_R_QGraphicsItem_X(const QRectF& rect, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsEllipseItem(rect, parent);
}

extern "C" QGraphicsEllipseItem* bg_QGraphicsEllipseItem_CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(qreal x, qreal y, qreal w, qreal h, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsEllipseItem(x, y, w, h, parent);
}

extern "C" QRectF* bg_QGraphicsEllipseItem_rect_(QGraphicsEllipseItem *_self_) {
  return new (UseGC) QRectF (_self_->rect());
}

extern "C" void bg_QGraphicsEllipseItem_setRect_const_QRectF_R(QGraphicsEllipseItem *_self_, const QRectF& rect) {
  return _self_->setRect(rect);
}

extern "C" void bg_QGraphicsEllipseItem_setRect_qreal_qreal_qreal_qreal(QGraphicsEllipseItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->setRect(x, y, w, h);
}

extern "C" int bg_QGraphicsEllipseItem_startAngle_(QGraphicsEllipseItem *_self_) {
  return _self_->startAngle();
}

extern "C" void bg_QGraphicsEllipseItem_setStartAngle_int(QGraphicsEllipseItem *_self_, int angle) {
  return _self_->setStartAngle(angle);
}

extern "C" int bg_QGraphicsEllipseItem_spanAngle_(QGraphicsEllipseItem *_self_) {
  return _self_->spanAngle();
}

extern "C" void bg_QGraphicsEllipseItem_setSpanAngle_int(QGraphicsEllipseItem *_self_, int angle) {
  return _self_->setSpanAngle(angle);
}

extern "C" QRectF* bg_QGraphicsEllipseItem_boundingRect_(QGraphicsEllipseItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsEllipseItem_shape_(QGraphicsEllipseItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsEllipseItem_contains_const_QPointF_R(QGraphicsEllipseItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsEllipseItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsEllipseItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsEllipseItem_opaqueArea_(QGraphicsEllipseItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsEllipseItem_type_(QGraphicsEllipseItem *_self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(QGraphicsEllipseItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" QGraphicsPathItem* bg_QGraphicsPathItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsPathItem(parent);
}

extern "C" QGraphicsPathItem* bg_QGraphicsPathItem_CONSTRUCT_const_QPainterPath_R_QGraphicsItem_X(const QPainterPath& path, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsPathItem(path, parent);
}

extern "C" QPainterPath* bg_QGraphicsPathItem_path_(QGraphicsPathItem *_self_) {
  return new (UseGC) QPainterPath (_self_->path());
}

extern "C" void bg_QGraphicsPathItem_setPath_const_QPainterPath_R(QGraphicsPathItem *_self_, const QPainterPath& path) {
  return _self_->setPath(path);
}

extern "C" QRectF* bg_QGraphicsPathItem_boundingRect_(QGraphicsPathItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsPathItem_shape_(QGraphicsPathItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsPathItem_contains_const_QPointF_R(QGraphicsPathItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsPathItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsPathItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsPathItem_opaqueArea_(QGraphicsPathItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsPathItem_type_(QGraphicsPathItem *_self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(QGraphicsPathItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" QGraphicsPolygonItem* bg_QGraphicsPolygonItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsPolygonItem(parent);
}

extern "C" QGraphicsPolygonItem* bg_QGraphicsPolygonItem_CONSTRUCT_const_QPolygonF_R_QGraphicsItem_X(const QPolygonF& polygon, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsPolygonItem(polygon, parent);
}

extern "C" QPolygonF* bg_QGraphicsPolygonItem_polygon_(QGraphicsPolygonItem *_self_) {
  return new (UseGC) QPolygonF (_self_->polygon());
}

extern "C" void bg_QGraphicsPolygonItem_setPolygon_const_QPolygonF_R(QGraphicsPolygonItem *_self_, const QPolygonF& polygon) {
  return _self_->setPolygon(polygon);
}

extern "C" Qt::FillRule bg_QGraphicsPolygonItem_fillRule_(QGraphicsPolygonItem *_self_) {
  return _self_->fillRule();
}

extern "C" void bg_QGraphicsPolygonItem_setFillRule_Qt__FillRule(QGraphicsPolygonItem *_self_, Qt::FillRule rule) {
  return _self_->setFillRule(rule);
}

extern "C" QRectF* bg_QGraphicsPolygonItem_boundingRect_(QGraphicsPolygonItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsPolygonItem_shape_(QGraphicsPolygonItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsPolygonItem_contains_const_QPointF_R(QGraphicsPolygonItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsPolygonItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsPolygonItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsPolygonItem_opaqueArea_(QGraphicsPolygonItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsPolygonItem_type_(QGraphicsPolygonItem *_self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(QGraphicsPolygonItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" QGraphicsRectItem* bg_QGraphicsRectItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsRectItem(parent);
}

extern "C" QGraphicsRectItem* bg_QGraphicsRectItem_CONSTRUCT_const_QRectF_R_QGraphicsItem_X(const QRectF& rect, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsRectItem(rect, parent);
}

extern "C" QGraphicsRectItem* bg_QGraphicsRectItem_CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(qreal x, qreal y, qreal w, qreal h, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsRectItem(x, y, w, h, parent);
}

extern "C" QRectF* bg_QGraphicsRectItem_rect_(QGraphicsRectItem *_self_) {
  return new (UseGC) QRectF (_self_->rect());
}

extern "C" void bg_QGraphicsRectItem_setRect_const_QRectF_R(QGraphicsRectItem *_self_, const QRectF& rect) {
  return _self_->setRect(rect);
}

extern "C" void bg_QGraphicsRectItem_setRect_qreal_qreal_qreal_qreal(QGraphicsRectItem *_self_, qreal x, qreal y, qreal w, qreal h) {
  return _self_->setRect(x, y, w, h);
}

extern "C" QRectF* bg_QGraphicsRectItem_boundingRect_(QGraphicsRectItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsRectItem_shape_(QGraphicsRectItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsRectItem_contains_const_QPointF_R(QGraphicsRectItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsRectItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsRectItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsRectItem_opaqueArea_(QGraphicsRectItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsRectItem_type_(QGraphicsRectItem *_self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(QGraphicsRectItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" QGraphicsSimpleTextItem* bg_QGraphicsSimpleTextItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsSimpleTextItem(parent);
}

extern "C" QGraphicsSimpleTextItem* bg_QGraphicsSimpleTextItem_CONSTRUCT_const_QString_R_QGraphicsItem_X(const CrystalString text, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsSimpleTextItem(QString::fromUtf8(text.ptr, text.size), parent);
}

extern "C" void bg_QGraphicsSimpleTextItem_setText_const_QString_R(QGraphicsSimpleTextItem *_self_, const CrystalString text) {
  return _self_->setText(QString::fromUtf8(text.ptr, text.size));
}

extern "C" CrystalString bg_QGraphicsSimpleTextItem_text_(QGraphicsSimpleTextItem *_self_) {
  return qstring_to_crystal(_self_->text());
}

extern "C" void bg_QGraphicsSimpleTextItem_setFont_const_QFont_R(QGraphicsSimpleTextItem *_self_, const QFont& font) {
  return _self_->setFont(font);
}

extern "C" QFont* bg_QGraphicsSimpleTextItem_font_(QGraphicsSimpleTextItem *_self_) {
  return new (UseGC) QFont (_self_->font());
}

extern "C" QRectF* bg_QGraphicsSimpleTextItem_boundingRect_(QGraphicsSimpleTextItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsSimpleTextItem_shape_(QGraphicsSimpleTextItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(QGraphicsSimpleTextItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsSimpleTextItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsSimpleTextItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsSimpleTextItem_opaqueArea_(QGraphicsSimpleTextItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsSimpleTextItem_type_(QGraphicsSimpleTextItem *_self_) {
  return _self_->type();
}

extern "C" bool bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(QGraphicsSimpleTextItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" QGraphicsPixmapItem* bg_QGraphicsPixmapItem_CONSTRUCT_QGraphicsItem_X(QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsPixmapItem(parent);
}

extern "C" QGraphicsPixmapItem* bg_QGraphicsPixmapItem_CONSTRUCT_const_QPixmap_R_QGraphicsItem_X(const QPixmap& pixmap, QGraphicsItem* parent) {
  return new (UseGC) BgInherit_QGraphicsPixmapItem(pixmap, parent);
}

extern "C" QPixmap* bg_QGraphicsPixmapItem_pixmap_(QGraphicsPixmapItem *_self_) {
  return new (UseGC) QPixmap (_self_->pixmap());
}

extern "C" void bg_QGraphicsPixmapItem_setPixmap_const_QPixmap_R(QGraphicsPixmapItem *_self_, const QPixmap& pixmap) {
  return _self_->setPixmap(pixmap);
}

extern "C" Qt::TransformationMode bg_QGraphicsPixmapItem_transformationMode_(QGraphicsPixmapItem *_self_) {
  return _self_->transformationMode();
}

extern "C" void bg_QGraphicsPixmapItem_setTransformationMode_Qt__TransformationMode(QGraphicsPixmapItem *_self_, Qt::TransformationMode mode) {
  return _self_->setTransformationMode(mode);
}

extern "C" QPointF* bg_QGraphicsPixmapItem_offset_(QGraphicsPixmapItem *_self_) {
  return new (UseGC) QPointF (_self_->offset());
}

extern "C" void bg_QGraphicsPixmapItem_setOffset_const_QPointF_R(QGraphicsPixmapItem *_self_, const QPointF& offset) {
  return _self_->setOffset(offset);
}

extern "C" void bg_QGraphicsPixmapItem_setOffset_qreal_qreal(QGraphicsPixmapItem *_self_, qreal x, qreal y) {
  return _self_->setOffset(x, y);
}

extern "C" QRectF* bg_QGraphicsPixmapItem_boundingRect_(QGraphicsPixmapItem *_self_) {
  return new (UseGC) QRectF (_self_->boundingRect());
}

extern "C" QPainterPath* bg_QGraphicsPixmapItem_shape_(QGraphicsPixmapItem *_self_) {
  return new (UseGC) QPainterPath (_self_->shape());
}

extern "C" bool bg_QGraphicsPixmapItem_contains_const_QPointF_R(QGraphicsPixmapItem *_self_, const QPointF& point) {
  return _self_->contains(point);
}

extern "C" void bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(QGraphicsPixmapItem *_self_, QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) {
  return _self_->paint(painter, option, widget);
}

extern "C" bool bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(QGraphicsPixmapItem *_self_, const QGraphicsItem* item) {
  return _self_->isObscuredBy(item);
}

extern "C" QPainterPath* bg_QGraphicsPixmapItem_opaqueArea_(QGraphicsPixmapItem *_self_) {
  return new (UseGC) QPainterPath (_self_->opaqueArea());
}

extern "C" int bg_QGraphicsPixmapItem_type_(QGraphicsPixmapItem *_self_) {
  return _self_->type();
}

extern "C" QGraphicsPixmapItem::ShapeMode bg_QGraphicsPixmapItem_shapeMode_(QGraphicsPixmapItem *_self_) {
  return _self_->shapeMode();
}

extern "C" void bg_QGraphicsPixmapItem_setShapeMode_QGraphicsPixmapItem__ShapeMode(QGraphicsPixmapItem *_self_, QGraphicsPixmapItem::ShapeMode mode) {
  return _self_->setShapeMode(mode);
}

extern "C" bool bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(QGraphicsPixmapItem *_self_, QGraphicsItem::Extension extension) {
  return _self_->supportsExtension(extension);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_() {
  return new (UseGC) QBrush();
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_Qt__BrushStyle(Qt::BrushStyle bs) {
  return new (UseGC) QBrush(bs);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_const_QColor_R_Qt__BrushStyle(const QColor& color, Qt::BrushStyle bs) {
  return new (UseGC) QBrush(color, bs);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_Qt__GlobalColor_Qt__BrushStyle(Qt::GlobalColor color, Qt::BrushStyle bs) {
  return new (UseGC) QBrush(color, bs);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_const_QColor_R_const_QPixmap_R(const QColor& color, const QPixmap& pixmap) {
  return new (UseGC) QBrush(color, pixmap);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_Qt__GlobalColor_const_QPixmap_R(Qt::GlobalColor color, const QPixmap& pixmap) {
  return new (UseGC) QBrush(color, pixmap);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_const_QPixmap_R(const QPixmap& pixmap) {
  return new (UseGC) QBrush(pixmap);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_const_QImage_R(const QImage& image) {
  return new (UseGC) QBrush(image);
}

extern "C" QBrush* bg_QBrush_CONSTRUCT_const_QGradient_R(const QGradient& gradient) {
  return new (UseGC) QBrush(gradient);
}

extern "C" void bg_QBrush_swap_QBrush_R(QBrush *_self_, QBrush& other) {
  return _self_->swap(other);
}

extern "C" Qt::BrushStyle bg_QBrush_style_(QBrush *_self_) {
  return _self_->style();
}

extern "C" void bg_QBrush_setStyle_Qt__BrushStyle(QBrush *_self_, Qt::BrushStyle unnamed_arg_0) {
  return _self_->setStyle(unnamed_arg_0);
}

extern "C" const QMatrix* bg_QBrush_matrix_(QBrush *_self_) {
  return new (UseGC) QMatrix (_self_->matrix());
}

extern "C" void bg_QBrush_setMatrix_const_QMatrix_R(QBrush *_self_, const QMatrix& mat) {
  return _self_->setMatrix(mat);
}

extern "C" QTransform* bg_QBrush_transform_(QBrush *_self_) {
  return new (UseGC) QTransform (_self_->transform());
}

extern "C" void bg_QBrush_setTransform_const_QTransform_R(QBrush *_self_, const QTransform& unnamed_arg_0) {
  return _self_->setTransform(unnamed_arg_0);
}

extern "C" QPixmap* bg_QBrush_texture_(QBrush *_self_) {
  return new (UseGC) QPixmap (_self_->texture());
}

extern "C" void bg_QBrush_setTexture_const_QPixmap_R(QBrush *_self_, const QPixmap& pixmap) {
  return _self_->setTexture(pixmap);
}

extern "C" QImage* bg_QBrush_textureImage_(QBrush *_self_) {
  return new (UseGC) QImage (_self_->textureImage());
}

extern "C" void bg_QBrush_setTextureImage_const_QImage_R(QBrush *_self_, const QImage& image) {
  return _self_->setTextureImage(image);
}

extern "C" const QColor* bg_QBrush_color_(QBrush *_self_) {
  return new (UseGC) QColor (_self_->color());
}

extern "C" void bg_QBrush_setColor_const_QColor_R(QBrush *_self_, const QColor& color) {
  return _self_->setColor(color);
}

extern "C" void bg_QBrush_setColor_Qt__GlobalColor(QBrush *_self_, Qt::GlobalColor color) {
  return _self_->setColor(color);
}

extern "C" const QGradient* bg_QBrush_gradient_(QBrush *_self_) {
  return _self_->gradient();
}

extern "C" bool bg_QBrush_isOpaque_(QBrush *_self_) {
  return _self_->isOpaque();
}

extern "C" bool bg_QBrush_isDetached_(QBrush *_self_) {
  return _self_->isDetached();
}

extern "C" QColor* bg_QColor_CONSTRUCT_() {
  return new (UseGC) QColor();
}

extern "C" QColor* bg_QColor_CONSTRUCT_Qt__GlobalColor(Qt::GlobalColor color) {
  return new (UseGC) QColor(color);
}

extern "C" QColor* bg_QColor_CONSTRUCT_int_int_int_int(int r, int g, int b, int a) {
  return new (UseGC) QColor(r, g, b, a);
}

extern "C" QColor* bg_QColor_CONSTRUCT_QRgba64(QRgba64& rgba64) {
  return new (UseGC) QColor(rgba64);
}

extern "C" QColor* bg_QColor_CONSTRUCT_const_QString_R(const CrystalString name) {
  return new (UseGC) QColor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" QColor* bg_QColor_CONSTRUCT_const_char_X(const char* aname) {
  return new (UseGC) QColor(aname);
}

extern "C" QColor* bg_QColor_CONSTRUCT_QLatin1String(QLatin1String& name) {
  return new (UseGC) QColor(name);
}

extern "C" QColor* bg_QColor_CONSTRUCT_QColor__Spec(QColor::Spec spec) {
  return new (UseGC) QColor(spec);
}

extern "C" bool bg_QColor_isValid_(QColor *_self_) {
  return _self_->isValid();
}

extern "C" CrystalString bg_QColor_name_(QColor *_self_) {
  return qstring_to_crystal(_self_->name());
}

extern "C" CrystalString bg_QColor_name_QColor__NameFormat(QColor *_self_, QColor::NameFormat format) {
  return qstring_to_crystal(_self_->name(format));
}

extern "C" void bg_QColor_setNamedColor_const_QString_R(QColor *_self_, const CrystalString name) {
  return _self_->setNamedColor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" void bg_QColor_setNamedColor_QLatin1String(QColor *_self_, QLatin1String& name) {
  return _self_->setNamedColor(name);
}

extern "C" QStringList* bg_QColor_colorNames_STATIC_() {
  return new (UseGC) QStringList (QColor::colorNames());
}

extern "C" QColor::Spec bg_QColor_spec_(QColor *_self_) {
  return _self_->spec();
}

extern "C" int bg_QColor_alpha_(QColor *_self_) {
  return _self_->alpha();
}

extern "C" void bg_QColor_setAlpha_int(QColor *_self_, int alpha) {
  return _self_->setAlpha(alpha);
}

extern "C" qreal bg_QColor_alphaF_(QColor *_self_) {
  return _self_->alphaF();
}

extern "C" void bg_QColor_setAlphaF_qreal(QColor *_self_, qreal alpha) {
  return _self_->setAlphaF(alpha);
}

extern "C" int bg_QColor_red_(QColor *_self_) {
  return _self_->red();
}

extern "C" int bg_QColor_green_(QColor *_self_) {
  return _self_->green();
}

extern "C" int bg_QColor_blue_(QColor *_self_) {
  return _self_->blue();
}

extern "C" void bg_QColor_setRed_int(QColor *_self_, int red) {
  return _self_->setRed(red);
}

extern "C" void bg_QColor_setGreen_int(QColor *_self_, int green) {
  return _self_->setGreen(green);
}

extern "C" void bg_QColor_setBlue_int(QColor *_self_, int blue) {
  return _self_->setBlue(blue);
}

extern "C" qreal bg_QColor_redF_(QColor *_self_) {
  return _self_->redF();
}

extern "C" qreal bg_QColor_greenF_(QColor *_self_) {
  return _self_->greenF();
}

extern "C" qreal bg_QColor_blueF_(QColor *_self_) {
  return _self_->blueF();
}

extern "C" void bg_QColor_setRedF_qreal(QColor *_self_, qreal red) {
  return _self_->setRedF(red);
}

extern "C" void bg_QColor_setGreenF_qreal(QColor *_self_, qreal green) {
  return _self_->setGreenF(green);
}

extern "C" void bg_QColor_setBlueF_qreal(QColor *_self_, qreal blue) {
  return _self_->setBlueF(blue);
}

extern "C" void bg_QColor_getRgb_int_X_int_X_int_X_int_X(QColor *_self_, int* r, int* g, int* b, int* a) {
  return _self_->getRgb(r, g, b, a);
}

extern "C" void bg_QColor_setRgb_int_int_int_int(QColor *_self_, int r, int g, int b, int a) {
  return _self_->setRgb(r, g, b, a);
}

extern "C" void bg_QColor_getRgbF_qreal_X_qreal_X_qreal_X_qreal_X(QColor *_self_, qreal* r, qreal* g, qreal* b, qreal* a) {
  return _self_->getRgbF(r, g, b, a);
}

extern "C" void bg_QColor_setRgbF_qreal_qreal_qreal_qreal(QColor *_self_, qreal r, qreal g, qreal b, qreal a) {
  return _self_->setRgbF(r, g, b, a);
}

extern "C" QRgba64* bg_QColor_rgba64_(QColor *_self_) {
  return new (UseGC) QRgba64 (_self_->rgba64());
}

extern "C" void bg_QColor_setRgba64_QRgba64(QColor *_self_, QRgba64& rgba) {
  return _self_->setRgba64(rgba);
}

extern "C" int bg_QColor_hue_(QColor *_self_) {
  return _self_->hue();
}

extern "C" int bg_QColor_saturation_(QColor *_self_) {
  return _self_->saturation();
}

extern "C" int bg_QColor_hsvHue_(QColor *_self_) {
  return _self_->hsvHue();
}

extern "C" int bg_QColor_hsvSaturation_(QColor *_self_) {
  return _self_->hsvSaturation();
}

extern "C" int bg_QColor_value_(QColor *_self_) {
  return _self_->value();
}

extern "C" qreal bg_QColor_hueF_(QColor *_self_) {
  return _self_->hueF();
}

extern "C" qreal bg_QColor_saturationF_(QColor *_self_) {
  return _self_->saturationF();
}

extern "C" qreal bg_QColor_hsvHueF_(QColor *_self_) {
  return _self_->hsvHueF();
}

extern "C" qreal bg_QColor_hsvSaturationF_(QColor *_self_) {
  return _self_->hsvSaturationF();
}

extern "C" qreal bg_QColor_valueF_(QColor *_self_) {
  return _self_->valueF();
}

extern "C" void bg_QColor_getHsv_int_X_int_X_int_X_int_X(QColor *_self_, int* h, int* s, int* v, int* a) {
  return _self_->getHsv(h, s, v, a);
}

extern "C" void bg_QColor_setHsv_int_int_int_int(QColor *_self_, int h, int s, int v, int a) {
  return _self_->setHsv(h, s, v, a);
}

extern "C" void bg_QColor_getHsvF_qreal_X_qreal_X_qreal_X_qreal_X(QColor *_self_, qreal* h, qreal* s, qreal* v, qreal* a) {
  return _self_->getHsvF(h, s, v, a);
}

extern "C" void bg_QColor_setHsvF_qreal_qreal_qreal_qreal(QColor *_self_, qreal h, qreal s, qreal v, qreal a) {
  return _self_->setHsvF(h, s, v, a);
}

extern "C" int bg_QColor_cyan_(QColor *_self_) {
  return _self_->cyan();
}

extern "C" int bg_QColor_magenta_(QColor *_self_) {
  return _self_->magenta();
}

extern "C" int bg_QColor_yellow_(QColor *_self_) {
  return _self_->yellow();
}

extern "C" int bg_QColor_black_(QColor *_self_) {
  return _self_->black();
}

extern "C" qreal bg_QColor_cyanF_(QColor *_self_) {
  return _self_->cyanF();
}

extern "C" qreal bg_QColor_magentaF_(QColor *_self_) {
  return _self_->magentaF();
}

extern "C" qreal bg_QColor_yellowF_(QColor *_self_) {
  return _self_->yellowF();
}

extern "C" qreal bg_QColor_blackF_(QColor *_self_) {
  return _self_->blackF();
}

extern "C" void bg_QColor_getCmyk_int_X_int_X_int_X_int_X_int_X(QColor *_self_, int* c, int* m, int* y, int* k, int* a) {
  return _self_->getCmyk(c, m, y, k, a);
}

extern "C" void bg_QColor_setCmyk_int_int_int_int_int(QColor *_self_, int c, int m, int y, int k, int a) {
  return _self_->setCmyk(c, m, y, k, a);
}

extern "C" void bg_QColor_getCmykF_qreal_X_qreal_X_qreal_X_qreal_X_qreal_X(QColor *_self_, qreal* c, qreal* m, qreal* y, qreal* k, qreal* a) {
  return _self_->getCmykF(c, m, y, k, a);
}

extern "C" void bg_QColor_setCmykF_qreal_qreal_qreal_qreal_qreal(QColor *_self_, qreal c, qreal m, qreal y, qreal k, qreal a) {
  return _self_->setCmykF(c, m, y, k, a);
}

extern "C" int bg_QColor_hslHue_(QColor *_self_) {
  return _self_->hslHue();
}

extern "C" int bg_QColor_hslSaturation_(QColor *_self_) {
  return _self_->hslSaturation();
}

extern "C" int bg_QColor_lightness_(QColor *_self_) {
  return _self_->lightness();
}

extern "C" qreal bg_QColor_hslHueF_(QColor *_self_) {
  return _self_->hslHueF();
}

extern "C" qreal bg_QColor_hslSaturationF_(QColor *_self_) {
  return _self_->hslSaturationF();
}

extern "C" qreal bg_QColor_lightnessF_(QColor *_self_) {
  return _self_->lightnessF();
}

extern "C" void bg_QColor_getHsl_int_X_int_X_int_X_int_X(QColor *_self_, int* h, int* s, int* l, int* a) {
  return _self_->getHsl(h, s, l, a);
}

extern "C" void bg_QColor_setHsl_int_int_int_int(QColor *_self_, int h, int s, int l, int a) {
  return _self_->setHsl(h, s, l, a);
}

extern "C" void bg_QColor_getHslF_qreal_X_qreal_X_qreal_X_qreal_X(QColor *_self_, qreal* h, qreal* s, qreal* l, qreal* a) {
  return _self_->getHslF(h, s, l, a);
}

extern "C" void bg_QColor_setHslF_qreal_qreal_qreal_qreal(QColor *_self_, qreal h, qreal s, qreal l, qreal a) {
  return _self_->setHslF(h, s, l, a);
}

extern "C" QColor* bg_QColor_toRgb_(QColor *_self_) {
  return new (UseGC) QColor (_self_->toRgb());
}

extern "C" QColor* bg_QColor_toHsv_(QColor *_self_) {
  return new (UseGC) QColor (_self_->toHsv());
}

extern "C" QColor* bg_QColor_toCmyk_(QColor *_self_) {
  return new (UseGC) QColor (_self_->toCmyk());
}

extern "C" QColor* bg_QColor_toHsl_(QColor *_self_) {
  return new (UseGC) QColor (_self_->toHsl());
}

extern "C" QColor* bg_QColor_convertTo_QColor__Spec(QColor *_self_, QColor::Spec colorSpec) {
  return new (UseGC) QColor (_self_->convertTo(colorSpec));
}

extern "C" QColor* bg_QColor_fromRgb_STATIC_int_int_int_int(int r, int g, int b, int a) {
  return new (UseGC) QColor (QColor::fromRgb(r, g, b, a));
}

extern "C" QColor* bg_QColor_fromRgbF_STATIC_qreal_qreal_qreal_qreal(qreal r, qreal g, qreal b, qreal a) {
  return new (UseGC) QColor (QColor::fromRgbF(r, g, b, a));
}

extern "C" QColor* bg_QColor_fromRgba64_STATIC_ushort_ushort_ushort_ushort(ushort r, ushort g, ushort b, ushort a) {
  return new (UseGC) QColor (QColor::fromRgba64(r, g, b, a));
}

extern "C" QColor* bg_QColor_fromRgba64_STATIC_QRgba64(QRgba64& rgba) {
  return new (UseGC) QColor (QColor::fromRgba64(rgba));
}

extern "C" QColor* bg_QColor_fromHsv_STATIC_int_int_int_int(int h, int s, int v, int a) {
  return new (UseGC) QColor (QColor::fromHsv(h, s, v, a));
}

extern "C" QColor* bg_QColor_fromHsvF_STATIC_qreal_qreal_qreal_qreal(qreal h, qreal s, qreal v, qreal a) {
  return new (UseGC) QColor (QColor::fromHsvF(h, s, v, a));
}

extern "C" QColor* bg_QColor_fromCmyk_STATIC_int_int_int_int_int(int c, int m, int y, int k, int a) {
  return new (UseGC) QColor (QColor::fromCmyk(c, m, y, k, a));
}

extern "C" QColor* bg_QColor_fromCmykF_STATIC_qreal_qreal_qreal_qreal_qreal(qreal c, qreal m, qreal y, qreal k, qreal a) {
  return new (UseGC) QColor (QColor::fromCmykF(c, m, y, k, a));
}

extern "C" QColor* bg_QColor_fromHsl_STATIC_int_int_int_int(int h, int s, int l, int a) {
  return new (UseGC) QColor (QColor::fromHsl(h, s, l, a));
}

extern "C" QColor* bg_QColor_fromHslF_STATIC_qreal_qreal_qreal_qreal(qreal h, qreal s, qreal l, qreal a) {
  return new (UseGC) QColor (QColor::fromHslF(h, s, l, a));
}

extern "C" QColor* bg_QColor_light_int(QColor *_self_, int f) {
  return new (UseGC) QColor (_self_->light(f));
}

extern "C" QColor* bg_QColor_lighter_int(QColor *_self_, int f) {
  return new (UseGC) QColor (_self_->lighter(f));
}

extern "C" QColor* bg_QColor_dark_int(QColor *_self_, int f) {
  return new (UseGC) QColor (_self_->dark(f));
}

extern "C" QColor* bg_QColor_darker_int(QColor *_self_, int f) {
  return new (UseGC) QColor (_self_->darker(f));
}

extern "C" bool bg_QColor_isValidColor_STATIC_const_QString_R(const CrystalString name) {
  return QColor::isValidColor(QString::fromUtf8(name.ptr, name.size));
}

extern "C" bool bg_QColor_isValidColor_STATIC_QLatin1String(QLatin1String& unnamed_arg_0) {
  return QColor::isValidColor(unnamed_arg_0);
}

extern "C" QList_QString* bg_QList_QString_CONSTRUCT_() {
  return new (UseGC) QList_QString();
}

extern "C" CrystalString bg_QList_QString_at_int(QList_QString *_self_, int index) {
  return qstring_to_crystal(_self_->at(index));
}

extern "C" void bg_QList_QString_push_back_QString(QList_QString *_self_, CrystalString value) {
  return _self_->push_back(QString::fromUtf8(value.ptr, value.size));
}

extern "C" int bg_QList_QString_size_(QList_QString *_self_) {
  return _self_->size();
}

extern "C" QList_QObject_X* bg_QList_QObject_X_CONSTRUCT_() {
  return new (UseGC) QList_QObject_X();
}

extern "C" QObject* bg_QList_QObject_X_at_int(QList_QObject_X *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QObject_X_push_back_QObject_X(QList_QObject_X *_self_, QObject* value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QObject_X_size_(QList_QObject_X *_self_) {
  return _self_->size();
}

extern "C" QList_QWidget_X* bg_QList_QWidget_X_CONSTRUCT_() {
  return new (UseGC) QList_QWidget_X();
}

extern "C" QWidget* bg_QList_QWidget_X_at_int(QList_QWidget_X *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QWidget_X_push_back_QWidget_X(QList_QWidget_X *_self_, QWidget* value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QWidget_X_size_(QList_QWidget_X *_self_) {
  return _self_->size();
}

extern "C" QList_QAction_X* bg_QList_QAction_X_CONSTRUCT_() {
  return new (UseGC) QList_QAction_X();
}

extern "C" QAction* bg_QList_QAction_X_at_int(QList_QAction_X *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QAction_X_push_back_QAction_X(QList_QAction_X *_self_, QAction* value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QAction_X_size_(QList_QAction_X *_self_) {
  return _self_->size();
}

extern "C" QList_QUrl* bg_QList_QUrl_CONSTRUCT_() {
  return new (UseGC) QList_QUrl();
}

extern "C" QUrl* bg_QList_QUrl_at_int(QList_QUrl *_self_, int index) {
  return new (UseGC) QUrl (_self_->at(index));
}

extern "C" void bg_QList_QUrl_push_back_QUrl(QList_QUrl *_self_, QUrl& value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QUrl_size_(QList_QUrl *_self_) {
  return _self_->size();
}

extern "C" QList_QGraphicsItem_X* bg_QList_QGraphicsItem_X_CONSTRUCT_() {
  return new (UseGC) QList_QGraphicsItem_X();
}

extern "C" QGraphicsItem* bg_QList_QGraphicsItem_X_at_int(QList_QGraphicsItem_X *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QGraphicsItem_X_push_back_QGraphicsItem_X(QList_QGraphicsItem_X *_self_, QGraphicsItem* value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QGraphicsItem_X_size_(QList_QGraphicsItem_X *_self_) {
  return _self_->size();
}

extern "C" QList_QGraphicsWidget_X* bg_QList_QGraphicsWidget_X_CONSTRUCT_() {
  return new (UseGC) QList_QGraphicsWidget_X();
}

extern "C" QGraphicsWidget* bg_QList_QGraphicsWidget_X_at_int(QList_QGraphicsWidget_X *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QGraphicsWidget_X_push_back_QGraphicsWidget_X(QList_QGraphicsWidget_X *_self_, QGraphicsWidget* value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QGraphicsWidget_X_size_(QList_QGraphicsWidget_X *_self_) {
  return _self_->size();
}

extern "C" QList_QGraphicsTransform_X* bg_QList_QGraphicsTransform_X_CONSTRUCT_() {
  return new (UseGC) QList_QGraphicsTransform_X();
}

extern "C" QGraphicsTransform* bg_QList_QGraphicsTransform_X_at_int(QList_QGraphicsTransform_X *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QGraphicsTransform_X_push_back_QGraphicsTransform_X(QList_QGraphicsTransform_X *_self_, QGraphicsTransform* value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QGraphicsTransform_X_size_(QList_QGraphicsTransform_X *_self_) {
  return _self_->size();
}

extern "C" QList_QGraphicsView_X* bg_QList_QGraphicsView_X_CONSTRUCT_() {
  return new (UseGC) QList_QGraphicsView_X();
}

extern "C" QGraphicsView* bg_QList_QGraphicsView_X_at_int(QList_QGraphicsView_X *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QGraphicsView_X_push_back_QGraphicsView_X(QList_QGraphicsView_X *_self_, QGraphicsView* value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QGraphicsView_X_size_(QList_QGraphicsView_X *_self_) {
  return _self_->size();
}

extern "C" QList_QAbstractEventDispatcher__TimerInfo* bg_QList_QAbstractEventDispatcher__TimerInfo_CONSTRUCT_() {
  return new (UseGC) QList_QAbstractEventDispatcher__TimerInfo();
}

extern "C" QAbstractEventDispatcher::TimerInfo bg_QList_QAbstractEventDispatcher__TimerInfo_at_int(QList_QAbstractEventDispatcher__TimerInfo *_self_, int index) {
  return _self_->at(index);
}

extern "C" void bg_QList_QAbstractEventDispatcher__TimerInfo_push_back_QAbstractEventDispatcher__TimerInfo(QList_QAbstractEventDispatcher__TimerInfo *_self_, QAbstractEventDispatcher::TimerInfo value) {
  return _self_->push_back(value);
}

extern "C" int bg_QList_QAbstractEventDispatcher__TimerInfo_size_(QList_QAbstractEventDispatcher__TimerInfo *_self_) {
  return _self_->size();
}

