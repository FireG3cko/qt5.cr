module Qt
  
  # Native bindings.  Mostly generated.
  lib Binding
    # Container for string data.
    struct CrystalString
      ptr : LibC::Char*
      size : LibC::Int
    end
  
    # Container for a `Proc`
    struct CrystalProc
      ptr : Void*
      context : Void*
    end
  
    # Container for raw memory-data.  The `ptr` could be anything.
    struct CrystalSlice
      ptr : Void*
      size : LibC::Int
    end
  end
  
  # Helpers for bindings.  Required.
  module BindgenHelper
    # Wraps `Proc` to a `Binding::CrystalProc`, which can then passed on to C++.
    def self.wrap_proc(proc : Proc)
      Binding::CrystalProc.new(
        ptr: proc.pointer,
        context: proc.closure_data,
      )
    end
  
    # Wraps `Proc` to a `Binding::CrystalProc`, which can then passed on to C++.
    # `Nil` version, returns a null-proc.
    def self.wrap_proc(nothing : Nil)
      Binding::CrystalProc.new(
        ptr: Pointer(Void).null,
        context: Pointer(Void).null,
      )
    end
  
    # Wraps a *list* into a container *wrapper*, if it's not already one.
    macro wrap_container(wrapper, list)
      if {{ list }}.is_a?({{ wrapper }})
        {{ list }}
      else
        {{wrapper}}.new.concat({{ list }})
      end
    end
  
    # Wrapper for an instantiated, sequential container type.
    #
    # This offers (almost) all read-only methods known from `Array`.
    # Additionally, there's `#<<`.  Other than that, the container type is not
    # meant to be used for storage, but for data transmission between the C++
    # and the Crystal world.  Don't let that discourage you though.
    abstract class SequentialContainer(T)
      include Indexable(T)
  
      # `#unsafe_at` and `#size` will be implemented by the wrapper class.
  
      # Adds an element at the end.  Implemented by the wrapper.
      abstract def push(value)
  
      # Adds *element* at the end of the container.
      def <<(value : T) : self
        push(value)
        self
      end
  
      # Adds all *elements* at the end of the container, retaining their order.
      def concat(values : Enumerable(T)) : self
        values.each{|v| push(v)}
        self
      end
  
      def to_s(io)
        to_a.to_s(io)
      end
  
      def inspect(io)
        io << "<Wrapped "
        to_a.inspect(io)
        io << ">"
      end
    end
  end
  
  @[Link(ldflags: "#{__DIR__}/../../ext/binding.a -lstdc++ -lQt5Core -lQt5Gui -lQt5Widgets")]
  lib Binding
    alias QList_QString = Void
    alias QString = Void
    alias QList_QObject_X = Void
    alias QObject = Void
    alias QList_QWidget_X = Void
    alias QWidget = Void
    alias QList_QAction_X = Void
    alias QAction = Void
    alias QList_QUrl = Void
    alias QUrl = Void
    alias QList_QAbstractEventDispatcher__TimerInfo = Void
    alias QMetaObject = Void
    alias QEvent = Void
    alias QThread = Void
    alias QMetaMethod = Void
    alias QObjectUserData = Void
    alias QTimerEvent = Void
    alias QChildEvent = Void
    alias QObjectPrivate = Void
    alias QAbstractEventDispatcher = Void
    alias QSocketNotifier = Void
    alias QAbstractNativeEventFilter = Void
    alias QByteArray = Void
    alias QAbstractEventDispatcherPrivate = Void
    alias QStyle = Void
    alias QRect = Void
    alias QSize = Void
    alias QRegion = Void
    alias QPalette = Void
    alias QFont = Void
    alias QFontMetrics = Void
    alias QFontInfo = Void
    alias QCursor = Void
    alias QBitmap = Void
    alias QPaintDevice = Void
    alias QPainter = Void
    alias QPixmap = Void
    alias QGraphicsEffect = Void
    alias QIcon = Void
    alias QLocale = Void
    alias QKeySequence = Void
    alias QGraphicsProxyWidget = Void
    alias QMargins = Void
    alias QLayout = Void
    alias QPaintEngine = Void
    alias QBackingStore = Void
    alias QWindow = Void
    alias QMouseEvent = Void
    alias QWheelEvent = Void
    alias QKeyEvent = Void
    alias QFocusEvent = Void
    alias QPaintEvent = Void
    alias QMoveEvent = Void
    alias QResizeEvent = Void
    alias QCloseEvent = Void
    alias QContextMenuEvent = Void
    alias QTabletEvent = Void
    alias QActionEvent = Void
    alias QDragEnterEvent = Void
    alias QDragMoveEvent = Void
    alias QDragLeaveEvent = Void
    alias QDropEvent = Void
    alias QShowEvent = Void
    alias QHideEvent = Void
    alias QInputMethodEvent = Void
    alias QWidgetPrivate = Void
    alias QAbstractButton = Void
    alias QButtonGroup = Void
    alias QAbstractButtonPrivate = Void
    alias QFrame = Void
    alias QFramePrivate = Void
    alias QStyleOptionFrame = Void
    alias QAbstractScrollArea = Void
    alias QScrollBar = Void
    alias QWidgetList = Void
    alias QAbstractScrollAreaPrivate = Void
    alias QScrollArea = Void
    alias QScrollAreaPrivate = Void
    alias QMenuBar = Void
    alias QMenu = Void
    alias QPlatformMenuBar = Void
    alias QStyleOptionMenuItem = Void
    alias QPlatformMenu = Void
    alias QMenuPrivate = Void
    alias QActionGroup = Void
    alias QActionPrivate = Void
    alias QMainWindow = Void
    alias QStatusBar = Void
    alias QToolBar = Void
    alias QDockWidget = Void
    alias QDialog = Void
    alias QDialogPrivate = Void
    alias QLabel = Void
    alias QPicture = Void
    alias QMovie = Void
    alias QLCDNumber = Void
    alias QPushButton = Void
    alias QStyleOptionButton = Void
    alias QPushButtonPrivate = Void
    alias QCheckBox = Void
    alias QCoreApplication = Void
    alias QStringList = Void
    alias QTranslator = Void
    alias QPostEventList = Void
    alias QCoreApplicationPrivate = Void
    alias QGuiApplication = Void
    alias QWindowList = Void
    alias QScreen = Void
    alias QClipboard = Void
    alias QStyleHints = Void
    alias QInputMethod = Void
    alias QPlatformNativeInterface = Void
    alias QSessionManager = Void
    alias QGuiApplicationPrivate = Void
    alias QApplication = Void
    alias QDesktopWidget = Void
    alias QImage = Void
    alias QColor = Void
    alias QMatrix = Void
    alias QTransform = Void
    alias QIODevice = Void
    alias QPlatformPixmap = Void
    alias QImageReader = Void
    alias QEventLoop = Void
    alias QTabWidget = Void
    alias QTabBar = Void
    alias QStyleOptionTabWidgetFrame = Void
    alias QLayoutItem = Void
    alias QSpacerItem = Void
    alias QLayoutPrivate = Void
    alias QBoxLayout = Void
    alias QHBoxLayout = Void
    alias QVBoxLayout = Void
    alias QLineEdit = Void
    alias QValidator = Void
    alias QCompleter = Void
    alias QTextEdit = Void
    alias QTextDocument = Void
    alias QTextCursor = Void
    alias QTextCharFormat = Void
    alias QRegExp = Void
    alias QPagedPaintDevice = Void
    alias QMimeData = Void
    alias QTextEditPrivate = Void
    alias QFileDialog = Void
    alias QDir = Void
    alias QAbstractItemDelegate = Void
    alias QFileIconProvider = Void
    alias QAbstractProxyModel = Void
    alias QFileDialogArgs = Void
    alias QTextOption = Void
    alias QAbstractTextDocumentLayout = Void
    alias QChar = Void
    alias QRegularExpression = Void
    alias QTextFrame = Void
    alias QTextObject = Void
    alias QTextFormat = Void
    alias QTextBlock = Void
    alias QSizeF = Void
    alias QRectF = Void
    alias QAbstractUndoItem = Void
    alias QTextDocumentPrivate = Void
    alias QTextCursorPrivate = Void
    alias QTextDocumentFragment = Void
    alias QTextBlockFormat = Void
    alias QTextList = Void
    alias QTextListFormat = Void
    alias QTextTable = Void
    alias QTextTableFormat = Void
    alias QTextFrameFormat = Void
    alias QTextImageFormat = Void
    alias QFileInfoList = Void
    alias QDirPrivate = Void
    struct EventDispatcherTimerInfo
      timer_id : Int32
      interval : Int32
      timer_type : TimerType
    end
    struct QPoint
      xp : Int32
      yp : Int32
    end

    struct BgTableQObject
      bg_QObject_metaObject_ : CrystalProc
      bg_QObject_qt_metacast_const_char_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QObject_JUMPTABLE(self : QObject*, table : BgTableQObject*) : Void
    struct BgTableQAbstractEventDispatcher
      bg_QAbstractEventDispatcher_metaObject_ : CrystalProc
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags : CrystalProc
      bg_QAbstractEventDispatcher_hasPendingEvents_ : CrystalProc
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X : CrystalProc
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X : CrystalProc
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_unregisterTimer_int : CrystalProc
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_remainingTime_int : CrystalProc
      bg_QAbstractEventDispatcher_wakeUp_ : CrystalProc
      bg_QAbstractEventDispatcher_interrupt_ : CrystalProc
      bg_QAbstractEventDispatcher_flush_ : CrystalProc
      bg_QAbstractEventDispatcher_startingUp_ : CrystalProc
      bg_QAbstractEventDispatcher_closingDown_ : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractEventDispatcher_JUMPTABLE(self : QAbstractEventDispatcher*, table : BgTableQAbstractEventDispatcher*) : Void
    struct BgTableQWidget
      bg_QWidget_metaObject_ : CrystalProc
      bg_QWidget_qt_metacast_const_char_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QWidget_JUMPTABLE(self : QWidget*, table : BgTableQWidget*) : Void
    struct BgTableQAbstractButton
      bg_QAbstractButton_metaObject_ : CrystalProc
      bg_QAbstractButton_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractButton_hitButton_const_QPoint_R : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_event_QEvent_X : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractButton_JUMPTABLE(self : QAbstractButton*, table : BgTableQAbstractButton*) : Void
    struct BgTableQFrame
      bg_QFrame_metaObject_ : CrystalProc
      bg_QFrame_qt_metacast_const_char_X : CrystalProc
      bg_QFrame_sizeHint_ : CrystalProc
      bg_QFrame_event_QEvent_X : CrystalProc
      bg_QFrame_paintEvent_QPaintEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QFrame_JUMPTABLE(self : QFrame*, table : BgTableQFrame*) : Void
    struct BgTableQAbstractScrollArea
      bg_QAbstractScrollArea_metaObject_ : CrystalProc
      bg_QAbstractScrollArea_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_sizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_event_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractScrollArea_scrollContentsBy_int_int : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractScrollArea_JUMPTABLE(self : QAbstractScrollArea*, table : BgTableQAbstractScrollArea*) : Void
    struct BgTableQScrollArea
      bg_QScrollArea_metaObject_ : CrystalProc
      bg_QScrollArea_qt_metacast_const_char_X : CrystalProc
      bg_QScrollArea_sizeHint_ : CrystalProc
      bg_QScrollArea_focusNextPrevChild_bool : CrystalProc
      bg_QScrollArea_event_QEvent_X : CrystalProc
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QScrollArea_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QScrollArea_scrollContentsBy_int_int : CrystalProc
      bg_QScrollArea_viewportSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QScrollArea_JUMPTABLE(self : QScrollArea*, table : BgTableQScrollArea*) : Void
    struct BgTableQMenuBar
      bg_QMenuBar_metaObject_ : CrystalProc
      bg_QMenuBar_qt_metacast_const_char_X : CrystalProc
      bg_QMenuBar_sizeHint_ : CrystalProc
      bg_QMenuBar_minimumSizeHint_ : CrystalProc
      bg_QMenuBar_heightForWidth_int : CrystalProc
      bg_QMenuBar_setVisible_bool : CrystalProc
      bg_QMenuBar_changeEvent_QEvent_X : CrystalProc
      bg_QMenuBar_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_leaveEvent_QEvent_X : CrystalProc
      bg_QMenuBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QMenuBar_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QMenuBar_actionEvent_QActionEvent_X : CrystalProc
      bg_QMenuBar_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QMenuBar_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QMenuBar_timerEvent_QTimerEvent_X : CrystalProc
      bg_QMenuBar_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QMenuBar_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QMenuBar_JUMPTABLE(self : QMenuBar*, table : BgTableQMenuBar*) : Void
    struct BgTableQMenu
      bg_QMenu_metaObject_ : CrystalProc
      bg_QMenu_qt_metacast_const_char_X : CrystalProc
      bg_QMenu_sizeHint_ : CrystalProc
      bg_QMenu_changeEvent_QEvent_X : CrystalProc
      bg_QMenu_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QMenu_enterEvent_QEvent_X : CrystalProc
      bg_QMenu_leaveEvent_QEvent_X : CrystalProc
      bg_QMenu_hideEvent_QHideEvent_X : CrystalProc
      bg_QMenu_paintEvent_QPaintEvent_X : CrystalProc
      bg_QMenu_actionEvent_QActionEvent_X : CrystalProc
      bg_QMenu_timerEvent_QTimerEvent_X : CrystalProc
      bg_QMenu_event_QEvent_X : CrystalProc
      bg_QMenu_focusNextPrevChild_bool : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QMenu_JUMPTABLE(self : QMenu*, table : BgTableQMenu*) : Void
    struct BgTableQAction
      bg_QAction_metaObject_ : CrystalProc
      bg_QAction_qt_metacast_const_char_X : CrystalProc
      bg_QAction_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAction_JUMPTABLE(self : QAction*, table : BgTableQAction*) : Void
    struct BgTableQMainWindow
      bg_QMainWindow_metaObject_ : CrystalProc
      bg_QMainWindow_qt_metacast_const_char_X : CrystalProc
      bg_QMainWindow_createPopupMenu_ : CrystalProc
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QMainWindow_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QMainWindow_JUMPTABLE(self : QMainWindow*, table : BgTableQMainWindow*) : Void
    struct BgTableQDialog
      bg_QDialog_metaObject_ : CrystalProc
      bg_QDialog_qt_metacast_const_char_X : CrystalProc
      bg_QDialog_setVisible_bool : CrystalProc
      bg_QDialog_sizeHint_ : CrystalProc
      bg_QDialog_minimumSizeHint_ : CrystalProc
      bg_QDialog_open_ : CrystalProc
      bg_QDialog_exec_ : CrystalProc
      bg_QDialog_done_int : CrystalProc
      bg_QDialog_accept_ : CrystalProc
      bg_QDialog_reject_ : CrystalProc
      bg_QDialog_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QDialog_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDialog_showEvent_QShowEvent_X : CrystalProc
      bg_QDialog_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QDialog_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QDialog_JUMPTABLE(self : QDialog*, table : BgTableQDialog*) : Void
    struct BgTableQLabel
      bg_QLabel_metaObject_ : CrystalProc
      bg_QLabel_qt_metacast_const_char_X : CrystalProc
      bg_QLabel_sizeHint_ : CrystalProc
      bg_QLabel_minimumSizeHint_ : CrystalProc
      bg_QLabel_heightForWidth_int : CrystalProc
      bg_QLabel_event_QEvent_X : CrystalProc
      bg_QLabel_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QLabel_paintEvent_QPaintEvent_X : CrystalProc
      bg_QLabel_changeEvent_QEvent_X : CrystalProc
      bg_QLabel_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QLabel_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QLabel_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QLabel_focusNextPrevChild_bool : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QLabel_JUMPTABLE(self : QLabel*, table : BgTableQLabel*) : Void
    struct BgTableQLCDNumber
      bg_QLCDNumber_metaObject_ : CrystalProc
      bg_QLCDNumber_qt_metacast_const_char_X : CrystalProc
      bg_QLCDNumber_sizeHint_ : CrystalProc
      bg_QLCDNumber_event_QEvent_X : CrystalProc
      bg_QLCDNumber_paintEvent_QPaintEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QLCDNumber_JUMPTABLE(self : QLCDNumber*, table : BgTableQLCDNumber*) : Void
    struct BgTableQPushButton
      bg_QPushButton_metaObject_ : CrystalProc
      bg_QPushButton_qt_metacast_const_char_X : CrystalProc
      bg_QPushButton_sizeHint_ : CrystalProc
      bg_QPushButton_minimumSizeHint_ : CrystalProc
      bg_QPushButton_event_QEvent_X : CrystalProc
      bg_QPushButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QPushButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QPushButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QPushButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_hitButton_const_QPoint_R : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QPushButton_JUMPTABLE(self : QPushButton*, table : BgTableQPushButton*) : Void
    struct BgTableQCheckBox
      bg_QCheckBox_metaObject_ : CrystalProc
      bg_QCheckBox_qt_metacast_const_char_X : CrystalProc
      bg_QCheckBox_sizeHint_ : CrystalProc
      bg_QCheckBox_minimumSizeHint_ : CrystalProc
      bg_QCheckBox_event_QEvent_X : CrystalProc
      bg_QCheckBox_hitButton_const_QPoint_R : CrystalProc
      bg_QCheckBox_checkStateSet_ : CrystalProc
      bg_QCheckBox_nextCheckState_ : CrystalProc
      bg_QCheckBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QCheckBox_JUMPTABLE(self : QCheckBox*, table : BgTableQCheckBox*) : Void
    struct BgTableQCoreApplication
      bg_QCoreApplication_metaObject_ : CrystalProc
      bg_QCoreApplication_qt_metacast_const_char_X : CrystalProc
      bg_QCoreApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QCoreApplication_event_QEvent_X : CrystalProc
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QCoreApplication_JUMPTABLE(self : QCoreApplication*, table : BgTableQCoreApplication*) : Void
    struct BgTableQGuiApplication
      bg_QGuiApplication_metaObject_ : CrystalProc
      bg_QGuiApplication_qt_metacast_const_char_X : CrystalProc
      bg_QGuiApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QGuiApplication_event_QEvent_X : CrystalProc
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QGuiApplication_JUMPTABLE(self : QGuiApplication*, table : BgTableQGuiApplication*) : Void
    struct BgTableQApplication
      bg_QApplication_metaObject_ : CrystalProc
      bg_QApplication_qt_metacast_const_char_X : CrystalProc
      bg_QApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QApplication_event_QEvent_X : CrystalProc
      bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QApplication_JUMPTABLE(self : QApplication*, table : BgTableQApplication*) : Void
    struct BgTableQEventLoop
      bg_QEventLoop_metaObject_ : CrystalProc
      bg_QEventLoop_qt_metacast_const_char_X : CrystalProc
      bg_QEventLoop_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QEventLoop_JUMPTABLE(self : QEventLoop*, table : BgTableQEventLoop*) : Void
    struct BgTableQTabWidget
      bg_QTabWidget_metaObject_ : CrystalProc
      bg_QTabWidget_qt_metacast_const_char_X : CrystalProc
      bg_QTabWidget_sizeHint_ : CrystalProc
      bg_QTabWidget_minimumSizeHint_ : CrystalProc
      bg_QTabWidget_heightForWidth_int : CrystalProc
      bg_QTabWidget_hasHeightForWidth_ : CrystalProc
      bg_QTabWidget_tabInserted_int : CrystalProc
      bg_QTabWidget_tabRemoved_int : CrystalProc
      bg_QTabWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QTabWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTabWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTabWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTabWidget_changeEvent_QEvent_X : CrystalProc
      bg_QTabWidget_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QTabWidget_JUMPTABLE(self : QTabWidget*, table : BgTableQTabWidget*) : Void
    struct BgTableQLayoutItem
      bg_QLayoutItem_sizeHint_ : CrystalProc
      bg_QLayoutItem_minimumSize_ : CrystalProc
      bg_QLayoutItem_maximumSize_ : CrystalProc
      bg_QLayoutItem_expandingDirections_ : CrystalProc
      bg_QLayoutItem_setGeometry_const_QRect_R : CrystalProc
      bg_QLayoutItem_geometry_ : CrystalProc
      bg_QLayoutItem_isEmpty_ : CrystalProc
      bg_QLayoutItem_hasHeightForWidth_ : CrystalProc
      bg_QLayoutItem_heightForWidth_int : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_invalidate_ : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_layout_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QLayoutItem_JUMPTABLE(self : QLayoutItem*, table : BgTableQLayoutItem*) : Void
    struct BgTableQLayout
      bg_QLayout_metaObject_ : CrystalProc
      bg_QLayout_qt_metacast_const_char_X : CrystalProc
      bg_QLayout_invalidate_ : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QLayout_expandingDirections_ : CrystalProc
      bg_QLayout_minimumSize_ : CrystalProc
      bg_QLayout_maximumSize_ : CrystalProc
      bg_QLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_itemAt_int : CrystalProc
      bg_QLayout_takeAt_int : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_count_ : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_sizeHint_ : CrystalProc
      bg_QLayoutItem_hasHeightForWidth_ : CrystalProc
      bg_QLayoutItem_heightForWidth_int : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QLayout_JUMPTABLE(self : QLayout*, table : BgTableQLayout*) : Void
    struct BgTableQBoxLayout
      bg_QBoxLayout_metaObject_ : CrystalProc
      bg_QBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QBoxLayout_JUMPTABLE(self : QBoxLayout*, table : BgTableQBoxLayout*) : Void
    struct BgTableQHBoxLayout
      bg_QHBoxLayout_metaObject_ : CrystalProc
      bg_QHBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QHBoxLayout_JUMPTABLE(self : QHBoxLayout*, table : BgTableQHBoxLayout*) : Void
    struct BgTableQVBoxLayout
      bg_QVBoxLayout_metaObject_ : CrystalProc
      bg_QVBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QVBoxLayout_JUMPTABLE(self : QVBoxLayout*, table : BgTableQVBoxLayout*) : Void
    struct BgTableQLineEdit
      bg_QLineEdit_metaObject_ : CrystalProc
      bg_QLineEdit_qt_metacast_const_char_X : CrystalProc
      bg_QLineEdit_sizeHint_ : CrystalProc
      bg_QLineEdit_minimumSizeHint_ : CrystalProc
      bg_QLineEdit_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QLineEdit_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QLineEdit_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QLineEdit_paintEvent_QPaintEvent_X : CrystalProc
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QLineEdit_dropEvent_QDropEvent_X : CrystalProc
      bg_QLineEdit_changeEvent_QEvent_X : CrystalProc
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QLineEdit_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QLineEdit_JUMPTABLE(self : QLineEdit*, table : BgTableQLineEdit*) : Void
    struct BgTableQTextEdit
      bg_QTextEdit_metaObject_ : CrystalProc
      bg_QTextEdit_qt_metacast_const_char_X : CrystalProc
      bg_QTextEdit_event_QEvent_X : CrystalProc
      bg_QTextEdit_timerEvent_QTimerEvent_X : CrystalProc
      bg_QTextEdit_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QTextEdit_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTextEdit_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTextEdit_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_focusNextPrevChild_bool : CrystalProc
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QTextEdit_dropEvent_QDropEvent_X : CrystalProc
      bg_QTextEdit_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QTextEdit_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QTextEdit_showEvent_QShowEvent_X : CrystalProc
      bg_QTextEdit_changeEvent_QEvent_X : CrystalProc
      bg_QTextEdit_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QTextEdit_createMimeDataFromSelection_ : CrystalProc
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X : CrystalProc
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X : CrystalProc
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QTextEdit_scrollContentsBy_int_int : CrystalProc
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_sizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QTextEdit_JUMPTABLE(self : QTextEdit*, table : BgTableQTextEdit*) : Void
    struct BgTableQFileDialog
      bg_QFileDialog_metaObject_ : CrystalProc
      bg_QFileDialog_qt_metacast_const_char_X : CrystalProc
      bg_QFileDialog_setVisible_bool : CrystalProc
      bg_QFileDialog_done_int : CrystalProc
      bg_QFileDialog_accept_ : CrystalProc
      bg_QFileDialog_changeEvent_QEvent_X : CrystalProc
      bg_QDialog_sizeHint_ : CrystalProc
      bg_QDialog_minimumSizeHint_ : CrystalProc
      bg_QDialog_open_ : CrystalProc
      bg_QDialog_exec_ : CrystalProc
      bg_QDialog_reject_ : CrystalProc
      bg_QDialog_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QDialog_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDialog_showEvent_QShowEvent_X : CrystalProc
      bg_QDialog_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QDialog_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_redirected_QPoint_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QFileDialog_JUMPTABLE(self : QFileDialog*, table : BgTableQFileDialog*) : Void
    struct BgTableQTextDocument
      bg_QTextDocument_metaObject_ : CrystalProc
      bg_QTextDocument_qt_metacast_const_char_X : CrystalProc
      bg_QTextDocument_clear_ : CrystalProc
      bg_QTextDocument_createObject_const_QTextFormat_R : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QTextDocument_JUMPTABLE(self : QTextDocument*, table : BgTableQTextDocument*) : Void

    fun bg_QList_QString_CONSTRUCT_() : QList_QString*
    fun bg_QList_QString_at_int(_self_ : QList_QString*, index : Int32) : CrystalString
    fun bg_QList_QString_push_back_QString(_self_ : QList_QString*, value : CrystalString) : Void
    fun bg_QList_QString_size_(_self_ : QList_QString*) : Int32
    fun bg_QList_QString_DESTROY_(_self_ : QList_QString*) : Void
    fun bg_QList_QObject_X_CONSTRUCT_() : QList_QObject_X*
    fun bg_QList_QObject_X_at_int(_self_ : QList_QObject_X*, index : Int32) : QObject*
    fun bg_QList_QObject_X_push_back_QObject_X(_self_ : QList_QObject_X*, value : QObject*) : Void
    fun bg_QList_QObject_X_size_(_self_ : QList_QObject_X*) : Int32
    fun bg_QList_QObject_X_DESTROY_(_self_ : QList_QObject_X*) : Void
    fun bg_QList_QWidget_X_CONSTRUCT_() : QList_QWidget_X*
    fun bg_QList_QWidget_X_at_int(_self_ : QList_QWidget_X*, index : Int32) : QWidget*
    fun bg_QList_QWidget_X_push_back_QWidget_X(_self_ : QList_QWidget_X*, value : QWidget*) : Void
    fun bg_QList_QWidget_X_size_(_self_ : QList_QWidget_X*) : Int32
    fun bg_QList_QWidget_X_DESTROY_(_self_ : QList_QWidget_X*) : Void
    fun bg_QList_QAction_X_CONSTRUCT_() : QList_QAction_X*
    fun bg_QList_QAction_X_at_int(_self_ : QList_QAction_X*, index : Int32) : QAction*
    fun bg_QList_QAction_X_push_back_QAction_X(_self_ : QList_QAction_X*, value : QAction*) : Void
    fun bg_QList_QAction_X_size_(_self_ : QList_QAction_X*) : Int32
    fun bg_QList_QAction_X_DESTROY_(_self_ : QList_QAction_X*) : Void
    fun bg_QList_QUrl_CONSTRUCT_() : QList_QUrl*
    fun bg_QList_QUrl_at_int(_self_ : QList_QUrl*, index : Int32) : QUrl*
    fun bg_QList_QUrl_push_back_QUrl(_self_ : QList_QUrl*, value : QUrl*) : Void
    fun bg_QList_QUrl_size_(_self_ : QList_QUrl*) : Int32
    fun bg_QList_QUrl_DESTROY_(_self_ : QList_QUrl*) : Void
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_CONSTRUCT_() : QList_QAbstractEventDispatcher__TimerInfo*
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_at_int(_self_ : QList_QAbstractEventDispatcher__TimerInfo*, index : Int32) : EventDispatcherTimerInfo
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_push_back_QAbstractEventDispatcher__TimerInfo(_self_ : QList_QAbstractEventDispatcher__TimerInfo*, value : EventDispatcherTimerInfo) : Void
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_size_(_self_ : QList_QAbstractEventDispatcher__TimerInfo*) : Int32
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_DESTROY_(_self_ : QList_QAbstractEventDispatcher__TimerInfo*) : Void
    fun bg_QObject_metaObject_(_self_ : QObject*) : QMetaObject*
    fun bg_QObject_qt_metacast_const_char_X(_self_ : QObject*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QObject_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QObject_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QObject_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QObject_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QObject_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QObject_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QObject_CONSTRUCT_() : QObject*
    fun bg_QObject_CONSTRUCT_QObject_X(parent : QObject*) : QObject*
    fun bg_QObject_event_QEvent_X(_self_ : QObject*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QObject*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_objectName_(_self_ : QObject*) : CrystalString
    fun bg_QObject_setObjectName_const_QString_R(_self_ : QObject*, name : CrystalString) : Void
    fun bg_QObject_isWidgetType_(_self_ : QObject*) : Bool
    fun bg_QObject_isWindowType_(_self_ : QObject*) : Bool
    fun bg_QObject_signalsBlocked_(_self_ : QObject*) : Bool
    fun bg_QObject_blockSignals_bool(_self_ : QObject*, b : Bool) : Bool
    fun bg_QObject_thread_(_self_ : QObject*) : QThread*
    fun bg_QObject_moveToThread_QThread_X(_self_ : QObject*, thread : QThread*) : Void
    fun bg_QObject_startTimer_int(_self_ : QObject*, interval : Int32) : Int32
    fun bg_QObject_startTimer_int_Qt__TimerType(_self_ : QObject*, interval : Int32, timer_type : TimerType) : Int32
    fun bg_QObject_killTimer_int(_self_ : QObject*, id : Int32) : Void
    fun bg_QObject_setParent_QObject_X(_self_ : QObject*, parent : QObject*) : Void
    fun bg_QObject_installEventFilter_QObject_X(_self_ : QObject*, filter_obj : QObject*) : Void
    fun bg_QObject_removeEventFilter_QObject_X(_self_ : QObject*, obj : QObject*) : Void
    fun bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*) : QMetaObjectConnection*
    fun bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(sender : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*, unnamed_arg_4 : ConnectionType) : QMetaObjectConnection*
    fun bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender : QObject*, signal : QMetaMethod*, receiver : QObject*, method : QMetaMethod*) : QMetaObjectConnection*
    fun bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(sender : QObject*, signal : QMetaMethod*, receiver : QObject*, method : QMetaMethod*, type : ConnectionType) : QMetaObjectConnection*
    fun bg_QObject_connect_const_QObject_X_const_char_X_const_char_X(_self_ : QObject*, sender : QObject*, signal : UInt8*, member : UInt8*) : QMetaObjectConnection*
    fun bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(_self_ : QObject*, sender : QObject*, signal : UInt8*, member : UInt8*, type : ConnectionType) : QMetaObjectConnection*
    fun bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender : QObject*, signal : QMetaMethod*, receiver : QObject*, member : QMetaMethod*) : Bool
    fun bg_QObject_disconnect_(_self_ : QObject*) : Bool
    fun bg_QObject_disconnect_const_char_X(_self_ : QObject*, signal : UInt8*) : Bool
    fun bg_QObject_disconnect_const_char_X_const_QObject_X(_self_ : QObject*, signal : UInt8*, receiver : QObject*) : Bool
    fun bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(_self_ : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_const_QObject_X(_self_ : QObject*, receiver : QObject*) : Bool
    fun bg_QObject_disconnect_const_QObject_X_const_char_X(_self_ : QObject*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(unnamed_arg_0 : QMetaObjectConnection*) : Bool
    fun bg_QObject_dumpObjectTree_(_self_ : QObject*) : Void
    fun bg_QObject_dumpObjectInfo_(_self_ : QObject*) : Void
    fun bg_QObject_registerUserData_STATIC_() : UInt32
    fun bg_QObject_setUserData_uint_QObjectUserData_X(_self_ : QObject*, id : UInt32, data : QObjectUserData*) : Void
    fun bg_QObject_userData_uint(_self_ : QObject*, id : UInt32) : QObjectUserData*
    fun bg_QObject_destroyed_(_self_ : QObject*) : Void
    fun bg_QObject_destroyed_CONNECT_CrystalProc_void_(_self_ : QObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QObject_destroyed_QObject_X(_self_ : QObject*, unnamed_arg_0 : QObject*) : Void
    fun bg_QObject_destroyed_CONNECT_CrystalProc_void__QObjectX_(_self_ : QObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QObject_parent_(_self_ : QObject*) : QObject*
    fun bg_QObject_inherits_const_char_X(_self_ : QObject*, classname : UInt8*) : Bool
    fun bg_QObject_deleteLater_(_self_ : QObject*) : Void
    fun bg_QObject_sender_(_self_ : QObject*) : QObject*
    fun bg_QObject_senderSignalIndex_(_self_ : QObject*) : Int32
    fun bg_QObject_receivers_const_char_X(_self_ : QObject*, signal : UInt8*) : Int32
    fun bg_QObject_isSignalConnected_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QObject*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QObject*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QObject*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_CONSTRUCT_QObjectPrivate_R(dd : QObjectPrivate*) : QObject*
    fun bg_QObject_CONSTRUCT_QObjectPrivate_R_QObject_X(dd : QObjectPrivate*, parent : QObject*) : QObject*
    fun bg_QObject_DESTROY_(_self_ : QObject*) : Void
    fun bg_QMetaObject__Connection_CONSTRUCT_() : QMetaObjectConnection*
    fun bg_QMetaObject__Connection_DESTROY_(_self_ : QMetaObjectConnection*) : Void
    fun bg_QAbstractEventDispatcher_metaObject_(_self_ : QAbstractEventDispatcher*) : QMetaObject*
    fun bg_QAbstractEventDispatcher_qt_metacast_const_char_X(_self_ : QAbstractEventDispatcher*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractEventDispatcher_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractEventDispatcher_CONSTRUCT_() : QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_CONSTRUCT_QObject_X(parent : QObject*) : QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_instance_STATIC_() : QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(thread : QThread*) : QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(_self_ : QAbstractEventDispatcher*, flags : EventLoop::ProcessEventsFlags) : Bool
    fun bg_QAbstractEventDispatcher_hasPendingEvents_(_self_ : QAbstractEventDispatcher*) : Bool
    fun bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(_self_ : QAbstractEventDispatcher*, notifier : QSocketNotifier*) : Void
    fun bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(_self_ : QAbstractEventDispatcher*, notifier : QSocketNotifier*) : Void
    fun bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(_self_ : QAbstractEventDispatcher*, interval : Int32, timer_type : TimerType, object : QObject*) : Int32
    fun bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(_self_ : QAbstractEventDispatcher*, timer_id : Int32, interval : Int32, timer_type : TimerType, object : QObject*) : Void
    fun bg_QAbstractEventDispatcher_unregisterTimer_int(_self_ : QAbstractEventDispatcher*, timer_id : Int32) : Bool
    fun bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(_self_ : QAbstractEventDispatcher*, object : QObject*) : Bool
    fun bg_QAbstractEventDispatcher_registeredTimers_QObject_X(_self_ : QAbstractEventDispatcher*, object : QObject*) : Void*
    fun bg_QAbstractEventDispatcher_remainingTime_int(_self_ : QAbstractEventDispatcher*, timer_id : Int32) : Int32
    fun bg_QAbstractEventDispatcher_wakeUp_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_interrupt_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_flush_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_startingUp_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_closingDown_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QAbstractEventDispatcher*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QAbstractEventDispatcher*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QAbstractEventDispatcher*, event_type : QByteArray*, message : Void*, result : Int32*) : Bool
    fun bg_QAbstractEventDispatcher_aboutToBlock_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_aboutToBlock_CONNECT_CrystalProc_void_(_self_ : QAbstractEventDispatcher*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractEventDispatcher_awake_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_awake_CONNECT_CrystalProc_void_(_self_ : QAbstractEventDispatcher*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractEventDispatcher_CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(unnamed_arg_0 : QAbstractEventDispatcherPrivate*, parent : QObject*) : QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_DESTROY_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QWidget_metaObject_(_self_ : QWidget*) : QMetaObject*
    fun bg_QWidget_qt_metacast_const_char_X(_self_ : QWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QWidget_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QWidget_CONSTRUCT_() : QWidget*
    fun bg_QWidget_CONSTRUCT_QWidget_X(parent : QWidget*) : QWidget*
    fun bg_QWidget_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QWidget*
    fun bg_QWidget_devType_(_self_ : QWidget*) : Int32
    fun bg_QWidget_createWinId_(_self_ : QWidget*) : Void
    fun bg_QWidget_style_(_self_ : QWidget*) : QStyle*
    fun bg_QWidget_setStyle_QStyle_X(_self_ : QWidget*, unnamed_arg_0 : QStyle*) : Void
    fun bg_QWidget_isTopLevel_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isWindow_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isModal_(_self_ : QWidget*) : Bool
    fun bg_QWidget_windowModality_(_self_ : QWidget*) : WindowModality
    fun bg_QWidget_setWindowModality_Qt__WindowModality(_self_ : QWidget*, window_modality : WindowModality) : Void
    fun bg_QWidget_isEnabled_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isEnabledTo_const_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Bool
    fun bg_QWidget_isEnabledToTLW_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setEnabled_bool(_self_ : QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_setDisabled_bool(_self_ : QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_setWindowModified_bool(_self_ : QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_frameGeometry_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_geometry_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_normalGeometry_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_x_(_self_ : QWidget*) : Int32
    fun bg_QWidget_y_(_self_ : QWidget*) : Int32
    fun bg_QWidget_pos_(_self_ : QWidget*) : QPoint
    fun bg_QWidget_frameSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_size_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_width_(_self_ : QWidget*) : Int32
    fun bg_QWidget_height_(_self_ : QWidget*) : Int32
    fun bg_QWidget_rect_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_childrenRect_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_childrenRegion_(_self_ : QWidget*) : QRegion*
    fun bg_QWidget_minimumSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_maximumSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_minimumWidth_(_self_ : QWidget*) : Int32
    fun bg_QWidget_minimumHeight_(_self_ : QWidget*) : Int32
    fun bg_QWidget_maximumWidth_(_self_ : QWidget*) : Int32
    fun bg_QWidget_maximumHeight_(_self_ : QWidget*) : Int32
    fun bg_QWidget_setMinimumSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setMinimumSize_int_int(_self_ : QWidget*, minw : Int32, minh : Int32) : Void
    fun bg_QWidget_setMaximumSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setMaximumSize_int_int(_self_ : QWidget*, maxw : Int32, maxh : Int32) : Void
    fun bg_QWidget_setMinimumWidth_int(_self_ : QWidget*, minw : Int32) : Void
    fun bg_QWidget_setMinimumHeight_int(_self_ : QWidget*, minh : Int32) : Void
    fun bg_QWidget_setMaximumWidth_int(_self_ : QWidget*, maxw : Int32) : Void
    fun bg_QWidget_setMaximumHeight_int(_self_ : QWidget*, maxh : Int32) : Void
    fun bg_QWidget_sizeIncrement_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_setSizeIncrement_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setSizeIncrement_int_int(_self_ : QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_baseSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_setBaseSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setBaseSize_int_int(_self_ : QWidget*, basew : Int32, baseh : Int32) : Void
    fun bg_QWidget_setFixedSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setFixedSize_int_int(_self_ : QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_setFixedWidth_int(_self_ : QWidget*, w : Int32) : Void
    fun bg_QWidget_setFixedHeight_int(_self_ : QWidget*, h : Int32) : Void
    fun bg_QWidget_mapToGlobal_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint*) : QPoint
    fun bg_QWidget_mapFromGlobal_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint*) : QPoint
    fun bg_QWidget_mapToParent_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint*) : QPoint
    fun bg_QWidget_mapFromParent_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint*) : QPoint
    fun bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QWidget*, unnamed_arg_1 : QPoint*) : QPoint
    fun bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QWidget*, unnamed_arg_1 : QPoint*) : QPoint
    fun bg_QWidget_window_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_nativeParentWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_topLevelWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_palette_(_self_ : QWidget*) : QPalette*
    fun bg_QWidget_setPalette_const_QPalette_R(_self_ : QWidget*, unnamed_arg_0 : QPalette*) : Void
    fun bg_QWidget_setBackgroundRole_QPalette__ColorRole(_self_ : QWidget*, unnamed_arg_0 : PaletteColorRole) : Void
    fun bg_QWidget_backgroundRole_(_self_ : QWidget*) : PaletteColorRole
    fun bg_QWidget_setForegroundRole_QPalette__ColorRole(_self_ : QWidget*, unnamed_arg_0 : PaletteColorRole) : Void
    fun bg_QWidget_foregroundRole_(_self_ : QWidget*) : PaletteColorRole
    fun bg_QWidget_font_(_self_ : QWidget*) : QFont*
    fun bg_QWidget_setFont_const_QFont_R(_self_ : QWidget*, unnamed_arg_0 : QFont*) : Void
    fun bg_QWidget_fontMetrics_(_self_ : QWidget*) : QFontMetrics*
    fun bg_QWidget_fontInfo_(_self_ : QWidget*) : QFontInfo*
    fun bg_QWidget_cursor_(_self_ : QWidget*) : QCursor*
    fun bg_QWidget_setCursor_const_QCursor_R(_self_ : QWidget*, unnamed_arg_0 : QCursor*) : Void
    fun bg_QWidget_unsetCursor_(_self_ : QWidget*) : Void
    fun bg_QWidget_setMouseTracking_bool(_self_ : QWidget*, enable : Bool) : Void
    fun bg_QWidget_hasMouseTracking_(_self_ : QWidget*) : Bool
    fun bg_QWidget_underMouse_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setTabletTracking_bool(_self_ : QWidget*, enable : Bool) : Void
    fun bg_QWidget_hasTabletTracking_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setMask_const_QBitmap_R(_self_ : QWidget*, unnamed_arg_0 : QBitmap*) : Void
    fun bg_QWidget_setMask_const_QRegion_R(_self_ : QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_mask_(_self_ : QWidget*) : QRegion*
    fun bg_QWidget_clearMask_(_self_ : QWidget*) : Void
    fun bg_QWidget_render_QPaintDevice_X(_self_ : QWidget*, target : QPaintDevice*) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R(_self_ : QWidget*, target : QPaintDevice*, target_offset : QPoint*) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(_self_ : QWidget*, target : QPaintDevice*, target_offset : QPoint*, source_region : QRegion*) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(_self_ : QWidget*, target : QPaintDevice*, target_offset : QPoint*, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
    fun bg_QWidget_render_QPainter_X(_self_ : QWidget*, painter : QPainter*) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R(_self_ : QWidget*, painter : QPainter*, target_offset : QPoint*) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(_self_ : QWidget*, painter : QPainter*, target_offset : QPoint*, source_region : QRegion*) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(_self_ : QWidget*, painter : QPainter*, target_offset : QPoint*, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
    fun bg_QWidget_grab_(_self_ : QWidget*) : QPixmap*
    fun bg_QWidget_grab_const_QRect_R(_self_ : QWidget*, rectangle : QRect*) : QPixmap*
    fun bg_QWidget_graphicsEffect_(_self_ : QWidget*) : QGraphicsEffect*
    fun bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(_self_ : QWidget*, effect : QGraphicsEffect*) : Void
    fun bg_QWidget_grabGesture_Qt__GestureType(_self_ : QWidget*, type : GestureType) : Void
    fun bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(_self_ : QWidget*, type : GestureType, flags : GestureFlags) : Void
    fun bg_QWidget_ungrabGesture_Qt__GestureType(_self_ : QWidget*, type : GestureType) : Void
    fun bg_QWidget_setWindowTitle_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_setStyleSheet_const_QString_R(_self_ : QWidget*, style_sheet : CrystalString) : Void
    fun bg_QWidget_styleSheet_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_windowTitle_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWindowIcon_const_QIcon_R(_self_ : QWidget*, icon : QIcon*) : Void
    fun bg_QWidget_windowIcon_(_self_ : QWidget*) : QIcon*
    fun bg_QWidget_setWindowIconText_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_windowIconText_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWindowRole_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_windowRole_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWindowFilePath_const_QString_R(_self_ : QWidget*, file_path : CrystalString) : Void
    fun bg_QWidget_windowFilePath_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_isWindowModified_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setToolTip_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_toolTip_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setToolTipDuration_int(_self_ : QWidget*, msec : Int32) : Void
    fun bg_QWidget_toolTipDuration_(_self_ : QWidget*) : Int32
    fun bg_QWidget_setStatusTip_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_statusTip_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWhatsThis_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_whatsThis_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_accessibleName_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setAccessibleName_const_QString_R(_self_ : QWidget*, name : CrystalString) : Void
    fun bg_QWidget_accessibleDescription_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setAccessibleDescription_const_QString_R(_self_ : QWidget*, description : CrystalString) : Void
    fun bg_QWidget_setLayoutDirection_Qt__LayoutDirection(_self_ : QWidget*, direction : LayoutDirection) : Void
    fun bg_QWidget_layoutDirection_(_self_ : QWidget*) : LayoutDirection
    fun bg_QWidget_unsetLayoutDirection_(_self_ : QWidget*) : Void
    fun bg_QWidget_setLocale_const_QLocale_R(_self_ : QWidget*, locale : QLocale*) : Void
    fun bg_QWidget_locale_(_self_ : QWidget*) : QLocale*
    fun bg_QWidget_unsetLocale_(_self_ : QWidget*) : Void
    fun bg_QWidget_isRightToLeft_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isLeftToRight_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setFocus_(_self_ : QWidget*) : Void
    fun bg_QWidget_isActiveWindow_(_self_ : QWidget*) : Bool
    fun bg_QWidget_activateWindow_(_self_ : QWidget*) : Void
    fun bg_QWidget_clearFocus_(_self_ : QWidget*) : Void
    fun bg_QWidget_setFocus_Qt__FocusReason(_self_ : QWidget*, reason : FocusReason) : Void
    fun bg_QWidget_focusPolicy_(_self_ : QWidget*) : FocusPolicy
    fun bg_QWidget_setFocusPolicy_Qt__FocusPolicy(_self_ : QWidget*, policy : FocusPolicy) : Void
    fun bg_QWidget_hasFocus_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(unnamed_arg_0 : QWidget*, unnamed_arg_1 : QWidget*) : Void
    fun bg_QWidget_setFocusProxy_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QWidget_focusProxy_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_contextMenuPolicy_(_self_ : QWidget*) : ContextMenuPolicy
    fun bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(_self_ : QWidget*, policy : ContextMenuPolicy) : Void
    fun bg_QWidget_grabMouse_(_self_ : QWidget*) : Void
    fun bg_QWidget_grabMouse_const_QCursor_R(_self_ : QWidget*, unnamed_arg_0 : QCursor*) : Void
    fun bg_QWidget_releaseMouse_(_self_ : QWidget*) : Void
    fun bg_QWidget_grabKeyboard_(_self_ : QWidget*) : Void
    fun bg_QWidget_releaseKeyboard_(_self_ : QWidget*) : Void
    fun bg_QWidget_grabShortcut_const_QKeySequence_R(_self_ : QWidget*, key : QKeySequence*) : Int32
    fun bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(_self_ : QWidget*, key : QKeySequence*, context : ShortcutContext) : Int32
    fun bg_QWidget_releaseShortcut_int(_self_ : QWidget*, id : Int32) : Void
    fun bg_QWidget_setShortcutEnabled_int(_self_ : QWidget*, id : Int32) : Void
    fun bg_QWidget_setShortcutEnabled_int_bool(_self_ : QWidget*, id : Int32, enable : Bool) : Void
    fun bg_QWidget_setShortcutAutoRepeat_int(_self_ : QWidget*, id : Int32) : Void
    fun bg_QWidget_setShortcutAutoRepeat_int_bool(_self_ : QWidget*, id : Int32, enable : Bool) : Void
    fun bg_QWidget_mouseGrabber_STATIC_() : QWidget*
    fun bg_QWidget_keyboardGrabber_STATIC_() : QWidget*
    fun bg_QWidget_updatesEnabled_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setUpdatesEnabled_bool(_self_ : QWidget*, enable : Bool) : Void
    fun bg_QWidget_graphicsProxyWidget_(_self_ : QWidget*) : QGraphicsProxyWidget*
    fun bg_QWidget_update_(_self_ : QWidget*) : Void
    fun bg_QWidget_repaint_(_self_ : QWidget*) : Void
    fun bg_QWidget_update_int_int_int_int(_self_ : QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_update_const_QRect_R(_self_ : QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_update_const_QRegion_R(_self_ : QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_repaint_int_int_int_int(_self_ : QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_repaint_const_QRect_R(_self_ : QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_repaint_const_QRegion_R(_self_ : QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_setVisible_bool(_self_ : QWidget*, visible : Bool) : Void
    fun bg_QWidget_setHidden_bool(_self_ : QWidget*, hidden : Bool) : Void
    fun bg_QWidget_show_(_self_ : QWidget*) : Void
    fun bg_QWidget_hide_(_self_ : QWidget*) : Void
    fun bg_QWidget_showMinimized_(_self_ : QWidget*) : Void
    fun bg_QWidget_showMaximized_(_self_ : QWidget*) : Void
    fun bg_QWidget_showFullScreen_(_self_ : QWidget*) : Void
    fun bg_QWidget_showNormal_(_self_ : QWidget*) : Void
    fun bg_QWidget_close_(_self_ : QWidget*) : Bool
    fun bg_QWidget_raise_(_self_ : QWidget*) : Void
    fun bg_QWidget_lower_(_self_ : QWidget*) : Void
    fun bg_QWidget_stackUnder_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QWidget_move_int_int(_self_ : QWidget*, x : Int32, y : Int32) : Void
    fun bg_QWidget_move_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint*) : Void
    fun bg_QWidget_resize_int_int(_self_ : QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_resize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setGeometry_int_int_int_int(_self_ : QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_setGeometry_const_QRect_R(_self_ : QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_saveGeometry_(_self_ : QWidget*) : QByteArray*
    fun bg_QWidget_restoreGeometry_const_QByteArray_R(_self_ : QWidget*, geometry : QByteArray*) : Bool
    fun bg_QWidget_adjustSize_(_self_ : QWidget*) : Void
    fun bg_QWidget_isVisible_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isVisibleTo_const_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Bool
    fun bg_QWidget_isHidden_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isMinimized_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isMaximized_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isFullScreen_(_self_ : QWidget*) : Bool
    fun bg_QWidget_windowState_(_self_ : QWidget*) : WindowStates
    fun bg_QWidget_setWindowState_Qt__WindowStates(_self_ : QWidget*, state : WindowStates) : Void
    fun bg_QWidget_overrideWindowState_Qt__WindowStates(_self_ : QWidget*, state : WindowStates) : Void
    fun bg_QWidget_sizeHint_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QWidget*) : Bool
    fun bg_QWidget_visibleRegion_(_self_ : QWidget*) : QRegion*
    fun bg_QWidget_setContentsMargins_int_int_int_int(_self_ : QWidget*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QWidget_setContentsMargins_const_QMargins_R(_self_ : QWidget*, margins : QMargins*) : Void
    fun bg_QWidget_getContentsMargins_int_X_int_X_int_X_int_X(_self_ : QWidget*, left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
    fun bg_QWidget_contentsMargins_(_self_ : QWidget*) : QMargins*
    fun bg_QWidget_contentsRect_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_layout_(_self_ : QWidget*) : QLayout*
    fun bg_QWidget_setLayout_QLayout_X(_self_ : QWidget*, unnamed_arg_0 : QLayout*) : Void
    fun bg_QWidget_updateGeometry_(_self_ : QWidget*) : Void
    fun bg_QWidget_setParent_QWidget_X(_self_ : QWidget*, parent : QWidget*) : Void
    fun bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(_self_ : QWidget*, parent : QWidget*, f : WindowFlags) : Void
    fun bg_QWidget_scroll_int_int(_self_ : QWidget*, dx : Int32, dy : Int32) : Void
    fun bg_QWidget_scroll_int_int_const_QRect_R(_self_ : QWidget*, dx : Int32, dy : Int32, unnamed_arg_2 : QRect*) : Void
    fun bg_QWidget_focusWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_nextInFocusChain_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_previousInFocusChain_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_acceptDrops_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setAcceptDrops_bool(_self_ : QWidget*, on : Bool) : Void
    fun bg_QWidget_addAction_QAction_X(_self_ : QWidget*, action : QAction*) : Void
    fun bg_QWidget_insertAction_QAction_X_QAction_X(_self_ : QWidget*, before : QAction*, action : QAction*) : Void
    fun bg_QWidget_removeAction_QAction_X(_self_ : QWidget*, action : QAction*) : Void
    fun bg_QWidget_parentWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_setWindowFlags_Qt__WindowFlags(_self_ : QWidget*, type : WindowFlags) : Void
    fun bg_QWidget_windowFlags_(_self_ : QWidget*) : WindowFlags
    fun bg_QWidget_setWindowFlag_Qt__WindowType(_self_ : QWidget*, unnamed_arg_0 : WindowType) : Void
    fun bg_QWidget_setWindowFlag_Qt__WindowType_bool(_self_ : QWidget*, unnamed_arg_0 : WindowType, on : Bool) : Void
    fun bg_QWidget_overrideWindowFlags_Qt__WindowFlags(_self_ : QWidget*, type : WindowFlags) : Void
    fun bg_QWidget_windowType_(_self_ : QWidget*) : WindowType
    fun bg_QWidget_childAt_int_int(_self_ : QWidget*, x : Int32, y : Int32) : QWidget*
    fun bg_QWidget_childAt_const_QPoint_R(_self_ : QWidget*, p : QPoint*) : QWidget*
    fun bg_QWidget_setAttribute_Qt__WidgetAttribute(_self_ : QWidget*, unnamed_arg_0 : WidgetAttribute) : Void
    fun bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(_self_ : QWidget*, unnamed_arg_0 : WidgetAttribute, on : Bool) : Void
    fun bg_QWidget_testAttribute_Qt__WidgetAttribute(_self_ : QWidget*, unnamed_arg_0 : WidgetAttribute) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QWidget*) : QPaintEngine*
    fun bg_QWidget_ensurePolished_(_self_ : QWidget*) : Void
    fun bg_QWidget_isAncestorOf_const_QWidget_X(_self_ : QWidget*, child : QWidget*) : Bool
    fun bg_QWidget_autoFillBackground_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setAutoFillBackground_bool(_self_ : QWidget*, enabled : Bool) : Void
    fun bg_QWidget_backingStore_(_self_ : QWidget*) : QBackingStore*
    fun bg_QWidget_windowHandle_(_self_ : QWidget*) : QWindow*
    fun bg_QWidget_createWindowContainer_STATIC_QWindow_X(window : QWindow*) : QWidget*
    fun bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(window : QWindow*, parent : QWidget*) : QWidget*
    fun bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(window : QWindow*, parent : QWidget*, flags : WindowFlags) : QWidget*
    fun bg_QWidget_windowTitleChanged_const_QString_R(_self_ : QWidget*, title : CrystalString) : Void
    fun bg_QWidget_windowTitleChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_windowIconChanged_const_QIcon_R(_self_ : QWidget*, icon : QIcon*) : Void
    fun bg_QWidget_windowIconChanged_CONNECT_CrystalProc_void__const_QIconR_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_windowIconTextChanged_const_QString_R(_self_ : QWidget*, icon_text : CrystalString) : Void
    fun bg_QWidget_windowIconTextChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_customContextMenuRequested_const_QPoint_R(_self_ : QWidget*, pos : QPoint*) : Void
    fun bg_QWidget_customContextMenuRequested_CONNECT_CrystalProc_void__const_QPointR_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_event_QEvent_X(_self_ : QWidget*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_QPaintEvent_X(_self_ : QWidget*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QWidget*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QWidget*, event_type : QByteArray*, message : Void*, result : Int32*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : QWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QWidget*, unnamed_arg_0 : PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QWidget*, painter : QPainter*) : Void
    fun bg_QWidget_redirected_QPoint_X(_self_ : QWidget*, offset : QPoint*) : QPaintDevice*
    fun bg_QWidget_sharedPainter_(_self_ : QWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodHints_(_self_ : QWidget*) : InputMethodHints
    fun bg_QWidget_setInputMethodHints_Qt__InputMethodHints(_self_ : QWidget*, hints : InputMethodHints) : Void
    fun bg_QWidget_updateMicroFocus_(_self_ : QWidget*) : Void
    fun bg_QWidget_create_(_self_ : QWidget*) : Void
    fun bg_QWidget_destroy_(_self_ : QWidget*) : Void
    fun bg_QWidget_destroy_bool(_self_ : QWidget*, destroy_window : Bool) : Void
    fun bg_QWidget_destroy_bool_bool(_self_ : QWidget*, destroy_window : Bool, destroy_sub_windows : Bool) : Void
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QWidget*, next_ : Bool) : Bool
    fun bg_QWidget_focusNextChild_(_self_ : QWidget*) : Bool
    fun bg_QWidget_focusPreviousChild_(_self_ : QWidget*) : Bool
    fun bg_QWidget_CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(d : QWidgetPrivate*, parent : QWidget*, f : WindowFlags) : QWidget*
    fun bg_QWidget_DESTROY_(_self_ : QWidget*) : Void
    fun bg_QAbstractButton_metaObject_(_self_ : QAbstractButton*) : QMetaObject*
    fun bg_QAbstractButton_qt_metacast_const_char_X(_self_ : QAbstractButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractButton_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractButton_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractButton_CONSTRUCT_() : QAbstractButton*
    fun bg_QAbstractButton_CONSTRUCT_QWidget_X(parent : QWidget*) : QAbstractButton*
    fun bg_QAbstractButton_setText_const_QString_R(_self_ : QAbstractButton*, text : CrystalString) : Void
    fun bg_QAbstractButton_text_(_self_ : QAbstractButton*) : CrystalString
    fun bg_QAbstractButton_setIcon_const_QIcon_R(_self_ : QAbstractButton*, icon : QIcon*) : Void
    fun bg_QAbstractButton_icon_(_self_ : QAbstractButton*) : QIcon*
    fun bg_QAbstractButton_iconSize_(_self_ : QAbstractButton*) : QSize*
    fun bg_QAbstractButton_setShortcut_const_QKeySequence_R(_self_ : QAbstractButton*, key : QKeySequence*) : Void
    fun bg_QAbstractButton_shortcut_(_self_ : QAbstractButton*) : QKeySequence*
    fun bg_QAbstractButton_setCheckable_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_isCheckable_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_isChecked_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_setDown_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_isDown_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_setAutoRepeat_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_autoRepeat_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_setAutoRepeatDelay_int(_self_ : QAbstractButton*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractButton_autoRepeatDelay_(_self_ : QAbstractButton*) : Int32
    fun bg_QAbstractButton_setAutoRepeatInterval_int(_self_ : QAbstractButton*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractButton_autoRepeatInterval_(_self_ : QAbstractButton*) : Int32
    fun bg_QAbstractButton_setAutoExclusive_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_autoExclusive_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_group_(_self_ : QAbstractButton*) : QButtonGroup*
    fun bg_QAbstractButton_setIconSize_const_QSize_R(_self_ : QAbstractButton*, size : QSize*) : Void
    fun bg_QAbstractButton_animateClick_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_animateClick_int(_self_ : QAbstractButton*, msec : Int32) : Void
    fun bg_QAbstractButton_click_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_toggle_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_setChecked_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_pressed_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_pressed_CONNECT_CrystalProc_void_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_released_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_released_CONNECT_CrystalProc_void_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_clicked_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_clicked_CONNECT_CrystalProc_void_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_clicked_bool(_self_ : QAbstractButton*, checked : Bool) : Void
    fun bg_QAbstractButton_clicked_CONNECT_CrystalProc_void__bool_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_toggled_bool(_self_ : QAbstractButton*, checked : Bool) : Void
    fun bg_QAbstractButton_toggled_CONNECT_CrystalProc_void__bool_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_paintEvent_QPaintEvent_X(_self_ : QAbstractButton*, e : QPaintEvent*) : Void
    fun bg_QAbstractButton_hitButton_const_QPoint_R(_self_ : QAbstractButton*, pos : QPoint*) : Bool
    fun bg_QAbstractButton_checkStateSet_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_nextCheckState_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_event_QEvent_X(_self_ : QAbstractButton*, e : QEvent*) : Bool
    fun bg_QAbstractButton_keyPressEvent_QKeyEvent_X(_self_ : QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(_self_ : QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_QFocusEvent_X(_self_ : QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_QFocusEvent_X(_self_ : QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_QEvent_X(_self_ : QAbstractButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_QTimerEvent_X(_self_ : QAbstractButton*, e : QTimerEvent*) : Void
    fun bg_QAbstractButton_CONSTRUCT_QAbstractButtonPrivate_R(dd : QAbstractButtonPrivate*) : QAbstractButton*
    fun bg_QAbstractButton_CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(dd : QAbstractButtonPrivate*, parent : QWidget*) : QAbstractButton*
    fun bg_QAbstractButton_DESTROY_(_self_ : QAbstractButton*) : Void
    fun bg_QFrame_metaObject_(_self_ : QFrame*) : QMetaObject*
    fun bg_QFrame_qt_metacast_const_char_X(_self_ : QFrame*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QFrame_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QFrame_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QFrame_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QFrame_CONSTRUCT_() : QFrame*
    fun bg_QFrame_CONSTRUCT_QWidget_X(parent : QWidget*) : QFrame*
    fun bg_QFrame_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QFrame*
    fun bg_QFrame_frameStyle_(_self_ : QFrame*) : Int32
    fun bg_QFrame_setFrameStyle_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_frameWidth_(_self_ : QFrame*) : Int32
    fun bg_QFrame_sizeHint_(_self_ : QFrame*) : QSize*
    fun bg_QFrame_frameShape_(_self_ : QFrame*) : Frame::Shape
    fun bg_QFrame_setFrameShape_QFrame__Shape(_self_ : QFrame*, unnamed_arg_0 : Frame::Shape) : Void
    fun bg_QFrame_frameShadow_(_self_ : QFrame*) : Frame::Shadow
    fun bg_QFrame_setFrameShadow_QFrame__Shadow(_self_ : QFrame*, unnamed_arg_0 : Frame::Shadow) : Void
    fun bg_QFrame_lineWidth_(_self_ : QFrame*) : Int32
    fun bg_QFrame_setLineWidth_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_midLineWidth_(_self_ : QFrame*) : Int32
    fun bg_QFrame_setMidLineWidth_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_frameRect_(_self_ : QFrame*) : QRect*
    fun bg_QFrame_setFrameRect_const_QRect_R(_self_ : QFrame*, unnamed_arg_0 : QRect*) : Void
    fun bg_QFrame_event_QEvent_X(_self_ : QFrame*, e : QEvent*) : Bool
    fun bg_QFrame_paintEvent_QPaintEvent_X(_self_ : QFrame*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QFrame_changeEvent_QEvent_X(_self_ : QFrame*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QFrame_drawFrame_QPainter_X(_self_ : QFrame*, unnamed_arg_0 : QPainter*) : Void
    fun bg_QFrame_CONSTRUCT_QFramePrivate_R(dd : QFramePrivate*) : QFrame*
    fun bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X(dd : QFramePrivate*, parent : QWidget*) : QFrame*
    fun bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(dd : QFramePrivate*, parent : QWidget*, f : WindowFlags) : QFrame*
    fun bg_QFrame_initStyleOption_QStyleOptionFrame_X(_self_ : QFrame*, option : QStyleOptionFrame*) : Void
    fun bg_QFrame_DESTROY_(_self_ : QFrame*) : Void
    fun bg_QAbstractScrollArea_metaObject_(_self_ : QAbstractScrollArea*) : QMetaObject*
    fun bg_QAbstractScrollArea_qt_metacast_const_char_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractScrollArea_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractScrollArea_CONSTRUCT_() : QAbstractScrollArea*
    fun bg_QAbstractScrollArea_CONSTRUCT_QWidget_X(parent : QWidget*) : QAbstractScrollArea*
    fun bg_QAbstractScrollArea_verticalScrollBarPolicy_(_self_ : QAbstractScrollArea*) : ScrollBarPolicy
    fun bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(_self_ : QAbstractScrollArea*, unnamed_arg_0 : ScrollBarPolicy) : Void
    fun bg_QAbstractScrollArea_verticalScrollBar_(_self_ : QAbstractScrollArea*) : QScrollBar*
    fun bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(_self_ : QAbstractScrollArea*, scrollbar : QScrollBar*) : Void
    fun bg_QAbstractScrollArea_horizontalScrollBarPolicy_(_self_ : QAbstractScrollArea*) : ScrollBarPolicy
    fun bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(_self_ : QAbstractScrollArea*, unnamed_arg_0 : ScrollBarPolicy) : Void
    fun bg_QAbstractScrollArea_horizontalScrollBar_(_self_ : QAbstractScrollArea*) : QScrollBar*
    fun bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(_self_ : QAbstractScrollArea*, scrollbar : QScrollBar*) : Void
    fun bg_QAbstractScrollArea_cornerWidget_(_self_ : QAbstractScrollArea*) : QWidget*
    fun bg_QAbstractScrollArea_setCornerWidget_QWidget_X(_self_ : QAbstractScrollArea*, widget : QWidget*) : Void
    fun bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(_self_ : QAbstractScrollArea*, widget : QWidget*, alignment : Alignment) : Void
    fun bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(_self_ : QAbstractScrollArea*, alignment : Alignment) : Void*
    fun bg_QAbstractScrollArea_viewport_(_self_ : QAbstractScrollArea*) : QWidget*
    fun bg_QAbstractScrollArea_setViewport_QWidget_X(_self_ : QAbstractScrollArea*, widget : QWidget*) : Void
    fun bg_QAbstractScrollArea_maximumViewportSize_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_minimumSizeHint_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_QWidget_X(_self_ : QAbstractScrollArea*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_sizeAdjustPolicy_(_self_ : QAbstractScrollArea*) : AbstractScrollArea::SizeAdjustPolicy
    fun bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(_self_ : QAbstractScrollArea*, policy : AbstractScrollArea::SizeAdjustPolicy) : Void
    fun bg_QAbstractScrollArea_CONSTRUCT_QAbstractScrollAreaPrivate_R(dd : QAbstractScrollAreaPrivate*) : QAbstractScrollArea*
    fun bg_QAbstractScrollArea_CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(dd : QAbstractScrollAreaPrivate*, parent : QWidget*) : QAbstractScrollArea*
    fun bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(_self_ : QAbstractScrollArea*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(_self_ : QAbstractScrollArea*, margins : QMargins*) : Void
    fun bg_QAbstractScrollArea_viewportMargins_(_self_ : QAbstractScrollArea*) : QMargins*
    fun bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_event_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportEvent_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragMoveEvent*) : Void
    fun bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragLeaveEvent*) : Void
    fun bg_QAbstractScrollArea_dropEvent_QDropEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QAbstractScrollArea_scrollContentsBy_int_int(_self_ : QAbstractScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QAbstractScrollArea_viewportSizeHint_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_DESTROY_(_self_ : QAbstractScrollArea*) : Void
    fun bg_QScrollArea_metaObject_(_self_ : QScrollArea*) : QMetaObject*
    fun bg_QScrollArea_qt_metacast_const_char_X(_self_ : QScrollArea*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QScrollArea_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QScrollArea_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QScrollArea_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QScrollArea_CONSTRUCT_() : QScrollArea*
    fun bg_QScrollArea_CONSTRUCT_QWidget_X(parent : QWidget*) : QScrollArea*
    fun bg_QScrollArea_widget_(_self_ : QScrollArea*) : QWidget*
    fun bg_QScrollArea_setWidget_QWidget_X(_self_ : QScrollArea*, widget : QWidget*) : Void
    fun bg_QScrollArea_takeWidget_(_self_ : QScrollArea*) : QWidget*
    fun bg_QScrollArea_widgetResizable_(_self_ : QScrollArea*) : Bool
    fun bg_QScrollArea_setWidgetResizable_bool(_self_ : QScrollArea*, resizable : Bool) : Void
    fun bg_QScrollArea_sizeHint_(_self_ : QScrollArea*) : QSize*
    fun bg_QScrollArea_focusNextPrevChild_bool(_self_ : QScrollArea*, next_ : Bool) : Bool
    fun bg_QScrollArea_alignment_(_self_ : QScrollArea*) : Alignment
    fun bg_QScrollArea_setAlignment_Qt__Alignment(_self_ : QScrollArea*, unnamed_arg_0 : Alignment) : Void
    fun bg_QScrollArea_ensureVisible_int_int(_self_ : QScrollArea*, x : Int32, y : Int32) : Void
    fun bg_QScrollArea_ensureVisible_int_int_int(_self_ : QScrollArea*, x : Int32, y : Int32, xmargin : Int32) : Void
    fun bg_QScrollArea_ensureVisible_int_int_int_int(_self_ : QScrollArea*, x : Int32, y : Int32, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QScrollArea_ensureWidgetVisible_QWidget_X(_self_ : QScrollArea*, child_widget : QWidget*) : Void
    fun bg_QScrollArea_ensureWidgetVisible_QWidget_X_int(_self_ : QScrollArea*, child_widget : QWidget*, xmargin : Int32) : Void
    fun bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(_self_ : QScrollArea*, child_widget : QWidget*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QScrollArea_CONSTRUCT_QScrollAreaPrivate_R(dd : QScrollAreaPrivate*) : QScrollArea*
    fun bg_QScrollArea_CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(dd : QScrollAreaPrivate*, parent : QWidget*) : QScrollArea*
    fun bg_QScrollArea_event_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QScrollArea_resizeEvent_QResizeEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QScrollArea_scrollContentsBy_int_int(_self_ : QScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QScrollArea_viewportSizeHint_(_self_ : QScrollArea*) : QSize*
    fun bg_QScrollArea_DESTROY_(_self_ : QScrollArea*) : Void
    fun bg_QMenuBar_metaObject_(_self_ : QMenuBar*) : QMetaObject*
    fun bg_QMenuBar_qt_metacast_const_char_X(_self_ : QMenuBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMenuBar_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMenuBar_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMenuBar_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMenuBar_CONSTRUCT_() : QMenuBar*
    fun bg_QMenuBar_CONSTRUCT_QWidget_X(parent : QWidget*) : QMenuBar*
    fun bg_QMenuBar_addAction_const_QString_R(_self_ : QMenuBar*, text : CrystalString) : QAction*
    fun bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : QMenuBar*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QMenuBar_addMenu_QMenu_X(_self_ : QMenuBar*, menu : QMenu*) : QAction*
    fun bg_QMenuBar_addMenu_const_QString_R(_self_ : QMenuBar*, title : CrystalString) : QMenu*
    fun bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(_self_ : QMenuBar*, icon : QIcon*, title : CrystalString) : QMenu*
    fun bg_QMenuBar_addSeparator_(_self_ : QMenuBar*) : QAction*
    fun bg_QMenuBar_insertSeparator_QAction_X(_self_ : QMenuBar*, before : QAction*) : QAction*
    fun bg_QMenuBar_insertMenu_QAction_X_QMenu_X(_self_ : QMenuBar*, before : QAction*, menu : QMenu*) : QAction*
    fun bg_QMenuBar_clear_(_self_ : QMenuBar*) : Void
    fun bg_QMenuBar_activeAction_(_self_ : QMenuBar*) : QAction*
    fun bg_QMenuBar_setActiveAction_QAction_X(_self_ : QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_setDefaultUp_bool(_self_ : QMenuBar*, unnamed_arg_0 : Bool) : Void
    fun bg_QMenuBar_isDefaultUp_(_self_ : QMenuBar*) : Bool
    fun bg_QMenuBar_sizeHint_(_self_ : QMenuBar*) : QSize*
    fun bg_QMenuBar_minimumSizeHint_(_self_ : QMenuBar*) : QSize*
    fun bg_QMenuBar_heightForWidth_int(_self_ : QMenuBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QMenuBar_actionGeometry_QAction_X(_self_ : QMenuBar*, unnamed_arg_0 : QAction*) : QRect*
    fun bg_QMenuBar_actionAt_const_QPoint_R(_self_ : QMenuBar*, unnamed_arg_0 : QPoint*) : QAction*
    fun bg_QMenuBar_setCornerWidget_QWidget_X(_self_ : QMenuBar*, w : QWidget*) : Void
    fun bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(_self_ : QMenuBar*, w : QWidget*, corner : Corner) : Void
    fun bg_QMenuBar_cornerWidget_(_self_ : QMenuBar*) : QWidget*
    fun bg_QMenuBar_cornerWidget_Qt__Corner(_self_ : QMenuBar*, corner : Corner) : QWidget*
    fun bg_QMenuBar_isNativeMenuBar_(_self_ : QMenuBar*) : Bool
    fun bg_QMenuBar_setNativeMenuBar_bool(_self_ : QMenuBar*, native_menu_bar : Bool) : Void
    fun bg_QMenuBar_platformMenuBar_(_self_ : QMenuBar*) : QPlatformMenuBar*
    fun bg_QMenuBar_setVisible_bool(_self_ : QMenuBar*, visible : Bool) : Void
    fun bg_QMenuBar_triggered_QAction_X(_self_ : QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_triggered_CONNECT_CrystalProc_void__QActionX_(_self_ : QMenuBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenuBar_hovered_QAction_X(_self_ : QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_hovered_CONNECT_CrystalProc_void__QActionX_(_self_ : QMenuBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenuBar_changeEvent_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_keyPressEvent_QKeyEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mousePressEvent_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_leaveEvent_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_paintEvent_QPaintEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenuBar_resizeEvent_QResizeEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QMenuBar_actionEvent_QActionEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenuBar_focusOutEvent_QFocusEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_focusInEvent_QFocusEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_timerEvent_QTimerEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenuBar_eventFilter_QObject_X_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QMenuBar_event_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(_self_ : QMenuBar*, option : QStyleOptionMenuItem*, action : QAction*) : Void
    fun bg_QMenuBar_DESTROY_(_self_ : QMenuBar*) : Void
    fun bg_QMenu_metaObject_(_self_ : QMenu*) : QMetaObject*
    fun bg_QMenu_qt_metacast_const_char_X(_self_ : QMenu*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMenu_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMenu_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMenu_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMenu_CONSTRUCT_() : QMenu*
    fun bg_QMenu_CONSTRUCT_QWidget_X(parent : QWidget*) : QMenu*
    fun bg_QMenu_CONSTRUCT_const_QString_R(title : CrystalString) : QMenu*
    fun bg_QMenu_CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : QMenu*
    fun bg_QMenu_addAction_const_QString_R(_self_ : QMenu*, text : CrystalString) : QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R(_self_ : QMenu*, icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : QMenu*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(_self_ : QMenu*, text : CrystalString, receiver : QObject*, member : UInt8*, shortcut : QKeySequence*) : QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(_self_ : QMenu*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(_self_ : QMenu*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*, shortcut : QKeySequence*) : QAction*
    fun bg_QMenu_addMenu_QMenu_X(_self_ : QMenu*, menu : QMenu*) : QAction*
    fun bg_QMenu_addMenu_const_QString_R(_self_ : QMenu*, title : CrystalString) : QMenu*
    fun bg_QMenu_addMenu_const_QIcon_R_const_QString_R(_self_ : QMenu*, icon : QIcon*, title : CrystalString) : QMenu*
    fun bg_QMenu_addSeparator_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_addSection_const_QString_R(_self_ : QMenu*, text : CrystalString) : QAction*
    fun bg_QMenu_addSection_const_QIcon_R_const_QString_R(_self_ : QMenu*, icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QMenu_insertMenu_QAction_X_QMenu_X(_self_ : QMenu*, before : QAction*, menu : QMenu*) : QAction*
    fun bg_QMenu_insertSeparator_QAction_X(_self_ : QMenu*, before : QAction*) : QAction*
    fun bg_QMenu_insertSection_QAction_X_const_QString_R(_self_ : QMenu*, before : QAction*, text : CrystalString) : QAction*
    fun bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(_self_ : QMenu*, before : QAction*, icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QMenu_isEmpty_(_self_ : QMenu*) : Bool
    fun bg_QMenu_clear_(_self_ : QMenu*) : Void
    fun bg_QMenu_setTearOffEnabled_bool(_self_ : QMenu*, unnamed_arg_0 : Bool) : Void
    fun bg_QMenu_isTearOffEnabled_(_self_ : QMenu*) : Bool
    fun bg_QMenu_isTearOffMenuVisible_(_self_ : QMenu*) : Bool
    fun bg_QMenu_showTearOffMenu_(_self_ : QMenu*) : Void
    fun bg_QMenu_showTearOffMenu_const_QPoint_R(_self_ : QMenu*, pos : QPoint*) : Void
    fun bg_QMenu_hideTearOffMenu_(_self_ : QMenu*) : Void
    fun bg_QMenu_setDefaultAction_QAction_X(_self_ : QMenu*, unnamed_arg_0 : QAction*) : Void
    fun bg_QMenu_defaultAction_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_setActiveAction_QAction_X(_self_ : QMenu*, act : QAction*) : Void
    fun bg_QMenu_activeAction_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_popup_const_QPoint_R(_self_ : QMenu*, pos : QPoint*) : Void
    fun bg_QMenu_popup_const_QPoint_R_QAction_X(_self_ : QMenu*, pos : QPoint*, at : QAction*) : Void
    fun bg_QMenu_exec_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_exec_const_QPoint_R(_self_ : QMenu*, pos : QPoint*) : QAction*
    fun bg_QMenu_exec_const_QPoint_R_QAction_X(_self_ : QMenu*, pos : QPoint*, at : QAction*) : QAction*
    fun bg_QMenu_sizeHint_(_self_ : QMenu*) : QSize*
    fun bg_QMenu_actionGeometry_QAction_X(_self_ : QMenu*, unnamed_arg_0 : QAction*) : QRect*
    fun bg_QMenu_actionAt_const_QPoint_R(_self_ : QMenu*, unnamed_arg_0 : QPoint*) : QAction*
    fun bg_QMenu_menuAction_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_title_(_self_ : QMenu*) : CrystalString
    fun bg_QMenu_setTitle_const_QString_R(_self_ : QMenu*, title : CrystalString) : Void
    fun bg_QMenu_icon_(_self_ : QMenu*) : QIcon*
    fun bg_QMenu_setIcon_const_QIcon_R(_self_ : QMenu*, icon : QIcon*) : Void
    fun bg_QMenu_setNoReplayFor_QWidget_X(_self_ : QMenu*, widget : QWidget*) : Void
    fun bg_QMenu_platformMenu_(_self_ : QMenu*) : QPlatformMenu*
    fun bg_QMenu_setPlatformMenu_QPlatformMenu_X(_self_ : QMenu*, platform_menu : QPlatformMenu*) : Void
    fun bg_QMenu_separatorsCollapsible_(_self_ : QMenu*) : Bool
    fun bg_QMenu_setSeparatorsCollapsible_bool(_self_ : QMenu*, collapse : Bool) : Void
    fun bg_QMenu_toolTipsVisible_(_self_ : QMenu*) : Bool
    fun bg_QMenu_setToolTipsVisible_bool(_self_ : QMenu*, visible : Bool) : Void
    fun bg_QMenu_aboutToShow_(_self_ : QMenu*) : Void
    fun bg_QMenu_aboutToShow_CONNECT_CrystalProc_void_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_aboutToHide_(_self_ : QMenu*) : Void
    fun bg_QMenu_aboutToHide_CONNECT_CrystalProc_void_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_triggered_QAction_X(_self_ : QMenu*, action : QAction*) : Void
    fun bg_QMenu_triggered_CONNECT_CrystalProc_void__QActionX_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_hovered_QAction_X(_self_ : QMenu*, action : QAction*) : Void
    fun bg_QMenu_hovered_CONNECT_CrystalProc_void__QActionX_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_columnCount_(_self_ : QMenu*) : Int32
    fun bg_QMenu_changeEvent_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_keyPressEvent_QKeyEvent_X(_self_ : QMenu*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenu_mouseReleaseEvent_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mousePressEvent_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mouseMoveEvent_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_wheelEvent_QWheelEvent_X(_self_ : QMenu*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QMenu_enterEvent_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_leaveEvent_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_hideEvent_QHideEvent_X(_self_ : QMenu*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QMenu_paintEvent_QPaintEvent_X(_self_ : QMenu*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenu_actionEvent_QActionEvent_X(_self_ : QMenu*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenu_timerEvent_QTimerEvent_X(_self_ : QMenu*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenu_event_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QMenu_focusNextPrevChild_bool(_self_ : QMenu*, next_ : Bool) : Bool
    fun bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(_self_ : QMenu*, option : QStyleOptionMenuItem*, action : QAction*) : Void
    fun bg_QMenu_CONSTRUCT_QMenuPrivate_R(dd : QMenuPrivate*) : QMenu*
    fun bg_QMenu_CONSTRUCT_QMenuPrivate_R_QWidget_X(dd : QMenuPrivate*, parent : QWidget*) : QMenu*
    fun bg_QMenu_DESTROY_(_self_ : QMenu*) : Void
    fun bg_QAction_metaObject_(_self_ : QAction*) : QMetaObject*
    fun bg_QAction_qt_metacast_const_char_X(_self_ : QAction*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAction_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAction_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAction_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAction_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAction_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAction_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAction_CONSTRUCT_() : QAction*
    fun bg_QAction_CONSTRUCT_QObject_X(parent : QObject*) : QAction*
    fun bg_QAction_CONSTRUCT_const_QString_R(text : CrystalString) : QAction*
    fun bg_QAction_CONSTRUCT_const_QString_R_QObject_X(text : CrystalString, parent : QObject*) : QAction*
    fun bg_QAction_CONSTRUCT_const_QIcon_R_const_QString_R(icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QAction_CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(icon : QIcon*, text : CrystalString, parent : QObject*) : QAction*
    fun bg_QAction_setActionGroup_QActionGroup_X(_self_ : QAction*, group : QActionGroup*) : Void
    fun bg_QAction_actionGroup_(_self_ : QAction*) : QActionGroup*
    fun bg_QAction_setIcon_const_QIcon_R(_self_ : QAction*, icon : QIcon*) : Void
    fun bg_QAction_icon_(_self_ : QAction*) : QIcon*
    fun bg_QAction_setText_const_QString_R(_self_ : QAction*, text : CrystalString) : Void
    fun bg_QAction_text_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setIconText_const_QString_R(_self_ : QAction*, text : CrystalString) : Void
    fun bg_QAction_iconText_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setToolTip_const_QString_R(_self_ : QAction*, tip : CrystalString) : Void
    fun bg_QAction_toolTip_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setStatusTip_const_QString_R(_self_ : QAction*, status_tip : CrystalString) : Void
    fun bg_QAction_statusTip_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setWhatsThis_const_QString_R(_self_ : QAction*, what : CrystalString) : Void
    fun bg_QAction_whatsThis_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setPriority_QAction__Priority(_self_ : QAction*, priority : Action::Priority) : Void
    fun bg_QAction_priority_(_self_ : QAction*) : Action::Priority
    fun bg_QAction_menu_(_self_ : QAction*) : QMenu*
    fun bg_QAction_setMenu_QMenu_X(_self_ : QAction*, menu : QMenu*) : Void
    fun bg_QAction_setSeparator_bool(_self_ : QAction*, b : Bool) : Void
    fun bg_QAction_isSeparator_(_self_ : QAction*) : Bool
    fun bg_QAction_setShortcut_const_QKeySequence_R(_self_ : QAction*, shortcut : QKeySequence*) : Void
    fun bg_QAction_shortcut_(_self_ : QAction*) : QKeySequence*
    fun bg_QAction_setShortcuts_QKeySequence__StandardKey(_self_ : QAction*, unnamed_arg_0 : KeySequence::StandardKey) : Void
    fun bg_QAction_setShortcutContext_Qt__ShortcutContext(_self_ : QAction*, context : ShortcutContext) : Void
    fun bg_QAction_shortcutContext_(_self_ : QAction*) : ShortcutContext
    fun bg_QAction_setAutoRepeat_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_autoRepeat_(_self_ : QAction*) : Bool
    fun bg_QAction_setFont_const_QFont_R(_self_ : QAction*, font : QFont*) : Void
    fun bg_QAction_font_(_self_ : QAction*) : QFont*
    fun bg_QAction_setCheckable_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_isCheckable_(_self_ : QAction*) : Bool
    fun bg_QAction_isChecked_(_self_ : QAction*) : Bool
    fun bg_QAction_isEnabled_(_self_ : QAction*) : Bool
    fun bg_QAction_isVisible_(_self_ : QAction*) : Bool
    fun bg_QAction_activate_QAction__ActionEvent(_self_ : QAction*, event : Action::Event) : Void
    fun bg_QAction_showStatusText_(_self_ : QAction*) : Bool
    fun bg_QAction_showStatusText_QWidget_X(_self_ : QAction*, widget : QWidget*) : Bool
    fun bg_QAction_setMenuRole_QAction__MenuRole(_self_ : QAction*, menu_role : Action::MenuRole) : Void
    fun bg_QAction_menuRole_(_self_ : QAction*) : Action::MenuRole
    fun bg_QAction_setIconVisibleInMenu_bool(_self_ : QAction*, visible : Bool) : Void
    fun bg_QAction_isIconVisibleInMenu_(_self_ : QAction*) : Bool
    fun bg_QAction_parentWidget_(_self_ : QAction*) : QWidget*
    fun bg_QAction_associatedWidgets_(_self_ : QAction*) : Void*
    fun bg_QAction_event_QEvent_X(_self_ : QAction*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAction_CONSTRUCT_QActionPrivate_R_QObject_X(dd : QActionPrivate*, parent : QObject*) : QAction*
    fun bg_QAction_trigger_(_self_ : QAction*) : Void
    fun bg_QAction_hover_(_self_ : QAction*) : Void
    fun bg_QAction_setChecked_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_toggle_(_self_ : QAction*) : Void
    fun bg_QAction_setEnabled_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_setDisabled_bool(_self_ : QAction*, b : Bool) : Void
    fun bg_QAction_setVisible_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_changed_(_self_ : QAction*) : Void
    fun bg_QAction_changed_CONNECT_CrystalProc_void_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_triggered_(_self_ : QAction*) : Void
    fun bg_QAction_triggered_CONNECT_CrystalProc_void_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_triggered_bool(_self_ : QAction*, checked : Bool) : Void
    fun bg_QAction_triggered_CONNECT_CrystalProc_void__bool_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_hovered_(_self_ : QAction*) : Void
    fun bg_QAction_hovered_CONNECT_CrystalProc_void_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_toggled_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_toggled_CONNECT_CrystalProc_void__bool_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_DESTROY_(_self_ : QAction*) : Void
    fun bg_QMainWindow_metaObject_(_self_ : QMainWindow*) : QMetaObject*
    fun bg_QMainWindow_qt_metacast_const_char_X(_self_ : QMainWindow*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMainWindow_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMainWindow_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMainWindow_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMainWindow_CONSTRUCT_() : QMainWindow*
    fun bg_QMainWindow_CONSTRUCT_QWidget_X(parent : QWidget*) : QMainWindow*
    fun bg_QMainWindow_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, flags : WindowFlags) : QMainWindow*
    fun bg_QMainWindow_iconSize_(_self_ : QMainWindow*) : QSize*
    fun bg_QMainWindow_setIconSize_const_QSize_R(_self_ : QMainWindow*, icon_size : QSize*) : Void
    fun bg_QMainWindow_toolButtonStyle_(_self_ : QMainWindow*) : ToolButtonStyle
    fun bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(_self_ : QMainWindow*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QMainWindow_isAnimated_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_isDockNestingEnabled_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_documentMode_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_setDocumentMode_bool(_self_ : QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_tabShape_(_self_ : QMainWindow*) : TabWidget::TabShape
    fun bg_QMainWindow_setTabShape_QTabWidget__TabShape(_self_ : QMainWindow*, tab_shape : TabWidget::TabShape) : Void
    fun bg_QMainWindow_tabPosition_Qt__DockWidgetArea(_self_ : QMainWindow*, area : DockWidgetArea) : TabWidget::TabPosition
    fun bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(_self_ : QMainWindow*, areas : DockWidgetAreas, tab_position : TabWidget::TabPosition) : Void
    fun bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(_self_ : QMainWindow*, options : MainWindow::DockOptions) : Void
    fun bg_QMainWindow_dockOptions_(_self_ : QMainWindow*) : MainWindow::DockOptions
    fun bg_QMainWindow_isSeparator_const_QPoint_R(_self_ : QMainWindow*, pos : QPoint*) : Bool
    fun bg_QMainWindow_menuBar_(_self_ : QMainWindow*) : QMenuBar*
    fun bg_QMainWindow_setMenuBar_QMenuBar_X(_self_ : QMainWindow*, menubar : QMenuBar*) : Void
    fun bg_QMainWindow_menuWidget_(_self_ : QMainWindow*) : QWidget*
    fun bg_QMainWindow_setMenuWidget_QWidget_X(_self_ : QMainWindow*, menubar : QWidget*) : Void
    fun bg_QMainWindow_statusBar_(_self_ : QMainWindow*) : QStatusBar*
    fun bg_QMainWindow_setStatusBar_QStatusBar_X(_self_ : QMainWindow*, statusbar : QStatusBar*) : Void
    fun bg_QMainWindow_centralWidget_(_self_ : QMainWindow*) : QWidget*
    fun bg_QMainWindow_setCentralWidget_QWidget_X(_self_ : QMainWindow*, widget : QWidget*) : Void
    fun bg_QMainWindow_takeCentralWidget_(_self_ : QMainWindow*) : QWidget*
    fun bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(_self_ : QMainWindow*, corner : Corner, area : DockWidgetArea) : Void
    fun bg_QMainWindow_corner_Qt__Corner(_self_ : QMainWindow*, corner : Corner) : DockWidgetArea
    fun bg_QMainWindow_addToolBarBreak_(_self_ : QMainWindow*) : Void
    fun bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(_self_ : QMainWindow*, area : ToolBarArea) : Void
    fun bg_QMainWindow_insertToolBarBreak_QToolBar_X(_self_ : QMainWindow*, before : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(_self_ : QMainWindow*, area : ToolBarArea, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_const_QString_R(_self_ : QMainWindow*, title : CrystalString) : QToolBar*
    fun bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(_self_ : QMainWindow*, before : QToolBar*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_removeToolBar_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_removeToolBarBreak_QToolBar_X(_self_ : QMainWindow*, before : QToolBar*) : Void
    fun bg_QMainWindow_unifiedTitleAndToolBarOnMac_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_toolBarArea_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : ToolBarArea
    fun bg_QMainWindow_toolBarBreak_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : Bool
    fun bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(_self_ : QMainWindow*, area : DockWidgetArea, dockwidget : QDockWidget*) : Void
    fun bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(_self_ : QMainWindow*, area : DockWidgetArea, dockwidget : QDockWidget*, orientation : Orientation) : Void
    fun bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(_self_ : QMainWindow*, after : QDockWidget*, dockwidget : QDockWidget*, orientation : Orientation) : Void
    fun bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(_self_ : QMainWindow*, first : QDockWidget*, second : QDockWidget*) : Void
    fun bg_QMainWindow_removeDockWidget_QDockWidget_X(_self_ : QMainWindow*, dockwidget : QDockWidget*) : Void
    fun bg_QMainWindow_restoreDockWidget_QDockWidget_X(_self_ : QMainWindow*, dockwidget : QDockWidget*) : Bool
    fun bg_QMainWindow_dockWidgetArea_QDockWidget_X(_self_ : QMainWindow*, dockwidget : QDockWidget*) : DockWidgetArea
    fun bg_QMainWindow_saveState_(_self_ : QMainWindow*) : QByteArray*
    fun bg_QMainWindow_saveState_int(_self_ : QMainWindow*, version : Int32) : QByteArray*
    fun bg_QMainWindow_restoreState_const_QByteArray_R(_self_ : QMainWindow*, state : QByteArray*) : Bool
    fun bg_QMainWindow_restoreState_const_QByteArray_R_int(_self_ : QMainWindow*, state : QByteArray*, version : Int32) : Bool
    fun bg_QMainWindow_createPopupMenu_(_self_ : QMainWindow*) : QMenu*
    fun bg_QMainWindow_setAnimated_bool(_self_ : QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_setDockNestingEnabled_bool(_self_ : QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(_self_ : QMainWindow*, set : Bool) : Void
    fun bg_QMainWindow_iconSizeChanged_const_QSize_R(_self_ : QMainWindow*, icon_size : QSize*) : Void
    fun bg_QMainWindow_iconSizeChanged_CONNECT_CrystalProc_void__const_QSizeR_(_self_ : QMainWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(_self_ : QMainWindow*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QMainWindow_toolButtonStyleChanged_CONNECT_CrystalProc_void__Qt__ToolButtonStyle_(_self_ : QMainWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMainWindow_tabifiedDockWidgetActivated_QDockWidget_X(_self_ : QMainWindow*, dock_widget : QDockWidget*) : Void
    fun bg_QMainWindow_tabifiedDockWidgetActivated_CONNECT_CrystalProc_void__QDockWidgetX_(_self_ : QMainWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(_self_ : QMainWindow*, event : QContextMenuEvent*) : Void
    fun bg_QMainWindow_event_QEvent_X(_self_ : QMainWindow*, event : QEvent*) : Bool
    fun bg_QMainWindow_DESTROY_(_self_ : QMainWindow*) : Void
    fun bg_QDialog_metaObject_(_self_ : QDialog*) : QMetaObject*
    fun bg_QDialog_qt_metacast_const_char_X(_self_ : QDialog*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDialog_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDialog_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDialog_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDialog_CONSTRUCT_() : QDialog*
    fun bg_QDialog_CONSTRUCT_QWidget_X(parent : QWidget*) : QDialog*
    fun bg_QDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QDialog*
    fun bg_QDialog_result_(_self_ : QDialog*) : Int32
    fun bg_QDialog_setVisible_bool(_self_ : QDialog*, visible : Bool) : Void
    fun bg_QDialog_setOrientation_Qt__Orientation(_self_ : QDialog*, orientation : Orientation) : Void
    fun bg_QDialog_orientation_(_self_ : QDialog*) : Orientation
    fun bg_QDialog_setExtension_QWidget_X(_self_ : QDialog*, extension : QWidget*) : Void
    fun bg_QDialog_extension_(_self_ : QDialog*) : QWidget*
    fun bg_QDialog_sizeHint_(_self_ : QDialog*) : QSize*
    fun bg_QDialog_minimumSizeHint_(_self_ : QDialog*) : QSize*
    fun bg_QDialog_setSizeGripEnabled_bool(_self_ : QDialog*, unnamed_arg_0 : Bool) : Void
    fun bg_QDialog_isSizeGripEnabled_(_self_ : QDialog*) : Bool
    fun bg_QDialog_setModal_bool(_self_ : QDialog*, modal : Bool) : Void
    fun bg_QDialog_setResult_int(_self_ : QDialog*, r : Int32) : Void
    fun bg_QDialog_finished_int(_self_ : QDialog*, result : Int32) : Void
    fun bg_QDialog_finished_CONNECT_CrystalProc_void__int_(_self_ : QDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDialog_accepted_(_self_ : QDialog*) : Void
    fun bg_QDialog_accepted_CONNECT_CrystalProc_void_(_self_ : QDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDialog_rejected_(_self_ : QDialog*) : Void
    fun bg_QDialog_rejected_CONNECT_CrystalProc_void_(_self_ : QDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDialog_open_(_self_ : QDialog*) : Void
    fun bg_QDialog_exec_(_self_ : QDialog*) : Int32
    fun bg_QDialog_done_int(_self_ : QDialog*, unnamed_arg_0 : Int32) : Void
    fun bg_QDialog_accept_(_self_ : QDialog*) : Void
    fun bg_QDialog_reject_(_self_ : QDialog*) : Void
    fun bg_QDialog_showExtension_bool(_self_ : QDialog*, unnamed_arg_0 : Bool) : Void
    fun bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X(unnamed_arg_0 : QDialogPrivate*, parent : QWidget*) : QDialog*
    fun bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(unnamed_arg_0 : QDialogPrivate*, parent : QWidget*, f : WindowFlags) : QDialog*
    fun bg_QDialog_keyPressEvent_QKeyEvent_X(_self_ : QDialog*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QDialog_closeEvent_QCloseEvent_X(_self_ : QDialog*, unnamed_arg_0 : QCloseEvent*) : Void
    fun bg_QDialog_showEvent_QShowEvent_X(_self_ : QDialog*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QDialog_resizeEvent_QResizeEvent_X(_self_ : QDialog*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QDialog_contextMenuEvent_QContextMenuEvent_X(_self_ : QDialog*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QDialog_eventFilter_QObject_X_QEvent_X(_self_ : QDialog*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QDialog_adjustPosition_QWidget_X(_self_ : QDialog*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QDialog_DESTROY_(_self_ : QDialog*) : Void
    fun bg_QLabel_metaObject_(_self_ : QLabel*) : QMetaObject*
    fun bg_QLabel_qt_metacast_const_char_X(_self_ : QLabel*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLabel_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLabel_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLabel_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLabel_CONSTRUCT_() : QLabel*
    fun bg_QLabel_CONSTRUCT_QWidget_X(parent : QWidget*) : QLabel*
    fun bg_QLabel_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QLabel*
    fun bg_QLabel_CONSTRUCT_const_QString_R(text : CrystalString) : QLabel*
    fun bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QLabel*
    fun bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(text : CrystalString, parent : QWidget*, f : WindowFlags) : QLabel*
    fun bg_QLabel_text_(_self_ : QLabel*) : CrystalString
    fun bg_QLabel_pixmap_(_self_ : QLabel*) : QPixmap*
    fun bg_QLabel_picture_(_self_ : QLabel*) : QPicture*
    fun bg_QLabel_movie_(_self_ : QLabel*) : QMovie*
    fun bg_QLabel_textFormat_(_self_ : QLabel*) : TextFormat
    fun bg_QLabel_setTextFormat_Qt__TextFormat(_self_ : QLabel*, unnamed_arg_0 : TextFormat) : Void
    fun bg_QLabel_alignment_(_self_ : QLabel*) : Alignment
    fun bg_QLabel_setAlignment_Qt__Alignment(_self_ : QLabel*, unnamed_arg_0 : Alignment) : Void
    fun bg_QLabel_setWordWrap_bool(_self_ : QLabel*, on : Bool) : Void
    fun bg_QLabel_wordWrap_(_self_ : QLabel*) : Bool
    fun bg_QLabel_indent_(_self_ : QLabel*) : Int32
    fun bg_QLabel_setIndent_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_margin_(_self_ : QLabel*) : Int32
    fun bg_QLabel_setMargin_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_hasScaledContents_(_self_ : QLabel*) : Bool
    fun bg_QLabel_setScaledContents_bool(_self_ : QLabel*, unnamed_arg_0 : Bool) : Void
    fun bg_QLabel_sizeHint_(_self_ : QLabel*) : QSize*
    fun bg_QLabel_minimumSizeHint_(_self_ : QLabel*) : QSize*
    fun bg_QLabel_setBuddy_QWidget_X(_self_ : QLabel*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QLabel_buddy_(_self_ : QLabel*) : QWidget*
    fun bg_QLabel_heightForWidth_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLabel_openExternalLinks_(_self_ : QLabel*) : Bool
    fun bg_QLabel_setOpenExternalLinks_bool(_self_ : QLabel*, open : Bool) : Void
    fun bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : QLabel*, flags : TextInteractionFlags) : Void
    fun bg_QLabel_textInteractionFlags_(_self_ : QLabel*) : TextInteractionFlags
    fun bg_QLabel_setSelection_int_int(_self_ : QLabel*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLabel_hasSelectedText_(_self_ : QLabel*) : Bool
    fun bg_QLabel_selectedText_(_self_ : QLabel*) : CrystalString
    fun bg_QLabel_selectionStart_(_self_ : QLabel*) : Int32
    fun bg_QLabel_setText_const_QString_R(_self_ : QLabel*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLabel_setPixmap_const_QPixmap_R(_self_ : QLabel*, unnamed_arg_0 : QPixmap*) : Void
    fun bg_QLabel_setPicture_const_QPicture_R(_self_ : QLabel*, unnamed_arg_0 : QPicture*) : Void
    fun bg_QLabel_setMovie_QMovie_X(_self_ : QLabel*, movie : QMovie*) : Void
    fun bg_QLabel_setNum_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_setNum_double(_self_ : QLabel*, unnamed_arg_0 : Float64) : Void
    fun bg_QLabel_clear_(_self_ : QLabel*) : Void
    fun bg_QLabel_linkActivated_const_QString_R(_self_ : QLabel*, link : CrystalString) : Void
    fun bg_QLabel_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QLabel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLabel_linkHovered_const_QString_R(_self_ : QLabel*, link : CrystalString) : Void
    fun bg_QLabel_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QLabel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLabel_event_QEvent_X(_self_ : QLabel*, e : QEvent*) : Bool
    fun bg_QLabel_keyPressEvent_QKeyEvent_X(_self_ : QLabel*, ev : QKeyEvent*) : Void
    fun bg_QLabel_paintEvent_QPaintEvent_X(_self_ : QLabel*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLabel_changeEvent_QEvent_X(_self_ : QLabel*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLabel_mousePressEvent_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseMoveEvent_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseReleaseEvent_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_contextMenuEvent_QContextMenuEvent_X(_self_ : QLabel*, ev : QContextMenuEvent*) : Void
    fun bg_QLabel_focusInEvent_QFocusEvent_X(_self_ : QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusOutEvent_QFocusEvent_X(_self_ : QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusNextPrevChild_bool(_self_ : QLabel*, next_ : Bool) : Bool
    fun bg_QLabel_DESTROY_(_self_ : QLabel*) : Void
    fun bg_QLCDNumber_metaObject_(_self_ : QLCDNumber*) : QMetaObject*
    fun bg_QLCDNumber_qt_metacast_const_char_X(_self_ : QLCDNumber*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLCDNumber_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLCDNumber_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLCDNumber_CONSTRUCT_() : QLCDNumber*
    fun bg_QLCDNumber_CONSTRUCT_QWidget_X(parent : QWidget*) : QLCDNumber*
    fun bg_QLCDNumber_CONSTRUCT_uint(num_digits : UInt32) : QLCDNumber*
    fun bg_QLCDNumber_CONSTRUCT_uint_QWidget_X(num_digits : UInt32, parent : QWidget*) : QLCDNumber*
    fun bg_QLCDNumber_smallDecimalPoint_(_self_ : QLCDNumber*) : Bool
    fun bg_QLCDNumber_digitCount_(_self_ : QLCDNumber*) : Int32
    fun bg_QLCDNumber_setDigitCount_int(_self_ : QLCDNumber*, n_digits : Int32) : Void
    fun bg_QLCDNumber_checkOverflow_double(_self_ : QLCDNumber*, num : Float64) : Bool
    fun bg_QLCDNumber_checkOverflow_int(_self_ : QLCDNumber*, num : Int32) : Bool
    fun bg_QLCDNumber_mode_(_self_ : QLCDNumber*) : LcdNumber::Mode
    fun bg_QLCDNumber_setMode_QLCDNumber__Mode(_self_ : QLCDNumber*, unnamed_arg_0 : LcdNumber::Mode) : Void
    fun bg_QLCDNumber_segmentStyle_(_self_ : QLCDNumber*) : LcdNumber::SegmentStyle
    fun bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(_self_ : QLCDNumber*, unnamed_arg_0 : LcdNumber::SegmentStyle) : Void
    fun bg_QLCDNumber_value_(_self_ : QLCDNumber*) : Float64
    fun bg_QLCDNumber_intValue_(_self_ : QLCDNumber*) : Int32
    fun bg_QLCDNumber_sizeHint_(_self_ : QLCDNumber*) : QSize*
    fun bg_QLCDNumber_display_const_QString_R(_self_ : QLCDNumber*, str : CrystalString) : Void
    fun bg_QLCDNumber_display_int(_self_ : QLCDNumber*, num : Int32) : Void
    fun bg_QLCDNumber_display_double(_self_ : QLCDNumber*, num : Float64) : Void
    fun bg_QLCDNumber_setHexMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setDecMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setOctMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setBinMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setSmallDecimalPoint_bool(_self_ : QLCDNumber*, unnamed_arg_0 : Bool) : Void
    fun bg_QLCDNumber_overflow_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_overflow_CONNECT_CrystalProc_void_(_self_ : QLCDNumber*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLCDNumber_event_QEvent_X(_self_ : QLCDNumber*, e : QEvent*) : Bool
    fun bg_QLCDNumber_paintEvent_QPaintEvent_X(_self_ : QLCDNumber*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLCDNumber_DESTROY_(_self_ : QLCDNumber*) : Void
    fun bg_QPushButton_metaObject_(_self_ : QPushButton*) : QMetaObject*
    fun bg_QPushButton_qt_metacast_const_char_X(_self_ : QPushButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QPushButton_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QPushButton_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QPushButton_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QPushButton_CONSTRUCT_() : QPushButton*
    fun bg_QPushButton_CONSTRUCT_QWidget_X(parent : QWidget*) : QPushButton*
    fun bg_QPushButton_CONSTRUCT_const_QString_R(text : CrystalString) : QPushButton*
    fun bg_QPushButton_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QPushButton*
    fun bg_QPushButton_CONSTRUCT_const_QIcon_R_const_QString_R(icon : QIcon*, text : CrystalString) : QPushButton*
    fun bg_QPushButton_CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(icon : QIcon*, text : CrystalString, parent : QWidget*) : QPushButton*
    fun bg_QPushButton_sizeHint_(_self_ : QPushButton*) : QSize*
    fun bg_QPushButton_minimumSizeHint_(_self_ : QPushButton*) : QSize*
    fun bg_QPushButton_autoDefault_(_self_ : QPushButton*) : Bool
    fun bg_QPushButton_setAutoDefault_bool(_self_ : QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_isDefault_(_self_ : QPushButton*) : Bool
    fun bg_QPushButton_setDefault_bool(_self_ : QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_setMenu_QMenu_X(_self_ : QPushButton*, menu : QMenu*) : Void
    fun bg_QPushButton_menu_(_self_ : QPushButton*) : QMenu*
    fun bg_QPushButton_setFlat_bool(_self_ : QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_isFlat_(_self_ : QPushButton*) : Bool
    fun bg_QPushButton_showMenu_(_self_ : QPushButton*) : Void
    fun bg_QPushButton_event_QEvent_X(_self_ : QPushButton*, e : QEvent*) : Bool
    fun bg_QPushButton_paintEvent_QPaintEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QPushButton_keyPressEvent_QKeyEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QPushButton_focusInEvent_QFocusEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_focusOutEvent_QFocusEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_initStyleOption_QStyleOptionButton_X(_self_ : QPushButton*, option : QStyleOptionButton*) : Void
    fun bg_QPushButton_CONSTRUCT_QPushButtonPrivate_R(dd : QPushButtonPrivate*) : QPushButton*
    fun bg_QPushButton_CONSTRUCT_QPushButtonPrivate_R_QWidget_X(dd : QPushButtonPrivate*, parent : QWidget*) : QPushButton*
    fun bg_QPushButton_DESTROY_(_self_ : QPushButton*) : Void
    fun bg_QCheckBox_metaObject_(_self_ : QCheckBox*) : QMetaObject*
    fun bg_QCheckBox_qt_metacast_const_char_X(_self_ : QCheckBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QCheckBox_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QCheckBox_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QCheckBox_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QCheckBox_CONSTRUCT_() : QCheckBox*
    fun bg_QCheckBox_CONSTRUCT_QWidget_X(parent : QWidget*) : QCheckBox*
    fun bg_QCheckBox_CONSTRUCT_const_QString_R(text : CrystalString) : QCheckBox*
    fun bg_QCheckBox_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QCheckBox*
    fun bg_QCheckBox_sizeHint_(_self_ : QCheckBox*) : QSize*
    fun bg_QCheckBox_minimumSizeHint_(_self_ : QCheckBox*) : QSize*
    fun bg_QCheckBox_setTristate_(_self_ : QCheckBox*) : Void
    fun bg_QCheckBox_setTristate_bool(_self_ : QCheckBox*, y : Bool) : Void
    fun bg_QCheckBox_isTristate_(_self_ : QCheckBox*) : Bool
    fun bg_QCheckBox_checkState_(_self_ : QCheckBox*) : CheckState
    fun bg_QCheckBox_setCheckState_Qt__CheckState(_self_ : QCheckBox*, state : CheckState) : Void
    fun bg_QCheckBox_stateChanged_int(_self_ : QCheckBox*, unnamed_arg_0 : Int32) : Void
    fun bg_QCheckBox_stateChanged_CONNECT_CrystalProc_void__int_(_self_ : QCheckBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCheckBox_event_QEvent_X(_self_ : QCheckBox*, e : QEvent*) : Bool
    fun bg_QCheckBox_hitButton_const_QPoint_R(_self_ : QCheckBox*, pos : QPoint*) : Bool
    fun bg_QCheckBox_checkStateSet_(_self_ : QCheckBox*) : Void
    fun bg_QCheckBox_nextCheckState_(_self_ : QCheckBox*) : Void
    fun bg_QCheckBox_paintEvent_QPaintEvent_X(_self_ : QCheckBox*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(_self_ : QCheckBox*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QCheckBox_initStyleOption_QStyleOptionButton_X(_self_ : QCheckBox*, option : QStyleOptionButton*) : Void
    fun bg_QCheckBox_DESTROY_(_self_ : QCheckBox*) : Void
    fun bg_QCoreApplication_metaObject_(_self_ : QCoreApplication*) : QMetaObject*
    fun bg_QCoreApplication_qt_metacast_const_char_X(_self_ : QCoreApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QCoreApplication_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QCoreApplication_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QCoreApplication_CONSTRUCT_int_R_char_XX(argc : Int32*, argv : UInt8**) : QCoreApplication*
    fun bg_QCoreApplication_CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : QCoreApplication*
    fun bg_QCoreApplication_arguments_STATIC_() : Void*
    fun bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute(attribute : ApplicationAttribute) : Void
    fun bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(attribute : ApplicationAttribute, on : Bool) : Void
    fun bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(attribute : ApplicationAttribute) : Bool
    fun bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(org_domain : CrystalString) : Void
    fun bg_QCoreApplication_organizationDomain_STATIC_() : CrystalString
    fun bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(org_name : CrystalString) : Void
    fun bg_QCoreApplication_organizationName_STATIC_() : CrystalString
    fun bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(application : CrystalString) : Void
    fun bg_QCoreApplication_applicationName_STATIC_() : CrystalString
    fun bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(version : CrystalString) : Void
    fun bg_QCoreApplication_applicationVersion_STATIC_() : CrystalString
    fun bg_QCoreApplication_setSetuidAllowed_STATIC_bool(allow : Bool) : Void
    fun bg_QCoreApplication_isSetuidAllowed_STATIC_() : Bool
    fun bg_QCoreApplication_instance_STATIC_() : QCoreApplication*
    fun bg_QCoreApplication_exec_STATIC_() : Int32
    fun bg_QCoreApplication_processEvents_STATIC_() : Void
    fun bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(flags : EventLoop::ProcessEventsFlags) : Void
    fun bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(flags : EventLoop::ProcessEventsFlags, maxtime : Int32) : Void
    fun bg_QCoreApplication_exit_STATIC_() : Void
    fun bg_QCoreApplication_exit_STATIC_int(retcode : Int32) : Void
    fun bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(receiver : QObject*, event : QEvent*) : Bool
    fun bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X(receiver : QObject*, event : QEvent*) : Void
    fun bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(receiver : QObject*, event : QEvent*, priority : Int32) : Void
    fun bg_QCoreApplication_sendPostedEvents_STATIC_() : Void
    fun bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X(receiver : QObject*) : Void
    fun bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(receiver : QObject*, event_type : Int32) : Void
    fun bg_QCoreApplication_removePostedEvents_STATIC_QObject_X(receiver : QObject*) : Void
    fun bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(receiver : QObject*, event_type : Int32) : Void
    fun bg_QCoreApplication_hasPendingEvents_STATIC_() : Bool
    fun bg_QCoreApplication_eventDispatcher_STATIC_() : QAbstractEventDispatcher*
    fun bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(event_dispatcher : QAbstractEventDispatcher*) : Void
    fun bg_QCoreApplication_notify_QObject_X_QEvent_X(_self_ : QCoreApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QCoreApplication_startingUp_STATIC_() : Bool
    fun bg_QCoreApplication_closingDown_STATIC_() : Bool
    fun bg_QCoreApplication_applicationDirPath_STATIC_() : CrystalString
    fun bg_QCoreApplication_applicationFilePath_STATIC_() : CrystalString
    fun bg_QCoreApplication_applicationPid_STATIC_() : Int64
    fun bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(unnamed_arg_0 : Void*) : Void
    fun bg_QCoreApplication_libraryPaths_STATIC_() : Void*
    fun bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(message_file : QTranslator*) : Bool
    fun bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(message_file : QTranslator*) : Bool
    fun bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X(context : UInt8*, key : UInt8*) : CrystalString
    fun bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X(context : UInt8*, key : UInt8*, disambiguation : UInt8*) : CrystalString
    fun bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(context : UInt8*, key : UInt8*, disambiguation : UInt8*, n : Int32) : CrystalString
    fun bg_QCoreApplication_flush_STATIC_() : Void
    fun bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QCoreApplication*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QCoreApplication*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QCoreApplication_isQuitLockEnabled_STATIC_() : Bool
    fun bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(enabled : Bool) : Void
    fun bg_QCoreApplication_quit_STATIC_() : Void
    fun bg_QCoreApplication_organizationNameChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_organizationNameChanged_CONNECT_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_organizationDomainChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_organizationDomainChanged_CONNECT_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_applicationNameChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_applicationNameChanged_CONNECT_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_applicationVersionChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_applicationVersionChanged_CONNECT_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_event_QEvent_X(_self_ : QCoreApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : QCoreApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QCoreApplication_CONSTRUCT_QCoreApplicationPrivate_R(p : QCoreApplicationPrivate*) : QCoreApplication*
    fun bg_QCoreApplication_DESTROY_(_self_ : QCoreApplication*) : Void
    fun bg_QGuiApplication_metaObject_(_self_ : QGuiApplication*) : QMetaObject*
    fun bg_QGuiApplication_qt_metacast_const_char_X(_self_ : QGuiApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGuiApplication_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGuiApplication_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGuiApplication_CONSTRUCT_int_R_char_XX(argc : Int32*, argv : UInt8**) : QGuiApplication*
    fun bg_QGuiApplication_CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : QGuiApplication*
    fun bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(name : CrystalString) : Void
    fun bg_QGuiApplication_applicationDisplayName_STATIC_() : CrystalString
    fun bg_QGuiApplication_setDesktopFileName_STATIC_const_QString_R(name : CrystalString) : Void
    fun bg_QGuiApplication_desktopFileName_STATIC_() : CrystalString
    fun bg_QGuiApplication_allWindows_STATIC_() : QWindowList*
    fun bg_QGuiApplication_topLevelWindows_STATIC_() : QWindowList*
    fun bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(pos : QPoint*) : QWindow*
    fun bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(icon : QIcon*) : Void
    fun bg_QGuiApplication_windowIcon_STATIC_() : QIcon*
    fun bg_QGuiApplication_platformName_STATIC_() : CrystalString
    fun bg_QGuiApplication_modalWindow_STATIC_() : QWindow*
    fun bg_QGuiApplication_focusWindow_STATIC_() : QWindow*
    fun bg_QGuiApplication_focusObject_STATIC_() : QObject*
    fun bg_QGuiApplication_primaryScreen_STATIC_() : QScreen*
    fun bg_QGuiApplication_overrideCursor_STATIC_() : QCursor*
    fun bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0 : QCursor*) : Void
    fun bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0 : QCursor*) : Void
    fun bg_QGuiApplication_restoreOverrideCursor_STATIC_() : Void
    fun bg_QGuiApplication_font_STATIC_() : QFont*
    fun bg_QGuiApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0 : QFont*) : Void
    fun bg_QGuiApplication_clipboard_STATIC_() : QClipboard*
    fun bg_QGuiApplication_palette_STATIC_() : QPalette*
    fun bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(pal : QPalette*) : Void
    fun bg_QGuiApplication_keyboardModifiers_STATIC_() : KeyboardModifiers
    fun bg_QGuiApplication_queryKeyboardModifiers_STATIC_() : KeyboardModifiers
    fun bg_QGuiApplication_mouseButtons_STATIC_() : MouseButtons
    fun bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(direction : LayoutDirection) : Void
    fun bg_QGuiApplication_layoutDirection_STATIC_() : LayoutDirection
    fun bg_QGuiApplication_isRightToLeft_STATIC_() : Bool
    fun bg_QGuiApplication_isLeftToRight_STATIC_() : Bool
    fun bg_QGuiApplication_styleHints_STATIC_() : QStyleHints*
    fun bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(on : Bool) : Void
    fun bg_QGuiApplication_desktopSettingsAware_STATIC_() : Bool
    fun bg_QGuiApplication_inputMethod_STATIC_() : QInputMethod*
    fun bg_QGuiApplication_platformNativeInterface_STATIC_() : QPlatformNativeInterface*
    fun bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(quit : Bool) : Void
    fun bg_QGuiApplication_quitOnLastWindowClosed_STATIC_() : Bool
    fun bg_QGuiApplication_applicationState_STATIC_() : ApplicationState
    fun bg_QGuiApplication_exec_STATIC_() : Int32
    fun bg_QGuiApplication_notify_QObject_X_QEvent_X(_self_ : QGuiApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QGuiApplication_isSessionRestored_(_self_ : QGuiApplication*) : Bool
    fun bg_QGuiApplication_sessionId_(_self_ : QGuiApplication*) : CrystalString
    fun bg_QGuiApplication_sessionKey_(_self_ : QGuiApplication*) : CrystalString
    fun bg_QGuiApplication_isSavingSession_(_self_ : QGuiApplication*) : Bool
    fun bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_() : Bool
    fun bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(unnamed_arg_0 : Bool) : Void
    fun bg_QGuiApplication_sync_STATIC_() : Void
    fun bg_QGuiApplication_fontDatabaseChanged_(_self_ : QGuiApplication*) : Void
    fun bg_QGuiApplication_fontDatabaseChanged_CONNECT_CrystalProc_void_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_screenAdded_QScreen_X(_self_ : QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_screenAdded_CONNECT_CrystalProc_void__QScreenX_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_screenRemoved_QScreen_X(_self_ : QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_screenRemoved_CONNECT_CrystalProc_void__QScreenX_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_primaryScreenChanged_QScreen_X(_self_ : QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_primaryScreenChanged_CONNECT_CrystalProc_void__QScreenX_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_lastWindowClosed_(_self_ : QGuiApplication*) : Void
    fun bg_QGuiApplication_lastWindowClosed_CONNECT_CrystalProc_void_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_focusObjectChanged_QObject_X(_self_ : QGuiApplication*, focus_object : QObject*) : Void
    fun bg_QGuiApplication_focusObjectChanged_CONNECT_CrystalProc_void__QObjectX_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_focusWindowChanged_QWindow_X(_self_ : QGuiApplication*, focus_window : QWindow*) : Void
    fun bg_QGuiApplication_focusWindowChanged_CONNECT_CrystalProc_void__QWindowX_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(_self_ : QGuiApplication*, state : ApplicationState) : Void
    fun bg_QGuiApplication_applicationStateChanged_CONNECT_CrystalProc_void__Qt__ApplicationState_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(_self_ : QGuiApplication*, direction : LayoutDirection) : Void
    fun bg_QGuiApplication_layoutDirectionChanged_CONNECT_CrystalProc_void__Qt__LayoutDirection_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_commitDataRequest_QSessionManager_R(_self_ : QGuiApplication*, session_manager : QSessionManager*) : Void
    fun bg_QGuiApplication_commitDataRequest_CONNECT_CrystalProc_void__QSessionManagerR_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_saveStateRequest_QSessionManager_R(_self_ : QGuiApplication*, session_manager : QSessionManager*) : Void
    fun bg_QGuiApplication_saveStateRequest_CONNECT_CrystalProc_void__QSessionManagerR_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_paletteChanged_const_QPalette_R(_self_ : QGuiApplication*, pal : QPalette*) : Void
    fun bg_QGuiApplication_paletteChanged_CONNECT_CrystalProc_void__const_QPaletteR_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_applicationDisplayNameChanged_(_self_ : QGuiApplication*) : Void
    fun bg_QGuiApplication_applicationDisplayNameChanged_CONNECT_CrystalProc_void_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_event_QEvent_X(_self_ : QGuiApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : QGuiApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QGuiApplication_CONSTRUCT_QGuiApplicationPrivate_R(p : QGuiApplicationPrivate*) : QGuiApplication*
    fun bg_QGuiApplication_DESTROY_(_self_ : QGuiApplication*) : Void
    fun bg_QApplication_metaObject_(_self_ : QApplication*) : QMetaObject*
    fun bg_QApplication_qt_metacast_const_char_X(_self_ : QApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QApplication_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QApplication_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QApplication_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QApplication_CONSTRUCT_int_R_char_XX(argc : Int32*, argv : UInt8**) : QApplication*
    fun bg_QApplication_CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : QApplication*
    fun bg_QApplication_style_STATIC_() : QStyle*
    fun bg_QApplication_setStyle_STATIC_QStyle_X(unnamed_arg_0 : QStyle*) : Void
    fun bg_QApplication_setStyle_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QStyle*
    fun bg_QApplication_colorSpec_STATIC_() : Int32
    fun bg_QApplication_setColorSpec_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_palette_STATIC_const_QWidget_X(unnamed_arg_0 : QWidget*) : QPalette*
    fun bg_QApplication_palette_STATIC_const_char_X(class_name : UInt8*) : QPalette*
    fun bg_QApplication_setPalette_STATIC_const_QPalette_R(unnamed_arg_0 : QPalette*) : Void
    fun bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(unnamed_arg_0 : QPalette*, class_name : UInt8*) : Void
    fun bg_QApplication_font_STATIC_() : QFont*
    fun bg_QApplication_font_STATIC_const_QWidget_X(unnamed_arg_0 : QWidget*) : QFont*
    fun bg_QApplication_font_STATIC_const_char_X(class_name : UInt8*) : QFont*
    fun bg_QApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0 : QFont*) : Void
    fun bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(unnamed_arg_0 : QFont*, class_name : UInt8*) : Void
    fun bg_QApplication_fontMetrics_STATIC_() : QFontMetrics*
    fun bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(icon : QIcon*) : Void
    fun bg_QApplication_windowIcon_STATIC_() : QIcon*
    fun bg_QApplication_allWidgets_STATIC_() : Void*
    fun bg_QApplication_topLevelWidgets_STATIC_() : Void*
    fun bg_QApplication_desktop_STATIC_() : QDesktopWidget*
    fun bg_QApplication_activePopupWidget_STATIC_() : QWidget*
    fun bg_QApplication_activeModalWidget_STATIC_() : QWidget*
    fun bg_QApplication_focusWidget_STATIC_() : QWidget*
    fun bg_QApplication_activeWindow_STATIC_() : QWidget*
    fun bg_QApplication_setActiveWindow_STATIC_QWidget_X(act : QWidget*) : Void
    fun bg_QApplication_widgetAt_STATIC_const_QPoint_R(p : QPoint*) : QWidget*
    fun bg_QApplication_widgetAt_STATIC_int_int(x : Int32, y : Int32) : QWidget*
    fun bg_QApplication_topLevelAt_STATIC_const_QPoint_R(p : QPoint*) : QWidget*
    fun bg_QApplication_topLevelAt_STATIC_int_int(x : Int32, y : Int32) : QWidget*
    fun bg_QApplication_beep_STATIC_() : Void
    fun bg_QApplication_alert_STATIC_QWidget_X(widget : QWidget*) : Void
    fun bg_QApplication_alert_STATIC_QWidget_X_int(widget : QWidget*, duration : Int32) : Void
    fun bg_QApplication_setCursorFlashTime_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_cursorFlashTime_STATIC_() : Int32
    fun bg_QApplication_setDoubleClickInterval_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_doubleClickInterval_STATIC_() : Int32
    fun bg_QApplication_setKeyboardInputInterval_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_keyboardInputInterval_STATIC_() : Int32
    fun bg_QApplication_setWheelScrollLines_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_wheelScrollLines_STATIC_() : Int32
    fun bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(unnamed_arg_0 : QSize*) : Void
    fun bg_QApplication_globalStrut_STATIC_() : QSize*
    fun bg_QApplication_setStartDragTime_STATIC_int(ms : Int32) : Void
    fun bg_QApplication_startDragTime_STATIC_() : Int32
    fun bg_QApplication_setStartDragDistance_STATIC_int(l : Int32) : Void
    fun bg_QApplication_startDragDistance_STATIC_() : Int32
    fun bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0 : UIEffect) : Bool
    fun bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0 : UIEffect) : Void
    fun bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(unnamed_arg_0 : UIEffect, enable : Bool) : Void
    fun bg_QApplication_exec_STATIC_() : Int32
    fun bg_QApplication_notify_QObject_X_QEvent_X(_self_ : QApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QApplication_focusChanged_QWidget_X_QWidget_X(_self_ : QApplication*, old : QWidget*, now : QWidget*) : Void
    fun bg_QApplication_focusChanged_CONNECT_CrystalProc_void__QWidgetX__QWidgetX_(_self_ : QApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QApplication_styleSheet_(_self_ : QApplication*) : CrystalString
    fun bg_QApplication_setStyleSheet_const_QString_R(_self_ : QApplication*, sheet : CrystalString) : Void
    fun bg_QApplication_setAutoSipEnabled_const_bool(_self_ : QApplication*, enabled : Bool) : Void
    fun bg_QApplication_autoSipEnabled_(_self_ : QApplication*) : Bool
    fun bg_QApplication_closeAllWindows_STATIC_() : Void
    fun bg_QApplication_aboutQt_STATIC_() : Void
    fun bg_QApplication_event_QEvent_X(_self_ : QApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : QApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QApplication_DESTROY_(_self_ : QApplication*) : Void
    fun bg_QImage_CONSTRUCT_() : QImage*
    fun bg_QImage_CONSTRUCT_const_QSize_R_QImage__Format(size : QSize*, format : Image::Format) : QImage*
    fun bg_QImage_CONSTRUCT_int_int_QImage__Format(width : Int32, height : Int32, format : Image::Format) : QImage*
    fun bg_QImage_CONSTRUCT_uchar_X_int_int_QImage__Format(data : UInt8*, width : Int32, height : Int32, format : Image::Format) : QImage*
    fun bg_QImage_CONSTRUCT_const_uchar_X_int_int_QImage__Format(data : UInt8*, width : Int32, height : Int32, format : Image::Format) : QImage*
    fun bg_QImage_CONSTRUCT_uchar_X_int_int_int_QImage__Format(data : UInt8*, width : Int32, height : Int32, bytes_per_line : Int32, format : Image::Format) : QImage*
    fun bg_QImage_CONSTRUCT_const_uchar_X_int_int_int_QImage__Format(data : UInt8*, width : Int32, height : Int32, bytes_per_line : Int32, format : Image::Format) : QImage*
    fun bg_QImage_CONSTRUCT_const_char_Xconst_X(xpm : UInt8**) : QImage*
    fun bg_QImage_CONSTRUCT_const_QString_R(file_name : CrystalString) : QImage*
    fun bg_QImage_CONSTRUCT_const_QString_R_const_char_X(file_name : CrystalString, format : UInt8*) : QImage*
    fun bg_QImage_swap_QImage_R(_self_ : QImage*, other : QImage*) : Void
    fun bg_QImage_isNull_(_self_ : QImage*) : Bool
    fun bg_QImage_devType_(_self_ : QImage*) : Int32
    fun bg_QImage_detach_(_self_ : QImage*) : Void
    fun bg_QImage_isDetached_(_self_ : QImage*) : Bool
    fun bg_QImage_copy_(_self_ : QImage*) : QImage*
    fun bg_QImage_copy_const_QRect_R(_self_ : QImage*, rect : QRect*) : QImage*
    fun bg_QImage_copy_int_int_int_int(_self_ : QImage*, x : Int32, y : Int32, w : Int32, h : Int32) : QImage*
    fun bg_QImage_format_(_self_ : QImage*) : Image::Format
    fun bg_QImage_convertToFormat_QImage__Format(_self_ : QImage*, f : Image::Format) : QImage*
    fun bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(_self_ : QImage*, f : Image::Format, flags : ImageConversionFlags) : QImage*
    fun bg_QImage_reinterpretAsFormat_QImage__Format(_self_ : QImage*, f : Image::Format) : Bool
    fun bg_QImage_width_(_self_ : QImage*) : Int32
    fun bg_QImage_height_(_self_ : QImage*) : Int32
    fun bg_QImage_size_(_self_ : QImage*) : QSize*
    fun bg_QImage_rect_(_self_ : QImage*) : QRect*
    fun bg_QImage_depth_(_self_ : QImage*) : Int32
    fun bg_QImage_colorCount_(_self_ : QImage*) : Int32
    fun bg_QImage_bitPlaneCount_(_self_ : QImage*) : Int32
    fun bg_QImage_setColorCount_int(_self_ : QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_allGray_(_self_ : QImage*) : Bool
    fun bg_QImage_isGrayscale_(_self_ : QImage*) : Bool
    fun bg_QImage_bits_(_self_ : QImage*) : UInt8*
    fun bg_QImage_constBits_(_self_ : QImage*) : UInt8*
    fun bg_QImage_byteCount_(_self_ : QImage*) : Int32
    fun bg_QImage_scanLine_int(_self_ : QImage*, unnamed_arg_0 : Int32) : UInt8*
    fun bg_QImage_constScanLine_int(_self_ : QImage*, unnamed_arg_0 : Int32) : UInt8*
    fun bg_QImage_bytesPerLine_(_self_ : QImage*) : Int32
    fun bg_QImage_valid_int_int(_self_ : QImage*, x : Int32, y : Int32) : Bool
    fun bg_QImage_valid_const_QPoint_R(_self_ : QImage*, pt : QPoint*) : Bool
    fun bg_QImage_pixelIndex_int_int(_self_ : QImage*, x : Int32, y : Int32) : Int32
    fun bg_QImage_pixelIndex_const_QPoint_R(_self_ : QImage*, pt : QPoint*) : Int32
    fun bg_QImage_setPixel_int_int_uint(_self_ : QImage*, x : Int32, y : Int32, index_or_rgb : UInt32) : Void
    fun bg_QImage_setPixel_const_QPoint_R_uint(_self_ : QImage*, pt : QPoint*, index_or_rgb : UInt32) : Void
    fun bg_QImage_pixelColor_int_int(_self_ : QImage*, x : Int32, y : Int32) : QColor*
    fun bg_QImage_pixelColor_const_QPoint_R(_self_ : QImage*, pt : QPoint*) : QColor*
    fun bg_QImage_setPixelColor_int_int_const_QColor_R(_self_ : QImage*, x : Int32, y : Int32, c : QColor*) : Void
    fun bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(_self_ : QImage*, pt : QPoint*, c : QColor*) : Void
    fun bg_QImage_fill_uint(_self_ : QImage*, pixel : UInt32) : Void
    fun bg_QImage_fill_const_QColor_R(_self_ : QImage*, color : QColor*) : Void
    fun bg_QImage_fill_Qt__GlobalColor(_self_ : QImage*, color : GlobalColor) : Void
    fun bg_QImage_hasAlphaChannel_(_self_ : QImage*) : Bool
    fun bg_QImage_setAlphaChannel_const_QImage_R(_self_ : QImage*, alpha_channel : QImage*) : Void
    fun bg_QImage_alphaChannel_(_self_ : QImage*) : QImage*
    fun bg_QImage_createAlphaMask_(_self_ : QImage*) : QImage*
    fun bg_QImage_createAlphaMask_Qt__ImageConversionFlags(_self_ : QImage*, flags : ImageConversionFlags) : QImage*
    fun bg_QImage_createHeuristicMask_(_self_ : QImage*) : QImage*
    fun bg_QImage_createHeuristicMask_bool(_self_ : QImage*, clip_tight : Bool) : QImage*
    fun bg_QImage_scaled_int_int(_self_ : QImage*, w : Int32, h : Int32) : QImage*
    fun bg_QImage_scaled_int_int_Qt__AspectRatioMode(_self_ : QImage*, w : Int32, h : Int32, aspect_mode : AspectRatioMode) : QImage*
    fun bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QImage*, w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : QImage*
    fun bg_QImage_scaled_const_QSize_R(_self_ : QImage*, s : QSize*) : QImage*
    fun bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode(_self_ : QImage*, s : QSize*, aspect_mode : AspectRatioMode) : QImage*
    fun bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QImage*, s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : QImage*
    fun bg_QImage_scaledToWidth_int(_self_ : QImage*, w : Int32) : QImage*
    fun bg_QImage_scaledToWidth_int_Qt__TransformationMode(_self_ : QImage*, w : Int32, mode : TransformationMode) : QImage*
    fun bg_QImage_scaledToHeight_int(_self_ : QImage*, h : Int32) : QImage*
    fun bg_QImage_scaledToHeight_int_Qt__TransformationMode(_self_ : QImage*, h : Int32, mode : TransformationMode) : QImage*
    fun bg_QImage_transformed_const_QMatrix_R(_self_ : QImage*, matrix : QMatrix*) : QImage*
    fun bg_QImage_transformed_const_QMatrix_R_Qt__TransformationMode(_self_ : QImage*, matrix : QMatrix*, mode : TransformationMode) : QImage*
    fun bg_QImage_trueMatrix_STATIC_const_QMatrix_R_int_int(unnamed_arg_0 : QMatrix*, w : Int32, h : Int32) : QMatrix*
    fun bg_QImage_transformed_const_QTransform_R(_self_ : QImage*, matrix : QTransform*) : QImage*
    fun bg_QImage_transformed_const_QTransform_R_Qt__TransformationMode(_self_ : QImage*, matrix : QTransform*, mode : TransformationMode) : QImage*
    fun bg_QImage_trueMatrix_STATIC_const_QTransform_R_int_int(unnamed_arg_0 : QTransform*, w : Int32, h : Int32) : QTransform*
    fun bg_QImage_mirrored_(_self_ : QImage*) : QImage*
    fun bg_QImage_mirrored_bool(_self_ : QImage*, horizontally : Bool) : QImage*
    fun bg_QImage_mirrored_bool_bool(_self_ : QImage*, horizontally : Bool, vertically : Bool) : QImage*
    fun bg_QImage_rgbSwapped_(_self_ : QImage*) : QImage*
    fun bg_QImage_invertPixels_(_self_ : QImage*) : Void
    fun bg_QImage_invertPixels_QImage__InvertMode(_self_ : QImage*, unnamed_arg_0 : Image::InvertMode) : Void
    fun bg_QImage_load_QIODevice_X_const_char_X(_self_ : QImage*, device : QIODevice*, format : UInt8*) : Bool
    fun bg_QImage_load_const_QString_R(_self_ : QImage*, file_name : CrystalString) : Bool
    fun bg_QImage_load_const_QString_R_const_char_X(_self_ : QImage*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QImage_loadFromData_const_uchar_X_int(_self_ : QImage*, buf : UInt8*, len : Int32) : Bool
    fun bg_QImage_loadFromData_const_uchar_X_int_const_char_X(_self_ : QImage*, buf : UInt8*, len : Int32, format : UInt8*) : Bool
    fun bg_QImage_loadFromData_const_QByteArray_R(_self_ : QImage*, data : QByteArray*) : Bool
    fun bg_QImage_loadFromData_const_QByteArray_R_const_char_X(_self_ : QImage*, data : QByteArray*, aformat : UInt8*) : Bool
    fun bg_QImage_save_const_QString_R(_self_ : QImage*, file_name : CrystalString) : Bool
    fun bg_QImage_save_const_QString_R_const_char_X(_self_ : QImage*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QImage_save_const_QString_R_const_char_X_int(_self_ : QImage*, file_name : CrystalString, format : UInt8*, quality : Int32) : Bool
    fun bg_QImage_save_QIODevice_X(_self_ : QImage*, device : QIODevice*) : Bool
    fun bg_QImage_save_QIODevice_X_const_char_X(_self_ : QImage*, device : QIODevice*, format : UInt8*) : Bool
    fun bg_QImage_save_QIODevice_X_const_char_X_int(_self_ : QImage*, device : QIODevice*, format : UInt8*, quality : Int32) : Bool
    fun bg_QImage_fromData_STATIC_const_uchar_X_int(data : UInt8*, size : Int32) : QImage*
    fun bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(data : UInt8*, size : Int32, format : UInt8*) : QImage*
    fun bg_QImage_fromData_STATIC_const_QByteArray_R(data : QByteArray*) : QImage*
    fun bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(data : QByteArray*, format : UInt8*) : QImage*
    fun bg_QImage_cacheKey_(_self_ : QImage*) : Int64
    fun bg_QImage_paintEngine_(_self_ : QImage*) : QPaintEngine*
    fun bg_QImage_dotsPerMeterX_(_self_ : QImage*) : Int32
    fun bg_QImage_dotsPerMeterY_(_self_ : QImage*) : Int32
    fun bg_QImage_setDotsPerMeterX_int(_self_ : QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_setDotsPerMeterY_int(_self_ : QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_offset_(_self_ : QImage*) : QPoint
    fun bg_QImage_setOffset_const_QPoint_R(_self_ : QImage*, unnamed_arg_0 : QPoint*) : Void
    fun bg_QImage_textKeys_(_self_ : QImage*) : Void*
    fun bg_QImage_text_(_self_ : QImage*) : CrystalString
    fun bg_QImage_text_const_QString_R(_self_ : QImage*, key : CrystalString) : CrystalString
    fun bg_QImage_setText_const_QString_R_const_QString_R(_self_ : QImage*, key : CrystalString, value : CrystalString) : Void
    fun bg_QImage_metric_QPaintDevice__PaintDeviceMetric(_self_ : QImage*, metric : PaintDeviceMetric) : Int32
    fun bg_QImage_mirrored_helper_bool_bool(_self_ : QImage*, horizontal : Bool, vertical : Bool) : QImage*
    fun bg_QImage_rgbSwapped_helper_(_self_ : QImage*) : QImage*
    fun bg_QImage_mirrored_inplace_bool_bool(_self_ : QImage*, horizontal : Bool, vertical : Bool) : Void
    fun bg_QImage_rgbSwapped_inplace_(_self_ : QImage*) : Void
    fun bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(_self_ : QImage*, format : Image::Format, flags : ImageConversionFlags) : QImage*
    fun bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(_self_ : QImage*, format : Image::Format, flags : ImageConversionFlags) : Bool
    fun bg_QImage_smoothScaled_int_int(_self_ : QImage*, w : Int32, h : Int32) : QImage*
    fun bg_QImage_DESTROY_(_self_ : QImage*) : Void
    fun bg_QPixmap_CONSTRUCT_() : QPixmap*
    fun bg_QPixmap_CONSTRUCT_QPlatformPixmap_X(data : QPlatformPixmap*) : QPixmap*
    fun bg_QPixmap_CONSTRUCT_int_int(w : Int32, h : Int32) : QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_QSize_R(unnamed_arg_0 : QSize*) : QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_QString_R(file_name : CrystalString) : QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X(file_name : CrystalString, format : UInt8*) : QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(file_name : CrystalString, format : UInt8*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_char_Xconst_X(xpm : UInt8**) : QPixmap*
    fun bg_QPixmap_swap_QPixmap_R(_self_ : QPixmap*, other : QPixmap*) : Void
    fun bg_QPixmap_isNull_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_devType_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_width_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_height_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_size_(_self_ : QPixmap*) : QSize*
    fun bg_QPixmap_rect_(_self_ : QPixmap*) : QRect*
    fun bg_QPixmap_depth_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_defaultDepth_STATIC_() : Int32
    fun bg_QPixmap_fill_(_self_ : QPixmap*) : Void
    fun bg_QPixmap_fill_const_QColor_R(_self_ : QPixmap*, fill_color : QColor*) : Void
    fun bg_QPixmap_fill_const_QPaintDevice_X_const_QPoint_R(_self_ : QPixmap*, device : QPaintDevice*, ofs : QPoint*) : Void
    fun bg_QPixmap_fill_const_QPaintDevice_X_int_int(_self_ : QPixmap*, device : QPaintDevice*, xofs : Int32, yofs : Int32) : Void
    fun bg_QPixmap_mask_(_self_ : QPixmap*) : QBitmap*
    fun bg_QPixmap_setMask_const_QBitmap_R(_self_ : QPixmap*, unnamed_arg_0 : QBitmap*) : Void
    fun bg_QPixmap_hasAlpha_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_hasAlphaChannel_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_createHeuristicMask_(_self_ : QPixmap*) : QBitmap*
    fun bg_QPixmap_createHeuristicMask_bool(_self_ : QPixmap*, clip_tight : Bool) : QBitmap*
    fun bg_QPixmap_createMaskFromColor_const_QColor_R(_self_ : QPixmap*, mask_color : QColor*) : QBitmap*
    fun bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(_self_ : QPixmap*, mask_color : QColor*, mode : MaskMode) : QBitmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X_const_QRect_R(widget : QObject*, rect : QRect*) : QPixmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X(widget : QObject*) : QPixmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X_int(widget : QObject*, x : Int32) : QPixmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X_int_int(widget : QObject*, x : Int32, y : Int32) : QPixmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int(widget : QObject*, x : Int32, y : Int32, w : Int32) : QPixmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int_int(widget : QObject*, x : Int32, y : Int32, w : Int32, h : Int32) : QPixmap*
    fun bg_QPixmap_scaled_int_int(_self_ : QPixmap*, w : Int32, h : Int32) : QPixmap*
    fun bg_QPixmap_scaled_int_int_Qt__AspectRatioMode(_self_ : QPixmap*, w : Int32, h : Int32, aspect_mode : AspectRatioMode) : QPixmap*
    fun bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QPixmap*, w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_scaled_const_QSize_R(_self_ : QPixmap*, s : QSize*) : QPixmap*
    fun bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode(_self_ : QPixmap*, s : QSize*, aspect_mode : AspectRatioMode) : QPixmap*
    fun bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QPixmap*, s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_scaledToWidth_int(_self_ : QPixmap*, w : Int32) : QPixmap*
    fun bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(_self_ : QPixmap*, w : Int32, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_scaledToHeight_int(_self_ : QPixmap*, h : Int32) : QPixmap*
    fun bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(_self_ : QPixmap*, h : Int32, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_transformed_const_QMatrix_R(_self_ : QPixmap*, unnamed_arg_0 : QMatrix*) : QPixmap*
    fun bg_QPixmap_transformed_const_QMatrix_R_Qt__TransformationMode(_self_ : QPixmap*, unnamed_arg_0 : QMatrix*, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_trueMatrix_STATIC_const_QMatrix_R_int_int(m : QMatrix*, w : Int32, h : Int32) : QMatrix*
    fun bg_QPixmap_transformed_const_QTransform_R(_self_ : QPixmap*, unnamed_arg_0 : QTransform*) : QPixmap*
    fun bg_QPixmap_transformed_const_QTransform_R_Qt__TransformationMode(_self_ : QPixmap*, unnamed_arg_0 : QTransform*, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_trueMatrix_STATIC_const_QTransform_R_int_int(m : QTransform*, w : Int32, h : Int32) : QTransform*
    fun bg_QPixmap_toImage_(_self_ : QPixmap*) : QImage*
    fun bg_QPixmap_fromImage_STATIC_const_QImage_R(image : QImage*) : QPixmap*
    fun bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image : QImage*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap_fromImageReader_STATIC_QImageReader_X(image_reader : QImageReader*) : QPixmap*
    fun bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(image_reader : QImageReader*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap_load_const_QString_R(_self_ : QPixmap*, file_name : CrystalString) : Bool
    fun bg_QPixmap_load_const_QString_R_const_char_X(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint(_self_ : QPixmap*, buf : UInt8*, len : UInt32) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(_self_ : QPixmap*, buf : UInt8*, len : UInt32, format : UInt8*) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(_self_ : QPixmap*, buf : UInt8*, len : UInt32, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R(_self_ : QPixmap*, data : QByteArray*) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(_self_ : QPixmap*, data : QByteArray*, format : UInt8*) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(_self_ : QPixmap*, data : QByteArray*, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_save_const_QString_R(_self_ : QPixmap*, file_name : CrystalString) : Bool
    fun bg_QPixmap_save_const_QString_R_const_char_X(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QPixmap_save_const_QString_R_const_char_X_int(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*, quality : Int32) : Bool
    fun bg_QPixmap_save_QIODevice_X(_self_ : QPixmap*, device : QIODevice*) : Bool
    fun bg_QPixmap_save_QIODevice_X_const_char_X(_self_ : QPixmap*, device : QIODevice*, format : UInt8*) : Bool
    fun bg_QPixmap_save_QIODevice_X_const_char_X_int(_self_ : QPixmap*, device : QIODevice*, format : UInt8*, quality : Int32) : Bool
    fun bg_QPixmap_convertFromImage_const_QImage_R(_self_ : QPixmap*, img : QImage*) : Bool
    fun bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(_self_ : QPixmap*, img : QImage*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_copy_int_int_int_int(_self_ : QPixmap*, x : Int32, y : Int32, width : Int32, height : Int32) : QPixmap*
    fun bg_QPixmap_copy_(_self_ : QPixmap*) : QPixmap*
    fun bg_QPixmap_copy_const_QRect_R(_self_ : QPixmap*, rect : QRect*) : QPixmap*
    fun bg_QPixmap_scroll_int_int_int_int_int_int(_self_ : QPixmap*, dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32) : Void
    fun bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(_self_ : QPixmap*, dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32, exposed : QRegion*) : Void
    fun bg_QPixmap_scroll_int_int_const_QRect_R(_self_ : QPixmap*, dx : Int32, dy : Int32, rect : QRect*) : Void
    fun bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(_self_ : QPixmap*, dx : Int32, dy : Int32, rect : QRect*, exposed : QRegion*) : Void
    fun bg_QPixmap_cacheKey_(_self_ : QPixmap*) : Int64
    fun bg_QPixmap_isDetached_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_detach_(_self_ : QPixmap*) : Void
    fun bg_QPixmap_isQBitmap_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_paintEngine_(_self_ : QPixmap*) : QPaintEngine*
    fun bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(_self_ : QPixmap*, unnamed_arg_0 : PaintDeviceMetric) : Int32
    fun bg_QPixmap_fromImageInPlace_STATIC_QImage_R(image : QImage*) : QPixmap*
    fun bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(image : QImage*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap_handle_(_self_ : QPixmap*) : QPlatformPixmap*
    fun bg_QPixmap_DESTROY_(_self_ : QPixmap*) : Void
    fun bg_QEventLoop_metaObject_(_self_ : QEventLoop*) : QMetaObject*
    fun bg_QEventLoop_qt_metacast_const_char_X(_self_ : QEventLoop*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QEventLoop_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QEventLoop_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QEventLoop_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QEventLoop_CONSTRUCT_() : QEventLoop*
    fun bg_QEventLoop_CONSTRUCT_QObject_X(parent : QObject*) : QEventLoop*
    fun bg_QEventLoop_processEvents_(_self_ : QEventLoop*) : Bool
    fun bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(_self_ : QEventLoop*, flags : EventLoop::ProcessEventsFlags) : Bool
    fun bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(_self_ : QEventLoop*, flags : EventLoop::ProcessEventsFlags, maximum_time : Int32) : Void
    fun bg_QEventLoop_exec_(_self_ : QEventLoop*) : Int32
    fun bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(_self_ : QEventLoop*, flags : EventLoop::ProcessEventsFlags) : Int32
    fun bg_QEventLoop_exit_(_self_ : QEventLoop*) : Void
    fun bg_QEventLoop_exit_int(_self_ : QEventLoop*, return_code : Int32) : Void
    fun bg_QEventLoop_isRunning_(_self_ : QEventLoop*) : Bool
    fun bg_QEventLoop_wakeUp_(_self_ : QEventLoop*) : Void
    fun bg_QEventLoop_event_QEvent_X(_self_ : QEventLoop*, event : QEvent*) : Bool
    fun bg_QEventLoop_quit_(_self_ : QEventLoop*) : Void
    fun bg_QEventLoop_DESTROY_(_self_ : QEventLoop*) : Void
    fun bg_QTabWidget_metaObject_(_self_ : QTabWidget*) : QMetaObject*
    fun bg_QTabWidget_qt_metacast_const_char_X(_self_ : QTabWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTabWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTabWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTabWidget_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTabWidget_CONSTRUCT_() : QTabWidget*
    fun bg_QTabWidget_CONSTRUCT_QWidget_X(parent : QWidget*) : QTabWidget*
    fun bg_QTabWidget_addTab_QWidget_X_const_QString_R(_self_ : QTabWidget*, widget : QWidget*, unnamed_arg_1 : CrystalString) : Int32
    fun bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(_self_ : QTabWidget*, widget : QWidget*, icon : QIcon*, label : CrystalString) : Int32
    fun bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(_self_ : QTabWidget*, index : Int32, widget : QWidget*, unnamed_arg_2 : CrystalString) : Int32
    fun bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(_self_ : QTabWidget*, index : Int32, widget : QWidget*, icon : QIcon*, label : CrystalString) : Int32
    fun bg_QTabWidget_removeTab_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_isTabEnabled_int(_self_ : QTabWidget*, index : Int32) : Bool
    fun bg_QTabWidget_setTabEnabled_int_bool(_self_ : QTabWidget*, index : Int32, unnamed_arg_1 : Bool) : Void
    fun bg_QTabWidget_tabText_int(_self_ : QTabWidget*, index : Int32) : CrystalString
    fun bg_QTabWidget_setTabText_int_const_QString_R(_self_ : QTabWidget*, index : Int32, unnamed_arg_1 : CrystalString) : Void
    fun bg_QTabWidget_tabIcon_int(_self_ : QTabWidget*, index : Int32) : QIcon*
    fun bg_QTabWidget_setTabIcon_int_const_QIcon_R(_self_ : QTabWidget*, index : Int32, icon : QIcon*) : Void
    fun bg_QTabWidget_setTabToolTip_int_const_QString_R(_self_ : QTabWidget*, index : Int32, tip : CrystalString) : Void
    fun bg_QTabWidget_tabToolTip_int(_self_ : QTabWidget*, index : Int32) : CrystalString
    fun bg_QTabWidget_setTabWhatsThis_int_const_QString_R(_self_ : QTabWidget*, index : Int32, text : CrystalString) : Void
    fun bg_QTabWidget_tabWhatsThis_int(_self_ : QTabWidget*, index : Int32) : CrystalString
    fun bg_QTabWidget_currentIndex_(_self_ : QTabWidget*) : Int32
    fun bg_QTabWidget_currentWidget_(_self_ : QTabWidget*) : QWidget*
    fun bg_QTabWidget_widget_int(_self_ : QTabWidget*, index : Int32) : QWidget*
    fun bg_QTabWidget_indexOf_QWidget_X(_self_ : QTabWidget*, widget : QWidget*) : Int32
    fun bg_QTabWidget_count_(_self_ : QTabWidget*) : Int32
    fun bg_QTabWidget_tabPosition_(_self_ : QTabWidget*) : TabWidget::TabPosition
    fun bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(_self_ : QTabWidget*, unnamed_arg_0 : TabWidget::TabPosition) : Void
    fun bg_QTabWidget_tabsClosable_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setTabsClosable_bool(_self_ : QTabWidget*, closeable : Bool) : Void
    fun bg_QTabWidget_isMovable_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setMovable_bool(_self_ : QTabWidget*, movable : Bool) : Void
    fun bg_QTabWidget_tabShape_(_self_ : QTabWidget*) : TabWidget::TabShape
    fun bg_QTabWidget_setTabShape_QTabWidget__TabShape(_self_ : QTabWidget*, s : TabWidget::TabShape) : Void
    fun bg_QTabWidget_sizeHint_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_minimumSizeHint_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_heightForWidth_int(_self_ : QTabWidget*, width : Int32) : Int32
    fun bg_QTabWidget_hasHeightForWidth_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setCornerWidget_QWidget_X(_self_ : QTabWidget*, w : QWidget*) : Void
    fun bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(_self_ : QTabWidget*, w : QWidget*, corner : Corner) : Void
    fun bg_QTabWidget_cornerWidget_(_self_ : QTabWidget*) : QWidget*
    fun bg_QTabWidget_cornerWidget_Qt__Corner(_self_ : QTabWidget*, corner : Corner) : QWidget*
    fun bg_QTabWidget_elideMode_(_self_ : QTabWidget*) : TextElideMode
    fun bg_QTabWidget_setElideMode_Qt__TextElideMode(_self_ : QTabWidget*, unnamed_arg_0 : TextElideMode) : Void
    fun bg_QTabWidget_iconSize_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_setIconSize_const_QSize_R(_self_ : QTabWidget*, size : QSize*) : Void
    fun bg_QTabWidget_usesScrollButtons_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setUsesScrollButtons_bool(_self_ : QTabWidget*, use_buttons : Bool) : Void
    fun bg_QTabWidget_documentMode_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setDocumentMode_bool(_self_ : QTabWidget*, set : Bool) : Void
    fun bg_QTabWidget_tabBarAutoHide_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setTabBarAutoHide_bool(_self_ : QTabWidget*, enabled : Bool) : Void
    fun bg_QTabWidget_clear_(_self_ : QTabWidget*) : Void
    fun bg_QTabWidget_tabBar_(_self_ : QTabWidget*) : QTabBar*
    fun bg_QTabWidget_setCurrentIndex_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_setCurrentWidget_QWidget_X(_self_ : QTabWidget*, widget : QWidget*) : Void
    fun bg_QTabWidget_currentChanged_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_currentChanged_CONNECT_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_tabCloseRequested_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabCloseRequested_CONNECT_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_tabBarClicked_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabBarClicked_CONNECT_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_tabBarDoubleClicked_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabBarDoubleClicked_CONNECT_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_tabInserted_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabRemoved_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_showEvent_QShowEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTabWidget_resizeEvent_QResizeEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QTabWidget_keyPressEvent_QKeyEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QTabWidget_paintEvent_QPaintEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QTabWidget_setTabBar_QTabBar_X(_self_ : QTabWidget*, unnamed_arg_0 : QTabBar*) : Void
    fun bg_QTabWidget_changeEvent_QEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QTabWidget_event_QEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(_self_ : QTabWidget*, option : QStyleOptionTabWidgetFrame*) : Void
    fun bg_QTabWidget_DESTROY_(_self_ : QTabWidget*) : Void
    fun bg_QLayoutItem_CONSTRUCT_() : QLayoutItem*
    fun bg_QLayoutItem_CONSTRUCT_Qt__Alignment(alignment : Alignment) : QLayoutItem*
    fun bg_QLayoutItem_sizeHint_(_self_ : QLayoutItem*) : QSize*
    fun bg_QLayoutItem_minimumSize_(_self_ : QLayoutItem*) : QSize*
    fun bg_QLayoutItem_maximumSize_(_self_ : QLayoutItem*) : QSize*
    fun bg_QLayoutItem_expandingDirections_(_self_ : QLayoutItem*) : Orientations
    fun bg_QLayoutItem_setGeometry_const_QRect_R(_self_ : QLayoutItem*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayoutItem_geometry_(_self_ : QLayoutItem*) : QRect*
    fun bg_QLayoutItem_isEmpty_(_self_ : QLayoutItem*) : Bool
    fun bg_QLayoutItem_hasHeightForWidth_(_self_ : QLayoutItem*) : Bool
    fun bg_QLayoutItem_heightForWidth_int(_self_ : QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_int(_self_ : QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_(_self_ : QLayoutItem*) : Void
    fun bg_QLayoutItem_widget_(_self_ : QLayoutItem*) : QWidget*
    fun bg_QLayoutItem_layout_(_self_ : QLayoutItem*) : QLayout*
    fun bg_QLayoutItem_spacerItem_(_self_ : QLayoutItem*) : QSpacerItem*
    fun bg_QLayoutItem_alignment_(_self_ : QLayoutItem*) : Alignment
    fun bg_QLayoutItem_setAlignment_Qt__Alignment(_self_ : QLayoutItem*, a : Alignment) : Void
    fun bg_QLayoutItem_DESTROY_(_self_ : QLayoutItem*) : Void
    fun bg_QLayout_metaObject_(_self_ : QLayout*) : QMetaObject*
    fun bg_QLayout_qt_metacast_const_char_X(_self_ : QLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLayout_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLayout_CONSTRUCT_QWidget_X(parent : QWidget*) : QLayout*
    fun bg_QLayout_CONSTRUCT_() : QLayout*
    fun bg_QLayout_margin_(_self_ : QLayout*) : Int32
    fun bg_QLayout_spacing_(_self_ : QLayout*) : Int32
    fun bg_QLayout_setMargin_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QLayout_setSpacing_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QLayout_setContentsMargins_int_int_int_int(_self_ : QLayout*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QLayout_setContentsMargins_const_QMargins_R(_self_ : QLayout*, margins : QMargins*) : Void
    fun bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(_self_ : QLayout*, left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
    fun bg_QLayout_contentsMargins_(_self_ : QLayout*) : QMargins*
    fun bg_QLayout_contentsRect_(_self_ : QLayout*) : QRect*
    fun bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(_self_ : QLayout*, w : QWidget*, alignment : Alignment) : Bool
    fun bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(_self_ : QLayout*, l : QLayout*, alignment : Alignment) : Bool
    fun bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(_self_ : QLayout*, unnamed_arg_0 : Layout::SizeConstraint) : Void
    fun bg_QLayout_sizeConstraint_(_self_ : QLayout*) : Layout::SizeConstraint
    fun bg_QLayout_setMenuBar_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_menuBar_(_self_ : QLayout*) : QWidget*
    fun bg_QLayout_parentWidget_(_self_ : QLayout*) : QWidget*
    fun bg_QLayout_invalidate_(_self_ : QLayout*) : Void
    fun bg_QLayout_geometry_(_self_ : QLayout*) : QRect*
    fun bg_QLayout_activate_(_self_ : QLayout*) : Bool
    fun bg_QLayout_update_(_self_ : QLayout*) : Void
    fun bg_QLayout_addWidget_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_addItem_QLayoutItem_X(_self_ : QLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_removeWidget_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_removeItem_QLayoutItem_X(_self_ : QLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_expandingDirections_(_self_ : QLayout*) : Orientations
    fun bg_QLayout_minimumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_maximumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_setGeometry_const_QRect_R(_self_ : QLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayout_itemAt_int(_self_ : QLayout*, index : Int32) : QLayoutItem*
    fun bg_QLayout_takeAt_int(_self_ : QLayout*, index : Int32) : QLayoutItem*
    fun bg_QLayout_indexOf_QWidget_X(_self_ : QLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_count_(_self_ : QLayout*) : Int32
    fun bg_QLayout_isEmpty_(_self_ : QLayout*) : Bool
    fun bg_QLayout_replaceWidget_QWidget_X_QWidget_X(_self_ : QLayout*, from : QWidget*, to : QWidget*) : QLayoutItem*
    fun bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(_self_ : QLayout*, from : QWidget*, to : QWidget*, options : FindChildOptions) : QLayoutItem*
    fun bg_QLayout_totalHeightForWidth_int(_self_ : QLayout*, w : Int32) : Int32
    fun bg_QLayout_totalMinimumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_totalMaximumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_totalSizeHint_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_layout_(_self_ : QLayout*) : QLayout*
    fun bg_QLayout_setEnabled_bool(_self_ : QLayout*, unnamed_arg_0 : Bool) : Void
    fun bg_QLayout_isEnabled_(_self_ : QLayout*) : Bool
    fun bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(w : QWidget*, s : QSize*) : QSize*
    fun bg_QLayout_widgetEvent_QEvent_X(_self_ : QLayout*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLayout_childEvent_QChildEvent_X(_self_ : QLayout*, e : QChildEvent*) : Void
    fun bg_QLayout_addChildLayout_QLayout_X(_self_ : QLayout*, l : QLayout*) : Void
    fun bg_QLayout_addChildWidget_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_adoptLayout_QLayout_X(_self_ : QLayout*, layout : QLayout*) : Bool
    fun bg_QLayout_alignmentRect_const_QRect_R(_self_ : QLayout*, unnamed_arg_0 : QRect*) : QRect*
    fun bg_QLayout_CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(d : QLayoutPrivate*, unnamed_arg_1 : QLayout*, unnamed_arg_2 : QWidget*) : QLayout*
    fun bg_QLayout_DESTROY_(_self_ : QLayout*) : Void
    fun bg_QLayout_bg_QLayout_AS_QLayoutItem_(_self_ : QLayout*) : QLayoutItem*
    fun bg_QBoxLayout_metaObject_(_self_ : QBoxLayout*) : QMetaObject*
    fun bg_QBoxLayout_qt_metacast_const_char_X(_self_ : QBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QBoxLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QBoxLayout_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QBoxLayout_CONSTRUCT_QBoxLayout__Direction(unnamed_arg_0 : BoxLayout::Direction) : QBoxLayout*
    fun bg_QBoxLayout_CONSTRUCT_QBoxLayout__Direction_QWidget_X(unnamed_arg_0 : BoxLayout::Direction, parent : QWidget*) : QBoxLayout*
    fun bg_QBoxLayout_direction_(_self_ : QBoxLayout*) : BoxLayout::Direction
    fun bg_QBoxLayout_setDirection_QBoxLayout__Direction(_self_ : QBoxLayout*, unnamed_arg_0 : BoxLayout::Direction) : Void
    fun bg_QBoxLayout_addSpacing_int(_self_ : QBoxLayout*, size : Int32) : Void
    fun bg_QBoxLayout_addStretch_(_self_ : QBoxLayout*) : Void
    fun bg_QBoxLayout_addStretch_int(_self_ : QBoxLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_addSpacerItem_QSpacerItem_X(_self_ : QBoxLayout*, spacer_item : QSpacerItem*) : Void
    fun bg_QBoxLayout_addWidget_QWidget_X(_self_ : QBoxLayout*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QBoxLayout_addWidget_QWidget_X_int(_self_ : QBoxLayout*, unnamed_arg_0 : QWidget*, stretch : Int32) : Void
    fun bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(_self_ : QBoxLayout*, unnamed_arg_0 : QWidget*, stretch : Int32, alignment : Alignment) : Void
    fun bg_QBoxLayout_addLayout_QLayout_X(_self_ : QBoxLayout*, layout : QLayout*) : Void
    fun bg_QBoxLayout_addLayout_QLayout_X_int(_self_ : QBoxLayout*, layout : QLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_addStrut_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QBoxLayout_addItem_QLayoutItem_X(_self_ : QBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_insertSpacing_int_int(_self_ : QBoxLayout*, index : Int32, size : Int32) : Void
    fun bg_QBoxLayout_insertStretch_int(_self_ : QBoxLayout*, index : Int32) : Void
    fun bg_QBoxLayout_insertStretch_int_int(_self_ : QBoxLayout*, index : Int32, stretch : Int32) : Void
    fun bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(_self_ : QBoxLayout*, index : Int32, spacer_item : QSpacerItem*) : Void
    fun bg_QBoxLayout_insertWidget_int_QWidget_X(_self_ : QBoxLayout*, index : Int32, widget : QWidget*) : Void
    fun bg_QBoxLayout_insertWidget_int_QWidget_X_int(_self_ : QBoxLayout*, index : Int32, widget : QWidget*, stretch : Int32) : Void
    fun bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(_self_ : QBoxLayout*, index : Int32, widget : QWidget*, stretch : Int32, alignment : Alignment) : Void
    fun bg_QBoxLayout_insertLayout_int_QLayout_X(_self_ : QBoxLayout*, index : Int32, layout : QLayout*) : Void
    fun bg_QBoxLayout_insertLayout_int_QLayout_X_int(_self_ : QBoxLayout*, index : Int32, layout : QLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_insertItem_int_QLayoutItem_X(_self_ : QBoxLayout*, index : Int32, unnamed_arg_1 : QLayoutItem*) : Void
    fun bg_QBoxLayout_spacing_(_self_ : QBoxLayout*) : Int32
    fun bg_QBoxLayout_setSpacing_int(_self_ : QBoxLayout*, spacing : Int32) : Void
    fun bg_QBoxLayout_setStretchFactor_QWidget_X_int(_self_ : QBoxLayout*, w : QWidget*, stretch : Int32) : Bool
    fun bg_QBoxLayout_setStretchFactor_QLayout_X_int(_self_ : QBoxLayout*, l : QLayout*, stretch : Int32) : Bool
    fun bg_QBoxLayout_setStretch_int_int(_self_ : QBoxLayout*, index : Int32, stretch : Int32) : Void
    fun bg_QBoxLayout_stretch_int(_self_ : QBoxLayout*, index : Int32) : Int32
    fun bg_QBoxLayout_sizeHint_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_(_self_ : QBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_(_self_ : QBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_(_self_ : QBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_takeAt_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_count_(_self_ : QBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_const_QRect_R(_self_ : QBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QBoxLayout_DESTROY_(_self_ : QBoxLayout*) : Void
    fun bg_QHBoxLayout_metaObject_(_self_ : QHBoxLayout*) : QMetaObject*
    fun bg_QHBoxLayout_qt_metacast_const_char_X(_self_ : QHBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QHBoxLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QHBoxLayout_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QHBoxLayout_CONSTRUCT_() : QHBoxLayout*
    fun bg_QHBoxLayout_CONSTRUCT_QWidget_X(parent : QWidget*) : QHBoxLayout*
    fun bg_QHBoxLayout_DESTROY_(_self_ : QHBoxLayout*) : Void
    fun bg_QVBoxLayout_metaObject_(_self_ : QVBoxLayout*) : QMetaObject*
    fun bg_QVBoxLayout_qt_metacast_const_char_X(_self_ : QVBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QVBoxLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QVBoxLayout_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QVBoxLayout_CONSTRUCT_() : QVBoxLayout*
    fun bg_QVBoxLayout_CONSTRUCT_QWidget_X(parent : QWidget*) : QVBoxLayout*
    fun bg_QVBoxLayout_DESTROY_(_self_ : QVBoxLayout*) : Void
    fun bg_QKeySequence_CONSTRUCT_() : QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_const_QString_R(key : CrystalString) : QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(key : CrystalString, format : KeySequence::SequenceFormat) : QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_int(k1 : Int32) : QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_int_int(k1 : Int32, k2 : Int32) : QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_int_int_int(k1 : Int32, k2 : Int32, k3 : Int32) : QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_int_int_int_int(k1 : Int32, k2 : Int32, k3 : Int32, k4 : Int32) : QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_QKeySequence__StandardKey(key : KeySequence::StandardKey) : QKeySequence*
    fun bg_QKeySequence_count_(_self_ : QKeySequence*) : Int32
    fun bg_QKeySequence_isEmpty_(_self_ : QKeySequence*) : Bool
    fun bg_QKeySequence_toString_(_self_ : QKeySequence*) : CrystalString
    fun bg_QKeySequence_toString_QKeySequence__SequenceFormat(_self_ : QKeySequence*, format : KeySequence::SequenceFormat) : CrystalString
    fun bg_QKeySequence_fromString_STATIC_const_QString_R(str : CrystalString) : QKeySequence*
    fun bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(str : CrystalString, format : KeySequence::SequenceFormat) : QKeySequence*
    fun bg_QKeySequence_matches_const_QKeySequence_R(_self_ : QKeySequence*, seq : QKeySequence*) : KeySequence::SequenceMatch
    fun bg_QKeySequence_mnemonic_STATIC_const_QString_R(text : CrystalString) : QKeySequence*
    fun bg_QKeySequence_swap_QKeySequence_R(_self_ : QKeySequence*, other : QKeySequence*) : Void
    fun bg_QKeySequence_isDetached_(_self_ : QKeySequence*) : Bool
    fun bg_QKeySequence_DESTROY_(_self_ : QKeySequence*) : Void
    fun bg_QLineEdit_metaObject_(_self_ : QLineEdit*) : QMetaObject*
    fun bg_QLineEdit_qt_metacast_const_char_X(_self_ : QLineEdit*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLineEdit_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLineEdit_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLineEdit_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLineEdit_CONSTRUCT_() : QLineEdit*
    fun bg_QLineEdit_CONSTRUCT_QWidget_X(parent : QWidget*) : QLineEdit*
    fun bg_QLineEdit_CONSTRUCT_const_QString_R(unnamed_arg_0 : CrystalString) : QLineEdit*
    fun bg_QLineEdit_CONSTRUCT_const_QString_R_QWidget_X(unnamed_arg_0 : CrystalString, parent : QWidget*) : QLineEdit*
    fun bg_QLineEdit_text_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_displayText_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_placeholderText_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_setPlaceholderText_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_maxLength_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_setMaxLength_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32) : Void
    fun bg_QLineEdit_setFrame_bool(_self_ : QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_hasFrame_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setClearButtonEnabled_bool(_self_ : QLineEdit*, enable : Bool) : Void
    fun bg_QLineEdit_isClearButtonEnabled_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_echoMode_(_self_ : QLineEdit*) : LineEdit::EchoMode
    fun bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(_self_ : QLineEdit*, unnamed_arg_0 : LineEdit::EchoMode) : Void
    fun bg_QLineEdit_isReadOnly_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setReadOnly_bool(_self_ : QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_setValidator_const_QValidator_X(_self_ : QLineEdit*, unnamed_arg_0 : QValidator*) : Void
    fun bg_QLineEdit_validator_(_self_ : QLineEdit*) : QValidator*
    fun bg_QLineEdit_setCompleter_QCompleter_X(_self_ : QLineEdit*, completer : QCompleter*) : Void
    fun bg_QLineEdit_completer_(_self_ : QLineEdit*) : QCompleter*
    fun bg_QLineEdit_sizeHint_(_self_ : QLineEdit*) : QSize*
    fun bg_QLineEdit_minimumSizeHint_(_self_ : QLineEdit*) : QSize*
    fun bg_QLineEdit_cursorPosition_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_setCursorPosition_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32) : Void
    fun bg_QLineEdit_cursorPositionAt_const_QPoint_R(_self_ : QLineEdit*, pos : QPoint*) : Int32
    fun bg_QLineEdit_setAlignment_Qt__Alignment(_self_ : QLineEdit*, flag : Alignment) : Void
    fun bg_QLineEdit_alignment_(_self_ : QLineEdit*) : Alignment
    fun bg_QLineEdit_cursorForward_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_cursorForward_bool_int(_self_ : QLineEdit*, mark : Bool, steps : Int32) : Void
    fun bg_QLineEdit_cursorBackward_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_cursorBackward_bool_int(_self_ : QLineEdit*, mark : Bool, steps : Int32) : Void
    fun bg_QLineEdit_cursorWordForward_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_cursorWordBackward_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_backspace_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_del_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_home_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_end_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_isModified_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setModified_bool(_self_ : QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_setSelection_int_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLineEdit_hasSelectedText_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_selectedText_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_selectionStart_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_isUndoAvailable_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_isRedoAvailable_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setDragEnabled_bool(_self_ : QLineEdit*, b : Bool) : Void
    fun bg_QLineEdit_dragEnabled_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(_self_ : QLineEdit*, style : CursorMoveStyle) : Void
    fun bg_QLineEdit_cursorMoveStyle_(_self_ : QLineEdit*) : CursorMoveStyle
    fun bg_QLineEdit_inputMask_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_setInputMask_const_QString_R(_self_ : QLineEdit*, input_mask : CrystalString) : Void
    fun bg_QLineEdit_hasAcceptableInput_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setTextMargins_int_int_int_int(_self_ : QLineEdit*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QLineEdit_setTextMargins_const_QMargins_R(_self_ : QLineEdit*, margins : QMargins*) : Void
    fun bg_QLineEdit_getTextMargins_int_X_int_X_int_X_int_X(_self_ : QLineEdit*, left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
    fun bg_QLineEdit_textMargins_(_self_ : QLineEdit*) : QMargins*
    fun bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(_self_ : QLineEdit*, action : QAction*, position : LineEdit::ActionPosition) : Void
    fun bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(_self_ : QLineEdit*, icon : QIcon*, position : LineEdit::ActionPosition) : QAction*
    fun bg_QLineEdit_setText_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_clear_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_selectAll_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_undo_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_redo_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_cut_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_copy_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_paste_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_deselect_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_insert_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_createStandardContextMenu_(_self_ : QLineEdit*) : QMenu*
    fun bg_QLineEdit_textChanged_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_textChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_textEdited_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_textEdited_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_cursorPositionChanged_int_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLineEdit_cursorPositionChanged_CONNECT_CrystalProc_void__int__int_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_returnPressed_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_returnPressed_CONNECT_CrystalProc_void_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_editingFinished_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_editingFinished_CONNECT_CrystalProc_void_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_selectionChanged_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_selectionChanged_CONNECT_CrystalProc_void_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_mousePressEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_keyPressEvent_QKeyEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QLineEdit_focusInEvent_QFocusEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_focusOutEvent_QFocusEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_paintEvent_QPaintEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(_self_ : QLineEdit*, e : QDragMoveEvent*) : Void
    fun bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QLineEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QLineEdit_dropEvent_QDropEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QLineEdit_changeEvent_QEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(_self_ : QLineEdit*, option : QStyleOptionFrame*) : Void
    fun bg_QLineEdit_event_QEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QLineEdit_cursorRect_(_self_ : QLineEdit*) : QRect*
    fun bg_QLineEdit_DESTROY_(_self_ : QLineEdit*) : Void
    fun bg_QTextEdit_metaObject_(_self_ : QTextEdit*) : QMetaObject*
    fun bg_QTextEdit_qt_metacast_const_char_X(_self_ : QTextEdit*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTextEdit_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTextEdit_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTextEdit_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTextEdit_CONSTRUCT_() : QTextEdit*
    fun bg_QTextEdit_CONSTRUCT_QWidget_X(parent : QWidget*) : QTextEdit*
    fun bg_QTextEdit_CONSTRUCT_const_QString_R(text : CrystalString) : QTextEdit*
    fun bg_QTextEdit_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QTextEdit*
    fun bg_QTextEdit_setDocument_QTextDocument_X(_self_ : QTextEdit*, document : QTextDocument*) : Void
    fun bg_QTextEdit_document_(_self_ : QTextEdit*) : QTextDocument*
    fun bg_QTextEdit_setPlaceholderText_const_QString_R(_self_ : QTextEdit*, placeholder_text : CrystalString) : Void
    fun bg_QTextEdit_placeholderText_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_setTextCursor_const_QTextCursor_R(_self_ : QTextEdit*, cursor : QTextCursor*) : Void
    fun bg_QTextEdit_textCursor_(_self_ : QTextEdit*) : QTextCursor*
    fun bg_QTextEdit_isReadOnly_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setReadOnly_bool(_self_ : QTextEdit*, ro : Bool) : Void
    fun bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : QTextEdit*, flags : TextInteractionFlags) : Void
    fun bg_QTextEdit_textInteractionFlags_(_self_ : QTextEdit*) : TextInteractionFlags
    fun bg_QTextEdit_fontFamily_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_fontWeight_(_self_ : QTextEdit*) : Int32
    fun bg_QTextEdit_fontUnderline_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_fontItalic_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_textColor_(_self_ : QTextEdit*) : QColor*
    fun bg_QTextEdit_textBackgroundColor_(_self_ : QTextEdit*) : QColor*
    fun bg_QTextEdit_currentFont_(_self_ : QTextEdit*) : QFont*
    fun bg_QTextEdit_alignment_(_self_ : QTextEdit*) : Alignment
    fun bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(_self_ : QTextEdit*, modifier : QTextCharFormat*) : Void
    fun bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(_self_ : QTextEdit*, format : QTextCharFormat*) : Void
    fun bg_QTextEdit_currentCharFormat_(_self_ : QTextEdit*) : QTextCharFormat*
    fun bg_QTextEdit_autoFormatting_(_self_ : QTextEdit*) : TextEdit::AutoFormatting
    fun bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(_self_ : QTextEdit*, features : TextEdit::AutoFormatting) : Void
    fun bg_QTextEdit_tabChangesFocus_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setTabChangesFocus_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setDocumentTitle_const_QString_R(_self_ : QTextEdit*, title : CrystalString) : Void
    fun bg_QTextEdit_documentTitle_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_isUndoRedoEnabled_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setUndoRedoEnabled_bool(_self_ : QTextEdit*, enable : Bool) : Void
    fun bg_QTextEdit_lineWrapMode_(_self_ : QTextEdit*) : TextEdit::LineWrapMode
    fun bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(_self_ : QTextEdit*, mode : TextEdit::LineWrapMode) : Void
    fun bg_QTextEdit_lineWrapColumnOrWidth_(_self_ : QTextEdit*) : Int32
    fun bg_QTextEdit_setLineWrapColumnOrWidth_int(_self_ : QTextEdit*, w : Int32) : Void
    fun bg_QTextEdit_wordWrapMode_(_self_ : QTextEdit*) : TextOptionWrapMode
    fun bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(_self_ : QTextEdit*, policy : TextOptionWrapMode) : Void
    fun bg_QTextEdit_find_const_QString_R(_self_ : QTextEdit*, exp : CrystalString) : Bool
    fun bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(_self_ : QTextEdit*, exp : CrystalString, options : TextDocumentFindFlags) : Bool
    fun bg_QTextEdit_find_const_QRegExp_R(_self_ : QTextEdit*, exp : QRegExp*) : Bool
    fun bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(_self_ : QTextEdit*, exp : QRegExp*, options : TextDocumentFindFlags) : Bool
    fun bg_QTextEdit_toPlainText_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_toHtml_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_ensureCursorVisible_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_createStandardContextMenu_(_self_ : QTextEdit*) : QMenu*
    fun bg_QTextEdit_createStandardContextMenu_const_QPoint_R(_self_ : QTextEdit*, position : QPoint*) : QMenu*
    fun bg_QTextEdit_cursorForPosition_const_QPoint_R(_self_ : QTextEdit*, pos : QPoint*) : QTextCursor*
    fun bg_QTextEdit_cursorRect_const_QTextCursor_R(_self_ : QTextEdit*, cursor : QTextCursor*) : QRect*
    fun bg_QTextEdit_cursorRect_(_self_ : QTextEdit*) : QRect*
    fun bg_QTextEdit_anchorAt_const_QPoint_R(_self_ : QTextEdit*, pos : QPoint*) : CrystalString
    fun bg_QTextEdit_overwriteMode_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setOverwriteMode_bool(_self_ : QTextEdit*, overwrite : Bool) : Void
    fun bg_QTextEdit_tabStopWidth_(_self_ : QTextEdit*) : Int32
    fun bg_QTextEdit_setTabStopWidth_int(_self_ : QTextEdit*, width : Int32) : Void
    fun bg_QTextEdit_cursorWidth_(_self_ : QTextEdit*) : Int32
    fun bg_QTextEdit_setCursorWidth_int(_self_ : QTextEdit*, width : Int32) : Void
    fun bg_QTextEdit_acceptRichText_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setAcceptRichText_bool(_self_ : QTextEdit*, accept : Bool) : Void
    fun bg_QTextEdit_moveCursor_QTextCursor__MoveOperation(_self_ : QTextEdit*, operation : TextCursorMoveOperation) : Void
    fun bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(_self_ : QTextEdit*, operation : TextCursorMoveOperation, mode : TextCursorMoveMode) : Void
    fun bg_QTextEdit_canPaste_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_print_QPagedPaintDevice_X(_self_ : QTextEdit*, printer : QPagedPaintDevice*) : Void
    fun bg_QTextEdit_setFontFamily_const_QString_R(_self_ : QTextEdit*, font_family : CrystalString) : Void
    fun bg_QTextEdit_setFontWeight_int(_self_ : QTextEdit*, w : Int32) : Void
    fun bg_QTextEdit_setFontUnderline_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setFontItalic_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setTextColor_const_QColor_R(_self_ : QTextEdit*, c : QColor*) : Void
    fun bg_QTextEdit_setTextBackgroundColor_const_QColor_R(_self_ : QTextEdit*, c : QColor*) : Void
    fun bg_QTextEdit_setCurrentFont_const_QFont_R(_self_ : QTextEdit*, f : QFont*) : Void
    fun bg_QTextEdit_setAlignment_Qt__Alignment(_self_ : QTextEdit*, a : Alignment) : Void
    fun bg_QTextEdit_setPlainText_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_setHtml_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_setText_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_cut_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_copy_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_paste_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_undo_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_redo_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_clear_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_selectAll_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_insertPlainText_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_insertHtml_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_append_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_scrollToAnchor_const_QString_R(_self_ : QTextEdit*, name : CrystalString) : Void
    fun bg_QTextEdit_zoomIn_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_zoomIn_int(_self_ : QTextEdit*, range : Int32) : Void
    fun bg_QTextEdit_zoomOut_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_zoomOut_int(_self_ : QTextEdit*, range : Int32) : Void
    fun bg_QTextEdit_textChanged_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_textChanged_CONNECT_CrystalProc_void_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_undoAvailable_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_undoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_redoAvailable_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_redoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(_self_ : QTextEdit*, format : QTextCharFormat*) : Void
    fun bg_QTextEdit_currentCharFormatChanged_CONNECT_CrystalProc_void__const_QTextCharFormatR_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_copyAvailable_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_copyAvailable_CONNECT_CrystalProc_void__bool_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_selectionChanged_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_selectionChanged_CONNECT_CrystalProc_void_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_cursorPositionChanged_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_cursorPositionChanged_CONNECT_CrystalProc_void_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_event_QEvent_X(_self_ : QTextEdit*, e : QEvent*) : Bool
    fun bg_QTextEdit_timerEvent_QTimerEvent_X(_self_ : QTextEdit*, e : QTimerEvent*) : Void
    fun bg_QTextEdit_keyPressEvent_QKeyEvent_X(_self_ : QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(_self_ : QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_resizeEvent_QResizeEvent_X(_self_ : QTextEdit*, e : QResizeEvent*) : Void
    fun bg_QTextEdit_paintEvent_QPaintEvent_X(_self_ : QTextEdit*, e : QPaintEvent*) : Void
    fun bg_QTextEdit_mousePressEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_focusNextPrevChild_bool(_self_ : QTextEdit*, next_ : Bool) : Bool
    fun bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(_self_ : QTextEdit*, e : QContextMenuEvent*) : Void
    fun bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(_self_ : QTextEdit*, e : QDragEnterEvent*) : Void
    fun bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QTextEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(_self_ : QTextEdit*, e : QDragMoveEvent*) : Void
    fun bg_QTextEdit_dropEvent_QDropEvent_X(_self_ : QTextEdit*, e : QDropEvent*) : Void
    fun bg_QTextEdit_focusInEvent_QFocusEvent_X(_self_ : QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_focusOutEvent_QFocusEvent_X(_self_ : QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_showEvent_QShowEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTextEdit_changeEvent_QEvent_X(_self_ : QTextEdit*, e : QEvent*) : Void
    fun bg_QTextEdit_wheelEvent_QWheelEvent_X(_self_ : QTextEdit*, e : QWheelEvent*) : Void
    fun bg_QTextEdit_createMimeDataFromSelection_(_self_ : QTextEdit*) : QMimeData*
    fun bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(_self_ : QTextEdit*, source : QMimeData*) : Bool
    fun bg_QTextEdit_insertFromMimeData_const_QMimeData_X(_self_ : QTextEdit*, source : QMimeData*) : Void
    fun bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QTextEdit_CONSTRUCT_QTextEditPrivate_R_QWidget_X(dd : QTextEditPrivate*, parent : QWidget*) : QTextEdit*
    fun bg_QTextEdit_scrollContentsBy_int_int(_self_ : QTextEdit*, dx : Int32, dy : Int32) : Void
    fun bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(_self_ : QTextEdit*, cursor : QTextCursor*) : Void
    fun bg_QTextEdit_zoomInF_float(_self_ : QTextEdit*, range : Float32) : Void
    fun bg_QTextEdit_DESTROY_(_self_ : QTextEdit*) : Void
    fun bg_QFileDialog_metaObject_(_self_ : QFileDialog*) : QMetaObject*
    fun bg_QFileDialog_qt_metacast_const_char_X(_self_ : QFileDialog*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QFileDialog_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QFileDialog_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QFileDialog_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QFileDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QFileDialog*
    fun bg_QFileDialog_CONSTRUCT_() : QFileDialog*
    fun bg_QFileDialog_CONSTRUCT_QWidget_X(parent : QWidget*) : QFileDialog*
    fun bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QFileDialog*
    fun bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, directory : CrystalString) : QFileDialog*
    fun bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, directory : CrystalString, filter : CrystalString) : QFileDialog*
    fun bg_QFileDialog_setDirectory_const_QString_R(_self_ : QFileDialog*, directory : CrystalString) : Void
    fun bg_QFileDialog_setDirectory_const_QDir_R(_self_ : QFileDialog*, directory : QDir*) : Void
    fun bg_QFileDialog_directory_(_self_ : QFileDialog*) : QDir*
    fun bg_QFileDialog_setDirectoryUrl_const_QUrl_R(_self_ : QFileDialog*, directory : QUrl*) : Void
    fun bg_QFileDialog_directoryUrl_(_self_ : QFileDialog*) : QUrl*
    fun bg_QFileDialog_selectFile_const_QString_R(_self_ : QFileDialog*, filename : CrystalString) : Void
    fun bg_QFileDialog_selectedFiles_(_self_ : QFileDialog*) : Void*
    fun bg_QFileDialog_selectUrl_const_QUrl_R(_self_ : QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_selectedUrls_(_self_ : QFileDialog*) : Void*
    fun bg_QFileDialog_setNameFilterDetailsVisible_bool(_self_ : QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_isNameFilterDetailsVisible_(_self_ : QFileDialog*) : Bool
    fun bg_QFileDialog_setNameFilter_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_setNameFilters_const_QStringList_R(_self_ : QFileDialog*, filters : Void*) : Void
    fun bg_QFileDialog_nameFilters_(_self_ : QFileDialog*) : Void*
    fun bg_QFileDialog_selectNameFilter_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_selectedMimeTypeFilter_(_self_ : QFileDialog*) : CrystalString
    fun bg_QFileDialog_selectedNameFilter_(_self_ : QFileDialog*) : CrystalString
    fun bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(_self_ : QFileDialog*, filters : Void*) : Void
    fun bg_QFileDialog_mimeTypeFilters_(_self_ : QFileDialog*) : Void*
    fun bg_QFileDialog_selectMimeTypeFilter_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_filter_(_self_ : QFileDialog*) : Dir::Filters
    fun bg_QFileDialog_setFilter_QDir__Filters(_self_ : QFileDialog*, filters : Dir::Filters) : Void
    fun bg_QFileDialog_setViewMode_QFileDialog__ViewMode(_self_ : QFileDialog*, mode : FileDialog::ViewMode) : Void
    fun bg_QFileDialog_viewMode_(_self_ : QFileDialog*) : FileDialog::ViewMode
    fun bg_QFileDialog_setFileMode_QFileDialog__FileMode(_self_ : QFileDialog*, mode : FileDialog::FileMode) : Void
    fun bg_QFileDialog_fileMode_(_self_ : QFileDialog*) : FileDialog::FileMode
    fun bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(_self_ : QFileDialog*, mode : FileDialog::AcceptMode) : Void
    fun bg_QFileDialog_acceptMode_(_self_ : QFileDialog*) : FileDialog::AcceptMode
    fun bg_QFileDialog_setReadOnly_bool(_self_ : QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_isReadOnly_(_self_ : QFileDialog*) : Bool
    fun bg_QFileDialog_setResolveSymlinks_bool(_self_ : QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_resolveSymlinks_(_self_ : QFileDialog*) : Bool
    fun bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(_self_ : QFileDialog*, urls : Void*) : Void
    fun bg_QFileDialog_sidebarUrls_(_self_ : QFileDialog*) : Void*
    fun bg_QFileDialog_saveState_(_self_ : QFileDialog*) : QByteArray*
    fun bg_QFileDialog_restoreState_const_QByteArray_R(_self_ : QFileDialog*, state : QByteArray*) : Bool
    fun bg_QFileDialog_setConfirmOverwrite_bool(_self_ : QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_confirmOverwrite_(_self_ : QFileDialog*) : Bool
    fun bg_QFileDialog_setDefaultSuffix_const_QString_R(_self_ : QFileDialog*, suffix : CrystalString) : Void
    fun bg_QFileDialog_defaultSuffix_(_self_ : QFileDialog*) : CrystalString
    fun bg_QFileDialog_setHistory_const_QStringList_R(_self_ : QFileDialog*, paths : Void*) : Void
    fun bg_QFileDialog_history_(_self_ : QFileDialog*) : Void*
    fun bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(_self_ : QFileDialog*, delegate : QAbstractItemDelegate*) : Void
    fun bg_QFileDialog_itemDelegate_(_self_ : QFileDialog*) : QAbstractItemDelegate*
    fun bg_QFileDialog_setIconProvider_QFileIconProvider_X(_self_ : QFileDialog*, provider : QFileIconProvider*) : Void
    fun bg_QFileDialog_iconProvider_(_self_ : QFileDialog*) : QFileIconProvider*
    fun bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(_self_ : QFileDialog*, label : FileDialog::DialogLabel, text : CrystalString) : Void
    fun bg_QFileDialog_labelText_QFileDialog__DialogLabel(_self_ : QFileDialog*, label : FileDialog::DialogLabel) : CrystalString
    fun bg_QFileDialog_setSupportedSchemes_const_QStringList_R(_self_ : QFileDialog*, schemes : Void*) : Void
    fun bg_QFileDialog_supportedSchemes_(_self_ : QFileDialog*) : Void*
    fun bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(_self_ : QFileDialog*, model : QAbstractProxyModel*) : Void
    fun bg_QFileDialog_proxyModel_(_self_ : QFileDialog*) : QAbstractProxyModel*
    fun bg_QFileDialog_setOption_QFileDialog__Option(_self_ : QFileDialog*, option : FileDialog::Option) : Void
    fun bg_QFileDialog_setOption_QFileDialog__Option_bool(_self_ : QFileDialog*, option : FileDialog::Option, on : Bool) : Void
    fun bg_QFileDialog_testOption_QFileDialog__Option(_self_ : QFileDialog*, option : FileDialog::Option) : Bool
    fun bg_QFileDialog_setOptions_QFileDialog__Options(_self_ : QFileDialog*, options : FileDialog::Options) : Void
    fun bg_QFileDialog_options_(_self_ : QFileDialog*) : FileDialog::Options
    fun bg_QFileDialog_open_QObject_X_const_char_X(_self_ : QFileDialog*, receiver : QObject*, member : UInt8*) : Void
    fun bg_QFileDialog_setVisible_bool(_self_ : QFileDialog*, visible : Bool) : Void
    fun bg_QFileDialog_fileSelected_const_QString_R(_self_ : QFileDialog*, file : CrystalString) : Void
    fun bg_QFileDialog_fileSelected_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_filesSelected_const_QStringList_R(_self_ : QFileDialog*, files : Void*) : Void
    fun bg_QFileDialog_filesSelected_CONNECT_CrystalProc_void__const_QStringListR_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_currentChanged_const_QString_R(_self_ : QFileDialog*, path : CrystalString) : Void
    fun bg_QFileDialog_currentChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_directoryEntered_const_QString_R(_self_ : QFileDialog*, directory : CrystalString) : Void
    fun bg_QFileDialog_directoryEntered_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_urlSelected_const_QUrl_R(_self_ : QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_urlSelected_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_urlsSelected_const_QList_QUrl__R(_self_ : QFileDialog*, urls : Void*) : Void
    fun bg_QFileDialog_urlsSelected_CONNECT_CrystalProc_void__const_QList_QUrl_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_currentUrlChanged_const_QUrl_R(_self_ : QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_currentUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_directoryUrlEntered_const_QUrl_R(_self_ : QFileDialog*, directory : QUrl*) : Void
    fun bg_QFileDialog_directoryUrlEntered_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_filterSelected_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_filterSelected_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_getOpenFileName_STATIC_() : CrystalString
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X(parent : QWidget*) : CrystalString
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : CrystalString
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : CrystalString
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString, filter : CrystalString) : CrystalString
    fun bg_QFileDialog_getOpenFileUrl_STATIC_() : QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X(parent : QWidget*) : QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : QUrl*
    fun bg_QFileDialog_getSaveFileName_STATIC_() : CrystalString
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X(parent : QWidget*) : CrystalString
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : CrystalString
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : CrystalString
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString, filter : CrystalString) : CrystalString
    fun bg_QFileDialog_getSaveFileUrl_STATIC_() : QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X(parent : QWidget*) : QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : QUrl*
    fun bg_QFileDialog_getExistingDirectory_STATIC_() : CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X(parent : QWidget*) : CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(parent : QWidget*, caption : CrystalString, dir : CrystalString, options : FileDialog::Options) : CrystalString
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_() : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X(parent : QWidget*) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(parent : QWidget*, caption : CrystalString, dir : QUrl*, options : FileDialog::Options) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, options : FileDialog::Options, supported_schemes : Void*) : QUrl*
    fun bg_QFileDialog_getOpenFileNames_STATIC_() : Void*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X(parent : QWidget*) : Void*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : Void*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : Void*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString, filter : CrystalString) : Void*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_() : Void*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X(parent : QWidget*) : Void*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : Void*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : Void*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : Void*
    fun bg_QFileDialog_CONSTRUCT_const_QFileDialogArgs_R(args : QFileDialogArgs*) : QFileDialog*
    fun bg_QFileDialog_done_int(_self_ : QFileDialog*, result : Int32) : Void
    fun bg_QFileDialog_accept_(_self_ : QFileDialog*) : Void
    fun bg_QFileDialog_changeEvent_QEvent_X(_self_ : QFileDialog*, e : QEvent*) : Void
    fun bg_QFileDialog_DESTROY_(_self_ : QFileDialog*) : Void
    fun bg_QTextOption_CONSTRUCT_() : QTextOption*
    fun bg_QTextOption_CONSTRUCT_Qt__Alignment(alignment : Alignment) : QTextOption*
    fun bg_QTextOption_setAlignment_Qt__Alignment(_self_ : QTextOption*, alignment : Alignment) : Void
    fun bg_QTextOption_alignment_(_self_ : QTextOption*) : Alignment
    fun bg_QTextOption_setTextDirection_Qt__LayoutDirection(_self_ : QTextOption*, a_direction : LayoutDirection) : Void
    fun bg_QTextOption_textDirection_(_self_ : QTextOption*) : LayoutDirection
    fun bg_QTextOption_setWrapMode_QTextOption__WrapMode(_self_ : QTextOption*, wrap : TextOptionWrapMode) : Void
    fun bg_QTextOption_wrapMode_(_self_ : QTextOption*) : TextOptionWrapMode
    fun bg_QTextOption_setFlags_QTextOption__Flags(_self_ : QTextOption*, flags : TextOptionFlags) : Void
    fun bg_QTextOption_flags_(_self_ : QTextOption*) : TextOptionFlags
    fun bg_QTextOption_setUseDesignMetrics_bool(_self_ : QTextOption*, b : Bool) : Void
    fun bg_QTextOption_useDesignMetrics_(_self_ : QTextOption*) : Bool
    fun bg_QTextOption_DESTROY_(_self_ : QTextOption*) : Void
    fun bg_QTextDocument_metaObject_(_self_ : QTextDocument*) : QMetaObject*
    fun bg_QTextDocument_qt_metacast_const_char_X(_self_ : QTextDocument*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTextDocument_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTextDocument_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTextDocument_trUtf8_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTextDocument_CONSTRUCT_() : QTextDocument*
    fun bg_QTextDocument_CONSTRUCT_QObject_X(parent : QObject*) : QTextDocument*
    fun bg_QTextDocument_CONSTRUCT_const_QString_R(text : CrystalString) : QTextDocument*
    fun bg_QTextDocument_CONSTRUCT_const_QString_R_QObject_X(text : CrystalString, parent : QObject*) : QTextDocument*
    fun bg_QTextDocument_clone_(_self_ : QTextDocument*) : QTextDocument*
    fun bg_QTextDocument_clone_QObject_X(_self_ : QTextDocument*, parent : QObject*) : QTextDocument*
    fun bg_QTextDocument_isEmpty_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_clear_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_setUndoRedoEnabled_bool(_self_ : QTextDocument*, enable : Bool) : Void
    fun bg_QTextDocument_isUndoRedoEnabled_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_isUndoAvailable_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_isRedoAvailable_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_availableUndoSteps_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_availableRedoSteps_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_revision_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(_self_ : QTextDocument*, layout : QAbstractTextDocumentLayout*) : Void
    fun bg_QTextDocument_documentLayout_(_self_ : QTextDocument*) : QAbstractTextDocumentLayout*
    fun bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(_self_ : QTextDocument*, info : TextDocumentMetaInformation, unnamed_arg_1 : CrystalString) : Void
    fun bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(_self_ : QTextDocument*, info : TextDocumentMetaInformation) : CrystalString
    fun bg_QTextDocument_toHtml_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_toHtml_const_QByteArray_R(_self_ : QTextDocument*, encoding : QByteArray*) : CrystalString
    fun bg_QTextDocument_setHtml_const_QString_R(_self_ : QTextDocument*, html : CrystalString) : Void
    fun bg_QTextDocument_toRawText_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_toPlainText_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_setPlainText_const_QString_R(_self_ : QTextDocument*, text : CrystalString) : Void
    fun bg_QTextDocument_characterAt_int(_self_ : QTextDocument*, pos : Int32) : QChar*
    fun bg_QTextDocument_find_const_QString_R(_self_ : QTextDocument*, sub_string : CrystalString) : QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_int(_self_ : QTextDocument*, sub_string : CrystalString, from : Int32) : QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(_self_ : QTextDocument*, sub_string : CrystalString, from : Int32, options : TextDocumentFindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(_self_ : QTextDocument*, sub_string : CrystalString, cursor : QTextCursor*) : QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : QTextDocument*, sub_string : CrystalString, cursor : QTextCursor*, options : TextDocumentFindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R(_self_ : QTextDocument*, expr : QRegExp*) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_int(_self_ : QTextDocument*, expr : QRegExp*, from : Int32) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegExp*, from : Int32, options : TextDocumentFindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(_self_ : QTextDocument*, expr : QRegExp*, cursor : QTextCursor*) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegExp*, cursor : QTextCursor*, options : TextDocumentFindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R(_self_ : QTextDocument*, expr : QRegularExpression*) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_int(_self_ : QTextDocument*, expr : QRegularExpression*, from : Int32) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegularExpression*, from : Int32, options : TextDocumentFindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(_self_ : QTextDocument*, expr : QRegularExpression*, cursor : QTextCursor*) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegularExpression*, cursor : QTextCursor*, options : TextDocumentFindFlags) : QTextCursor*
    fun bg_QTextDocument_frameAt_int(_self_ : QTextDocument*, pos : Int32) : QTextFrame*
    fun bg_QTextDocument_rootFrame_(_self_ : QTextDocument*) : QTextFrame*
    fun bg_QTextDocument_object_int(_self_ : QTextDocument*, object_index : Int32) : QTextObject*
    fun bg_QTextDocument_objectForFormat_const_QTextFormat_R(_self_ : QTextDocument*, unnamed_arg_0 : QTextFormat*) : QTextObject*
    fun bg_QTextDocument_findBlock_int(_self_ : QTextDocument*, pos : Int32) : QTextBlock*
    fun bg_QTextDocument_findBlockByNumber_int(_self_ : QTextDocument*, block_number : Int32) : QTextBlock*
    fun bg_QTextDocument_findBlockByLineNumber_int(_self_ : QTextDocument*, block_number : Int32) : QTextBlock*
    fun bg_QTextDocument_begin_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_end_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_firstBlock_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_lastBlock_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_setPageSize_const_QSizeF_R(_self_ : QTextDocument*, size : QSizeF*) : Void
    fun bg_QTextDocument_pageSize_(_self_ : QTextDocument*) : QSizeF*
    fun bg_QTextDocument_setDefaultFont_const_QFont_R(_self_ : QTextDocument*, font : QFont*) : Void
    fun bg_QTextDocument_defaultFont_(_self_ : QTextDocument*) : QFont*
    fun bg_QTextDocument_pageCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_isModified_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_print_QPagedPaintDevice_X(_self_ : QTextDocument*, printer : QPagedPaintDevice*) : Void
    fun bg_QTextDocument_markContentsDirty_int_int(_self_ : QTextDocument*, from : Int32, length : Int32) : Void
    fun bg_QTextDocument_setUseDesignMetrics_bool(_self_ : QTextDocument*, b : Bool) : Void
    fun bg_QTextDocument_useDesignMetrics_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_drawContents_QPainter_X(_self_ : QTextDocument*, painter : QPainter*) : Void
    fun bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(_self_ : QTextDocument*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QTextDocument_adjustSize_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_size_(_self_ : QTextDocument*) : QSizeF*
    fun bg_QTextDocument_blockCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_lineCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_characterCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_setDefaultStyleSheet_const_QString_R(_self_ : QTextDocument*, sheet : CrystalString) : Void
    fun bg_QTextDocument_defaultStyleSheet_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_undo_QTextCursor_X(_self_ : QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_redo_QTextCursor_X(_self_ : QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_clearUndoRedoStacks_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(_self_ : QTextDocument*, history_to_clear : TextDocumentStacks) : Void
    fun bg_QTextDocument_maximumBlockCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_setMaximumBlockCount_int(_self_ : QTextDocument*, maximum : Int32) : Void
    fun bg_QTextDocument_defaultTextOption_(_self_ : QTextDocument*) : QTextOption*
    fun bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(_self_ : QTextDocument*, option : QTextOption*) : Void
    fun bg_QTextDocument_baseUrl_(_self_ : QTextDocument*) : QUrl*
    fun bg_QTextDocument_setBaseUrl_const_QUrl_R(_self_ : QTextDocument*, url : QUrl*) : Void
    fun bg_QTextDocument_defaultCursorMoveStyle_(_self_ : QTextDocument*) : CursorMoveStyle
    fun bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(_self_ : QTextDocument*, style : CursorMoveStyle) : Void
    fun bg_QTextDocument_contentsChange_int_int_int(_self_ : QTextDocument*, from : Int32, chars_removed : Int32, chars_added : Int32) : Void
    fun bg_QTextDocument_contentsChange_CONNECT_CrystalProc_void__int__int__int_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_contentsChanged_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_contentsChanged_CONNECT_CrystalProc_void_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_undoAvailable_bool(_self_ : QTextDocument*, unnamed_arg_0 : Bool) : Void
    fun bg_QTextDocument_undoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_redoAvailable_bool(_self_ : QTextDocument*, unnamed_arg_0 : Bool) : Void
    fun bg_QTextDocument_redoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_undoCommandAdded_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_undoCommandAdded_CONNECT_CrystalProc_void_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_modificationChanged_bool(_self_ : QTextDocument*, m : Bool) : Void
    fun bg_QTextDocument_modificationChanged_CONNECT_CrystalProc_void__bool_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(_self_ : QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_cursorPositionChanged_CONNECT_CrystalProc_void__const_QTextCursorR_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_blockCountChanged_int(_self_ : QTextDocument*, new_block_count : Int32) : Void
    fun bg_QTextDocument_blockCountChanged_CONNECT_CrystalProc_void__int_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_baseUrlChanged_const_QUrl_R(_self_ : QTextDocument*, url : QUrl*) : Void
    fun bg_QTextDocument_baseUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_documentLayoutChanged_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_documentLayoutChanged_CONNECT_CrystalProc_void_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_undo_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_redo_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(_self_ : QTextDocument*, unnamed_arg_0 : QAbstractUndoItem*) : Void
    fun bg_QTextDocument_setModified_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_setModified_bool(_self_ : QTextDocument*, m : Bool) : Void
    fun bg_QTextDocument_createObject_const_QTextFormat_R(_self_ : QTextDocument*, f : QTextFormat*) : QTextObject*
    fun bg_QTextDocument_CONSTRUCT_QTextDocumentPrivate_R_QObject_X(dd : QTextDocumentPrivate*, parent : QObject*) : QTextDocument*
    fun bg_QTextDocument_docHandle_(_self_ : QTextDocument*) : QTextDocumentPrivate*
    fun bg_QTextDocument_DESTROY_(_self_ : QTextDocument*) : Void
    fun bg_QTextCursor_CONSTRUCT_() : QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextDocument_X(document : QTextDocument*) : QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextDocumentPrivate_X_int(p : QTextDocumentPrivate*, pos : Int32) : QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextCursorPrivate_X(d : QTextCursorPrivate*) : QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextFrame_X(frame : QTextFrame*) : QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_const_QTextBlock_R(block : QTextBlock*) : QTextCursor*
    fun bg_QTextCursor_swap_QTextCursor_R(_self_ : QTextCursor*, other : QTextCursor*) : Void
    fun bg_QTextCursor_isNull_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_setPosition_int(_self_ : QTextCursor*, pos : Int32) : Void
    fun bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(_self_ : QTextCursor*, pos : Int32, mode : TextCursorMoveMode) : Void
    fun bg_QTextCursor_position_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_positionInBlock_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_anchor_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_insertText_const_QString_R(_self_ : QTextCursor*, text : CrystalString) : Void
    fun bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(_self_ : QTextCursor*, text : CrystalString, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_movePosition_QTextCursor__MoveOperation(_self_ : QTextCursor*, op : TextCursorMoveOperation) : Bool
    fun bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode(_self_ : QTextCursor*, op : TextCursorMoveOperation, unnamed_arg_1 : TextCursorMoveMode) : Bool
    fun bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(_self_ : QTextCursor*, op : TextCursorMoveOperation, unnamed_arg_1 : TextCursorMoveMode, n : Int32) : Bool
    fun bg_QTextCursor_visualNavigation_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_setVisualNavigation_bool(_self_ : QTextCursor*, b : Bool) : Void
    fun bg_QTextCursor_setVerticalMovementX_int(_self_ : QTextCursor*, x : Int32) : Void
    fun bg_QTextCursor_verticalMovementX_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_setKeepPositionOnInsert_bool(_self_ : QTextCursor*, b : Bool) : Void
    fun bg_QTextCursor_keepPositionOnInsert_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_deleteChar_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_deletePreviousChar_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_select_QTextCursor__SelectionType(_self_ : QTextCursor*, selection : TextCursorSelectionType) : Void
    fun bg_QTextCursor_hasSelection_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_hasComplexSelection_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_removeSelectedText_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_clearSelection_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_selectionStart_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_selectionEnd_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_selectedText_(_self_ : QTextCursor*) : CrystalString
    fun bg_QTextCursor_selection_(_self_ : QTextCursor*) : QTextDocumentFragment*
    fun bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(_self_ : QTextCursor*, first_row : Int32*, num_rows : Int32*, first_column : Int32*, num_columns : Int32*) : Void
    fun bg_QTextCursor_block_(_self_ : QTextCursor*) : QTextBlock*
    fun bg_QTextCursor_charFormat_(_self_ : QTextCursor*) : QTextCharFormat*
    fun bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, modifier : QTextCharFormat*) : Void
    fun bg_QTextCursor_blockFormat_(_self_ : QTextCursor*) : QTextBlockFormat*
    fun bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(_self_ : QTextCursor*, format : QTextBlockFormat*) : Void
    fun bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(_self_ : QTextCursor*, modifier : QTextBlockFormat*) : Void
    fun bg_QTextCursor_blockCharFormat_(_self_ : QTextCursor*) : QTextCharFormat*
    fun bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, modifier : QTextCharFormat*) : Void
    fun bg_QTextCursor_atBlockStart_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_atBlockEnd_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_atStart_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_atEnd_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_insertBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(_self_ : QTextCursor*, format : QTextBlockFormat*) : Void
    fun bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(_self_ : QTextCursor*, format : QTextBlockFormat*, char_format : QTextCharFormat*) : Void
    fun bg_QTextCursor_insertList_const_QTextListFormat_R(_self_ : QTextCursor*, format : QTextListFormat*) : QTextList*
    fun bg_QTextCursor_insertList_QTextListFormat__Style(_self_ : QTextCursor*, style : TextListFormatStyle) : QTextList*
    fun bg_QTextCursor_createList_const_QTextListFormat_R(_self_ : QTextCursor*, format : QTextListFormat*) : QTextList*
    fun bg_QTextCursor_createList_QTextListFormat__Style(_self_ : QTextCursor*, style : TextListFormatStyle) : QTextList*
    fun bg_QTextCursor_currentList_(_self_ : QTextCursor*) : QTextList*
    fun bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(_self_ : QTextCursor*, rows : Int32, cols : Int32, format : QTextTableFormat*) : QTextTable*
    fun bg_QTextCursor_insertTable_int_int(_self_ : QTextCursor*, rows : Int32, cols : Int32) : QTextTable*
    fun bg_QTextCursor_currentTable_(_self_ : QTextCursor*) : QTextTable*
    fun bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(_self_ : QTextCursor*, format : QTextFrameFormat*) : QTextFrame*
    fun bg_QTextCursor_currentFrame_(_self_ : QTextCursor*) : QTextFrame*
    fun bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(_self_ : QTextCursor*, fragment : QTextDocumentFragment*) : Void
    fun bg_QTextCursor_insertHtml_const_QString_R(_self_ : QTextCursor*, html : CrystalString) : Void
    fun bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(_self_ : QTextCursor*, format : QTextImageFormat*, alignment : TextFrameFormatPosition) : Void
    fun bg_QTextCursor_insertImage_const_QTextImageFormat_R(_self_ : QTextCursor*, format : QTextImageFormat*) : Void
    fun bg_QTextCursor_insertImage_const_QString_R(_self_ : QTextCursor*, name : CrystalString) : Void
    fun bg_QTextCursor_insertImage_const_QImage_R(_self_ : QTextCursor*, image : QImage*) : Void
    fun bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(_self_ : QTextCursor*, image : QImage*, name : CrystalString) : Void
    fun bg_QTextCursor_beginEditBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_joinPreviousEditBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_endEditBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_isCopyOf_const_QTextCursor_R(_self_ : QTextCursor*, other : QTextCursor*) : Bool
    fun bg_QTextCursor_blockNumber_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_columnNumber_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_document_(_self_ : QTextCursor*) : QTextDocument*
    fun bg_QTextCursor_DESTROY_(_self_ : QTextCursor*) : Void
    fun bg_QDir_CONSTRUCT_() : QDir*
    fun bg_QDir_CONSTRUCT_const_QString_R(path : CrystalString) : QDir*
    fun bg_QDir_CONSTRUCT_const_QString_R_const_QString_R(path : CrystalString, name_filter : CrystalString) : QDir*
    fun bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(path : CrystalString, name_filter : CrystalString, sort : Dir::SortFlags) : QDir*
    fun bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(path : CrystalString, name_filter : CrystalString, sort : Dir::SortFlags, filter : Dir::Filters) : QDir*
    fun bg_QDir_swap_QDir_R(_self_ : QDir*, other : QDir*) : Void
    fun bg_QDir_setPath_const_QString_R(_self_ : QDir*, path : CrystalString) : Void
    fun bg_QDir_path_(_self_ : QDir*) : CrystalString
    fun bg_QDir_absolutePath_(_self_ : QDir*) : CrystalString
    fun bg_QDir_canonicalPath_(_self_ : QDir*) : CrystalString
    fun bg_QDir_addResourceSearchPath_STATIC_const_QString_R(path : CrystalString) : Void
    fun bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(prefix : CrystalString, search_paths : Void*) : Void
    fun bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(prefix : CrystalString, path : CrystalString) : Void
    fun bg_QDir_searchPaths_STATIC_const_QString_R(prefix : CrystalString) : Void*
    fun bg_QDir_dirName_(_self_ : QDir*) : CrystalString
    fun bg_QDir_filePath_const_QString_R(_self_ : QDir*, file_name : CrystalString) : CrystalString
    fun bg_QDir_absoluteFilePath_const_QString_R(_self_ : QDir*, file_name : CrystalString) : CrystalString
    fun bg_QDir_relativeFilePath_const_QString_R(_self_ : QDir*, file_name : CrystalString) : CrystalString
    fun bg_QDir_toNativeSeparators_STATIC_const_QString_R(path_name : CrystalString) : CrystalString
    fun bg_QDir_fromNativeSeparators_STATIC_const_QString_R(path_name : CrystalString) : CrystalString
    fun bg_QDir_cd_const_QString_R(_self_ : QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_cdUp_(_self_ : QDir*) : Bool
    fun bg_QDir_nameFilters_(_self_ : QDir*) : Void*
    fun bg_QDir_setNameFilters_const_QStringList_R(_self_ : QDir*, name_filters : Void*) : Void
    fun bg_QDir_filter_(_self_ : QDir*) : Dir::Filters
    fun bg_QDir_setFilter_QDir__Filters(_self_ : QDir*, filter : Dir::Filters) : Void
    fun bg_QDir_sorting_(_self_ : QDir*) : Dir::SortFlags
    fun bg_QDir_setSorting_QDir__SortFlags(_self_ : QDir*, sort : Dir::SortFlags) : Void
    fun bg_QDir_count_(_self_ : QDir*) : UInt32
    fun bg_QDir_isEmpty_(_self_ : QDir*) : Bool
    fun bg_QDir_isEmpty_QDir__Filters(_self_ : QDir*, filters : Dir::Filters) : Bool
    fun bg_QDir_nameFiltersFromString_STATIC_const_QString_R(name_filter : CrystalString) : Void*
    fun bg_QDir_entryList_(_self_ : QDir*) : Void*
    fun bg_QDir_entryList_QDir__Filters(_self_ : QDir*, filters : Dir::Filters) : Void*
    fun bg_QDir_entryList_QDir__Filters_QDir__SortFlags(_self_ : QDir*, filters : Dir::Filters, sort : Dir::SortFlags) : Void*
    fun bg_QDir_entryList_const_QStringList_R(_self_ : QDir*, name_filters : Void*) : Void*
    fun bg_QDir_entryList_const_QStringList_R_QDir__Filters(_self_ : QDir*, name_filters : Void*, filters : Dir::Filters) : Void*
    fun bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(_self_ : QDir*, name_filters : Void*, filters : Dir::Filters, sort : Dir::SortFlags) : Void*
    fun bg_QDir_entryInfoList_(_self_ : QDir*) : QFileInfoList*
    fun bg_QDir_entryInfoList_QDir__Filters(_self_ : QDir*, filters : Dir::Filters) : QFileInfoList*
    fun bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(_self_ : QDir*, filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R(_self_ : QDir*, name_filters : Void*) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(_self_ : QDir*, name_filters : Void*, filters : Dir::Filters) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(_self_ : QDir*, name_filters : Void*, filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
    fun bg_QDir_mkdir_const_QString_R(_self_ : QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_rmdir_const_QString_R(_self_ : QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_mkpath_const_QString_R(_self_ : QDir*, dir_path : CrystalString) : Bool
    fun bg_QDir_rmpath_const_QString_R(_self_ : QDir*, dir_path : CrystalString) : Bool
    fun bg_QDir_removeRecursively_(_self_ : QDir*) : Bool
    fun bg_QDir_isReadable_(_self_ : QDir*) : Bool
    fun bg_QDir_exists_(_self_ : QDir*) : Bool
    fun bg_QDir_isRoot_(_self_ : QDir*) : Bool
    fun bg_QDir_isRelativePath_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_isAbsolutePath_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_isRelative_(_self_ : QDir*) : Bool
    fun bg_QDir_isAbsolute_(_self_ : QDir*) : Bool
    fun bg_QDir_makeAbsolute_(_self_ : QDir*) : Bool
    fun bg_QDir_remove_const_QString_R(_self_ : QDir*, file_name : CrystalString) : Bool
    fun bg_QDir_rename_const_QString_R_const_QString_R(_self_ : QDir*, old_name : CrystalString, new_name : CrystalString) : Bool
    fun bg_QDir_exists_const_QString_R(_self_ : QDir*, name : CrystalString) : Bool
    fun bg_QDir_drives_STATIC_() : QFileInfoList*
    fun bg_QDir_listSeparator_STATIC_() : QChar*
    fun bg_QDir_separator_STATIC_() : QChar*
    fun bg_QDir_setCurrent_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_current_STATIC_() : QDir*
    fun bg_QDir_currentPath_STATIC_() : CrystalString
    fun bg_QDir_home_STATIC_() : QDir*
    fun bg_QDir_homePath_STATIC_() : CrystalString
    fun bg_QDir_root_STATIC_() : QDir*
    fun bg_QDir_rootPath_STATIC_() : CrystalString
    fun bg_QDir_temp_STATIC_() : QDir*
    fun bg_QDir_tempPath_STATIC_() : CrystalString
    fun bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(filters : Void*, file_name : CrystalString) : Bool
    fun bg_QDir_match_STATIC_const_QString_R_const_QString_R(filter : CrystalString, file_name : CrystalString) : Bool
    fun bg_QDir_cleanPath_STATIC_const_QString_R(path : CrystalString) : CrystalString
    fun bg_QDir_refresh_(_self_ : QDir*) : Void
    fun bg_QDir_CONSTRUCT_QDirPrivate_R(d : QDirPrivate*) : QDir*
    fun bg_QDir_DESTROY_(_self_ : QDir*) : Void
  end
  enum CheckState : UInt32
    Unchecked = 0
    PartiallyChecked = 1
    Checked = 2
  end
  enum ConnectionType : UInt32
    AutoConnection = 0
    DirectConnection = 1
    QueuedConnection = 2
    BlockingQueuedConnection = 3
    UniqueConnection = 128
  end
  enum TimerType : UInt32
    PreciseTimer = 0
    CoarseTimer = 1
    VeryCoarseTimer = 2
  end
  enum GestureType : UInt32
    TapGesture = 1
    TapAndHoldGesture = 2
    PanGesture = 3
    PinchGesture = 4
    SwipeGesture = 5
    CustomGesture = 256
    LastGestureType = 4294967295
  end
  @[Flags]
  enum GestureFlags : UInt32
    DontStartGestureOnChildren = 1
    ReceivePartialGestures = 2
    IgnoredGesturesPropagateToParent = 4
  end
  enum LayoutDirection : UInt32
    LeftToRight = 0
    RightToLeft = 1
    LayoutDirectionAuto = 2
  end
  enum FocusReason : UInt32
    MouseFocusReason = 0
    TabFocusReason = 1
    BacktabFocusReason = 2
    ActiveWindowFocusReason = 3
    PopupFocusReason = 4
    ShortcutFocusReason = 5
    MenuBarFocusReason = 6
    OtherFocusReason = 7
    NoFocusReason = 8
  end
  enum FocusPolicy : UInt32
    NoFocus = 0
    TabFocus = 1
    ClickFocus = 2
    StrongFocus = 11
    WheelFocus = 15
  end
  enum ContextMenuPolicy : UInt32
    NoContextMenu = 0
    DefaultContextMenu = 1
    ActionsContextMenu = 2
    CustomContextMenu = 3
    PreventContextMenu = 4
  end
  enum ShortcutContext : UInt32
    WidgetShortcut = 0
    WindowShortcut = 1
    ApplicationShortcut = 2
    WidgetWithChildrenShortcut = 3
  end
  @[Flags]
  enum WindowFlags : UInt32
    Widget = 0
    Window = 1
    Dialog = 3
    Sheet = 5
    Drawer = 7
    Popup = 9
    Tool = 11
    ToolTip = 13
    SplashScreen = 15
    Desktop = 17
    SubWindow = 18
    ForeignWindow = 33
    CoverWindow = 65
    WindowTypeMask = 255
    MSWindowsFixedSizeDialogHint = 256
    MSWindowsOwnDC = 512
    BypassWindowManagerHint = 1024
    X11BypassWindowManagerHint = 1024
    FramelessWindowHint = 2048
    WindowTitleHint = 4096
    WindowSystemMenuHint = 8192
    WindowMinimizeButtonHint = 16384
    WindowMaximizeButtonHint = 32768
    WindowMinMaxButtonsHint = 49152
    WindowContextHelpButtonHint = 65536
    WindowShadeButtonHint = 131072
    WindowStaysOnTopHint = 262144
    WindowTransparentForInput = 524288
    WindowOverridesSystemGestures = 1048576
    WindowDoesNotAcceptFocus = 2097152
    MaximizeUsingFullscreenGeometryHint = 4194304
    CustomizeWindowHint = 33554432
    WindowStaysOnBottomHint = 67108864
    WindowCloseButtonHint = 134217728
    MacWindowToolBarButtonHint = 268435456
    BypassGraphicsProxyWidget = 536870912
    NoDropShadowWindowHint = 1073741824
    WindowFullscreenButtonHint = 2147483648
  end
  enum WindowModality : UInt32
    NonModal = 0
    WindowModal = 1
    ApplicationModal = 2
  end
  @[Flags]
  enum WindowStates : UInt32
    WindowNoState = 0
    WindowMinimized = 1
    WindowMaximized = 2
    WindowFullScreen = 4
    WindowActive = 8
  end
  enum WindowType : UInt32
    Widget = 0
    Window = 1
    Dialog = 3
    Sheet = 5
    Drawer = 7
    Popup = 9
    Tool = 11
    ToolTip = 13
    SplashScreen = 15
    Desktop = 17
    SubWindow = 18
    ForeignWindow = 33
    CoverWindow = 65
    WindowTypeMask = 255
    MSWindowsFixedSizeDialogHint = 256
    MSWindowsOwnDC = 512
    BypassWindowManagerHint = 1024
    X11BypassWindowManagerHint = 1024
    FramelessWindowHint = 2048
    WindowTitleHint = 4096
    WindowSystemMenuHint = 8192
    WindowMinimizeButtonHint = 16384
    WindowMaximizeButtonHint = 32768
    WindowMinMaxButtonsHint = 49152
    WindowContextHelpButtonHint = 65536
    WindowShadeButtonHint = 131072
    WindowStaysOnTopHint = 262144
    WindowTransparentForInput = 524288
    WindowOverridesSystemGestures = 1048576
    WindowDoesNotAcceptFocus = 2097152
    MaximizeUsingFullscreenGeometryHint = 4194304
    CustomizeWindowHint = 33554432
    WindowStaysOnBottomHint = 67108864
    WindowCloseButtonHint = 134217728
    MacWindowToolBarButtonHint = 268435456
    BypassGraphicsProxyWidget = 536870912
    NoDropShadowWindowHint = 1073741824
    WindowFullscreenButtonHint = 2147483648
  end
  enum InputMethodQuery : UInt32
    ImEnabled = 1
    ImCursorRectangle = 2
    ImMicroFocus = 2
    ImFont = 4
    ImCursorPosition = 8
    ImSurroundingText = 16
    ImCurrentSelection = 32
    ImMaximumTextLength = 64
    ImAnchorPosition = 128
    ImHints = 256
    ImPreferredLanguage = 512
    ImAbsolutePosition = 1024
    ImTextBeforeCursor = 2048
    ImTextAfterCursor = 4096
    ImEnterKeyType = 8192
    ImAnchorRectangle = 16384
    ImInputItemClipRectangle = 32768
    ImPlatformData = 2147483648
    ImQueryInput = 16570
    ImQueryAll = 4294967295
  end
  @[Flags]
  enum InputMethodHints : UInt32
    ImhNone = 0
    ImhHiddenText = 1
    ImhSensitiveData = 2
    ImhNoAutoUppercase = 4
    ImhPreferNumbers = 8
    ImhPreferUppercase = 16
    ImhPreferLowercase = 32
    ImhNoPredictiveText = 64
    ImhDate = 128
    ImhTime = 256
    ImhPreferLatin = 512
    ImhMultiLine = 1024
    ImhDigitsOnly = 65536
    ImhFormattedNumbersOnly = 131072
    ImhUppercaseOnly = 262144
    ImhLowercaseOnly = 524288
    ImhDialableCharactersOnly = 1048576
    ImhEmailCharactersOnly = 2097152
    ImhUrlCharactersOnly = 4194304
    ImhLatinOnly = 8388608
    ImhExclusiveInputMask = 4294901760
  end
  enum TextFormat : UInt32
    PlainText = 0
    RichText = 1
    AutoText = 2
  end
  @[Flags]
  enum Alignment : UInt32
    AlignLeft = 1
    AlignLeading = 1
    AlignRight = 2
    AlignTrailing = 2
    AlignHCenter = 4
    AlignJustify = 8
    AlignAbsolute = 16
    AlignHorizontalMask = 31
    AlignTop = 32
    AlignBottom = 64
    AlignVCenter = 128
    AlignBaseline = 256
    AlignVerticalMask = 480
    AlignCenter = 132
  end
  @[Flags]
  enum TextInteractionFlags : UInt32
    NoTextInteraction = 0
    TextSelectableByMouse = 1
    TextSelectableByKeyboard = 2
    LinksAccessibleByMouse = 4
    LinksAccessibleByKeyboard = 8
    TextEditable = 16
    TextEditorInteraction = 19
    TextBrowserInteraction = 13
  end
  enum UIEffect : UInt32
    UIGeneral = 0
    UIAnimateMenu = 1
    UIFadeMenu = 2
    UIAnimateCombo = 3
    UIAnimateTooltip = 4
    UIFadeTooltip = 5
    UIAnimateToolBox = 6
  end
  enum ApplicationAttribute : UInt32
    AAImmediateWidgetCreation = 0
    AAMSWindowsUseDirect3DByDefault = 1
    AADontShowIconsInMenus = 2
    AANativeWindows = 3
    AADontCreateNativeWidgetSiblings = 4
    AAPluginApplication = 5
    AAMacPluginApplication = 5
    AADontUseNativeMenuBar = 6
    AAMacDontSwapCtrlAndMeta = 7
    AAUse96Dpi = 8
    AAX11InitThreads = 10
    AASynthesizeTouchForUnhandledMouseEvents = 11
    AASynthesizeMouseForUnhandledTouchEvents = 12
    AAUseHighDpiPixmaps = 13
    AAForceRasterWidgets = 14
    AAUseDesktopOpenGL = 15
    AAUseOpenGLES = 16
    AAUseSoftwareOpenGL = 17
    AAShareOpenGLContexts = 18
    AASetPalette = 19
    AAEnableHighDpiScaling = 20
    AADisableHighDpiScaling = 21
    AAUseStyleSheetPropagationInWidgetStyles = 22
    AADontUseNativeDialogs = 23
    AASynthesizeMouseForUnhandledTabletEvents = 24
    AACompressHighFrequencyEvents = 25
    AADontCheckOpenGLContextThreadAffinity = 26
    AADisableShaderDiskCache = 27
    AAAttributeCount = 28
  end
  enum ScrollBarPolicy : UInt32
    ScrollBarAsNeeded = 0
    ScrollBarAlwaysOff = 1
    ScrollBarAlwaysOn = 2
  end
  enum ItemSelectionMode : UInt32
    ContainsItemShape = 0
    IntersectsItemShape = 1
    ContainsItemBoundingRect = 2
    IntersectsItemBoundingRect = 3
  end
  enum SortOrder : UInt32
    AscendingOrder = 0
    DescendingOrder = 1
  end
  enum ItemSelectionOperation : UInt32
    ReplaceSelection = 0
    AddToSelection = 1
  end
  enum SizeHint : UInt32
    MinimumSize = 0
    PreferredSize = 1
    MaximumSize = 2
    MinimumDescent = 3
    NSizeHints = 4
  end
  enum WindowFrameSection : UInt32
    NoSection = 0
    LeftSection = 1
    TopLeftSection = 2
    TopSection = 3
    TopRightSection = 4
    RightSection = 5
    BottomRightSection = 6
    BottomSection = 7
    BottomLeftSection = 8
    TitleBarArea = 9
  end
  enum CursorMoveStyle : UInt32
    LogicalMoveStyle = 0
    VisualMoveStyle = 1
  end
  @[Flags]
  enum KeyboardModifiers : UInt32
    NoModifier = 0
    ShiftModifier = 33554432
    ControlModifier = 67108864
    AltModifier = 134217728
    MetaModifier = 268435456
    KeypadModifier = 536870912
    GroupSwitchModifier = 1073741824
    KeyboardModifierMask = 4261412864
  end
  @[Flags]
  enum MouseButtons : UInt32
    NoButton = 0
    LeftButton = 1
    RightButton = 2
    MidButton = 4
    MiddleButton = 4
    BackButton = 8
    XButton1 = 8
    ExtraButton1 = 8
    ForwardButton = 16
    XButton2 = 16
    ExtraButton2 = 16
    TaskButton = 32
    ExtraButton3 = 32
    ExtraButton4 = 64
    ExtraButton5 = 128
    ExtraButton6 = 256
    ExtraButton7 = 512
    ExtraButton8 = 1024
    ExtraButton9 = 2048
    ExtraButton10 = 4096
    ExtraButton11 = 8192
    ExtraButton12 = 16384
    ExtraButton13 = 32768
    ExtraButton14 = 65536
    ExtraButton15 = 131072
    ExtraButton16 = 262144
    ExtraButton17 = 524288
    ExtraButton18 = 1048576
    ExtraButton19 = 2097152
    ExtraButton20 = 4194304
    ExtraButton21 = 8388608
    ExtraButton22 = 16777216
    ExtraButton23 = 33554432
    ExtraButton24 = 67108864
    AllButtons = 134217727
    MaxMouseButton = 67108864
    MouseButtonMask = 4294967295
  end
  enum ApplicationState : UInt32
    ApplicationSuspended = 0
    ApplicationHidden = 1
    ApplicationInactive = 2
    ApplicationActive = 4
  end
  enum WidgetAttribute : UInt32
    WADisabled = 0
    WAUnderMouse = 1
    WAMouseTracking = 2
    WAContentsPropagated = 3
    WAOpaquePaintEvent = 4
    WANoBackground = 4
    WAStaticContents = 5
    WALaidOut = 7
    WAPaintOnScreen = 8
    WANoSystemBackground = 9
    WAUpdatesDisabled = 10
    WAMapped = 11
    WAMacNoClickThrough = 12
    WAInputMethodEnabled = 14
    WAWStateVisible = 15
    WAWStateHidden = 16
    WAForceDisabled = 32
    WAKeyCompression = 33
    WAPendingMoveEvent = 34
    WAPendingResizeEvent = 35
    WASetPalette = 36
    WASetFont = 37
    WASetCursor = 38
    WANoChildEventsFromChildren = 39
    WAWindowModified = 41
    WAResized = 42
    WAMoved = 43
    WAPendingUpdate = 44
    WAInvalidSize = 45
    WAMacBrushedMetal = 46
    WAMacMetalStyle = 46
    WACustomWhatsThis = 47
    WALayoutOnEntireRect = 48
    WAOutsideWSRange = 49
    WAGrabbedShortcut = 50
    WATransparentForMouseEvents = 51
    WAPaintUnclipped = 52
    WASetWindowIcon = 53
    WANoMouseReplay = 54
    WADeleteOnClose = 55
    WARightToLeft = 56
    WASetLayoutDirection = 57
    WANoChildEventsForParent = 58
    WAForceUpdatesDisabled = 59
    WAWStateCreated = 60
    WAWStateCompressKeys = 61
    WAWStateInPaintEvent = 62
    WAWStateReparented = 63
    WAWStateConfigPending = 64
    WAWStatePolished = 66
    WAWStateDND = 67
    WAWStateOwnSizePolicy = 68
    WAWStateExplicitShowHide = 69
    WAShowModal = 70
    WAMouseNoMask = 71
    WAGroupLeader = 72
    WANoMousePropagation = 73
    WAHover = 74
    WAInputMethodTransparent = 75
    WAQuitOnClose = 76
    WAKeyboardFocusChange = 77
    WAAcceptDrops = 78
    WADropSiteRegistered = 79
    WAForceAcceptDrops = 79
    WAWindowPropagation = 80
    WANoX11EventCompression = 81
    WATintedBackground = 82
    WAX11OpenGLOverlay = 83
    WAAlwaysShowToolTips = 84
    WAMacOpaqueSizeGrip = 85
    WASetStyle = 86
    WASetLocale = 87
    WAMacShowFocusRect = 88
    WAMacNormalSize = 89
    WAMacSmallSize = 90
    WAMacMiniSize = 91
    WALayoutUsesWidgetRect = 92
    WAStyledBackground = 93
    WAMSWindowsUseDirect3D = 94
    WACanHostQMdiSubWindowTitleBar = 95
    WAMacAlwaysShowToolWindow = 96
    WAStyleSheet = 97
    WAShowWithoutActivating = 98
    WAX11BypassTransientForHint = 99
    WANativeWindow = 100
    WADontCreateNativeAncestors = 101
    WAMacVariableSize = 102
    WADontShowOnScreen = 103
    WAX11NetWmWindowTypeDesktop = 104
    WAX11NetWmWindowTypeDock = 105
    WAX11NetWmWindowTypeToolBar = 106
    WAX11NetWmWindowTypeMenu = 107
    WAX11NetWmWindowTypeUtility = 108
    WAX11NetWmWindowTypeSplash = 109
    WAX11NetWmWindowTypeDialog = 110
    WAX11NetWmWindowTypeDropDownMenu = 111
    WAX11NetWmWindowTypePopupMenu = 112
    WAX11NetWmWindowTypeToolTip = 113
    WAX11NetWmWindowTypeNotification = 114
    WAX11NetWmWindowTypeCombo = 115
    WAX11NetWmWindowTypeDND = 116
    WAMacFrameworkScaled = 117
    WASetWindowModality = 118
    WAWStateWindowOpacitySet = 119
    WATranslucentBackground = 120
    WAAcceptTouchEvents = 121
    WAWStateAcceptedTouchBeginEvent = 122
    WATouchPadAcceptSingleTouchEvents = 123
    WAX11DoNotAcceptFocus = 126
    WAMacNoShadow = 127
    WAAlwaysStackOnTop = 128
    WATabletTracking = 129
    WAAttributeCount = 130
  end
  enum PaletteColorRole : UInt32
    WindowText = 0
    Button = 1
    Light = 2
    Midlight = 3
    Dark = 4
    Mid = 5
    Text = 6
    BrightText = 7
    ButtonText = 8
    Base = 9
    Window = 10
    Shadow = 11
    Highlight = 12
    HighlightedText = 13
    Link = 14
    LinkVisited = 15
    AlternateBase = 16
    NoRole = 17
    ToolTipBase = 18
    ToolTipText = 19
    NColorRoles = 20
    Foreground = 0
    Background = 10
  end
  @[Flags]
  enum ImageConversionFlags : UInt32
    ColorModeMask = 3
    AutoColor = 0
    ColorOnly = 3
    MonoOnly = 2
    AlphaDitherMask = 12
    ThresholdAlphaDither = 0
    OrderedAlphaDither = 4
    DiffuseAlphaDither = 8
    NoAlpha = 12
    DitherMask = 48
    DiffuseDither = 0
    OrderedDither = 16
    ThresholdDither = 32
    DitherModeMask = 192
    AutoDither = 0
    PreferDither = 64
    AvoidDither = 128
    NoOpaqueDetection = 256
    NoFormatConversion = 512
  end
  enum GlobalColor : UInt32
    Color0 = 0
    Color1 = 1
    Black = 2
    White = 3
    DarkGray = 4
    Gray = 5
    LightGray = 6
    Red = 7
    Green = 8
    Blue = 9
    Cyan = 10
    Magenta = 11
    Yellow = 12
    DarkRed = 13
    DarkGreen = 14
    DarkBlue = 15
    DarkCyan = 16
    DarkMagenta = 17
    DarkYellow = 18
    Transparent = 19
  end
  enum MaskMode : UInt32
    MaskInColor = 0
    MaskOutColor = 1
  end
  enum AspectRatioMode : UInt32
    IgnoreAspectRatio = 0
    KeepAspectRatio = 1
    KeepAspectRatioByExpanding = 2
  end
  enum TransformationMode : UInt32
    FastTransformation = 0
    SmoothTransformation = 1
  end
  enum Corner : UInt32
    TopLeftCorner = 0
    TopRightCorner = 1
    BottomLeftCorner = 2
    BottomRightCorner = 3
  end
  enum TextElideMode : UInt32
    ElideLeft = 0
    ElideRight = 1
    ElideMiddle = 2
    ElideNone = 3
  end
  enum ToolButtonStyle : UInt32
    ToolButtonIconOnly = 0
    ToolButtonTextOnly = 1
    ToolButtonTextBesideIcon = 2
    ToolButtonTextUnderIcon = 3
    ToolButtonFollowStyle = 4
  end
  enum DockWidgetArea : UInt32
    LeftDockWidgetArea = 1
    RightDockWidgetArea = 2
    TopDockWidgetArea = 4
    BottomDockWidgetArea = 8
    DockWidgetAreaMask = 15
    AllDockWidgetAreas = 15
    NoDockWidgetArea = 0
  end
  @[Flags]
  enum DockWidgetAreas : UInt32
    LeftDockWidgetArea = 1
    RightDockWidgetArea = 2
    TopDockWidgetArea = 4
    BottomDockWidgetArea = 8
    DockWidgetAreaMask = 15
    AllDockWidgetAreas = 15
    NoDockWidgetArea = 0
  end
  enum ToolBarArea : UInt32
    LeftToolBarArea = 1
    RightToolBarArea = 2
    TopToolBarArea = 4
    BottomToolBarArea = 8
    ToolBarAreaMask = 15
    AllToolBarAreas = 15
    NoToolBarArea = 0
  end
  enum Orientation : UInt32
    Horizontal = 1
    Vertical = 2
  end
  @[Flags]
  enum Orientations : UInt32
    Horizontal = 1
    Vertical = 2
  end
  @[Flags]
  enum FindChildOptions : UInt32
    FindDirectChildrenOnly = 0
    FindChildrenRecursively = 1
  end
  enum PaintDeviceMetric : UInt32
    PdmWidth = 1
    PdmHeight = 2
    PdmWidthMM = 3
    PdmHeightMM = 4
    PdmNumColors = 5
    PdmDepth = 6
    PdmDpiX = 7
    PdmDpiY = 8
    PdmPhysicalDpiX = 9
    PdmPhysicalDpiY = 10
    PdmDevicePixelRatio = 11
    PdmDevicePixelRatioScaled = 12
  end
  @[Flags]
  enum TextOptionFlags : UInt32
    ShowTabsAndSpaces = 1
    ShowLineAndParagraphSeparators = 2
    AddSpaceForLineAndParagraphSeparators = 4
    SuppressColors = 8
    ShowDocumentTerminator = 16
    IncludeTrailingSpaces = 2147483648
  end
  enum TextDocumentMetaInformation : UInt32
    DocumentTitle = 0
    DocumentUrl = 1
  end
  enum TextDocumentStacks : UInt32
    UndoStack = 1
    RedoStack = 2
    UndoAndRedoStacks = 3
  end
  enum TextOptionWrapMode : UInt32
    NoWrap = 0
    WordWrap = 1
    ManualWrap = 2
    WrapAnywhere = 3
    WrapAtWordBoundaryOrAnywhere = 4
  end
  @[Flags]
  enum TextDocumentFindFlags : UInt32
    FindBackward = 1
    FindCaseSensitively = 2
    FindWholeWords = 4
  end
  enum TextCursorMoveOperation : UInt32
    NoMove = 0
    Start = 1
    Up = 2
    StartOfLine = 3
    StartOfBlock = 4
    StartOfWord = 5
    PreviousBlock = 6
    PreviousCharacter = 7
    PreviousWord = 8
    Left = 9
    WordLeft = 10
    End = 11
    Down = 12
    EndOfLine = 13
    EndOfWord = 14
    EndOfBlock = 15
    NextBlock = 16
    NextCharacter = 17
    NextWord = 18
    Right = 19
    WordRight = 20
    NextCell = 21
    PreviousCell = 22
    NextRow = 23
    PreviousRow = 24
  end
  enum TextCursorMoveMode : UInt32
    MoveAnchor = 0
    KeepAnchor = 1
  end
  enum TextCursorSelectionType : UInt32
    WordUnderCursor = 0
    LineUnderCursor = 1
    BlockUnderCursor = 2
    Document = 3
  end
  enum TextListFormatStyle : Int32
    ListDisc = -1
    ListCircle = -2
    ListSquare = -3
    ListDecimal = -4
    ListLowerAlpha = -5
    ListUpperAlpha = -6
    ListLowerRoman = -7
    ListUpperRoman = -8
    ListStyleUndefined = 0
  end
  enum TextFrameFormatPosition : UInt32
    InFlow = 0
    FloatLeft = 1
    FloatRight = 2
  end
  class Object 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QObject_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QObject_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QObject_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Object)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQObject.new(
      bg_QObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Object)
      unwrap = Binding.bg_QObject_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Object)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQObject.new(
      bg_QObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def event(event : QEvent*) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    def event_filter(watched : Object, event : QEvent*) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    def object_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_objectName_(self))
    end
    def object_name=(name : String) : Void
      Binding.bg_QObject_setObjectName_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def widget_type?() : Bool
      Binding.bg_QObject_isWidgetType_(self)
    end
    def window_type?() : Bool
      Binding.bg_QObject_isWindowType_(self)
    end
    def signals_blocked() : Bool
      Binding.bg_QObject_signalsBlocked_(self)
    end
    def block_signals(b : Bool) : Bool
      Binding.bg_QObject_blockSignals_bool(self, b)
    end
    def thread() : QThread*
      Binding.bg_QObject_thread_(self)
    end
    def move_to_thread(thread : QThread*) : Void
      Binding.bg_QObject_moveToThread_QThread_X(self, thread)
    end
    def start_timer(interval : Int32) : Int32
      Binding.bg_QObject_startTimer_int(self, interval)
    end
    def start_timer(interval : Int32, timer_type : TimerType) : Int32
      Binding.bg_QObject_startTimer_int_Qt__TimerType(self, interval, timer_type)
    end
    def kill_timer(id : Int32) : Void
      Binding.bg_QObject_killTimer_int(self, id)
    end
    def parent=(parent : Object) : Void
      Binding.bg_QObject_setParent_QObject_X(self, parent)
    end
    def install_event_filter(filter_obj : Object) : Void
      Binding.bg_QObject_installEventFilter_QObject_X(self, filter_obj)
    end
    def remove_event_filter(obj : Object) : Void
      Binding.bg_QObject_removeEventFilter_QObject_X(self, obj)
    end
    def self.connect(sender : Object, signal : UInt8*, receiver : Object, member : UInt8*) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender, signal, receiver, member))
    end
    def self.connect(sender : Object, signal : UInt8*, receiver : Object, member : UInt8*, unnamed_arg_4 : ConnectionType) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(sender, signal, receiver, member, unnamed_arg_4))
    end
    def self.connect(sender : Object, signal : QMetaMethod*, receiver : Object, method : QMetaMethod*) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender, signal, receiver, method))
    end
    def self.connect(sender : Object, signal : QMetaMethod*, receiver : Object, method : QMetaMethod*, type : ConnectionType) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(sender, signal, receiver, method, type))
    end
    def connect(sender : Object, signal : UInt8*, member : UInt8*) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_const_QObject_X_const_char_X_const_char_X(self, sender, signal, member))
    end
    def connect(sender : Object, signal : UInt8*, member : UInt8*, type : ConnectionType) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(self, sender, signal, member, type))
    end
    def self.disconnect(sender : Object, signal : UInt8*, receiver : Object, member : UInt8*) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender, signal, receiver, member)
    end
    def self.disconnect(sender : Object, signal : QMetaMethod*, receiver : Object, member : QMetaMethod*) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender, signal, receiver, member)
    end
    def disconnect() : Bool
      Binding.bg_QObject_disconnect_(self)
    end
    def disconnect(signal : UInt8*) : Bool
      Binding.bg_QObject_disconnect_const_char_X(self, signal)
    end
    def disconnect(signal : UInt8*, receiver : Object) : Bool
      Binding.bg_QObject_disconnect_const_char_X_const_QObject_X(self, signal, receiver)
    end
    def disconnect(signal : UInt8*, receiver : Object, member : UInt8*) : Bool
      Binding.bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(self, signal, receiver, member)
    end
    def disconnect(receiver : Object) : Bool
      Binding.bg_QObject_disconnect_const_QObject_X(self, receiver)
    end
    def disconnect(receiver : Object, member : UInt8*) : Bool
      Binding.bg_QObject_disconnect_const_QObject_X_const_char_X(self, receiver, member)
    end
    def self.disconnect(unnamed_arg_0 : SignalConnection) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(unnamed_arg_0)
    end
    def dump_object_tree() : Void
      Binding.bg_QObject_dumpObjectTree_(self)
    end
    def dump_object_info() : Void
      Binding.bg_QObject_dumpObjectInfo_(self)
    end
    def self.register_user_data() : UInt32
      Binding.bg_QObject_registerUserData_STATIC_()
    end
    def set_user_data(id : UInt32, data : QObjectUserData*) : Void
      Binding.bg_QObject_setUserData_uint_QObjectUserData_X(self, id, data)
    end
    def user_data(id : UInt32) : QObjectUserData*
      Binding.bg_QObject_userData_uint(self, id)
    end
    def destroyed() : Void
      Binding.bg_QObject_destroyed_(self)
    end
    def on_destroyed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_destroyed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def destroyed(unnamed_arg_0 : Object) : Void
      Binding.bg_QObject_destroyed_QObject_X(self, unnamed_arg_0)
    end
    def on_destroyed(&block : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_destroyed_CONNECT_CrystalProc_void__QObjectX_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : QObject*){ block.call(Object.new(unwrap: unnamed_arg_0)) })))
    end
    def parent() : Object
      Object.new(unwrap: Binding.bg_QObject_parent_(self))
    end
    def inherits(classname : UInt8*) : Bool
      Binding.bg_QObject_inherits_const_char_X(self, classname)
    end
    def delete_later() : Void
      Binding.bg_QObject_deleteLater_(self)
    end
    protected def sender() : Object
      Object.new(unwrap: Binding.bg_QObject_sender_(self))
    end
    protected def sender_signal_index() : Int32
      Binding.bg_QObject_senderSignalIndex_(self)
    end
    protected def receivers(signal : UInt8*) : Int32
      Binding.bg_QObject_receivers_const_char_X(self, signal)
    end
    protected def is_signal_connected(signal : QMetaMethod*) : Bool
      Binding.bg_QObject_isSignalConnected_const_QMetaMethod_R(self, signal)
    end
    protected def timer_event(event : QTimerEvent*) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    protected def child_event(event : QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    protected def custom_event(event : QEvent*) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    protected def connect_notify(signal : QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    protected def disconnect_notify(signal : QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    protected def initialize(dd : QObjectPrivate*)
      unwrap = Binding.bg_QObject_CONSTRUCT_QObjectPrivate_R(dd)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Object)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQObject.new(
      bg_QObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QObjectPrivate*, parent : Object)
      unwrap = Binding.bg_QObject_CONSTRUCT_QObjectPrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Object)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQObject.new(
      bg_QObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class SignalConnection 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QMetaObject__Connection_CONSTRUCT_()
    @unwrap = unwrap
    
    end
  end
  abstract class AbstractEventDispatcher < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractEventDispatcher_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractEventDispatcher_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QAbstractEventDispatcher_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractEventDispatcher)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast process_events has_pending_events? register_socket_notifier unregister_socket_notifier register_timer unregister_timer unregister_timers registered_timers remaining_time wake_up interrupt flush starting_up closing_down event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractEventDispatcher.new(
      bg_QAbstractEventDispatcher_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("process_events") %} ->(flags : EventLoop::ProcessEventsFlags){ self.process_events(EventLoop::ProcessEventsFlags.new(unwrap: flags)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_hasPendingEvents_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_pending_events?") %} ->(){ self.has_pending_events?() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_socket_notifier") %} ->(notifier : QSocketNotifier*){ self.register_socket_notifier(notifier) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_socket_notifier") %} ->(notifier : QSocketNotifier*){ self.unregister_socket_notifier(notifier) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_timer") %} ->(timer_id : Int32, interval : Int32, timer_type : TimerType, object : QObject*){ self.register_timer(timer_id, interval, TimerType.new(unwrap: timer_type), Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimer_int: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timer") %} ->(timer_id : Int32){ self.unregister_timer(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timers") %} ->(object : QObject*){ self.unregister_timers(Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("registered_timers") %} ->(object : QObject*){ BindgenHelper.wrap_container(QList_QAbstractEventDispatcher__TimerInfo, self.registered_timers(Object.new(unwrap: object))) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_remainingTime_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remaining_time") %} ->(timer_id : Int32){ self.remaining_time(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_wakeUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("wake_up") %} ->(){ self.wake_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_interrupt_: BindgenHelper.wrap_proc({% if forwarded.includes?("interrupt") %} ->(){ self.interrupt() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_flush_: BindgenHelper.wrap_proc({% if forwarded.includes?("flush") %} ->(){ self.flush() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_startingUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("starting_up") %} ->(){ self.starting_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_closingDown_: BindgenHelper.wrap_proc({% if forwarded.includes?("closing_down") %} ->(){ self.closing_down() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractEventDispatcher_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Object)
      unwrap = Binding.bg_QAbstractEventDispatcher_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractEventDispatcher)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast process_events has_pending_events? register_socket_notifier unregister_socket_notifier register_timer unregister_timer unregister_timers registered_timers remaining_time wake_up interrupt flush starting_up closing_down event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractEventDispatcher.new(
      bg_QAbstractEventDispatcher_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("process_events") %} ->(flags : EventLoop::ProcessEventsFlags){ self.process_events(EventLoop::ProcessEventsFlags.new(unwrap: flags)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_hasPendingEvents_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_pending_events?") %} ->(){ self.has_pending_events?() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_socket_notifier") %} ->(notifier : QSocketNotifier*){ self.register_socket_notifier(notifier) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_socket_notifier") %} ->(notifier : QSocketNotifier*){ self.unregister_socket_notifier(notifier) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_timer") %} ->(timer_id : Int32, interval : Int32, timer_type : TimerType, object : QObject*){ self.register_timer(timer_id, interval, TimerType.new(unwrap: timer_type), Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimer_int: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timer") %} ->(timer_id : Int32){ self.unregister_timer(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timers") %} ->(object : QObject*){ self.unregister_timers(Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("registered_timers") %} ->(object : QObject*){ BindgenHelper.wrap_container(QList_QAbstractEventDispatcher__TimerInfo, self.registered_timers(Object.new(unwrap: object))) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_remainingTime_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remaining_time") %} ->(timer_id : Int32){ self.remaining_time(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_wakeUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("wake_up") %} ->(){ self.wake_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_interrupt_: BindgenHelper.wrap_proc({% if forwarded.includes?("interrupt") %} ->(){ self.interrupt() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_flush_: BindgenHelper.wrap_proc({% if forwarded.includes?("flush") %} ->(){ self.flush() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_startingUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("starting_up") %} ->(){ self.starting_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_closingDown_: BindgenHelper.wrap_proc({% if forwarded.includes?("closing_down") %} ->(){ self.closing_down() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractEventDispatcher_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.instance() : AbstractEventDispatcher
      AbstractEventDispatcher.new(unwrap: Binding.bg_QAbstractEventDispatcher_instance_STATIC_())
    end
    def self.instance(thread : QThread*) : AbstractEventDispatcher
      AbstractEventDispatcher.new(unwrap: Binding.bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(thread))
    end
    abstract def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
    abstract def has_pending_events?() : Bool
    abstract def register_socket_notifier(notifier : QSocketNotifier*) : Void
    abstract def unregister_socket_notifier(notifier : QSocketNotifier*) : Void
    def register_timer(interval : Int32, timer_type : TimerType, object : Object) : Int32
      Binding.bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(self, interval, timer_type, object)
    end
    abstract def register_timer(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Object) : Void
    abstract def unregister_timer(timer_id : Int32) : Bool
    abstract def unregister_timers(object : Object) : Bool
    abstract def registered_timers(object : Object) : Enumerable(Binding::EventDispatcherTimerInfo)
    abstract def remaining_time(timer_id : Int32) : Int32
    abstract def wake_up() : Void
    abstract def interrupt() : Void
    abstract def flush() : Void
    def starting_up() : Void
      Binding.bg_QAbstractEventDispatcher_startingUp_(self)
    end
    def closing_down() : Void
      Binding.bg_QAbstractEventDispatcher_closingDown_(self)
    end
    def install_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def remove_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def filter_native_event(event_type : QByteArray*, message : Void*, result : Int32*) : Bool
      Binding.bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    def about_to_block() : Void
      Binding.bg_QAbstractEventDispatcher_aboutToBlock_(self)
    end
    def on_about_to_block(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_aboutToBlock_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def awake() : Void
      Binding.bg_QAbstractEventDispatcher_awake_(self)
    end
    def on_awake(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_awake_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def initialize(unnamed_arg_0 : QAbstractEventDispatcherPrivate*, parent : Object)
      unwrap = Binding.bg_QAbstractEventDispatcher_CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractEventDispatcher)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast process_events has_pending_events? register_socket_notifier unregister_socket_notifier register_timer unregister_timer unregister_timers registered_timers remaining_time wake_up interrupt flush starting_up closing_down event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractEventDispatcher.new(
      bg_QAbstractEventDispatcher_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("process_events") %} ->(flags : EventLoop::ProcessEventsFlags){ self.process_events(EventLoop::ProcessEventsFlags.new(unwrap: flags)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_hasPendingEvents_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_pending_events?") %} ->(){ self.has_pending_events?() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_socket_notifier") %} ->(notifier : QSocketNotifier*){ self.register_socket_notifier(notifier) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_socket_notifier") %} ->(notifier : QSocketNotifier*){ self.unregister_socket_notifier(notifier) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_timer") %} ->(timer_id : Int32, interval : Int32, timer_type : TimerType, object : QObject*){ self.register_timer(timer_id, interval, TimerType.new(unwrap: timer_type), Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimer_int: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timer") %} ->(timer_id : Int32){ self.unregister_timer(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timers") %} ->(object : QObject*){ self.unregister_timers(Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("registered_timers") %} ->(object : QObject*){ BindgenHelper.wrap_container(QList_QAbstractEventDispatcher__TimerInfo, self.registered_timers(Object.new(unwrap: object))) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_remainingTime_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remaining_time") %} ->(timer_id : Int32){ self.remaining_time(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_wakeUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("wake_up") %} ->(){ self.wake_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_interrupt_: BindgenHelper.wrap_proc({% if forwarded.includes?("interrupt") %} ->(){ self.interrupt() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_flush_: BindgenHelper.wrap_proc({% if forwarded.includes?("flush") %} ->(){ self.flush() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_startingUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("starting_up") %} ->(){ self.starting_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_closingDown_: BindgenHelper.wrap_proc({% if forwarded.includes?("closing_down") %} ->(){ self.closing_down() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractEventDispatcher_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class AbstractEventDispatcherImpl < AbstractEventDispatcher
    macro inherited
      {{ raise "You can't sub-class AbstractEventDispatcherImpl, inherit from AbstractEventDispatcher instead" }}
    end
    def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
      Binding.bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(self, flags)
    end
    def has_pending_events?() : Bool
      Binding.bg_QAbstractEventDispatcher_hasPendingEvents_(self)
    end
    def register_socket_notifier(notifier : QSocketNotifier*) : Void
      Binding.bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(self, notifier)
    end
    def unregister_socket_notifier(notifier : QSocketNotifier*) : Void
      Binding.bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(self, notifier)
    end
    def register_timer(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Object) : Void
      Binding.bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(self, timer_id, interval, timer_type, object)
    end
    def unregister_timer(timer_id : Int32) : Bool
      Binding.bg_QAbstractEventDispatcher_unregisterTimer_int(self, timer_id)
    end
    def unregister_timers(object : Object) : Bool
      Binding.bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(self, object)
    end
    def registered_timers(object : Object) : Enumerable(Binding::EventDispatcherTimerInfo)
      QList_QAbstractEventDispatcher__TimerInfo.new(unwrap: Binding.bg_QAbstractEventDispatcher_registeredTimers_QObject_X(self, object))
    end
    def remaining_time(timer_id : Int32) : Int32
      Binding.bg_QAbstractEventDispatcher_remainingTime_int(self, timer_id)
    end
    def wake_up() : Void
      Binding.bg_QAbstractEventDispatcher_wakeUp_(self)
    end
    def interrupt() : Void
      Binding.bg_QAbstractEventDispatcher_interrupt_(self)
    end
    def flush() : Void
      Binding.bg_QAbstractEventDispatcher_flush_(self)
    end
  end
  class Widget < Object
    @[Flags]
    enum RenderFlags : UInt32
      DrawWindowBackground = 1
      DrawChildren = 2
      IgnoreMask = 4
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QWidget_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QWidget_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QWidget_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QWidget_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    def create_win_id() : Void
      Binding.bg_QWidget_createWinId_(self)
    end
    def style() : QStyle*
      Binding.bg_QWidget_style_(self)
    end
    def style=(unnamed_arg_0 : QStyle*) : Void
      Binding.bg_QWidget_setStyle_QStyle_X(self, unnamed_arg_0)
    end
    def top_level?() : Bool
      Binding.bg_QWidget_isTopLevel_(self)
    end
    def window?() : Bool
      Binding.bg_QWidget_isWindow_(self)
    end
    def modal?() : Bool
      Binding.bg_QWidget_isModal_(self)
    end
    def window_modality() : WindowModality
      WindowModality.new(unwrap: Binding.bg_QWidget_windowModality_(self))
    end
    def window_modality=(window_modality : WindowModality) : Void
      Binding.bg_QWidget_setWindowModality_Qt__WindowModality(self, window_modality)
    end
    def enabled?() : Bool
      Binding.bg_QWidget_isEnabled_(self)
    end
    def is_enabled_to(unnamed_arg_0 : Widget) : Bool
      Binding.bg_QWidget_isEnabledTo_const_QWidget_X(self, unnamed_arg_0)
    end
    def enabled_to_tlw?() : Bool
      Binding.bg_QWidget_isEnabledToTLW_(self)
    end
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setEnabled_bool(self, unnamed_arg_0)
    end
    def disabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setDisabled_bool(self, unnamed_arg_0)
    end
    def window_modified=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setWindowModified_bool(self, unnamed_arg_0)
    end
    def frame_geometry() : QRect*
      Binding.bg_QWidget_frameGeometry_(self)
    end
    def geometry() : QRect*
      Binding.bg_QWidget_geometry_(self)
    end
    def normal_geometry() : QRect*
      Binding.bg_QWidget_normalGeometry_(self)
    end
    def x() : Int32
      Binding.bg_QWidget_x_(self)
    end
    def y() : Int32
      Binding.bg_QWidget_y_(self)
    end
    def pos() : Binding::Point
      Binding.bg_QWidget_pos_(self)
    end
    def frame_size() : QSize*
      Binding.bg_QWidget_frameSize_(self)
    end
    def size() : QSize*
      Binding.bg_QWidget_size_(self)
    end
    def width() : Int32
      Binding.bg_QWidget_width_(self)
    end
    def height() : Int32
      Binding.bg_QWidget_height_(self)
    end
    def rect() : QRect*
      Binding.bg_QWidget_rect_(self)
    end
    def children_rect() : QRect*
      Binding.bg_QWidget_childrenRect_(self)
    end
    def children_region() : QRegion*
      Binding.bg_QWidget_childrenRegion_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QWidget_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QWidget_maximumSize_(self)
    end
    def minimum_width() : Int32
      Binding.bg_QWidget_minimumWidth_(self)
    end
    def minimum_height() : Int32
      Binding.bg_QWidget_minimumHeight_(self)
    end
    def maximum_width() : Int32
      Binding.bg_QWidget_maximumWidth_(self)
    end
    def maximum_height() : Int32
      Binding.bg_QWidget_maximumHeight_(self)
    end
    def minimum_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setMinimumSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_minimum_size(minw : Int32, minh : Int32) : Void
      Binding.bg_QWidget_setMinimumSize_int_int(self, minw, minh)
    end
    def maximum_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setMaximumSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_maximum_size(maxw : Int32, maxh : Int32) : Void
      Binding.bg_QWidget_setMaximumSize_int_int(self, maxw, maxh)
    end
    def minimum_width=(minw : Int32) : Void
      Binding.bg_QWidget_setMinimumWidth_int(self, minw)
    end
    def minimum_height=(minh : Int32) : Void
      Binding.bg_QWidget_setMinimumHeight_int(self, minh)
    end
    def maximum_width=(maxw : Int32) : Void
      Binding.bg_QWidget_setMaximumWidth_int(self, maxw)
    end
    def maximum_height=(maxh : Int32) : Void
      Binding.bg_QWidget_setMaximumHeight_int(self, maxh)
    end
    def size_increment() : QSize*
      Binding.bg_QWidget_sizeIncrement_(self)
    end
    def size_increment=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setSizeIncrement_const_QSize_R(self, unnamed_arg_0)
    end
    def set_size_increment(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setSizeIncrement_int_int(self, w, h)
    end
    def base_size() : QSize*
      Binding.bg_QWidget_baseSize_(self)
    end
    def base_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setBaseSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_base_size(basew : Int32, baseh : Int32) : Void
      Binding.bg_QWidget_setBaseSize_int_int(self, basew, baseh)
    end
    def fixed_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setFixedSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_fixed_size(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setFixedSize_int_int(self, w, h)
    end
    def fixed_width=(w : Int32) : Void
      Binding.bg_QWidget_setFixedWidth_int(self, w)
    end
    def fixed_height=(h : Int32) : Void
      Binding.bg_QWidget_setFixedHeight_int(self, h)
    end
    def map_to_global(unnamed_arg_0 : Binding::Point) : Binding::Point
      Binding.bg_QWidget_mapToGlobal_const_QPoint_R(self, unnamed_arg_0)
    end
    def map_from_global(unnamed_arg_0 : Binding::Point) : Binding::Point
      Binding.bg_QWidget_mapFromGlobal_const_QPoint_R(self, unnamed_arg_0)
    end
    def map_to_parent(unnamed_arg_0 : Binding::Point) : Binding::Point
      Binding.bg_QWidget_mapToParent_const_QPoint_R(self, unnamed_arg_0)
    end
    def map_from_parent(unnamed_arg_0 : Binding::Point) : Binding::Point
      Binding.bg_QWidget_mapFromParent_const_QPoint_R(self, unnamed_arg_0)
    end
    def map_to(unnamed_arg_0 : Widget, unnamed_arg_1 : Binding::Point) : Binding::Point
      Binding.bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    def map_from(unnamed_arg_0 : Widget, unnamed_arg_1 : Binding::Point) : Binding::Point
      Binding.bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    def window() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_window_(self))
    end
    def native_parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_nativeParentWidget_(self))
    end
    def top_level_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_topLevelWidget_(self))
    end
    def palette() : QPalette*
      Binding.bg_QWidget_palette_(self)
    end
    def palette=(unnamed_arg_0 : QPalette*) : Void
      Binding.bg_QWidget_setPalette_const_QPalette_R(self, unnamed_arg_0)
    end
    def background_role=(unnamed_arg_0 : PaletteColorRole) : Void
      Binding.bg_QWidget_setBackgroundRole_QPalette__ColorRole(self, unnamed_arg_0)
    end
    def background_role() : PaletteColorRole
      PaletteColorRole.new(unwrap: Binding.bg_QWidget_backgroundRole_(self))
    end
    def foreground_role=(unnamed_arg_0 : PaletteColorRole) : Void
      Binding.bg_QWidget_setForegroundRole_QPalette__ColorRole(self, unnamed_arg_0)
    end
    def foreground_role() : PaletteColorRole
      PaletteColorRole.new(unwrap: Binding.bg_QWidget_foregroundRole_(self))
    end
    def font() : QFont*
      Binding.bg_QWidget_font_(self)
    end
    def font=(unnamed_arg_0 : QFont*) : Void
      Binding.bg_QWidget_setFont_const_QFont_R(self, unnamed_arg_0)
    end
    def font_metrics() : QFontMetrics*
      Binding.bg_QWidget_fontMetrics_(self)
    end
    def font_info() : QFontInfo*
      Binding.bg_QWidget_fontInfo_(self)
    end
    def cursor() : QCursor*
      Binding.bg_QWidget_cursor_(self)
    end
    def cursor=(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QWidget_setCursor_const_QCursor_R(self, unnamed_arg_0)
    end
    def unset_cursor() : Void
      Binding.bg_QWidget_unsetCursor_(self)
    end
    def mouse_tracking=(enable : Bool) : Void
      Binding.bg_QWidget_setMouseTracking_bool(self, enable)
    end
    def has_mouse_tracking?() : Bool
      Binding.bg_QWidget_hasMouseTracking_(self)
    end
    def under_mouse() : Bool
      Binding.bg_QWidget_underMouse_(self)
    end
    def tablet_tracking=(enable : Bool) : Void
      Binding.bg_QWidget_setTabletTracking_bool(self, enable)
    end
    def has_tablet_tracking?() : Bool
      Binding.bg_QWidget_hasTabletTracking_(self)
    end
    def mask=(unnamed_arg_0 : QBitmap*) : Void
      Binding.bg_QWidget_setMask_const_QBitmap_R(self, unnamed_arg_0)
    end
    def mask=(unnamed_arg_0 : QRegion*) : Void
      Binding.bg_QWidget_setMask_const_QRegion_R(self, unnamed_arg_0)
    end
    def mask() : QRegion*
      Binding.bg_QWidget_mask_(self)
    end
    def clear_mask() : Void
      Binding.bg_QWidget_clearMask_(self)
    end
    def render(target : QPaintDevice*) : Void
      Binding.bg_QWidget_render_QPaintDevice_X(self, target)
    end
    def render(target : QPaintDevice*, target_offset : Binding::Point) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R(self, target, target_offset)
    end
    def render(target : QPaintDevice*, target_offset : Binding::Point, source_region : QRegion*) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(self, target, target_offset, source_region)
    end
    def render(target : QPaintDevice*, target_offset : Binding::Point, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(self, target, target_offset, source_region, render_flags)
    end
    def render(painter : QPainter*) : Void
      Binding.bg_QWidget_render_QPainter_X(self, painter)
    end
    def render(painter : QPainter*, target_offset : Binding::Point) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R(self, painter, target_offset)
    end
    def render(painter : QPainter*, target_offset : Binding::Point, source_region : QRegion*) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(self, painter, target_offset, source_region)
    end
    def render(painter : QPainter*, target_offset : Binding::Point, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(self, painter, target_offset, source_region, render_flags)
    end
    def grab() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QWidget_grab_(self))
    end
    def grab(rectangle : QRect*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QWidget_grab_const_QRect_R(self, rectangle))
    end
    def graphics_effect() : QGraphicsEffect*
      Binding.bg_QWidget_graphicsEffect_(self)
    end
    def graphics_effect=(effect : QGraphicsEffect*) : Void
      Binding.bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(self, effect)
    end
    def grab_gesture(type : GestureType) : Void
      Binding.bg_QWidget_grabGesture_Qt__GestureType(self, type)
    end
    def grab_gesture(type : GestureType, flags : GestureFlags) : Void
      Binding.bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(self, type, flags)
    end
    def ungrab_gesture(type : GestureType) : Void
      Binding.bg_QWidget_ungrabGesture_Qt__GestureType(self, type)
    end
    def window_title=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowTitle_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def style_sheet=(style_sheet : String) : Void
      Binding.bg_QWidget_setStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(style_sheet))
    end
    def style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_styleSheet_(self))
    end
    def window_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowTitle_(self))
    end
    def window_icon=(icon : QIcon*) : Void
      Binding.bg_QWidget_setWindowIcon_const_QIcon_R(self, icon)
    end
    def window_icon() : QIcon*
      Binding.bg_QWidget_windowIcon_(self)
    end
    def window_icon_text=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowIconText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def window_icon_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowIconText_(self))
    end
    def window_role=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowRole_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def window_role() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowRole_(self))
    end
    def window_file_path=(file_path : String) : Void
      Binding.bg_QWidget_setWindowFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_path))
    end
    def window_file_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowFilePath_(self))
    end
    def window_modified?() : Bool
      Binding.bg_QWidget_isWindowModified_(self)
    end
    def tool_tip=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_toolTip_(self))
    end
    def tool_tip_duration=(msec : Int32) : Void
      Binding.bg_QWidget_setToolTipDuration_int(self, msec)
    end
    def tool_tip_duration() : Int32
      Binding.bg_QWidget_toolTipDuration_(self)
    end
    def status_tip=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setStatusTip_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def status_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_statusTip_(self))
    end
    def whats_this=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWhatsThis_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def whats_this() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_whatsThis_(self))
    end
    def accessible_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_accessibleName_(self))
    end
    def accessible_name=(name : String) : Void
      Binding.bg_QWidget_setAccessibleName_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def accessible_description() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_accessibleDescription_(self))
    end
    def accessible_description=(description : String) : Void
      Binding.bg_QWidget_setAccessibleDescription_const_QString_R(self, Qt::Converter::QString.wrap(description))
    end
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QWidget_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    def layout_direction() : LayoutDirection
      LayoutDirection.new(unwrap: Binding.bg_QWidget_layoutDirection_(self))
    end
    def unset_layout_direction() : Void
      Binding.bg_QWidget_unsetLayoutDirection_(self)
    end
    def locale=(locale : QLocale*) : Void
      Binding.bg_QWidget_setLocale_const_QLocale_R(self, locale)
    end
    def locale() : QLocale*
      Binding.bg_QWidget_locale_(self)
    end
    def unset_locale() : Void
      Binding.bg_QWidget_unsetLocale_(self)
    end
    def right_to_left?() : Bool
      Binding.bg_QWidget_isRightToLeft_(self)
    end
    def left_to_right?() : Bool
      Binding.bg_QWidget_isLeftToRight_(self)
    end
    def set_focus() : Void
      Binding.bg_QWidget_setFocus_(self)
    end
    def active_window?() : Bool
      Binding.bg_QWidget_isActiveWindow_(self)
    end
    def activate_window() : Void
      Binding.bg_QWidget_activateWindow_(self)
    end
    def clear_focus() : Void
      Binding.bg_QWidget_clearFocus_(self)
    end
    def focus=(reason : FocusReason) : Void
      Binding.bg_QWidget_setFocus_Qt__FocusReason(self, reason)
    end
    def focus_policy() : FocusPolicy
      FocusPolicy.new(unwrap: Binding.bg_QWidget_focusPolicy_(self))
    end
    def focus_policy=(policy : FocusPolicy) : Void
      Binding.bg_QWidget_setFocusPolicy_Qt__FocusPolicy(self, policy)
    end
    def has_focus?() : Bool
      Binding.bg_QWidget_hasFocus_(self)
    end
    def self.set_tab_order(unnamed_arg_0 : Widget, unnamed_arg_1 : Widget) : Void
      Binding.bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(unnamed_arg_0, unnamed_arg_1)
    end
    def focus_proxy=(unnamed_arg_0 : Widget) : Void
      Binding.bg_QWidget_setFocusProxy_QWidget_X(self, unnamed_arg_0)
    end
    def focus_proxy() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_focusProxy_(self))
    end
    def context_menu_policy() : ContextMenuPolicy
      ContextMenuPolicy.new(unwrap: Binding.bg_QWidget_contextMenuPolicy_(self))
    end
    def context_menu_policy=(policy : ContextMenuPolicy) : Void
      Binding.bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(self, policy)
    end
    def grab_mouse() : Void
      Binding.bg_QWidget_grabMouse_(self)
    end
    def grab_mouse(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QWidget_grabMouse_const_QCursor_R(self, unnamed_arg_0)
    end
    def release_mouse() : Void
      Binding.bg_QWidget_releaseMouse_(self)
    end
    def grab_keyboard() : Void
      Binding.bg_QWidget_grabKeyboard_(self)
    end
    def release_keyboard() : Void
      Binding.bg_QWidget_releaseKeyboard_(self)
    end
    def grab_shortcut(key : KeySequence) : Int32
      Binding.bg_QWidget_grabShortcut_const_QKeySequence_R(self, key)
    end
    def grab_shortcut(key : KeySequence, context : ShortcutContext) : Int32
      Binding.bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(self, key, context)
    end
    def release_shortcut(id : Int32) : Void
      Binding.bg_QWidget_releaseShortcut_int(self, id)
    end
    def shortcut_enabled=(id : Int32) : Void
      Binding.bg_QWidget_setShortcutEnabled_int(self, id)
    end
    def set_shortcut_enabled(id : Int32, enable : Bool) : Void
      Binding.bg_QWidget_setShortcutEnabled_int_bool(self, id, enable)
    end
    def shortcut_auto_repeat=(id : Int32) : Void
      Binding.bg_QWidget_setShortcutAutoRepeat_int(self, id)
    end
    def set_shortcut_auto_repeat(id : Int32, enable : Bool) : Void
      Binding.bg_QWidget_setShortcutAutoRepeat_int_bool(self, id, enable)
    end
    def self.mouse_grabber() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_mouseGrabber_STATIC_())
    end
    def self.keyboard_grabber() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_keyboardGrabber_STATIC_())
    end
    def updates_enabled() : Bool
      Binding.bg_QWidget_updatesEnabled_(self)
    end
    def updates_enabled=(enable : Bool) : Void
      Binding.bg_QWidget_setUpdatesEnabled_bool(self, enable)
    end
    def graphics_proxy_widget() : QGraphicsProxyWidget*
      Binding.bg_QWidget_graphicsProxyWidget_(self)
    end
    def update() : Void
      Binding.bg_QWidget_update_(self)
    end
    def repaint() : Void
      Binding.bg_QWidget_repaint_(self)
    end
    def update(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_update_int_int_int_int(self, x, y, w, h)
    end
    def update(unnamed_arg_0 : QRect*) : Void
      Binding.bg_QWidget_update_const_QRect_R(self, unnamed_arg_0)
    end
    def update(unnamed_arg_0 : QRegion*) : Void
      Binding.bg_QWidget_update_const_QRegion_R(self, unnamed_arg_0)
    end
    def repaint(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_repaint_int_int_int_int(self, x, y, w, h)
    end
    def repaint(unnamed_arg_0 : QRect*) : Void
      Binding.bg_QWidget_repaint_const_QRect_R(self, unnamed_arg_0)
    end
    def repaint(unnamed_arg_0 : QRegion*) : Void
      Binding.bg_QWidget_repaint_const_QRegion_R(self, unnamed_arg_0)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    def hidden=(hidden : Bool) : Void
      Binding.bg_QWidget_setHidden_bool(self, hidden)
    end
    def show() : Void
      Binding.bg_QWidget_show_(self)
    end
    def hide() : Void
      Binding.bg_QWidget_hide_(self)
    end
    def show_minimized() : Void
      Binding.bg_QWidget_showMinimized_(self)
    end
    def show_maximized() : Void
      Binding.bg_QWidget_showMaximized_(self)
    end
    def show_full_screen() : Void
      Binding.bg_QWidget_showFullScreen_(self)
    end
    def show_normal() : Void
      Binding.bg_QWidget_showNormal_(self)
    end
    def close() : Bool
      Binding.bg_QWidget_close_(self)
    end
    def raise() : Void
      Binding.bg_QWidget_raise_(self)
    end
    def lower() : Void
      Binding.bg_QWidget_lower_(self)
    end
    def stack_under(unnamed_arg_0 : Widget) : Void
      Binding.bg_QWidget_stackUnder_QWidget_X(self, unnamed_arg_0)
    end
    def move(x : Int32, y : Int32) : Void
      Binding.bg_QWidget_move_int_int(self, x, y)
    end
    def move(unnamed_arg_0 : Binding::Point) : Void
      Binding.bg_QWidget_move_const_QPoint_R(self, unnamed_arg_0)
    end
    def resize(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_resize_int_int(self, w, h)
    end
    def resize(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_resize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_geometry(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setGeometry_int_int_int_int(self, x, y, w, h)
    end
    def geometry=(unnamed_arg_0 : QRect*) : Void
      Binding.bg_QWidget_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    def save_geometry() : QByteArray*
      Binding.bg_QWidget_saveGeometry_(self)
    end
    def restore_geometry(geometry : QByteArray*) : Bool
      Binding.bg_QWidget_restoreGeometry_const_QByteArray_R(self, geometry)
    end
    def adjust_size() : Void
      Binding.bg_QWidget_adjustSize_(self)
    end
    def visible?() : Bool
      Binding.bg_QWidget_isVisible_(self)
    end
    def is_visible_to(unnamed_arg_0 : Widget) : Bool
      Binding.bg_QWidget_isVisibleTo_const_QWidget_X(self, unnamed_arg_0)
    end
    def hidden?() : Bool
      Binding.bg_QWidget_isHidden_(self)
    end
    def minimized?() : Bool
      Binding.bg_QWidget_isMinimized_(self)
    end
    def maximized?() : Bool
      Binding.bg_QWidget_isMaximized_(self)
    end
    def full_screen?() : Bool
      Binding.bg_QWidget_isFullScreen_(self)
    end
    def window_state() : WindowStates
      WindowStates.new(unwrap: Binding.bg_QWidget_windowState_(self))
    end
    def window_state=(state : WindowStates) : Void
      Binding.bg_QWidget_setWindowState_Qt__WindowStates(self, state)
    end
    def override_window_state(state : WindowStates) : Void
      Binding.bg_QWidget_overrideWindowState_Qt__WindowStates(self, state)
    end
    def size_hint() : QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    def visible_region() : QRegion*
      Binding.bg_QWidget_visibleRegion_(self)
    end
    def set_contents_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QWidget_setContentsMargins_int_int_int_int(self, left, top, right, bottom)
    end
    def contents_margins=(margins : QMargins*) : Void
      Binding.bg_QWidget_setContentsMargins_const_QMargins_R(self, margins)
    end
    def get_contents_margins(left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
      Binding.bg_QWidget_getContentsMargins_int_X_int_X_int_X_int_X(self, left, top, right, bottom)
    end
    def contents_margins() : QMargins*
      Binding.bg_QWidget_contentsMargins_(self)
    end
    def contents_rect() : QRect*
      Binding.bg_QWidget_contentsRect_(self)
    end
    def layout() : Layout
      Layout.new(unwrap: Binding.bg_QWidget_layout_(self))
    end
    def layout=(unnamed_arg_0 : Layout) : Void
      Binding.bg_QWidget_setLayout_QLayout_X(self, unnamed_arg_0)
    end
    def update_geometry() : Void
      Binding.bg_QWidget_updateGeometry_(self)
    end
    def parent=(parent : Widget) : Void
      Binding.bg_QWidget_setParent_QWidget_X(self, parent)
    end
    def set_parent(parent : Widget, f : WindowFlags) : Void
      Binding.bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(self, parent, f)
    end
    def scroll(dx : Int32, dy : Int32) : Void
      Binding.bg_QWidget_scroll_int_int(self, dx, dy)
    end
    def scroll(dx : Int32, dy : Int32, unnamed_arg_2 : QRect*) : Void
      Binding.bg_QWidget_scroll_int_int_const_QRect_R(self, dx, dy, unnamed_arg_2)
    end
    def focus_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_focusWidget_(self))
    end
    def next_in_focus_chain() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_nextInFocusChain_(self))
    end
    def previous_in_focus_chain() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_previousInFocusChain_(self))
    end
    def accept_drops() : Bool
      Binding.bg_QWidget_acceptDrops_(self)
    end
    def accept_drops=(on : Bool) : Void
      Binding.bg_QWidget_setAcceptDrops_bool(self, on)
    end
    def add_action(action : Action) : Void
      Binding.bg_QWidget_addAction_QAction_X(self, action)
    end
    def insert_action(before : Action, action : Action) : Void
      Binding.bg_QWidget_insertAction_QAction_X_QAction_X(self, before, action)
    end
    def remove_action(action : Action) : Void
      Binding.bg_QWidget_removeAction_QAction_X(self, action)
    end
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_parentWidget_(self))
    end
    def window_flags=(type : WindowFlags) : Void
      Binding.bg_QWidget_setWindowFlags_Qt__WindowFlags(self, type)
    end
    def window_flags() : WindowFlags
      WindowFlags.new(unwrap: Binding.bg_QWidget_windowFlags_(self))
    end
    def window_flag=(unnamed_arg_0 : WindowType) : Void
      Binding.bg_QWidget_setWindowFlag_Qt__WindowType(self, unnamed_arg_0)
    end
    def set_window_flag(unnamed_arg_0 : WindowType, on : Bool) : Void
      Binding.bg_QWidget_setWindowFlag_Qt__WindowType_bool(self, unnamed_arg_0, on)
    end
    def override_window_flags(type : WindowFlags) : Void
      Binding.bg_QWidget_overrideWindowFlags_Qt__WindowFlags(self, type)
    end
    def window_type() : WindowType
      WindowType.new(unwrap: Binding.bg_QWidget_windowType_(self))
    end
    def child_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_childAt_int_int(self, x, y))
    end
    def child_at(p : Binding::Point) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_childAt_const_QPoint_R(self, p))
    end
    def attribute=(unnamed_arg_0 : WidgetAttribute) : Void
      Binding.bg_QWidget_setAttribute_Qt__WidgetAttribute(self, unnamed_arg_0)
    end
    def set_attribute(unnamed_arg_0 : WidgetAttribute, on : Bool) : Void
      Binding.bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(self, unnamed_arg_0, on)
    end
    def test_attribute(unnamed_arg_0 : WidgetAttribute) : Bool
      Binding.bg_QWidget_testAttribute_Qt__WidgetAttribute(self, unnamed_arg_0)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    def ensure_polished() : Void
      Binding.bg_QWidget_ensurePolished_(self)
    end
    def is_ancestor_of(child : Widget) : Bool
      Binding.bg_QWidget_isAncestorOf_const_QWidget_X(self, child)
    end
    def auto_fill_background() : Bool
      Binding.bg_QWidget_autoFillBackground_(self)
    end
    def auto_fill_background=(enabled : Bool) : Void
      Binding.bg_QWidget_setAutoFillBackground_bool(self, enabled)
    end
    def backing_store() : QBackingStore*
      Binding.bg_QWidget_backingStore_(self)
    end
    def window_handle() : QWindow*
      Binding.bg_QWidget_windowHandle_(self)
    end
    def self.create_window_container(window : QWindow*) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_createWindowContainer_STATIC_QWindow_X(window))
    end
    def self.create_window_container(window : QWindow*, parent : Widget) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(window, parent))
    end
    def self.create_window_container(window : QWindow*, parent : Widget, flags : WindowFlags) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(window, parent, flags))
    end
    def window_title_changed(title : String) : Void
      Binding.bg_QWidget_windowTitleChanged_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def on_window_title_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_windowTitleChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(title : CrystalString){ block.call(Qt::Converter::QString.unwrap(title)) })))
    end
    def window_icon_changed(icon : QIcon*) : Void
      Binding.bg_QWidget_windowIconChanged_const_QIcon_R(self, icon)
    end
    def on_window_icon_changed(&block : Proc(QIcon*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_windowIconChanged_CONNECT_CrystalProc_void__const_QIconR_(self, BindgenHelper.wrap_proc(->(icon : QIcon*){ block.call(icon) })))
    end
    def window_icon_text_changed(icon_text : String) : Void
      Binding.bg_QWidget_windowIconTextChanged_const_QString_R(self, Qt::Converter::QString.wrap(icon_text))
    end
    def on_window_icon_text_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_windowIconTextChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(icon_text : CrystalString){ block.call(Qt::Converter::QString.unwrap(icon_text)) })))
    end
    def custom_context_menu_requested(pos : Binding::Point) : Void
      Binding.bg_QWidget_customContextMenuRequested_const_QPoint_R(self, pos)
    end
    def on_custom_context_menu_requested(&block : Proc(Binding::Point, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_customContextMenuRequested_CONNECT_CrystalProc_void__const_QPointR_(self, BindgenHelper.wrap_proc(->(pos : QPoint*){ block.call(pos) })))
    end
    protected def event(event : QEvent*) : Bool
      Binding.bg_QWidget_event_QEvent_X(self, event)
    end
    protected def mouse_press_event(event : QMouseEvent*) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : QMouseEvent*) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_double_click_event(event : QMouseEvent*) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : QMouseEvent*) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    protected def wheel_event(event : QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    protected def key_press_event(event : QKeyEvent*) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    protected def key_release_event(event : QKeyEvent*) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    protected def focus_in_event(event : QFocusEvent*) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_out_event(event : QFocusEvent*) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def enter_event(event : QEvent*) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    protected def leave_event(event : QEvent*) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    protected def paint_event(event : QPaintEvent*) : Void
      Binding.bg_QWidget_paintEvent_QPaintEvent_X(self, event)
    end
    protected def move_event(event : QMoveEvent*) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    protected def resize_event(event : QResizeEvent*) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    protected def close_event(event : QCloseEvent*) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    protected def context_menu_event(event : QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    protected def tablet_event(event : QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    protected def action_event(event : QActionEvent*) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    protected def drag_enter_event(event : QDragEnterEvent*) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    protected def drag_move_event(event : QDragMoveEvent*) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    protected def drag_leave_event(event : QDragLeaveEvent*) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    protected def drop_event(event : QDropEvent*) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    protected def show_event(event : QShowEvent*) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    protected def hide_event(event : QHideEvent*) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    protected def native_event(event_type : QByteArray*, message : Void*, result : Int32*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    protected def change_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def metric(unnamed_arg_0 : PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    protected def init_painter(painter : QPainter*) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    protected def redirected(offset : Binding::Point) : QPaintDevice*
      Binding.bg_QWidget_redirected_QPoint_X(self, offset)
    end
    protected def shared_painter() : QPainter*
      Binding.bg_QWidget_sharedPainter_(self)
    end
    protected def input_method_event(unnamed_arg_0 : QInputMethodEvent*) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    def input_method_hints() : InputMethodHints
      InputMethodHints.new(unwrap: Binding.bg_QWidget_inputMethodHints_(self))
    end
    def input_method_hints=(hints : InputMethodHints) : Void
      Binding.bg_QWidget_setInputMethodHints_Qt__InputMethodHints(self, hints)
    end
    protected def update_micro_focus() : Void
      Binding.bg_QWidget_updateMicroFocus_(self)
    end
    protected def create() : Void
      Binding.bg_QWidget_create_(self)
    end
    protected def destroy() : Void
      Binding.bg_QWidget_destroy_(self)
    end
    protected def destroy(destroy_window : Bool) : Void
      Binding.bg_QWidget_destroy_bool(self, destroy_window)
    end
    protected def destroy(destroy_window : Bool, destroy_sub_windows : Bool) : Void
      Binding.bg_QWidget_destroy_bool_bool(self, destroy_window, destroy_sub_windows)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    protected def focus_next_child() : Bool
      Binding.bg_QWidget_focusNextChild_(self)
    end
    protected def focus_previous_child() : Bool
      Binding.bg_QWidget_focusPreviousChild_(self)
    end
    protected def initialize(d : QWidgetPrivate*, parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QWidget_CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(d, parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  abstract class AbstractButton < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractButton_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QAbstractButton_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QAbstractButton_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def text=(text : String) : Void
      Binding.bg_QAbstractButton_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_text_(self))
    end
    def icon=(icon : QIcon*) : Void
      Binding.bg_QAbstractButton_setIcon_const_QIcon_R(self, icon)
    end
    def icon() : QIcon*
      Binding.bg_QAbstractButton_icon_(self)
    end
    def icon_size() : QSize*
      Binding.bg_QAbstractButton_iconSize_(self)
    end
    def shortcut=(key : KeySequence) : Void
      Binding.bg_QAbstractButton_setShortcut_const_QKeySequence_R(self, key)
    end
    def shortcut() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QAbstractButton_shortcut_(self))
    end
    def checkable=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setCheckable_bool(self, unnamed_arg_0)
    end
    def checkable?() : Bool
      Binding.bg_QAbstractButton_isCheckable_(self)
    end
    def checked?() : Bool
      Binding.bg_QAbstractButton_isChecked_(self)
    end
    def down=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setDown_bool(self, unnamed_arg_0)
    end
    def down?() : Bool
      Binding.bg_QAbstractButton_isDown_(self)
    end
    def auto_repeat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setAutoRepeat_bool(self, unnamed_arg_0)
    end
    def auto_repeat() : Bool
      Binding.bg_QAbstractButton_autoRepeat_(self)
    end
    def auto_repeat_delay=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractButton_setAutoRepeatDelay_int(self, unnamed_arg_0)
    end
    def auto_repeat_delay() : Int32
      Binding.bg_QAbstractButton_autoRepeatDelay_(self)
    end
    def auto_repeat_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractButton_setAutoRepeatInterval_int(self, unnamed_arg_0)
    end
    def auto_repeat_interval() : Int32
      Binding.bg_QAbstractButton_autoRepeatInterval_(self)
    end
    def auto_exclusive=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setAutoExclusive_bool(self, unnamed_arg_0)
    end
    def auto_exclusive() : Bool
      Binding.bg_QAbstractButton_autoExclusive_(self)
    end
    def group() : QButtonGroup*
      Binding.bg_QAbstractButton_group_(self)
    end
    def icon_size=(size : QSize*) : Void
      Binding.bg_QAbstractButton_setIconSize_const_QSize_R(self, size)
    end
    def animate_click() : Void
      Binding.bg_QAbstractButton_animateClick_(self)
    end
    def animate_click(msec : Int32) : Void
      Binding.bg_QAbstractButton_animateClick_int(self, msec)
    end
    def click() : Void
      Binding.bg_QAbstractButton_click_(self)
    end
    def toggle() : Void
      Binding.bg_QAbstractButton_toggle_(self)
    end
    def checked=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setChecked_bool(self, unnamed_arg_0)
    end
    def pressed() : Void
      Binding.bg_QAbstractButton_pressed_(self)
    end
    def on_pressed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_pressed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def released() : Void
      Binding.bg_QAbstractButton_released_(self)
    end
    def on_released(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_released_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def clicked() : Void
      Binding.bg_QAbstractButton_clicked_(self)
    end
    def on_clicked(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_clicked_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def clicked(checked : Bool) : Void
      Binding.bg_QAbstractButton_clicked_bool(self, checked)
    end
    def on_clicked(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_clicked_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(checked : Bool){ block.call(checked) })))
    end
    def toggled(checked : Bool) : Void
      Binding.bg_QAbstractButton_toggled_bool(self, checked)
    end
    def on_toggled(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_toggled_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(checked : Bool){ block.call(checked) })))
    end
    protected abstract def paint_event(e : QPaintEvent*) : Void
    protected def hit_button(pos : Binding::Point) : Bool
      Binding.bg_QAbstractButton_hitButton_const_QPoint_R(self, pos)
    end
    protected def check_state_set() : Void
      Binding.bg_QAbstractButton_checkStateSet_(self)
    end
    protected def next_check_state() : Void
      Binding.bg_QAbstractButton_nextCheckState_(self)
    end
    protected def event(e : QEvent*) : Bool
      Binding.bg_QAbstractButton_event_QEvent_X(self, e)
    end
    protected def key_press_event(e : QKeyEvent*) : Void
      Binding.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(self, e)
    end
    protected def key_release_event(e : QKeyEvent*) : Void
      Binding.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    protected def mouse_press_event(e : QMouseEvent*) : Void
      Binding.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_release_event(e : QMouseEvent*) : Void
      Binding.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_move_event(e : QMouseEvent*) : Void
      Binding.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    protected def focus_in_event(e : QFocusEvent*) : Void
      Binding.bg_QAbstractButton_focusInEvent_QFocusEvent_X(self, e)
    end
    protected def focus_out_event(e : QFocusEvent*) : Void
      Binding.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(self, e)
    end
    protected def change_event(e : QEvent*) : Void
      Binding.bg_QAbstractButton_changeEvent_QEvent_X(self, e)
    end
    protected def timer_event(e : QTimerEvent*) : Void
      Binding.bg_QAbstractButton_timerEvent_QTimerEvent_X(self, e)
    end
    protected def initialize(dd : QAbstractButtonPrivate*)
      unwrap = Binding.bg_QAbstractButton_CONSTRUCT_QAbstractButtonPrivate_R(dd)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QAbstractButtonPrivate*, parent : Widget)
      unwrap = Binding.bg_QAbstractButton_CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class AbstractButtonImpl < AbstractButton
    macro inherited
      {{ raise "You can't sub-class AbstractButtonImpl, inherit from AbstractButton instead" }}
    end
    protected def paint_event(e : QPaintEvent*) : Void
      Binding.bg_QAbstractButton_paintEvent_QPaintEvent_X(self, e)
    end
  end
  class Frame < Widget
    enum Shape : UInt32
      NoFrame = 0
      Box = 1
      Panel = 2
      WinPanel = 3
      HLine = 4
      VLine = 5
      StyledPanel = 6
    end
    enum Shadow : UInt32
      Plain = 16
      Raised = 32
      Sunken = 48
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QFrame_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QFrame_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QFrame_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def frame_style() : Int32
      Binding.bg_QFrame_frameStyle_(self)
    end
    def frame_style=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setFrameStyle_int(self, unnamed_arg_0)
    end
    def frame_width() : Int32
      Binding.bg_QFrame_frameWidth_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QFrame_sizeHint_(self)
    end
    def frame_shape() : Frame::Shape
      Frame::Shape.new(unwrap: Binding.bg_QFrame_frameShape_(self))
    end
    def frame_shape=(unnamed_arg_0 : Frame::Shape) : Void
      Binding.bg_QFrame_setFrameShape_QFrame__Shape(self, unnamed_arg_0)
    end
    def frame_shadow() : Frame::Shadow
      Frame::Shadow.new(unwrap: Binding.bg_QFrame_frameShadow_(self))
    end
    def frame_shadow=(unnamed_arg_0 : Frame::Shadow) : Void
      Binding.bg_QFrame_setFrameShadow_QFrame__Shadow(self, unnamed_arg_0)
    end
    def line_width() : Int32
      Binding.bg_QFrame_lineWidth_(self)
    end
    def line_width=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setLineWidth_int(self, unnamed_arg_0)
    end
    def mid_line_width() : Int32
      Binding.bg_QFrame_midLineWidth_(self)
    end
    def mid_line_width=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setMidLineWidth_int(self, unnamed_arg_0)
    end
    def frame_rect() : QRect*
      Binding.bg_QFrame_frameRect_(self)
    end
    def frame_rect=(unnamed_arg_0 : QRect*) : Void
      Binding.bg_QFrame_setFrameRect_const_QRect_R(self, unnamed_arg_0)
    end
    protected def event(e : QEvent*) : Bool
      Binding.bg_QFrame_event_QEvent_X(self, e)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QFrame_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QFrame_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def draw_frame(unnamed_arg_0 : QPainter*) : Void
      Binding.bg_QFrame_drawFrame_QPainter_X(self, unnamed_arg_0)
    end
    protected def initialize(dd : QFramePrivate*)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QFramePrivate_R(dd)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QFramePrivate*, parent : Widget)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QFramePrivate*, parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(dd, parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def init_style_option(option : QStyleOptionFrame*) : Void
      Binding.bg_QFrame_initStyleOption_QStyleOptionFrame_X(self, option)
    end
  end
  class AbstractScrollArea < Frame
    enum SizeAdjustPolicy : UInt32
      AdjustIgnored = 0
      AdjustToContentsOnFirstShow = 1
      AdjustToContents = 2
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractScrollArea_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractScrollArea_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QAbstractScrollArea_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QAbstractScrollArea_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def vertical_scroll_bar_policy() : ScrollBarPolicy
      ScrollBarPolicy.new(unwrap: Binding.bg_QAbstractScrollArea_verticalScrollBarPolicy_(self))
    end
    def vertical_scroll_bar_policy=(unnamed_arg_0 : ScrollBarPolicy) : Void
      Binding.bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(self, unnamed_arg_0)
    end
    def vertical_scroll_bar() : QScrollBar*
      Binding.bg_QAbstractScrollArea_verticalScrollBar_(self)
    end
    def vertical_scroll_bar=(scrollbar : QScrollBar*) : Void
      Binding.bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(self, scrollbar)
    end
    def horizontal_scroll_bar_policy() : ScrollBarPolicy
      ScrollBarPolicy.new(unwrap: Binding.bg_QAbstractScrollArea_horizontalScrollBarPolicy_(self))
    end
    def horizontal_scroll_bar_policy=(unnamed_arg_0 : ScrollBarPolicy) : Void
      Binding.bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(self, unnamed_arg_0)
    end
    def horizontal_scroll_bar() : QScrollBar*
      Binding.bg_QAbstractScrollArea_horizontalScrollBar_(self)
    end
    def horizontal_scroll_bar=(scrollbar : QScrollBar*) : Void
      Binding.bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(self, scrollbar)
    end
    def corner_widget() : Widget
      Widget.new(unwrap: Binding.bg_QAbstractScrollArea_cornerWidget_(self))
    end
    def corner_widget=(widget : Widget) : Void
      Binding.bg_QAbstractScrollArea_setCornerWidget_QWidget_X(self, widget)
    end
    def add_scroll_bar_widget(widget : Widget, alignment : Alignment) : Void
      Binding.bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(self, widget, alignment)
    end
    def scroll_bar_widgets(alignment : Alignment) : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(self, alignment))
    end
    def viewport() : Widget
      Widget.new(unwrap: Binding.bg_QAbstractScrollArea_viewport_(self))
    end
    def viewport=(widget : Widget) : Void
      Binding.bg_QAbstractScrollArea_setViewport_QWidget_X(self, widget)
    end
    def maximum_viewport_size() : QSize*
      Binding.bg_QAbstractScrollArea_maximumViewportSize_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QAbstractScrollArea_minimumSizeHint_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QAbstractScrollArea_sizeHint_(self)
    end
    def setup_viewport(viewport : Widget) : Void
      Binding.bg_QAbstractScrollArea_setupViewport_QWidget_X(self, viewport)
    end
    def size_adjust_policy() : AbstractScrollArea::SizeAdjustPolicy
      AbstractScrollArea::SizeAdjustPolicy.new(unwrap: Binding.bg_QAbstractScrollArea_sizeAdjustPolicy_(self))
    end
    def size_adjust_policy=(policy : AbstractScrollArea::SizeAdjustPolicy) : Void
      Binding.bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(self, policy)
    end
    protected def initialize(dd : QAbstractScrollAreaPrivate*)
      unwrap = Binding.bg_QAbstractScrollArea_CONSTRUCT_QAbstractScrollAreaPrivate_R(dd)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QAbstractScrollAreaPrivate*, parent : Widget)
      unwrap = Binding.bg_QAbstractScrollArea_CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def set_viewport_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(self, left, top, right, bottom)
    end
    protected def viewport_margins=(margins : QMargins*) : Void
      Binding.bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(self, margins)
    end
    protected def viewport_margins() : QMargins*
      Binding.bg_QAbstractScrollArea_viewportMargins_(self)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : QEvent*) : Bool
      Binding.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QAbstractScrollArea_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def viewport_event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QAbstractScrollArea_viewportEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : QResizeEvent*) : Void
      Binding.bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_double_click_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def wheel_event(unnamed_arg_0 : QWheelEvent*) : Void
      Binding.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    protected def context_menu_event(unnamed_arg_0 : QContextMenuEvent*) : Void
      Binding.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    protected def drag_enter_event(unnamed_arg_0 : QDragEnterEvent*) : Void
      Binding.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(self, unnamed_arg_0)
    end
    protected def drag_move_event(unnamed_arg_0 : QDragMoveEvent*) : Void
      Binding.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(self, unnamed_arg_0)
    end
    protected def drag_leave_event(unnamed_arg_0 : QDragLeaveEvent*) : Void
      Binding.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(self, unnamed_arg_0)
    end
    protected def drop_event(unnamed_arg_0 : QDropEvent*) : Void
      Binding.bg_QAbstractScrollArea_dropEvent_QDropEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QAbstractScrollArea_scrollContentsBy_int_int(self, dx, dy)
    end
    protected def viewport_size_hint() : QSize*
      Binding.bg_QAbstractScrollArea_viewportSizeHint_(self)
    end
  end
  class ScrollArea < AbstractScrollArea
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QScrollArea_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QScrollArea_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QScrollArea_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QScrollArea_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QScrollArea_widget_(self))
    end
    def widget=(widget : Widget) : Void
      Binding.bg_QScrollArea_setWidget_QWidget_X(self, widget)
    end
    def take_widget() : Widget
      Widget.new(unwrap: Binding.bg_QScrollArea_takeWidget_(self))
    end
    def widget_resizable() : Bool
      Binding.bg_QScrollArea_widgetResizable_(self)
    end
    def widget_resizable=(resizable : Bool) : Void
      Binding.bg_QScrollArea_setWidgetResizable_bool(self, resizable)
    end
    def size_hint() : QSize*
      Binding.bg_QScrollArea_sizeHint_(self)
    end
    def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QScrollArea_focusNextPrevChild_bool(self, next_)
    end
    def alignment() : Alignment
      Alignment.new(unwrap: Binding.bg_QScrollArea_alignment_(self))
    end
    def alignment=(unnamed_arg_0 : Alignment) : Void
      Binding.bg_QScrollArea_setAlignment_Qt__Alignment(self, unnamed_arg_0)
    end
    def ensure_visible(x : Int32, y : Int32) : Void
      Binding.bg_QScrollArea_ensureVisible_int_int(self, x, y)
    end
    def ensure_visible(x : Int32, y : Int32, xmargin : Int32) : Void
      Binding.bg_QScrollArea_ensureVisible_int_int_int(self, x, y, xmargin)
    end
    def ensure_visible(x : Int32, y : Int32, xmargin : Int32, ymargin : Int32) : Void
      Binding.bg_QScrollArea_ensureVisible_int_int_int_int(self, x, y, xmargin, ymargin)
    end
    def ensure_widget_visible(child_widget : Widget) : Void
      Binding.bg_QScrollArea_ensureWidgetVisible_QWidget_X(self, child_widget)
    end
    def ensure_widget_visible(child_widget : Widget, xmargin : Int32) : Void
      Binding.bg_QScrollArea_ensureWidgetVisible_QWidget_X_int(self, child_widget, xmargin)
    end
    def ensure_widget_visible(child_widget : Widget, xmargin : Int32, ymargin : Int32) : Void
      Binding.bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(self, child_widget, xmargin, ymargin)
    end
    protected def initialize(dd : QScrollAreaPrivate*)
      unwrap = Binding.bg_QScrollArea_CONSTRUCT_QScrollAreaPrivate_R(dd)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QScrollAreaPrivate*, parent : Widget)
      unwrap = Binding.bg_QScrollArea_CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : QDragMoveEvent*){ self.drag_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : QDragLeaveEvent*){ self.drag_leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QScrollArea_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : QEvent*) : Bool
      Binding.bg_QScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def resize_event(unnamed_arg_0 : QResizeEvent*) : Void
      Binding.bg_QScrollArea_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QScrollArea_scrollContentsBy_int_int(self, dx, dy)
    end
    protected def viewport_size_hint() : QSize*
      Binding.bg_QScrollArea_viewportSizeHint_(self)
    end
  end
  class MenuBar < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QMenuBar_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMenuBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QMenuBar_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MenuBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width visible= change_event key_press_event mouse_release_event mouse_press_event mouse_move_event leave_event paint_event resize_event action_event focus_out_event focus_in_event timer_event event_filter event dev_type has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event move_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenuBar.new(
      bg_QMenuBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenuBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QMenuBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QMenuBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenuBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QMenuBar_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MenuBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width visible= change_event key_press_event mouse_release_event mouse_press_event mouse_move_event leave_event paint_event resize_event action_event focus_out_event focus_in_event timer_event event_filter event dev_type has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event move_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenuBar.new(
      bg_QMenuBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenuBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QMenuBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QMenuBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenuBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_menu(menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addMenu_QMenu_X(self, menu))
    end
    def add_menu(title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenuBar_addMenu_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    def add_menu(icon : QIcon*, title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(title)))
    end
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addSeparator_(self))
    end
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_insertSeparator_QAction_X(self, before))
    end
    def insert_menu(before : Action, menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_insertMenu_QAction_X_QMenu_X(self, before, menu))
    end
    def clear() : Void
      Binding.bg_QMenuBar_clear_(self)
    end
    def active_action() : Action
      Action.new(unwrap: Binding.bg_QMenuBar_activeAction_(self))
    end
    def active_action=(action : Action) : Void
      Binding.bg_QMenuBar_setActiveAction_QAction_X(self, action)
    end
    def default_up=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QMenuBar_setDefaultUp_bool(self, unnamed_arg_0)
    end
    def default_up?() : Bool
      Binding.bg_QMenuBar_isDefaultUp_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QMenuBar_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QMenuBar_minimumSizeHint_(self)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QMenuBar_heightForWidth_int(self, unnamed_arg_0)
    end
    def action_geometry(unnamed_arg_0 : Action) : QRect*
      Binding.bg_QMenuBar_actionGeometry_QAction_X(self, unnamed_arg_0)
    end
    def action_at(unnamed_arg_0 : Binding::Point) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_actionAt_const_QPoint_R(self, unnamed_arg_0))
    end
    def corner_widget=(w : Widget) : Void
      Binding.bg_QMenuBar_setCornerWidget_QWidget_X(self, w)
    end
    def set_corner_widget(w : Widget, corner : Corner) : Void
      Binding.bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(self, w, corner)
    end
    def corner_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMenuBar_cornerWidget_(self))
    end
    def corner_widget(corner : Corner) : Widget
      Widget.new(unwrap: Binding.bg_QMenuBar_cornerWidget_Qt__Corner(self, corner))
    end
    def native_menu_bar?() : Bool
      Binding.bg_QMenuBar_isNativeMenuBar_(self)
    end
    def native_menu_bar=(native_menu_bar : Bool) : Void
      Binding.bg_QMenuBar_setNativeMenuBar_bool(self, native_menu_bar)
    end
    def platform_menu_bar() : QPlatformMenuBar*
      Binding.bg_QMenuBar_platformMenuBar_(self)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QMenuBar_setVisible_bool(self, visible)
    end
    def triggered(action : Action) : Void
      Binding.bg_QMenuBar_triggered_QAction_X(self, action)
    end
    def on_triggered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenuBar_triggered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    def hovered(action : Action) : Void
      Binding.bg_QMenuBar_hovered_QAction_X(self, action)
    end
    def on_hovered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenuBar_hovered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    protected def change_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QMenuBar_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QMenuBar_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QMenuBar_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def leave_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QMenuBar_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QMenuBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : QResizeEvent*) : Void
      Binding.bg_QMenuBar_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def action_event(unnamed_arg_0 : QActionEvent*) : Void
      Binding.bg_QMenuBar_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    protected def focus_out_event(unnamed_arg_0 : QFocusEvent*) : Void
      Binding.bg_QMenuBar_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def focus_in_event(unnamed_arg_0 : QFocusEvent*) : Void
      Binding.bg_QMenuBar_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def timer_event(unnamed_arg_0 : QTimerEvent*) : Void
      Binding.bg_QMenuBar_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : QEvent*) : Bool
      Binding.bg_QMenuBar_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QMenuBar_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionMenuItem*, action : Action) : Void
      Binding.bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(self, option, action)
    end
  end
  class Menu < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QMenu_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMenu_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QMenu_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter redirected shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : QEvent*){ self.enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : QHideEvent*){ self.hide_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QMenu_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter redirected shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : QEvent*){ self.enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : QHideEvent*){ self.hide_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(title : String)
      unwrap = Binding.bg_QMenu_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(title))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter redirected shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : QEvent*){ self.enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : QHideEvent*){ self.hide_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(title : String, parent : Widget)
      unwrap = Binding.bg_QMenu_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter redirected shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : QEvent*){ self.enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : QHideEvent*){ self.hide_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_action(icon : QIcon*, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_action(text : String, receiver : Object, member : UInt8*, shortcut : KeySequence) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(self, Qt::Converter::QString.wrap(text), receiver, member, shortcut))
    end
    def add_action(icon : QIcon*, text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(self, icon, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_action(icon : QIcon*, text : String, receiver : Object, member : UInt8*, shortcut : KeySequence) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(self, icon, Qt::Converter::QString.wrap(text), receiver, member, shortcut))
    end
    def add_menu(menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenu_addMenu_QMenu_X(self, menu))
    end
    def add_menu(title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenu_addMenu_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    def add_menu(icon : QIcon*, title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenu_addMenu_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(title)))
    end
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QMenu_addSeparator_(self))
    end
    def add_section(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addSection_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_section(icon : QIcon*, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addSection_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    def insert_menu(before : Action, menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertMenu_QAction_X_QMenu_X(self, before, menu))
    end
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSeparator_QAction_X(self, before))
    end
    def insert_section(before : Action, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSection_QAction_X_const_QString_R(self, before, Qt::Converter::QString.wrap(text)))
    end
    def insert_section(before : Action, icon : QIcon*, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(self, before, icon, Qt::Converter::QString.wrap(text)))
    end
    def empty?() : Bool
      Binding.bg_QMenu_isEmpty_(self)
    end
    def clear() : Void
      Binding.bg_QMenu_clear_(self)
    end
    def tear_off_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QMenu_setTearOffEnabled_bool(self, unnamed_arg_0)
    end
    def tear_off_enabled?() : Bool
      Binding.bg_QMenu_isTearOffEnabled_(self)
    end
    def tear_off_menu_visible?() : Bool
      Binding.bg_QMenu_isTearOffMenuVisible_(self)
    end
    def show_tear_off_menu() : Void
      Binding.bg_QMenu_showTearOffMenu_(self)
    end
    def show_tear_off_menu(pos : Binding::Point) : Void
      Binding.bg_QMenu_showTearOffMenu_const_QPoint_R(self, pos)
    end
    def hide_tear_off_menu() : Void
      Binding.bg_QMenu_hideTearOffMenu_(self)
    end
    def default_action=(unnamed_arg_0 : Action) : Void
      Binding.bg_QMenu_setDefaultAction_QAction_X(self, unnamed_arg_0)
    end
    def default_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_defaultAction_(self))
    end
    def active_action=(act : Action) : Void
      Binding.bg_QMenu_setActiveAction_QAction_X(self, act)
    end
    def active_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_activeAction_(self))
    end
    def popup(pos : Binding::Point) : Void
      Binding.bg_QMenu_popup_const_QPoint_R(self, pos)
    end
    def popup(pos : Binding::Point, at : Action) : Void
      Binding.bg_QMenu_popup_const_QPoint_R_QAction_X(self, pos, at)
    end
    def exec() : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_(self))
    end
    def exec(pos : Binding::Point) : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_const_QPoint_R(self, pos))
    end
    def exec(pos : Binding::Point, at : Action) : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_const_QPoint_R_QAction_X(self, pos, at))
    end
    def size_hint() : QSize*
      Binding.bg_QMenu_sizeHint_(self)
    end
    def action_geometry(unnamed_arg_0 : Action) : QRect*
      Binding.bg_QMenu_actionGeometry_QAction_X(self, unnamed_arg_0)
    end
    def action_at(unnamed_arg_0 : Binding::Point) : Action
      Action.new(unwrap: Binding.bg_QMenu_actionAt_const_QPoint_R(self, unnamed_arg_0))
    end
    def menu_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_menuAction_(self))
    end
    def title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_title_(self))
    end
    def title=(title : String) : Void
      Binding.bg_QMenu_setTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def icon() : QIcon*
      Binding.bg_QMenu_icon_(self)
    end
    def icon=(icon : QIcon*) : Void
      Binding.bg_QMenu_setIcon_const_QIcon_R(self, icon)
    end
    def no_replay_for=(widget : Widget) : Void
      Binding.bg_QMenu_setNoReplayFor_QWidget_X(self, widget)
    end
    def platform_menu() : QPlatformMenu*
      Binding.bg_QMenu_platformMenu_(self)
    end
    def platform_menu=(platform_menu : QPlatformMenu*) : Void
      Binding.bg_QMenu_setPlatformMenu_QPlatformMenu_X(self, platform_menu)
    end
    def separators_collapsible() : Bool
      Binding.bg_QMenu_separatorsCollapsible_(self)
    end
    def separators_collapsible=(collapse : Bool) : Void
      Binding.bg_QMenu_setSeparatorsCollapsible_bool(self, collapse)
    end
    def tool_tips_visible() : Bool
      Binding.bg_QMenu_toolTipsVisible_(self)
    end
    def tool_tips_visible=(visible : Bool) : Void
      Binding.bg_QMenu_setToolTipsVisible_bool(self, visible)
    end
    def about_to_show() : Void
      Binding.bg_QMenu_aboutToShow_(self)
    end
    def on_about_to_show(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_aboutToShow_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def about_to_hide() : Void
      Binding.bg_QMenu_aboutToHide_(self)
    end
    def on_about_to_hide(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_aboutToHide_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def triggered(action : Action) : Void
      Binding.bg_QMenu_triggered_QAction_X(self, action)
    end
    def on_triggered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_triggered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    def hovered(action : Action) : Void
      Binding.bg_QMenu_hovered_QAction_X(self, action)
    end
    def on_hovered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_hovered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    protected def column_count() : Int32
      Binding.bg_QMenu_columnCount_(self)
    end
    protected def change_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QMenu_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QMenu_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QMenu_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QMenu_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QMenu_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def wheel_event(unnamed_arg_0 : QWheelEvent*) : Void
      Binding.bg_QMenu_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    protected def enter_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QMenu_enterEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def leave_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QMenu_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def hide_event(unnamed_arg_0 : QHideEvent*) : Void
      Binding.bg_QMenu_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QMenu_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def action_event(unnamed_arg_0 : QActionEvent*) : Void
      Binding.bg_QMenu_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    protected def timer_event(unnamed_arg_0 : QTimerEvent*) : Void
      Binding.bg_QMenu_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QMenu_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QMenu_focusNextPrevChild_bool(self, next_)
    end
    protected def init_style_option(option : QStyleOptionMenuItem*, action : Action) : Void
      Binding.bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(self, option, action)
    end
    protected def initialize(dd : QMenuPrivate*)
      unwrap = Binding.bg_QMenu_CONSTRUCT_QMenuPrivate_R(dd)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter redirected shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : QEvent*){ self.enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : QHideEvent*){ self.hide_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QMenuPrivate*, parent : Widget)
      unwrap = Binding.bg_QMenu_CONSTRUCT_QMenuPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter redirected shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : QEvent*){ self.enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : QEvent*){ self.leave_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : QHideEvent*){ self.hide_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : QActionEvent*){ self.action_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : QTimerEvent*){ self.timer_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class Action < Object
    enum Event : UInt32
      Trigger = 0
      Hover = 1
    end
    enum MenuRole : UInt32
      NoRole = 0
      TextHeuristicRole = 1
      ApplicationSpecificRole = 2
      AboutQtRole = 3
      AboutRole = 4
      PreferencesRole = 5
      QuitRole = 6
    end
    enum Priority : UInt32
      LowPriority = 0
      NormalPriority = 128
      HighPriority = 256
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAction_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAction_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QAction_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Object)
      unwrap = Binding.bg_QAction_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String)
      unwrap = Binding.bg_QAction_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Object)
      unwrap = Binding.bg_QAction_CONSTRUCT_const_QString_R_QObject_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(icon : QIcon*, text : String)
      unwrap = Binding.bg_QAction_CONSTRUCT_const_QIcon_R_const_QString_R(icon, Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(icon : QIcon*, text : String, parent : Object)
      unwrap = Binding.bg_QAction_CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(icon, Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def action_group=(group : QActionGroup*) : Void
      Binding.bg_QAction_setActionGroup_QActionGroup_X(self, group)
    end
    def action_group() : QActionGroup*
      Binding.bg_QAction_actionGroup_(self)
    end
    def icon=(icon : QIcon*) : Void
      Binding.bg_QAction_setIcon_const_QIcon_R(self, icon)
    end
    def icon() : QIcon*
      Binding.bg_QAction_icon_(self)
    end
    def text=(text : String) : Void
      Binding.bg_QAction_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_text_(self))
    end
    def icon_text=(text : String) : Void
      Binding.bg_QAction_setIconText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def icon_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_iconText_(self))
    end
    def tool_tip=(tip : String) : Void
      Binding.bg_QAction_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tip))
    end
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_toolTip_(self))
    end
    def status_tip=(status_tip : String) : Void
      Binding.bg_QAction_setStatusTip_const_QString_R(self, Qt::Converter::QString.wrap(status_tip))
    end
    def status_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_statusTip_(self))
    end
    def whats_this=(what : String) : Void
      Binding.bg_QAction_setWhatsThis_const_QString_R(self, Qt::Converter::QString.wrap(what))
    end
    def whats_this() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_whatsThis_(self))
    end
    def priority=(priority : Action::Priority) : Void
      Binding.bg_QAction_setPriority_QAction__Priority(self, priority)
    end
    def priority() : Action::Priority
      Action::Priority.new(unwrap: Binding.bg_QAction_priority_(self))
    end
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QAction_menu_(self))
    end
    def menu=(menu : Menu) : Void
      Binding.bg_QAction_setMenu_QMenu_X(self, menu)
    end
    def separator=(b : Bool) : Void
      Binding.bg_QAction_setSeparator_bool(self, b)
    end
    def separator?() : Bool
      Binding.bg_QAction_isSeparator_(self)
    end
    def shortcut=(shortcut : KeySequence) : Void
      Binding.bg_QAction_setShortcut_const_QKeySequence_R(self, shortcut)
    end
    def shortcut() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QAction_shortcut_(self))
    end
    def shortcuts=(unnamed_arg_0 : KeySequence::StandardKey) : Void
      Binding.bg_QAction_setShortcuts_QKeySequence__StandardKey(self, unnamed_arg_0)
    end
    def shortcut_context=(context : ShortcutContext) : Void
      Binding.bg_QAction_setShortcutContext_Qt__ShortcutContext(self, context)
    end
    def shortcut_context() : ShortcutContext
      ShortcutContext.new(unwrap: Binding.bg_QAction_shortcutContext_(self))
    end
    def auto_repeat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setAutoRepeat_bool(self, unnamed_arg_0)
    end
    def auto_repeat() : Bool
      Binding.bg_QAction_autoRepeat_(self)
    end
    def font=(font : QFont*) : Void
      Binding.bg_QAction_setFont_const_QFont_R(self, font)
    end
    def font() : QFont*
      Binding.bg_QAction_font_(self)
    end
    def checkable=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setCheckable_bool(self, unnamed_arg_0)
    end
    def checkable?() : Bool
      Binding.bg_QAction_isCheckable_(self)
    end
    def checked?() : Bool
      Binding.bg_QAction_isChecked_(self)
    end
    def enabled?() : Bool
      Binding.bg_QAction_isEnabled_(self)
    end
    def visible?() : Bool
      Binding.bg_QAction_isVisible_(self)
    end
    def activate(event : Action::Event) : Void
      Binding.bg_QAction_activate_QAction__ActionEvent(self, event)
    end
    def show_status_text() : Bool
      Binding.bg_QAction_showStatusText_(self)
    end
    def show_status_text(widget : Widget) : Bool
      Binding.bg_QAction_showStatusText_QWidget_X(self, widget)
    end
    def menu_role=(menu_role : Action::MenuRole) : Void
      Binding.bg_QAction_setMenuRole_QAction__MenuRole(self, menu_role)
    end
    def menu_role() : Action::MenuRole
      Action::MenuRole.new(unwrap: Binding.bg_QAction_menuRole_(self))
    end
    def icon_visible_in_menu=(visible : Bool) : Void
      Binding.bg_QAction_setIconVisibleInMenu_bool(self, visible)
    end
    def icon_visible_in_menu?() : Bool
      Binding.bg_QAction_isIconVisibleInMenu_(self)
    end
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QAction_parentWidget_(self))
    end
    def associated_widgets() : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QAction_associatedWidgets_(self))
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QAction_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def initialize(dd : QActionPrivate*, parent : Object)
      unwrap = Binding.bg_QAction_CONSTRUCT_QActionPrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def trigger() : Void
      Binding.bg_QAction_trigger_(self)
    end
    def hover() : Void
      Binding.bg_QAction_hover_(self)
    end
    def checked=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setChecked_bool(self, unnamed_arg_0)
    end
    def toggle() : Void
      Binding.bg_QAction_toggle_(self)
    end
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setEnabled_bool(self, unnamed_arg_0)
    end
    def disabled=(b : Bool) : Void
      Binding.bg_QAction_setDisabled_bool(self, b)
    end
    def visible=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setVisible_bool(self, unnamed_arg_0)
    end
    def changed() : Void
      Binding.bg_QAction_changed_(self)
    end
    def on_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_changed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def triggered() : Void
      Binding.bg_QAction_triggered_(self)
    end
    def on_triggered(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_triggered_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def triggered(checked : Bool) : Void
      Binding.bg_QAction_triggered_bool(self, checked)
    end
    def on_triggered(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_triggered_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(checked : Bool){ block.call(checked) })))
    end
    def hovered() : Void
      Binding.bg_QAction_hovered_(self)
    end
    def on_hovered(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_hovered_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def toggled(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_toggled_bool(self, unnamed_arg_0)
    end
    def on_toggled(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_toggled_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Bool){ block.call(unnamed_arg_0) })))
    end
  end
  class MainWindow < Widget
    @[Flags]
    enum DockOptions : UInt32
      AnimatedDocks = 1
      AllowNestedDocks = 2
      AllowTabbedDocks = 4
      ForceTabbedDocks = 8
      VerticalTabs = 16
      GroupedDragging = 32
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QMainWindow_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMainWindow_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QMainWindow_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MainWindow)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast create_popup_menu context_menu_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMainWindow.new(
      bg_QMainWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMainWindow_createPopupMenu_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_popup_menu") %} ->(){ Menu.new(unwrap: self.create_popup_menu()) } {% else %} nil {% end %}),
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QMainWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMainWindow_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QMainWindow_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MainWindow)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast create_popup_menu context_menu_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMainWindow.new(
      bg_QMainWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMainWindow_createPopupMenu_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_popup_menu") %} ->(){ Menu.new(unwrap: self.create_popup_menu()) } {% else %} nil {% end %}),
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QMainWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMainWindow_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, flags : WindowFlags)
      unwrap = Binding.bg_QMainWindow_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, flags)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MainWindow)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast create_popup_menu context_menu_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMainWindow.new(
      bg_QMainWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMainWindow_createPopupMenu_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_popup_menu") %} ->(){ Menu.new(unwrap: self.create_popup_menu()) } {% else %} nil {% end %}),
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QMainWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMainWindow_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def icon_size() : QSize*
      Binding.bg_QMainWindow_iconSize_(self)
    end
    def icon_size=(icon_size : QSize*) : Void
      Binding.bg_QMainWindow_setIconSize_const_QSize_R(self, icon_size)
    end
    def tool_button_style() : ToolButtonStyle
      ToolButtonStyle.new(unwrap: Binding.bg_QMainWindow_toolButtonStyle_(self))
    end
    def tool_button_style=(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(self, tool_button_style)
    end
    def animated?() : Bool
      Binding.bg_QMainWindow_isAnimated_(self)
    end
    def dock_nesting_enabled?() : Bool
      Binding.bg_QMainWindow_isDockNestingEnabled_(self)
    end
    def document_mode() : Bool
      Binding.bg_QMainWindow_documentMode_(self)
    end
    def document_mode=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setDocumentMode_bool(self, enabled)
    end
    def tab_shape() : TabWidget::TabShape
      TabWidget::TabShape.new(unwrap: Binding.bg_QMainWindow_tabShape_(self))
    end
    def tab_shape=(tab_shape : TabWidget::TabShape) : Void
      Binding.bg_QMainWindow_setTabShape_QTabWidget__TabShape(self, tab_shape)
    end
    def tab_position(area : DockWidgetArea) : TabWidget::TabPosition
      TabWidget::TabPosition.new(unwrap: Binding.bg_QMainWindow_tabPosition_Qt__DockWidgetArea(self, area))
    end
    def set_tab_position(areas : DockWidgetAreas, tab_position : TabWidget::TabPosition) : Void
      Binding.bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(self, areas, tab_position)
    end
    def dock_options=(options : MainWindow::DockOptions) : Void
      Binding.bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(self, options)
    end
    def dock_options() : MainWindow::DockOptions
      MainWindow::DockOptions.new(unwrap: Binding.bg_QMainWindow_dockOptions_(self))
    end
    def is_separator(pos : Binding::Point) : Bool
      Binding.bg_QMainWindow_isSeparator_const_QPoint_R(self, pos)
    end
    def menu_bar() : MenuBar
      MenuBar.new(unwrap: Binding.bg_QMainWindow_menuBar_(self))
    end
    def menu_bar=(menubar : MenuBar) : Void
      Binding.bg_QMainWindow_setMenuBar_QMenuBar_X(self, menubar)
    end
    def menu_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_menuWidget_(self))
    end
    def menu_widget=(menubar : Widget) : Void
      Binding.bg_QMainWindow_setMenuWidget_QWidget_X(self, menubar)
    end
    def status_bar() : QStatusBar*
      Binding.bg_QMainWindow_statusBar_(self)
    end
    def status_bar=(statusbar : QStatusBar*) : Void
      Binding.bg_QMainWindow_setStatusBar_QStatusBar_X(self, statusbar)
    end
    def central_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_centralWidget_(self))
    end
    def central_widget=(widget : Widget) : Void
      Binding.bg_QMainWindow_setCentralWidget_QWidget_X(self, widget)
    end
    def take_central_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_takeCentralWidget_(self))
    end
    def set_corner(corner : Corner, area : DockWidgetArea) : Void
      Binding.bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(self, corner, area)
    end
    def corner(corner : Corner) : DockWidgetArea
      DockWidgetArea.new(unwrap: Binding.bg_QMainWindow_corner_Qt__Corner(self, corner))
    end
    def add_tool_bar_break() : Void
      Binding.bg_QMainWindow_addToolBarBreak_(self)
    end
    def add_tool_bar_break(area : ToolBarArea) : Void
      Binding.bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(self, area)
    end
    def insert_tool_bar_break(before : QToolBar*) : Void
      Binding.bg_QMainWindow_insertToolBarBreak_QToolBar_X(self, before)
    end
    def add_tool_bar(area : ToolBarArea, toolbar : QToolBar*) : Void
      Binding.bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(self, area, toolbar)
    end
    def add_tool_bar(toolbar : QToolBar*) : Void
      Binding.bg_QMainWindow_addToolBar_QToolBar_X(self, toolbar)
    end
    def add_tool_bar(title : String) : QToolBar*
      Binding.bg_QMainWindow_addToolBar_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def insert_tool_bar(before : QToolBar*, toolbar : QToolBar*) : Void
      Binding.bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(self, before, toolbar)
    end
    def remove_tool_bar(toolbar : QToolBar*) : Void
      Binding.bg_QMainWindow_removeToolBar_QToolBar_X(self, toolbar)
    end
    def remove_tool_bar_break(before : QToolBar*) : Void
      Binding.bg_QMainWindow_removeToolBarBreak_QToolBar_X(self, before)
    end
    def unified_title_and_tool_bar_on_mac() : Bool
      Binding.bg_QMainWindow_unifiedTitleAndToolBarOnMac_(self)
    end
    def tool_bar_area(toolbar : QToolBar*) : ToolBarArea
      ToolBarArea.new(unwrap: Binding.bg_QMainWindow_toolBarArea_QToolBar_X(self, toolbar))
    end
    def tool_bar_break(toolbar : QToolBar*) : Bool
      Binding.bg_QMainWindow_toolBarBreak_QToolBar_X(self, toolbar)
    end
    def add_dock_widget(area : DockWidgetArea, dockwidget : QDockWidget*) : Void
      Binding.bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(self, area, dockwidget)
    end
    def add_dock_widget(area : DockWidgetArea, dockwidget : QDockWidget*, orientation : Orientation) : Void
      Binding.bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(self, area, dockwidget, orientation)
    end
    def split_dock_widget(after : QDockWidget*, dockwidget : QDockWidget*, orientation : Orientation) : Void
      Binding.bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(self, after, dockwidget, orientation)
    end
    def tabify_dock_widget(first : QDockWidget*, second : QDockWidget*) : Void
      Binding.bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(self, first, second)
    end
    def remove_dock_widget(dockwidget : QDockWidget*) : Void
      Binding.bg_QMainWindow_removeDockWidget_QDockWidget_X(self, dockwidget)
    end
    def restore_dock_widget(dockwidget : QDockWidget*) : Bool
      Binding.bg_QMainWindow_restoreDockWidget_QDockWidget_X(self, dockwidget)
    end
    def dock_widget_area(dockwidget : QDockWidget*) : DockWidgetArea
      DockWidgetArea.new(unwrap: Binding.bg_QMainWindow_dockWidgetArea_QDockWidget_X(self, dockwidget))
    end
    def save_state() : QByteArray*
      Binding.bg_QMainWindow_saveState_(self)
    end
    def save_state(version : Int32) : QByteArray*
      Binding.bg_QMainWindow_saveState_int(self, version)
    end
    def restore_state(state : QByteArray*) : Bool
      Binding.bg_QMainWindow_restoreState_const_QByteArray_R(self, state)
    end
    def restore_state(state : QByteArray*, version : Int32) : Bool
      Binding.bg_QMainWindow_restoreState_const_QByteArray_R_int(self, state, version)
    end
    def create_popup_menu() : Menu
      Menu.new(unwrap: Binding.bg_QMainWindow_createPopupMenu_(self))
    end
    def animated=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setAnimated_bool(self, enabled)
    end
    def dock_nesting_enabled=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setDockNestingEnabled_bool(self, enabled)
    end
    def unified_title_and_tool_bar_on_mac=(set : Bool) : Void
      Binding.bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(self, set)
    end
    def icon_size_changed(icon_size : QSize*) : Void
      Binding.bg_QMainWindow_iconSizeChanged_const_QSize_R(self, icon_size)
    end
    def on_icon_size_changed(&block : Proc(QSize*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_iconSizeChanged_CONNECT_CrystalProc_void__const_QSizeR_(self, BindgenHelper.wrap_proc(->(icon_size : QSize*){ block.call(icon_size) })))
    end
    def tool_button_style_changed(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(self, tool_button_style)
    end
    def on_tool_button_style_changed(&block : Proc(ToolButtonStyle, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_toolButtonStyleChanged_CONNECT_CrystalProc_void__Qt__ToolButtonStyle_(self, BindgenHelper.wrap_proc(->(tool_button_style : ToolButtonStyle){ block.call(ToolButtonStyle.new(unwrap: tool_button_style)) })))
    end
    def tabified_dock_widget_activated(dock_widget : QDockWidget*) : Void
      Binding.bg_QMainWindow_tabifiedDockWidgetActivated_QDockWidget_X(self, dock_widget)
    end
    def on_tabified_dock_widget_activated(&block : Proc(QDockWidget*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_tabifiedDockWidgetActivated_CONNECT_CrystalProc_void__QDockWidgetX_(self, BindgenHelper.wrap_proc(->(dock_widget : QDockWidget*){ block.call(dock_widget) })))
    end
    protected def context_menu_event(event : QContextMenuEvent*) : Void
      Binding.bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    protected def event(event : QEvent*) : Bool
      Binding.bg_QMainWindow_event_QEvent_X(self, event)
    end
  end
  class Dialog < Widget
    enum DialogCode : UInt32
      Rejected = 0
      Accepted = 1
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QDialog_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDialog_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QDialog_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def result() : Int32
      Binding.bg_QDialog_result_(self)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QDialog_setVisible_bool(self, visible)
    end
    def orientation=(orientation : Orientation) : Void
      Binding.bg_QDialog_setOrientation_Qt__Orientation(self, orientation)
    end
    def orientation() : Orientation
      Orientation.new(unwrap: Binding.bg_QDialog_orientation_(self))
    end
    def extension=(extension : Widget) : Void
      Binding.bg_QDialog_setExtension_QWidget_X(self, extension)
    end
    def extension() : Widget
      Widget.new(unwrap: Binding.bg_QDialog_extension_(self))
    end
    def size_hint() : QSize*
      Binding.bg_QDialog_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QDialog_minimumSizeHint_(self)
    end
    def size_grip_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QDialog_setSizeGripEnabled_bool(self, unnamed_arg_0)
    end
    def size_grip_enabled?() : Bool
      Binding.bg_QDialog_isSizeGripEnabled_(self)
    end
    def modal=(modal : Bool) : Void
      Binding.bg_QDialog_setModal_bool(self, modal)
    end
    def result=(r : Int32) : Void
      Binding.bg_QDialog_setResult_int(self, r)
    end
    def finished(result : Int32) : Void
      Binding.bg_QDialog_finished_int(self, result)
    end
    def on_finished(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_finished_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(result : Int32){ block.call(result) })))
    end
    def accepted() : Void
      Binding.bg_QDialog_accepted_(self)
    end
    def on_accepted(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_accepted_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def rejected() : Void
      Binding.bg_QDialog_rejected_(self)
    end
    def on_rejected(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_rejected_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def open() : Void
      Binding.bg_QDialog_open_(self)
    end
    def exec() : Int32
      Binding.bg_QDialog_exec_(self)
    end
    def done(unnamed_arg_0 : Int32) : Void
      Binding.bg_QDialog_done_int(self, unnamed_arg_0)
    end
    def accept() : Void
      Binding.bg_QDialog_accept_(self)
    end
    def reject() : Void
      Binding.bg_QDialog_reject_(self)
    end
    def show_extension(unnamed_arg_0 : Bool) : Void
      Binding.bg_QDialog_showExtension_bool(self, unnamed_arg_0)
    end
    protected def initialize(unnamed_arg_0 : QDialogPrivate*, parent : Widget)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(unnamed_arg_0 : QDialogPrivate*, parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(unnamed_arg_0, parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QDialog_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def close_event(unnamed_arg_0 : QCloseEvent*) : Void
      Binding.bg_QDialog_closeEvent_QCloseEvent_X(self, unnamed_arg_0)
    end
    protected def show_event(unnamed_arg_0 : QShowEvent*) : Void
      Binding.bg_QDialog_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : QResizeEvent*) : Void
      Binding.bg_QDialog_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def context_menu_event(unnamed_arg_0 : QContextMenuEvent*) : Void
      Binding.bg_QDialog_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : QEvent*) : Bool
      Binding.bg_QDialog_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def adjust_position(unnamed_arg_0 : Widget) : Void
      Binding.bg_QDialog_adjustPosition_QWidget_X(self, unnamed_arg_0)
    end
  end
  class Label < Frame
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLabel_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLabel_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QLabel_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : QMouseEvent*){ self.mouse_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : QMouseEvent*){ self.mouse_move_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : QMouseEvent*){ self.mouse_release_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : QFocusEvent*){ self.focus_in_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : QFocusEvent*){ self.focus_out_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QLabel_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : QMouseEvent*){ self.mouse_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : QMouseEvent*){ self.mouse_move_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : QMouseEvent*){ self.mouse_release_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : QFocusEvent*){ self.focus_in_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : QFocusEvent*){ self.focus_out_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QLabel_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : QMouseEvent*){ self.mouse_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : QMouseEvent*){ self.mouse_move_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : QMouseEvent*){ self.mouse_release_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : QFocusEvent*){ self.focus_in_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : QFocusEvent*){ self.focus_out_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String)
      unwrap = Binding.bg_QLabel_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : QMouseEvent*){ self.mouse_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : QMouseEvent*){ self.mouse_move_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : QMouseEvent*){ self.mouse_release_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : QFocusEvent*){ self.focus_in_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : QFocusEvent*){ self.focus_out_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget)
      unwrap = Binding.bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : QMouseEvent*){ self.mouse_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : QMouseEvent*){ self.mouse_move_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : QMouseEvent*){ self.mouse_release_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : QFocusEvent*){ self.focus_in_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : QFocusEvent*){ self.focus_out_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(Qt::Converter::QString.wrap(text), parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : QMouseEvent*){ self.mouse_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : QMouseEvent*){ self.mouse_move_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : QMouseEvent*){ self.mouse_release_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : QFocusEvent*){ self.focus_in_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : QFocusEvent*){ self.focus_out_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_text_(self))
    end
    def pixmap() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QLabel_pixmap_(self))
    end
    def picture() : QPicture*
      Binding.bg_QLabel_picture_(self)
    end
    def movie() : QMovie*
      Binding.bg_QLabel_movie_(self)
    end
    def text_format() : TextFormat
      TextFormat.new(unwrap: Binding.bg_QLabel_textFormat_(self))
    end
    def text_format=(unnamed_arg_0 : TextFormat) : Void
      Binding.bg_QLabel_setTextFormat_Qt__TextFormat(self, unnamed_arg_0)
    end
    def alignment() : Alignment
      Alignment.new(unwrap: Binding.bg_QLabel_alignment_(self))
    end
    def alignment=(unnamed_arg_0 : Alignment) : Void
      Binding.bg_QLabel_setAlignment_Qt__Alignment(self, unnamed_arg_0)
    end
    def word_wrap=(on : Bool) : Void
      Binding.bg_QLabel_setWordWrap_bool(self, on)
    end
    def word_wrap() : Bool
      Binding.bg_QLabel_wordWrap_(self)
    end
    def indent() : Int32
      Binding.bg_QLabel_indent_(self)
    end
    def indent=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setIndent_int(self, unnamed_arg_0)
    end
    def margin() : Int32
      Binding.bg_QLabel_margin_(self)
    end
    def margin=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setMargin_int(self, unnamed_arg_0)
    end
    def has_scaled_contents?() : Bool
      Binding.bg_QLabel_hasScaledContents_(self)
    end
    def scaled_contents=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLabel_setScaledContents_bool(self, unnamed_arg_0)
    end
    def size_hint() : QSize*
      Binding.bg_QLabel_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QLabel_minimumSizeHint_(self)
    end
    def buddy=(unnamed_arg_0 : Widget) : Void
      Binding.bg_QLabel_setBuddy_QWidget_X(self, unnamed_arg_0)
    end
    def buddy() : Widget
      Widget.new(unwrap: Binding.bg_QLabel_buddy_(self))
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLabel_heightForWidth_int(self, unnamed_arg_0)
    end
    def open_external_links() : Bool
      Binding.bg_QLabel_openExternalLinks_(self)
    end
    def open_external_links=(open : Bool) : Void
      Binding.bg_QLabel_setOpenExternalLinks_bool(self, open)
    end
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    def text_interaction_flags() : TextInteractionFlags
      TextInteractionFlags.new(unwrap: Binding.bg_QLabel_textInteractionFlags_(self))
    end
    def set_selection(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLabel_setSelection_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    def has_selected_text?() : Bool
      Binding.bg_QLabel_hasSelectedText_(self)
    end
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_selectedText_(self))
    end
    def selection_start() : Int32
      Binding.bg_QLabel_selectionStart_(self)
    end
    def text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLabel_setText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def pixmap=(unnamed_arg_0 : Pixmap) : Void
      Binding.bg_QLabel_setPixmap_const_QPixmap_R(self, unnamed_arg_0)
    end
    def picture=(unnamed_arg_0 : QPicture*) : Void
      Binding.bg_QLabel_setPicture_const_QPicture_R(self, unnamed_arg_0)
    end
    def movie=(movie : QMovie*) : Void
      Binding.bg_QLabel_setMovie_QMovie_X(self, movie)
    end
    def num=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setNum_int(self, unnamed_arg_0)
    end
    def num=(unnamed_arg_0 : Float64) : Void
      Binding.bg_QLabel_setNum_double(self, unnamed_arg_0)
    end
    def clear() : Void
      Binding.bg_QLabel_clear_(self)
    end
    def link_activated(link : String) : Void
      Binding.bg_QLabel_linkActivated_const_QString_R(self, Qt::Converter::QString.wrap(link))
    end
    def on_link_activated(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLabel_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(link : CrystalString){ block.call(Qt::Converter::QString.unwrap(link)) })))
    end
    def link_hovered(link : String) : Void
      Binding.bg_QLabel_linkHovered_const_QString_R(self, Qt::Converter::QString.wrap(link))
    end
    def on_link_hovered(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLabel_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(link : CrystalString){ block.call(Qt::Converter::QString.unwrap(link)) })))
    end
    protected def event(e : QEvent*) : Bool
      Binding.bg_QLabel_event_QEvent_X(self, e)
    end
    protected def key_press_event(ev : QKeyEvent*) : Void
      Binding.bg_QLabel_keyPressEvent_QKeyEvent_X(self, ev)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QLabel_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QLabel_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(ev : QMouseEvent*) : Void
      Binding.bg_QLabel_mousePressEvent_QMouseEvent_X(self, ev)
    end
    protected def mouse_move_event(ev : QMouseEvent*) : Void
      Binding.bg_QLabel_mouseMoveEvent_QMouseEvent_X(self, ev)
    end
    protected def mouse_release_event(ev : QMouseEvent*) : Void
      Binding.bg_QLabel_mouseReleaseEvent_QMouseEvent_X(self, ev)
    end
    protected def context_menu_event(ev : QContextMenuEvent*) : Void
      Binding.bg_QLabel_contextMenuEvent_QContextMenuEvent_X(self, ev)
    end
    protected def focus_in_event(ev : QFocusEvent*) : Void
      Binding.bg_QLabel_focusInEvent_QFocusEvent_X(self, ev)
    end
    protected def focus_out_event(ev : QFocusEvent*) : Void
      Binding.bg_QLabel_focusOutEvent_QFocusEvent_X(self, ev)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QLabel_focusNextPrevChild_bool(self, next_)
    end
  end
  class LcdNumber < Frame
    enum Mode : UInt32
      Hex = 0
      Dec = 1
      Oct = 2
      Bin = 3
    end
    enum SegmentStyle : UInt32
      Outline = 0
      Filled = 1
      Flat = 2
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLCDNumber_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLCDNumber_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QLCDNumber_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLCDNumber_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QLCDNumber_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLCDNumber_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(num_digits : UInt32)
      unwrap = Binding.bg_QLCDNumber_CONSTRUCT_uint(num_digits)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLCDNumber_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(num_digits : UInt32, parent : Widget)
      unwrap = Binding.bg_QLCDNumber_CONSTRUCT_uint_QWidget_X(num_digits, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLCDNumber_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def small_decimal_point() : Bool
      Binding.bg_QLCDNumber_smallDecimalPoint_(self)
    end
    def digit_count() : Int32
      Binding.bg_QLCDNumber_digitCount_(self)
    end
    def digit_count=(n_digits : Int32) : Void
      Binding.bg_QLCDNumber_setDigitCount_int(self, n_digits)
    end
    def check_overflow(num : Float64) : Bool
      Binding.bg_QLCDNumber_checkOverflow_double(self, num)
    end
    def check_overflow(num : Int32) : Bool
      Binding.bg_QLCDNumber_checkOverflow_int(self, num)
    end
    def mode() : LcdNumber::Mode
      LcdNumber::Mode.new(unwrap: Binding.bg_QLCDNumber_mode_(self))
    end
    def mode=(unnamed_arg_0 : LcdNumber::Mode) : Void
      Binding.bg_QLCDNumber_setMode_QLCDNumber__Mode(self, unnamed_arg_0)
    end
    def segment_style() : LcdNumber::SegmentStyle
      LcdNumber::SegmentStyle.new(unwrap: Binding.bg_QLCDNumber_segmentStyle_(self))
    end
    def segment_style=(unnamed_arg_0 : LcdNumber::SegmentStyle) : Void
      Binding.bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(self, unnamed_arg_0)
    end
    def value() : Float64
      Binding.bg_QLCDNumber_value_(self)
    end
    def int_value() : Int32
      Binding.bg_QLCDNumber_intValue_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QLCDNumber_sizeHint_(self)
    end
    def display(str : String) : Void
      Binding.bg_QLCDNumber_display_const_QString_R(self, Qt::Converter::QString.wrap(str))
    end
    def display(num : Int32) : Void
      Binding.bg_QLCDNumber_display_int(self, num)
    end
    def display(num : Float64) : Void
      Binding.bg_QLCDNumber_display_double(self, num)
    end
    def set_hex_mode() : Void
      Binding.bg_QLCDNumber_setHexMode_(self)
    end
    def set_dec_mode() : Void
      Binding.bg_QLCDNumber_setDecMode_(self)
    end
    def set_oct_mode() : Void
      Binding.bg_QLCDNumber_setOctMode_(self)
    end
    def set_bin_mode() : Void
      Binding.bg_QLCDNumber_setBinMode_(self)
    end
    def small_decimal_point=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLCDNumber_setSmallDecimalPoint_bool(self, unnamed_arg_0)
    end
    def overflow() : Void
      Binding.bg_QLCDNumber_overflow_(self)
    end
    def on_overflow(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLCDNumber_overflow_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(e : QEvent*) : Bool
      Binding.bg_QLCDNumber_event_QEvent_X(self, e)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QLCDNumber_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
  end
  class PushButton < AbstractButton
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QPushButton_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QPushButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QPushButton_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(icon : QIcon*, text : String)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_const_QIcon_R_const_QString_R(icon, Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(icon : QIcon*, text : String, parent : Widget)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(icon, Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QPushButton_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QPushButton_minimumSizeHint_(self)
    end
    def auto_default() : Bool
      Binding.bg_QPushButton_autoDefault_(self)
    end
    def auto_default=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setAutoDefault_bool(self, unnamed_arg_0)
    end
    def default?() : Bool
      Binding.bg_QPushButton_isDefault_(self)
    end
    def default=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setDefault_bool(self, unnamed_arg_0)
    end
    def menu=(menu : Menu) : Void
      Binding.bg_QPushButton_setMenu_QMenu_X(self, menu)
    end
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QPushButton_menu_(self))
    end
    def flat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setFlat_bool(self, unnamed_arg_0)
    end
    def flat?() : Bool
      Binding.bg_QPushButton_isFlat_(self)
    end
    def show_menu() : Void
      Binding.bg_QPushButton_showMenu_(self)
    end
    protected def event(e : QEvent*) : Bool
      Binding.bg_QPushButton_event_QEvent_X(self, e)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QPushButton_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QPushButton_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def focus_in_event(unnamed_arg_0 : QFocusEvent*) : Void
      Binding.bg_QPushButton_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def focus_out_event(unnamed_arg_0 : QFocusEvent*) : Void
      Binding.bg_QPushButton_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionButton*) : Void
      Binding.bg_QPushButton_initStyleOption_QStyleOptionButton_X(self, option)
    end
    protected def initialize(dd : QPushButtonPrivate*)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_QPushButtonPrivate_R(dd)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QPushButtonPrivate*, parent : Widget)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_QPushButtonPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class CheckBox < AbstractButton
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QCheckBox_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QCheckBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QCheckBox_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCheckBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QCheckBox_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCheckBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String)
      unwrap = Binding.bg_QCheckBox_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCheckBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget)
      unwrap = Binding.bg_QCheckBox_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : QPoint*){ self.hit_button(pos) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCheckBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QCheckBox_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QCheckBox_minimumSizeHint_(self)
    end
    def set_tristate() : Void
      Binding.bg_QCheckBox_setTristate_(self)
    end
    def tristate=(y : Bool) : Void
      Binding.bg_QCheckBox_setTristate_bool(self, y)
    end
    def tristate?() : Bool
      Binding.bg_QCheckBox_isTristate_(self)
    end
    def check_state() : CheckState
      CheckState.new(unwrap: Binding.bg_QCheckBox_checkState_(self))
    end
    def check_state=(state : CheckState) : Void
      Binding.bg_QCheckBox_setCheckState_Qt__CheckState(self, state)
    end
    def state_changed(unnamed_arg_0 : Int32) : Void
      Binding.bg_QCheckBox_stateChanged_int(self, unnamed_arg_0)
    end
    def on_state_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCheckBox_stateChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    protected def event(e : QEvent*) : Bool
      Binding.bg_QCheckBox_event_QEvent_X(self, e)
    end
    protected def hit_button(pos : Binding::Point) : Bool
      Binding.bg_QCheckBox_hitButton_const_QPoint_R(self, pos)
    end
    protected def check_state_set() : Void
      Binding.bg_QCheckBox_checkStateSet_(self)
    end
    protected def next_check_state() : Void
      Binding.bg_QCheckBox_nextCheckState_(self)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QCheckBox_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionButton*) : Void
      Binding.bg_QCheckBox_initStyleOption_QStyleOptionButton_X(self, option)
    end
  end
  class CoreApplication < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QCoreApplication_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QCoreApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(argc : Int32*, argv : UInt8**)
      unwrap = Binding.bg_QCoreApplication_CONSTRUCT_int_R_char_XX(argc, argv)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CoreApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCoreApplication.new(
      bg_QCoreApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QCoreApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCoreApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32)
      unwrap = Binding.bg_QCoreApplication_CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CoreApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCoreApplication.new(
      bg_QCoreApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QCoreApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCoreApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.arguments() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QCoreApplication_arguments_STATIC_())
    end
    def self.attribute=(attribute : ApplicationAttribute) : Void
      Binding.bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute(attribute)
    end
    def self.set_attribute(attribute : ApplicationAttribute, on : Bool) : Void
      Binding.bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(attribute, on)
    end
    def self.test_attribute(attribute : ApplicationAttribute) : Bool
      Binding.bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(attribute)
    end
    def self.organization_domain=(org_domain : String) : Void
      Binding.bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(Qt::Converter::QString.wrap(org_domain))
    end
    def self.organization_domain() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_organizationDomain_STATIC_())
    end
    def self.organization_name=(org_name : String) : Void
      Binding.bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(Qt::Converter::QString.wrap(org_name))
    end
    def self.organization_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_organizationName_STATIC_())
    end
    def self.application_name=(application : String) : Void
      Binding.bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(Qt::Converter::QString.wrap(application))
    end
    def self.application_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationName_STATIC_())
    end
    def self.application_version=(version : String) : Void
      Binding.bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(Qt::Converter::QString.wrap(version))
    end
    def self.application_version() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationVersion_STATIC_())
    end
    def self.setuid_allowed=(allow : Bool) : Void
      Binding.bg_QCoreApplication_setSetuidAllowed_STATIC_bool(allow)
    end
    def self.setuid_allowed?() : Bool
      Binding.bg_QCoreApplication_isSetuidAllowed_STATIC_()
    end
    def self.instance() : CoreApplication
      CoreApplication.new(unwrap: Binding.bg_QCoreApplication_instance_STATIC_())
    end
    def self.exec() : Int32
      Binding.bg_QCoreApplication_exec_STATIC_()
    end
    def self.process_events() : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_()
    end
    def self.process_events(flags : EventLoop::ProcessEventsFlags) : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(flags)
    end
    def self.process_events(flags : EventLoop::ProcessEventsFlags, maxtime : Int32) : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(flags, maxtime)
    end
    def self.exit() : Void
      Binding.bg_QCoreApplication_exit_STATIC_()
    end
    def self.exit(retcode : Int32) : Void
      Binding.bg_QCoreApplication_exit_STATIC_int(retcode)
    end
    def self.send_event(receiver : Object, event : QEvent*) : Bool
      Binding.bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(receiver, event)
    end
    def self.post_event(receiver : Object, event : QEvent*) : Void
      Binding.bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X(receiver, event)
    end
    def self.post_event(receiver : Object, event : QEvent*, priority : Int32) : Void
      Binding.bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(receiver, event, priority)
    end
    def self.send_posted_events() : Void
      Binding.bg_QCoreApplication_sendPostedEvents_STATIC_()
    end
    def self.send_posted_events(receiver : Object) : Void
      Binding.bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X(receiver)
    end
    def self.send_posted_events(receiver : Object, event_type : Int32) : Void
      Binding.bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(receiver, event_type)
    end
    def self.remove_posted_events(receiver : Object) : Void
      Binding.bg_QCoreApplication_removePostedEvents_STATIC_QObject_X(receiver)
    end
    def self.remove_posted_events(receiver : Object, event_type : Int32) : Void
      Binding.bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(receiver, event_type)
    end
    def self.has_pending_events?() : Bool
      Binding.bg_QCoreApplication_hasPendingEvents_STATIC_()
    end
    def self.event_dispatcher() : AbstractEventDispatcher
      AbstractEventDispatcher.new(unwrap: Binding.bg_QCoreApplication_eventDispatcher_STATIC_())
    end
    def self.event_dispatcher=(event_dispatcher : AbstractEventDispatcher) : Void
      Binding.bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(event_dispatcher)
    end
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : QEvent*) : Bool
      Binding.bg_QCoreApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    def self.starting_up() : Bool
      Binding.bg_QCoreApplication_startingUp_STATIC_()
    end
    def self.closing_down() : Bool
      Binding.bg_QCoreApplication_closingDown_STATIC_()
    end
    def self.application_dir_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationDirPath_STATIC_())
    end
    def self.application_file_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationFilePath_STATIC_())
    end
    def self.application_pid() : Int64
      Binding.bg_QCoreApplication_applicationPid_STATIC_()
    end
    def self.library_paths=(unnamed_arg_0 : Enumerable(String)) : Void
      Binding.bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(BindgenHelper.wrap_container(QList_QString, unnamed_arg_0))
    end
    def self.library_paths() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QCoreApplication_libraryPaths_STATIC_())
    end
    def self.add_library_path(unnamed_arg_0 : String) : Void
      Binding.bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.remove_library_path(unnamed_arg_0 : String) : Void
      Binding.bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.install_translator(message_file : QTranslator*) : Bool
      Binding.bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(message_file)
    end
    def self.remove_translator(message_file : QTranslator*) : Bool
      Binding.bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(message_file)
    end
    def self.translate(context : UInt8*, key : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X(context, key))
    end
    def self.translate(context : UInt8*, key : UInt8*, disambiguation : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X(context, key, disambiguation))
    end
    def self.translate(context : UInt8*, key : UInt8*, disambiguation : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(context, key, disambiguation, n))
    end
    def self.flush() : Void
      Binding.bg_QCoreApplication_flush_STATIC_()
    end
    def install_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def remove_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def self.quit_lock_enabled?() : Bool
      Binding.bg_QCoreApplication_isQuitLockEnabled_STATIC_()
    end
    def self.quit_lock_enabled=(enabled : Bool) : Void
      Binding.bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(enabled)
    end
    def self.quit() : Void
      Binding.bg_QCoreApplication_quit_STATIC_()
    end
    def organization_name_changed() : Void
      Binding.bg_QCoreApplication_organizationNameChanged_(self)
    end
    def on_organization_name_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_organizationNameChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def organization_domain_changed() : Void
      Binding.bg_QCoreApplication_organizationDomainChanged_(self)
    end
    def on_organization_domain_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_organizationDomainChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def application_name_changed() : Void
      Binding.bg_QCoreApplication_applicationNameChanged_(self)
    end
    def on_application_name_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_applicationNameChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def application_version_changed() : Void
      Binding.bg_QCoreApplication_applicationVersionChanged_(self)
    end
    def on_application_version_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_applicationVersionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QCoreApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def compress_event(unnamed_arg_0 : QEvent*, receiver : Object, unnamed_arg_2 : QPostEventList*) : Bool
      Binding.bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
    protected def initialize(p : QCoreApplicationPrivate*)
      unwrap = Binding.bg_QCoreApplication_CONSTRUCT_QCoreApplicationPrivate_R(p)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CoreApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCoreApplication.new(
      bg_QCoreApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QCoreApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCoreApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class GuiApplication < CoreApplication
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGuiApplication_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGuiApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(argc : Int32*, argv : UInt8**)
      unwrap = Binding.bg_QGuiApplication_CONSTRUCT_int_R_char_XX(argc, argv)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GuiApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGuiApplication.new(
      bg_QGuiApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QGuiApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGuiApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32)
      unwrap = Binding.bg_QGuiApplication_CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GuiApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGuiApplication.new(
      bg_QGuiApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QGuiApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGuiApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.application_display_name=(name : String) : Void
      Binding.bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    def self.application_display_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_applicationDisplayName_STATIC_())
    end
    def self.desktop_file_name=(name : String) : Void
      Binding.bg_QGuiApplication_setDesktopFileName_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    def self.desktop_file_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_desktopFileName_STATIC_())
    end
    def self.all_windows() : QWindowList*
      Binding.bg_QGuiApplication_allWindows_STATIC_()
    end
    def self.top_level_windows() : QWindowList*
      Binding.bg_QGuiApplication_topLevelWindows_STATIC_()
    end
    def self.top_level_at(pos : Binding::Point) : QWindow*
      Binding.bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(pos)
    end
    def self.window_icon=(icon : QIcon*) : Void
      Binding.bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(icon)
    end
    def self.window_icon() : QIcon*
      Binding.bg_QGuiApplication_windowIcon_STATIC_()
    end
    def self.platform_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_platformName_STATIC_())
    end
    def self.modal_window() : QWindow*
      Binding.bg_QGuiApplication_modalWindow_STATIC_()
    end
    def self.focus_window() : QWindow*
      Binding.bg_QGuiApplication_focusWindow_STATIC_()
    end
    def self.focus_object() : Object
      Object.new(unwrap: Binding.bg_QGuiApplication_focusObject_STATIC_())
    end
    def self.primary_screen() : QScreen*
      Binding.bg_QGuiApplication_primaryScreen_STATIC_()
    end
    def self.override_cursor() : QCursor*
      Binding.bg_QGuiApplication_overrideCursor_STATIC_()
    end
    def self.override_cursor=(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0)
    end
    def self.change_override_cursor(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0)
    end
    def self.restore_override_cursor() : Void
      Binding.bg_QGuiApplication_restoreOverrideCursor_STATIC_()
    end
    def self.font() : QFont*
      Binding.bg_QGuiApplication_font_STATIC_()
    end
    def self.font=(unnamed_arg_0 : QFont*) : Void
      Binding.bg_QGuiApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0)
    end
    def self.clipboard() : QClipboard*
      Binding.bg_QGuiApplication_clipboard_STATIC_()
    end
    def self.palette() : QPalette*
      Binding.bg_QGuiApplication_palette_STATIC_()
    end
    def self.palette=(pal : QPalette*) : Void
      Binding.bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(pal)
    end
    def self.keyboard_modifiers() : KeyboardModifiers
      KeyboardModifiers.new(unwrap: Binding.bg_QGuiApplication_keyboardModifiers_STATIC_())
    end
    def self.query_keyboard_modifiers() : KeyboardModifiers
      KeyboardModifiers.new(unwrap: Binding.bg_QGuiApplication_queryKeyboardModifiers_STATIC_())
    end
    def self.mouse_buttons() : MouseButtons
      MouseButtons.new(unwrap: Binding.bg_QGuiApplication_mouseButtons_STATIC_())
    end
    def self.layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(direction)
    end
    def self.layout_direction() : LayoutDirection
      LayoutDirection.new(unwrap: Binding.bg_QGuiApplication_layoutDirection_STATIC_())
    end
    def self.right_to_left?() : Bool
      Binding.bg_QGuiApplication_isRightToLeft_STATIC_()
    end
    def self.left_to_right?() : Bool
      Binding.bg_QGuiApplication_isLeftToRight_STATIC_()
    end
    def self.style_hints() : QStyleHints*
      Binding.bg_QGuiApplication_styleHints_STATIC_()
    end
    def self.desktop_settings_aware=(on : Bool) : Void
      Binding.bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(on)
    end
    def self.desktop_settings_aware() : Bool
      Binding.bg_QGuiApplication_desktopSettingsAware_STATIC_()
    end
    def self.input_method() : QInputMethod*
      Binding.bg_QGuiApplication_inputMethod_STATIC_()
    end
    def self.platform_native_interface() : QPlatformNativeInterface*
      Binding.bg_QGuiApplication_platformNativeInterface_STATIC_()
    end
    def self.quit_on_last_window_closed=(quit : Bool) : Void
      Binding.bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(quit)
    end
    def self.quit_on_last_window_closed() : Bool
      Binding.bg_QGuiApplication_quitOnLastWindowClosed_STATIC_()
    end
    def self.application_state() : ApplicationState
      ApplicationState.new(unwrap: Binding.bg_QGuiApplication_applicationState_STATIC_())
    end
    def self.exec() : Int32
      Binding.bg_QGuiApplication_exec_STATIC_()
    end
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : QEvent*) : Bool
      Binding.bg_QGuiApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    def session_restored?() : Bool
      Binding.bg_QGuiApplication_isSessionRestored_(self)
    end
    def session_id() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_sessionId_(self))
    end
    def session_key() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_sessionKey_(self))
    end
    def saving_session?() : Bool
      Binding.bg_QGuiApplication_isSavingSession_(self)
    end
    def self.fallback_session_management_enabled?() : Bool
      Binding.bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_()
    end
    def self.fallback_session_management_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(unnamed_arg_0)
    end
    def self.sync() : Void
      Binding.bg_QGuiApplication_sync_STATIC_()
    end
    def font_database_changed() : Void
      Binding.bg_QGuiApplication_fontDatabaseChanged_(self)
    end
    def on_font_database_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_fontDatabaseChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def screen_added(screen : QScreen*) : Void
      Binding.bg_QGuiApplication_screenAdded_QScreen_X(self, screen)
    end
    def on_screen_added(&block : Proc(QScreen*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_screenAdded_CONNECT_CrystalProc_void__QScreenX_(self, BindgenHelper.wrap_proc(->(screen : QScreen*){ block.call(screen) })))
    end
    def screen_removed(screen : QScreen*) : Void
      Binding.bg_QGuiApplication_screenRemoved_QScreen_X(self, screen)
    end
    def on_screen_removed(&block : Proc(QScreen*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_screenRemoved_CONNECT_CrystalProc_void__QScreenX_(self, BindgenHelper.wrap_proc(->(screen : QScreen*){ block.call(screen) })))
    end
    def primary_screen_changed(screen : QScreen*) : Void
      Binding.bg_QGuiApplication_primaryScreenChanged_QScreen_X(self, screen)
    end
    def on_primary_screen_changed(&block : Proc(QScreen*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_primaryScreenChanged_CONNECT_CrystalProc_void__QScreenX_(self, BindgenHelper.wrap_proc(->(screen : QScreen*){ block.call(screen) })))
    end
    def last_window_closed() : Void
      Binding.bg_QGuiApplication_lastWindowClosed_(self)
    end
    def on_last_window_closed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_lastWindowClosed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def focus_object_changed(focus_object : Object) : Void
      Binding.bg_QGuiApplication_focusObjectChanged_QObject_X(self, focus_object)
    end
    def on_focus_object_changed(&block : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_focusObjectChanged_CONNECT_CrystalProc_void__QObjectX_(self, BindgenHelper.wrap_proc(->(focus_object : QObject*){ block.call(Object.new(unwrap: focus_object)) })))
    end
    def focus_window_changed(focus_window : QWindow*) : Void
      Binding.bg_QGuiApplication_focusWindowChanged_QWindow_X(self, focus_window)
    end
    def on_focus_window_changed(&block : Proc(QWindow*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_focusWindowChanged_CONNECT_CrystalProc_void__QWindowX_(self, BindgenHelper.wrap_proc(->(focus_window : QWindow*){ block.call(focus_window) })))
    end
    def application_state_changed(state : ApplicationState) : Void
      Binding.bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(self, state)
    end
    def on_application_state_changed(&block : Proc(ApplicationState, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_applicationStateChanged_CONNECT_CrystalProc_void__Qt__ApplicationState_(self, BindgenHelper.wrap_proc(->(state : ApplicationState){ block.call(ApplicationState.new(unwrap: state)) })))
    end
    def layout_direction_changed(direction : LayoutDirection) : Void
      Binding.bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(self, direction)
    end
    def on_layout_direction_changed(&block : Proc(LayoutDirection, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_layoutDirectionChanged_CONNECT_CrystalProc_void__Qt__LayoutDirection_(self, BindgenHelper.wrap_proc(->(direction : LayoutDirection){ block.call(LayoutDirection.new(unwrap: direction)) })))
    end
    def commit_data_request(session_manager : QSessionManager) : Void
      Binding.bg_QGuiApplication_commitDataRequest_QSessionManager_R(self, session_manager)
    end
    def on_commit_data_request(&block : Proc(QSessionManager, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_commitDataRequest_CONNECT_CrystalProc_void__QSessionManagerR_(self, BindgenHelper.wrap_proc(->(session_manager : QSessionManager*){ block.call(QSessionManager.new(unwrap: session_manager)) })))
    end
    def save_state_request(session_manager : QSessionManager) : Void
      Binding.bg_QGuiApplication_saveStateRequest_QSessionManager_R(self, session_manager)
    end
    def on_save_state_request(&block : Proc(QSessionManager, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_saveStateRequest_CONNECT_CrystalProc_void__QSessionManagerR_(self, BindgenHelper.wrap_proc(->(session_manager : QSessionManager*){ block.call(QSessionManager.new(unwrap: session_manager)) })))
    end
    def palette_changed(pal : QPalette*) : Void
      Binding.bg_QGuiApplication_paletteChanged_const_QPalette_R(self, pal)
    end
    def on_palette_changed(&block : Proc(QPalette*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_paletteChanged_CONNECT_CrystalProc_void__const_QPaletteR_(self, BindgenHelper.wrap_proc(->(pal : QPalette*){ block.call(pal) })))
    end
    def application_display_name_changed() : Void
      Binding.bg_QGuiApplication_applicationDisplayNameChanged_(self)
    end
    def on_application_display_name_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_applicationDisplayNameChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QGuiApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def compress_event(unnamed_arg_0 : QEvent*, receiver : Object, unnamed_arg_2 : QPostEventList*) : Bool
      Binding.bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
    protected def initialize(p : QGuiApplicationPrivate*)
      unwrap = Binding.bg_QGuiApplication_CONSTRUCT_QGuiApplicationPrivate_R(p)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GuiApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGuiApplication.new(
      bg_QGuiApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QGuiApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGuiApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class Application < GuiApplication
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QApplication_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(argc : Int32*, argv : UInt8**)
      unwrap = Binding.bg_QApplication_CONSTRUCT_int_R_char_XX(argc, argv)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Application)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQApplication.new(
      bg_QApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32)
      unwrap = Binding.bg_QApplication_CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Application)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQApplication.new(
      bg_QApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(unnamed_arg_0, Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.style() : QStyle*
      Binding.bg_QApplication_style_STATIC_()
    end
    def self.style=(unnamed_arg_0 : QStyle*) : Void
      Binding.bg_QApplication_setStyle_STATIC_QStyle_X(unnamed_arg_0)
    end
    def self.set_style(unnamed_arg_0 : String) : QStyle*
      Binding.bg_QApplication_setStyle_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.color_spec() : Int32
      Binding.bg_QApplication_colorSpec_STATIC_()
    end
    def self.color_spec=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setColorSpec_STATIC_int(unnamed_arg_0)
    end
    def self.palette(unnamed_arg_0 : Widget) : QPalette*
      Binding.bg_QApplication_palette_STATIC_const_QWidget_X(unnamed_arg_0)
    end
    def self.palette(class_name : UInt8*) : QPalette*
      Binding.bg_QApplication_palette_STATIC_const_char_X(class_name)
    end
    def self.palette=(unnamed_arg_0 : QPalette*) : Void
      Binding.bg_QApplication_setPalette_STATIC_const_QPalette_R(unnamed_arg_0)
    end
    def self.set_palette(unnamed_arg_0 : QPalette*, class_name : UInt8*) : Void
      Binding.bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(unnamed_arg_0, class_name)
    end
    def self.font() : QFont*
      Binding.bg_QApplication_font_STATIC_()
    end
    def self.font(unnamed_arg_0 : Widget) : QFont*
      Binding.bg_QApplication_font_STATIC_const_QWidget_X(unnamed_arg_0)
    end
    def self.font(class_name : UInt8*) : QFont*
      Binding.bg_QApplication_font_STATIC_const_char_X(class_name)
    end
    def self.font=(unnamed_arg_0 : QFont*) : Void
      Binding.bg_QApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0)
    end
    def self.set_font(unnamed_arg_0 : QFont*, class_name : UInt8*) : Void
      Binding.bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(unnamed_arg_0, class_name)
    end
    def self.font_metrics() : QFontMetrics*
      Binding.bg_QApplication_fontMetrics_STATIC_()
    end
    def self.window_icon=(icon : QIcon*) : Void
      Binding.bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(icon)
    end
    def self.window_icon() : QIcon*
      Binding.bg_QApplication_windowIcon_STATIC_()
    end
    def self.all_widgets() : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QApplication_allWidgets_STATIC_())
    end
    def self.top_level_widgets() : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QApplication_topLevelWidgets_STATIC_())
    end
    def self.desktop() : QDesktopWidget*
      Binding.bg_QApplication_desktop_STATIC_()
    end
    def self.active_popup_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activePopupWidget_STATIC_())
    end
    def self.active_modal_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activeModalWidget_STATIC_())
    end
    def self.focus_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_focusWidget_STATIC_())
    end
    def self.active_window() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activeWindow_STATIC_())
    end
    def self.active_window=(act : Widget) : Void
      Binding.bg_QApplication_setActiveWindow_STATIC_QWidget_X(act)
    end
    def self.widget_at(p : Binding::Point) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_widgetAt_STATIC_const_QPoint_R(p))
    end
    def self.widget_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_widgetAt_STATIC_int_int(x, y))
    end
    def self.top_level_at(p : Binding::Point) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_topLevelAt_STATIC_const_QPoint_R(p))
    end
    def self.top_level_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_topLevelAt_STATIC_int_int(x, y))
    end
    def self.beep() : Void
      Binding.bg_QApplication_beep_STATIC_()
    end
    def self.alert(widget : Widget) : Void
      Binding.bg_QApplication_alert_STATIC_QWidget_X(widget)
    end
    def self.alert(widget : Widget, duration : Int32) : Void
      Binding.bg_QApplication_alert_STATIC_QWidget_X_int(widget, duration)
    end
    def self.cursor_flash_time=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setCursorFlashTime_STATIC_int(unnamed_arg_0)
    end
    def self.cursor_flash_time() : Int32
      Binding.bg_QApplication_cursorFlashTime_STATIC_()
    end
    def self.double_click_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setDoubleClickInterval_STATIC_int(unnamed_arg_0)
    end
    def self.double_click_interval() : Int32
      Binding.bg_QApplication_doubleClickInterval_STATIC_()
    end
    def self.keyboard_input_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setKeyboardInputInterval_STATIC_int(unnamed_arg_0)
    end
    def self.keyboard_input_interval() : Int32
      Binding.bg_QApplication_keyboardInputInterval_STATIC_()
    end
    def self.wheel_scroll_lines=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setWheelScrollLines_STATIC_int(unnamed_arg_0)
    end
    def self.wheel_scroll_lines() : Int32
      Binding.bg_QApplication_wheelScrollLines_STATIC_()
    end
    def self.global_strut=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(unnamed_arg_0)
    end
    def self.global_strut() : QSize*
      Binding.bg_QApplication_globalStrut_STATIC_()
    end
    def self.start_drag_time=(ms : Int32) : Void
      Binding.bg_QApplication_setStartDragTime_STATIC_int(ms)
    end
    def self.start_drag_time() : Int32
      Binding.bg_QApplication_startDragTime_STATIC_()
    end
    def self.start_drag_distance=(l : Int32) : Void
      Binding.bg_QApplication_setStartDragDistance_STATIC_int(l)
    end
    def self.start_drag_distance() : Int32
      Binding.bg_QApplication_startDragDistance_STATIC_()
    end
    def self.is_effect_enabled(unnamed_arg_0 : UIEffect) : Bool
      Binding.bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0)
    end
    def self.effect_enabled=(unnamed_arg_0 : UIEffect) : Void
      Binding.bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0)
    end
    def self.set_effect_enabled(unnamed_arg_0 : UIEffect, enable : Bool) : Void
      Binding.bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(unnamed_arg_0, enable)
    end
    def self.exec() : Int32
      Binding.bg_QApplication_exec_STATIC_()
    end
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : QEvent*) : Bool
      Binding.bg_QApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    def focus_changed(old : Widget, now : Widget) : Void
      Binding.bg_QApplication_focusChanged_QWidget_X_QWidget_X(self, old, now)
    end
    def on_focus_changed(&block : Proc(Widget, Widget, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QApplication_focusChanged_CONNECT_CrystalProc_void__QWidgetX__QWidgetX_(self, BindgenHelper.wrap_proc(->(old : QWidget*, now : QWidget*){ block.call(Widget.new(unwrap: old), Widget.new(unwrap: now)) })))
    end
    def style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_styleSheet_(self))
    end
    def style_sheet=(sheet : String) : Void
      Binding.bg_QApplication_setStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(sheet))
    end
    def auto_sip_enabled=(enabled : Bool) : Void
      Binding.bg_QApplication_setAutoSipEnabled_const_bool(self, enabled)
    end
    def auto_sip_enabled() : Bool
      Binding.bg_QApplication_autoSipEnabled_(self)
    end
    def self.close_all_windows() : Void
      Binding.bg_QApplication_closeAllWindows_STATIC_()
    end
    def self.about_qt() : Void
      Binding.bg_QApplication_aboutQt_STATIC_()
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def compress_event(unnamed_arg_0 : QEvent*, receiver : Object, unnamed_arg_2 : QPostEventList*) : Bool
      Binding.bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
  end
  class Image 
    enum Format : UInt32
      FormatInvalid = 0
      FormatMono = 1
      FormatMonoLSB = 2
      FormatIndexed8 = 3
      FormatRGB32 = 4
      FormatARGB32 = 5
      FormatARGB32Premultiplied = 6
      FormatRGB16 = 7
      FormatARGB8565Premultiplied = 8
      FormatRGB666 = 9
      FormatARGB6666Premultiplied = 10
      FormatRGB555 = 11
      FormatARGB8555Premultiplied = 12
      FormatRGB888 = 13
      FormatRGB444 = 14
      FormatARGB4444Premultiplied = 15
      FormatRGBX8888 = 16
      FormatRGBA8888 = 17
      FormatRGBA8888Premultiplied = 18
      FormatBGR30 = 19
      FormatA2BGR30Premultiplied = 20
      FormatRGB30 = 21
      FormatA2RGB30Premultiplied = 22
      FormatAlpha8 = 23
      FormatGrayscale8 = 24
      NImageFormats = 25
    end
    enum InvertMode : UInt32
      InvertRgb = 0
      InvertRgba = 1
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QImage_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(size : QSize*, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_QSize_R_QImage__Format(size, format)
    @unwrap = unwrap
    
    end
    def initialize(width : Int32, height : Int32, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_int_int_QImage__Format(width, height, format)
    @unwrap = unwrap
    
    end
    def initialize(data : UInt8*, width : Int32, height : Int32, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_uchar_X_int_int_QImage__Format(data, width, height, format)
    @unwrap = unwrap
    
    end
    def initialize(data : UInt8*, width : Int32, height : Int32, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_uchar_X_int_int_QImage__Format(data, width, height, format)
    @unwrap = unwrap
    
    end
    def initialize(data : UInt8*, width : Int32, height : Int32, bytes_per_line : Int32, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_uchar_X_int_int_int_QImage__Format(data, width, height, bytes_per_line, format)
    @unwrap = unwrap
    
    end
    def initialize(data : UInt8*, width : Int32, height : Int32, bytes_per_line : Int32, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_uchar_X_int_int_int_QImage__Format(data, width, height, bytes_per_line, format)
    @unwrap = unwrap
    
    end
    def initialize(xpm : UInt8**)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_char_Xconst_X(xpm)
    @unwrap = unwrap
    
    end
    def initialize(file_name : String)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file_name))
    @unwrap = unwrap
    
    end
    def initialize(file_name : String, format : UInt8*)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_QString_R_const_char_X(Qt::Converter::QString.wrap(file_name), format)
    @unwrap = unwrap
    
    end
    def swap(other : Image) : Void
      Binding.bg_QImage_swap_QImage_R(self, other)
    end
    def null?() : Bool
      Binding.bg_QImage_isNull_(self)
    end
    def dev_type() : Int32
      Binding.bg_QImage_devType_(self)
    end
    def detach() : Void
      Binding.bg_QImage_detach_(self)
    end
    def detached?() : Bool
      Binding.bg_QImage_isDetached_(self)
    end
    def copy() : Image
      Image.new(unwrap: Binding.bg_QImage_copy_(self))
    end
    def copy(rect : QRect*) : Image
      Image.new(unwrap: Binding.bg_QImage_copy_const_QRect_R(self, rect))
    end
    def copy(x : Int32, y : Int32, w : Int32, h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_copy_int_int_int_int(self, x, y, w, h))
    end
    def format() : Image::Format
      Image::Format.new(unwrap: Binding.bg_QImage_format_(self))
    end
    def convert_to_format(f : Image::Format) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format(self, f))
    end
    def convert_to_format(f : Image::Format, flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(self, f, flags))
    end
    def reinterpret_as_format(f : Image::Format) : Bool
      Binding.bg_QImage_reinterpretAsFormat_QImage__Format(self, f)
    end
    def width() : Int32
      Binding.bg_QImage_width_(self)
    end
    def height() : Int32
      Binding.bg_QImage_height_(self)
    end
    def size() : QSize*
      Binding.bg_QImage_size_(self)
    end
    def rect() : QRect*
      Binding.bg_QImage_rect_(self)
    end
    def depth() : Int32
      Binding.bg_QImage_depth_(self)
    end
    def color_count() : Int32
      Binding.bg_QImage_colorCount_(self)
    end
    def bit_plane_count() : Int32
      Binding.bg_QImage_bitPlaneCount_(self)
    end
    def color_count=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setColorCount_int(self, unnamed_arg_0)
    end
    def all_gray() : Bool
      Binding.bg_QImage_allGray_(self)
    end
    def grayscale?() : Bool
      Binding.bg_QImage_isGrayscale_(self)
    end
    def bits() : UInt8*
      Binding.bg_QImage_bits_(self)
    end
    def const_bits() : UInt8*
      Binding.bg_QImage_constBits_(self)
    end
    def byte_count() : Int32
      Binding.bg_QImage_byteCount_(self)
    end
    def scan_line(unnamed_arg_0 : Int32) : UInt8*
      Binding.bg_QImage_scanLine_int(self, unnamed_arg_0)
    end
    def const_scan_line(unnamed_arg_0 : Int32) : UInt8*
      Binding.bg_QImage_constScanLine_int(self, unnamed_arg_0)
    end
    def bytes_per_line() : Int32
      Binding.bg_QImage_bytesPerLine_(self)
    end
    def valid(x : Int32, y : Int32) : Bool
      Binding.bg_QImage_valid_int_int(self, x, y)
    end
    def valid(pt : Binding::Point) : Bool
      Binding.bg_QImage_valid_const_QPoint_R(self, pt)
    end
    def pixel_index(x : Int32, y : Int32) : Int32
      Binding.bg_QImage_pixelIndex_int_int(self, x, y)
    end
    def pixel_index(pt : Binding::Point) : Int32
      Binding.bg_QImage_pixelIndex_const_QPoint_R(self, pt)
    end
    def set_pixel(x : Int32, y : Int32, index_or_rgb : UInt32) : Void
      Binding.bg_QImage_setPixel_int_int_uint(self, x, y, index_or_rgb)
    end
    def set_pixel(pt : Binding::Point, index_or_rgb : UInt32) : Void
      Binding.bg_QImage_setPixel_const_QPoint_R_uint(self, pt, index_or_rgb)
    end
    def pixel_color(x : Int32, y : Int32) : QColor*
      Binding.bg_QImage_pixelColor_int_int(self, x, y)
    end
    def pixel_color(pt : Binding::Point) : QColor*
      Binding.bg_QImage_pixelColor_const_QPoint_R(self, pt)
    end
    def set_pixel_color(x : Int32, y : Int32, c : QColor*) : Void
      Binding.bg_QImage_setPixelColor_int_int_const_QColor_R(self, x, y, c)
    end
    def set_pixel_color(pt : Binding::Point, c : QColor*) : Void
      Binding.bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(self, pt, c)
    end
    def fill(pixel : UInt32) : Void
      Binding.bg_QImage_fill_uint(self, pixel)
    end
    def fill(color : QColor*) : Void
      Binding.bg_QImage_fill_const_QColor_R(self, color)
    end
    def fill(color : GlobalColor) : Void
      Binding.bg_QImage_fill_Qt__GlobalColor(self, color)
    end
    def has_alpha_channel?() : Bool
      Binding.bg_QImage_hasAlphaChannel_(self)
    end
    def alpha_channel=(alpha_channel : Image) : Void
      Binding.bg_QImage_setAlphaChannel_const_QImage_R(self, alpha_channel)
    end
    def alpha_channel() : Image
      Image.new(unwrap: Binding.bg_QImage_alphaChannel_(self))
    end
    def create_alpha_mask() : Image
      Image.new(unwrap: Binding.bg_QImage_createAlphaMask_(self))
    end
    def create_alpha_mask(flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_createAlphaMask_Qt__ImageConversionFlags(self, flags))
    end
    def create_heuristic_mask() : Image
      Image.new(unwrap: Binding.bg_QImage_createHeuristicMask_(self))
    end
    def create_heuristic_mask(clip_tight : Bool) : Image
      Image.new(unwrap: Binding.bg_QImage_createHeuristicMask_bool(self, clip_tight))
    end
    def scaled(w : Int32, h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_int_int(self, w, h))
    end
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_int_int_Qt__AspectRatioMode(self, w, h, aspect_mode))
    end
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(self, w, h, aspect_mode, mode))
    end
    def scaled(s : QSize*) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_const_QSize_R(self, s))
    end
    def scaled(s : QSize*, aspect_mode : AspectRatioMode) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode(self, s, aspect_mode))
    end
    def scaled(s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(self, s, aspect_mode, mode))
    end
    def scaled_to_width(w : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToWidth_int(self, w))
    end
    def scaled_to_width(w : Int32, mode : TransformationMode) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToWidth_int_Qt__TransformationMode(self, w, mode))
    end
    def scaled_to_height(h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToHeight_int(self, h))
    end
    def scaled_to_height(h : Int32, mode : TransformationMode) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToHeight_int_Qt__TransformationMode(self, h, mode))
    end
    def transformed(matrix : QMatrix*) : Image
      Image.new(unwrap: Binding.bg_QImage_transformed_const_QMatrix_R(self, matrix))
    end
    def transformed(matrix : QMatrix*, mode : TransformationMode) : Image
      Image.new(unwrap: Binding.bg_QImage_transformed_const_QMatrix_R_Qt__TransformationMode(self, matrix, mode))
    end
    def self.true_matrix(unnamed_arg_0 : QMatrix*, w : Int32, h : Int32) : QMatrix*
      Binding.bg_QImage_trueMatrix_STATIC_const_QMatrix_R_int_int(unnamed_arg_0, w, h)
    end
    def transformed(matrix : QTransform*) : Image
      Image.new(unwrap: Binding.bg_QImage_transformed_const_QTransform_R(self, matrix))
    end
    def transformed(matrix : QTransform*, mode : TransformationMode) : Image
      Image.new(unwrap: Binding.bg_QImage_transformed_const_QTransform_R_Qt__TransformationMode(self, matrix, mode))
    end
    def self.true_matrix(unnamed_arg_0 : QTransform*, w : Int32, h : Int32) : QTransform*
      Binding.bg_QImage_trueMatrix_STATIC_const_QTransform_R_int_int(unnamed_arg_0, w, h)
    end
    def mirrored() : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_(self))
    end
    def mirrored(horizontally : Bool) : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_bool(self, horizontally))
    end
    def mirrored(horizontally : Bool, vertically : Bool) : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_bool_bool(self, horizontally, vertically))
    end
    def rgb_swapped() : Image
      Image.new(unwrap: Binding.bg_QImage_rgbSwapped_(self))
    end
    def invert_pixels() : Void
      Binding.bg_QImage_invertPixels_(self)
    end
    def invert_pixels(unnamed_arg_0 : Image::InvertMode) : Void
      Binding.bg_QImage_invertPixels_QImage__InvertMode(self, unnamed_arg_0)
    end
    def load(device : QIODevice*, format : UInt8*) : Bool
      Binding.bg_QImage_load_QIODevice_X_const_char_X(self, device, format)
    end
    def load(file_name : String) : Bool
      Binding.bg_QImage_load_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    def load(file_name : String, format : UInt8*) : Bool
      Binding.bg_QImage_load_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    def load_from_data(buf : UInt8*, len : Int32) : Bool
      Binding.bg_QImage_loadFromData_const_uchar_X_int(self, buf, len)
    end
    def load_from_data(buf : UInt8*, len : Int32, format : UInt8*) : Bool
      Binding.bg_QImage_loadFromData_const_uchar_X_int_const_char_X(self, buf, len, format)
    end
    def load_from_data(data : QByteArray*) : Bool
      Binding.bg_QImage_loadFromData_const_QByteArray_R(self, data)
    end
    def load_from_data(data : QByteArray*, aformat : UInt8*) : Bool
      Binding.bg_QImage_loadFromData_const_QByteArray_R_const_char_X(self, data, aformat)
    end
    def save(file_name : String) : Bool
      Binding.bg_QImage_save_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    def save(file_name : String, format : UInt8*) : Bool
      Binding.bg_QImage_save_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    def save(file_name : String, format : UInt8*, quality : Int32) : Bool
      Binding.bg_QImage_save_const_QString_R_const_char_X_int(self, Qt::Converter::QString.wrap(file_name), format, quality)
    end
    def save(device : QIODevice*) : Bool
      Binding.bg_QImage_save_QIODevice_X(self, device)
    end
    def save(device : QIODevice*, format : UInt8*) : Bool
      Binding.bg_QImage_save_QIODevice_X_const_char_X(self, device, format)
    end
    def save(device : QIODevice*, format : UInt8*, quality : Int32) : Bool
      Binding.bg_QImage_save_QIODevice_X_const_char_X_int(self, device, format, quality)
    end
    def self.from_data(data : UInt8*, size : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_uchar_X_int(data, size))
    end
    def self.from_data(data : UInt8*, size : Int32, format : UInt8*) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(data, size, format))
    end
    def self.from_data(data : QByteArray*) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_QByteArray_R(data))
    end
    def self.from_data(data : QByteArray*, format : UInt8*) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(data, format))
    end
    def cache_key() : Int64
      Binding.bg_QImage_cacheKey_(self)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QImage_paintEngine_(self)
    end
    def dots_per_meter_x() : Int32
      Binding.bg_QImage_dotsPerMeterX_(self)
    end
    def dots_per_meter_y() : Int32
      Binding.bg_QImage_dotsPerMeterY_(self)
    end
    def dots_per_meter_x=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setDotsPerMeterX_int(self, unnamed_arg_0)
    end
    def dots_per_meter_y=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setDotsPerMeterY_int(self, unnamed_arg_0)
    end
    def offset() : Binding::Point
      Binding.bg_QImage_offset_(self)
    end
    def offset=(unnamed_arg_0 : Binding::Point) : Void
      Binding.bg_QImage_setOffset_const_QPoint_R(self, unnamed_arg_0)
    end
    def text_keys() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QImage_textKeys_(self))
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QImage_text_(self))
    end
    def text(key : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QImage_text_const_QString_R(self, Qt::Converter::QString.wrap(key)))
    end
    def set_text(key : String, value : String) : Void
      Binding.bg_QImage_setText_const_QString_R_const_QString_R(self, Qt::Converter::QString.wrap(key), Qt::Converter::QString.wrap(value))
    end
    protected def metric(metric : PaintDeviceMetric) : Int32
      Binding.bg_QImage_metric_QPaintDevice__PaintDeviceMetric(self, metric)
    end
    protected def mirrored_helper(horizontal : Bool, vertical : Bool) : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_helper_bool_bool(self, horizontal, vertical))
    end
    protected def rgb_swapped_helper() : Image
      Image.new(unwrap: Binding.bg_QImage_rgbSwapped_helper_(self))
    end
    protected def mirrored_inplace(horizontal : Bool, vertical : Bool) : Void
      Binding.bg_QImage_mirrored_inplace_bool_bool(self, horizontal, vertical)
    end
    protected def rgb_swapped_inplace() : Void
      Binding.bg_QImage_rgbSwapped_inplace_(self)
    end
    protected def convert_to_format_helper(format : Image::Format, flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(self, format, flags))
    end
    protected def convert_to_format_inplace(format : Image::Format, flags : ImageConversionFlags) : Bool
      Binding.bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(self, format, flags)
    end
    protected def smooth_scaled(w : Int32, h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_smoothScaled_int_int(self, w, h))
    end
  end
  class Pixmap 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QPixmap_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(data : QPlatformPixmap*)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_QPlatformPixmap_X(data)
    @unwrap = unwrap
    
    end
    def initialize(w : Int32, h : Int32)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_int_int(w, h)
    @unwrap = unwrap
    
    end
    def initialize(unnamed_arg_0 : QSize*)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_QSize_R(unnamed_arg_0)
    @unwrap = unwrap
    
    end
    def initialize(file_name : String)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file_name))
    @unwrap = unwrap
    
    end
    def initialize(file_name : String, format : UInt8*)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X(Qt::Converter::QString.wrap(file_name), format)
    @unwrap = unwrap
    
    end
    def initialize(file_name : String, format : UInt8*, flags : ImageConversionFlags)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(Qt::Converter::QString.wrap(file_name), format, flags)
    @unwrap = unwrap
    
    end
    def initialize(xpm : UInt8**)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_char_Xconst_X(xpm)
    @unwrap = unwrap
    
    end
    def swap(other : Pixmap) : Void
      Binding.bg_QPixmap_swap_QPixmap_R(self, other)
    end
    def null?() : Bool
      Binding.bg_QPixmap_isNull_(self)
    end
    def dev_type() : Int32
      Binding.bg_QPixmap_devType_(self)
    end
    def width() : Int32
      Binding.bg_QPixmap_width_(self)
    end
    def height() : Int32
      Binding.bg_QPixmap_height_(self)
    end
    def size() : QSize*
      Binding.bg_QPixmap_size_(self)
    end
    def rect() : QRect*
      Binding.bg_QPixmap_rect_(self)
    end
    def depth() : Int32
      Binding.bg_QPixmap_depth_(self)
    end
    def self.default_depth() : Int32
      Binding.bg_QPixmap_defaultDepth_STATIC_()
    end
    def fill() : Void
      Binding.bg_QPixmap_fill_(self)
    end
    def fill(fill_color : QColor*) : Void
      Binding.bg_QPixmap_fill_const_QColor_R(self, fill_color)
    end
    def fill(device : QPaintDevice*, ofs : Binding::Point) : Void
      Binding.bg_QPixmap_fill_const_QPaintDevice_X_const_QPoint_R(self, device, ofs)
    end
    def fill(device : QPaintDevice*, xofs : Int32, yofs : Int32) : Void
      Binding.bg_QPixmap_fill_const_QPaintDevice_X_int_int(self, device, xofs, yofs)
    end
    def mask() : QBitmap*
      Binding.bg_QPixmap_mask_(self)
    end
    def mask=(unnamed_arg_0 : QBitmap*) : Void
      Binding.bg_QPixmap_setMask_const_QBitmap_R(self, unnamed_arg_0)
    end
    def has_alpha?() : Bool
      Binding.bg_QPixmap_hasAlpha_(self)
    end
    def has_alpha_channel?() : Bool
      Binding.bg_QPixmap_hasAlphaChannel_(self)
    end
    def create_heuristic_mask() : QBitmap*
      Binding.bg_QPixmap_createHeuristicMask_(self)
    end
    def create_heuristic_mask(clip_tight : Bool) : QBitmap*
      Binding.bg_QPixmap_createHeuristicMask_bool(self, clip_tight)
    end
    def create_mask_from_color(mask_color : QColor*) : QBitmap*
      Binding.bg_QPixmap_createMaskFromColor_const_QColor_R(self, mask_color)
    end
    def create_mask_from_color(mask_color : QColor*, mode : MaskMode) : QBitmap*
      Binding.bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(self, mask_color, mode)
    end
    def self.grab_widget(widget : Object, rect : QRect*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X_const_QRect_R(widget, rect))
    end
    def self.grab_widget(widget : Object) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X(widget))
    end
    def self.grab_widget(widget : Object, x : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X_int(widget, x))
    end
    def self.grab_widget(widget : Object, x : Int32, y : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X_int_int(widget, x, y))
    end
    def self.grab_widget(widget : Object, x : Int32, y : Int32, w : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int(widget, x, y, w))
    end
    def self.grab_widget(widget : Object, x : Int32, y : Int32, w : Int32, h : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int_int(widget, x, y, w, h))
    end
    def scaled(w : Int32, h : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_int_int(self, w, h))
    end
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_int_int_Qt__AspectRatioMode(self, w, h, aspect_mode))
    end
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(self, w, h, aspect_mode, mode))
    end
    def scaled(s : QSize*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_const_QSize_R(self, s))
    end
    def scaled(s : QSize*, aspect_mode : AspectRatioMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode(self, s, aspect_mode))
    end
    def scaled(s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(self, s, aspect_mode, mode))
    end
    def scaled_to_width(w : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToWidth_int(self, w))
    end
    def scaled_to_width(w : Int32, mode : TransformationMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(self, w, mode))
    end
    def scaled_to_height(h : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToHeight_int(self, h))
    end
    def scaled_to_height(h : Int32, mode : TransformationMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(self, h, mode))
    end
    def transformed(unnamed_arg_0 : QMatrix*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_transformed_const_QMatrix_R(self, unnamed_arg_0))
    end
    def transformed(unnamed_arg_0 : QMatrix*, mode : TransformationMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_transformed_const_QMatrix_R_Qt__TransformationMode(self, unnamed_arg_0, mode))
    end
    def self.true_matrix(m : QMatrix*, w : Int32, h : Int32) : QMatrix*
      Binding.bg_QPixmap_trueMatrix_STATIC_const_QMatrix_R_int_int(m, w, h)
    end
    def transformed(unnamed_arg_0 : QTransform*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_transformed_const_QTransform_R(self, unnamed_arg_0))
    end
    def transformed(unnamed_arg_0 : QTransform*, mode : TransformationMode) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_transformed_const_QTransform_R_Qt__TransformationMode(self, unnamed_arg_0, mode))
    end
    def self.true_matrix(m : QTransform*, w : Int32, h : Int32) : QTransform*
      Binding.bg_QPixmap_trueMatrix_STATIC_const_QTransform_R_int_int(m, w, h)
    end
    def to_image() : Image
      Image.new(unwrap: Binding.bg_QPixmap_toImage_(self))
    end
    def self.from_image(image : Image) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImage_STATIC_const_QImage_R(image))
    end
    def self.from_image(image : Image, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image, flags))
    end
    def self.from_image_reader(image_reader : QImageReader*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageReader_STATIC_QImageReader_X(image_reader))
    end
    def self.from_image_reader(image_reader : QImageReader*, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(image_reader, flags))
    end
    def load(file_name : String) : Bool
      Binding.bg_QPixmap_load_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    def load(file_name : String, format : UInt8*) : Bool
      Binding.bg_QPixmap_load_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    def load(file_name : String, format : UInt8*, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(self, Qt::Converter::QString.wrap(file_name), format, flags)
    end
    def load_from_data(buf : UInt8*, len : UInt32) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint(self, buf, len)
    end
    def load_from_data(buf : UInt8*, len : UInt32, format : UInt8*) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(self, buf, len, format)
    end
    def load_from_data(buf : UInt8*, len : UInt32, format : UInt8*, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(self, buf, len, format, flags)
    end
    def load_from_data(data : QByteArray*) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R(self, data)
    end
    def load_from_data(data : QByteArray*, format : UInt8*) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(self, data, format)
    end
    def load_from_data(data : QByteArray*, format : UInt8*, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(self, data, format, flags)
    end
    def save(file_name : String) : Bool
      Binding.bg_QPixmap_save_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    def save(file_name : String, format : UInt8*) : Bool
      Binding.bg_QPixmap_save_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    def save(file_name : String, format : UInt8*, quality : Int32) : Bool
      Binding.bg_QPixmap_save_const_QString_R_const_char_X_int(self, Qt::Converter::QString.wrap(file_name), format, quality)
    end
    def save(device : QIODevice*) : Bool
      Binding.bg_QPixmap_save_QIODevice_X(self, device)
    end
    def save(device : QIODevice*, format : UInt8*) : Bool
      Binding.bg_QPixmap_save_QIODevice_X_const_char_X(self, device, format)
    end
    def save(device : QIODevice*, format : UInt8*, quality : Int32) : Bool
      Binding.bg_QPixmap_save_QIODevice_X_const_char_X_int(self, device, format, quality)
    end
    def convert_from_image(img : Image) : Bool
      Binding.bg_QPixmap_convertFromImage_const_QImage_R(self, img)
    end
    def convert_from_image(img : Image, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(self, img, flags)
    end
    def copy(x : Int32, y : Int32, width : Int32, height : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_int_int_int_int(self, x, y, width, height))
    end
    def copy() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_(self))
    end
    def copy(rect : QRect*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_const_QRect_R(self, rect))
    end
    def scroll(dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32) : Void
      Binding.bg_QPixmap_scroll_int_int_int_int_int_int(self, dx, dy, x, y, width, height)
    end
    def scroll(dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32, exposed : QRegion*) : Void
      Binding.bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(self, dx, dy, x, y, width, height, exposed)
    end
    def scroll(dx : Int32, dy : Int32, rect : QRect*) : Void
      Binding.bg_QPixmap_scroll_int_int_const_QRect_R(self, dx, dy, rect)
    end
    def scroll(dx : Int32, dy : Int32, rect : QRect*, exposed : QRegion*) : Void
      Binding.bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(self, dx, dy, rect, exposed)
    end
    def cache_key() : Int64
      Binding.bg_QPixmap_cacheKey_(self)
    end
    def detached?() : Bool
      Binding.bg_QPixmap_isDetached_(self)
    end
    def detach() : Void
      Binding.bg_QPixmap_detach_(self)
    end
    def q_bitmap?() : Bool
      Binding.bg_QPixmap_isQBitmap_(self)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QPixmap_paintEngine_(self)
    end
    protected def metric(unnamed_arg_0 : PaintDeviceMetric) : Int32
      Binding.bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    protected def self.from_image_in_place(image : Image) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageInPlace_STATIC_QImage_R(image))
    end
    protected def self.from_image_in_place(image : Image, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(image, flags))
    end
    def handle() : QPlatformPixmap*
      Binding.bg_QPixmap_handle_(self)
    end
  end
  class EventLoop < Object
    @[Flags]
    enum ProcessEventsFlags : UInt32
      AllEvents = 0
      ExcludeUserInputEvents = 1
      ExcludeSocketNotifiers = 2
      WaitForMoreEvents = 4
      X11ExcludeTimers = 8
      EventLoopExec = 32
      DialogExec = 64
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QEventLoop_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QEventLoop_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QEventLoop_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(EventLoop)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQEventLoop.new(
      bg_QEventLoop_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QEventLoop_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QEventLoop_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QEventLoop_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Object)
      unwrap = Binding.bg_QEventLoop_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(EventLoop)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQEventLoop.new(
      bg_QEventLoop_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QEventLoop_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QEventLoop_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QEventLoop_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def process_events() : Bool
      Binding.bg_QEventLoop_processEvents_(self)
    end
    def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
      Binding.bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(self, flags)
    end
    def process_events(flags : EventLoop::ProcessEventsFlags, maximum_time : Int32) : Void
      Binding.bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(self, flags, maximum_time)
    end
    def exec() : Int32
      Binding.bg_QEventLoop_exec_(self)
    end
    def exec(flags : EventLoop::ProcessEventsFlags) : Int32
      Binding.bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(self, flags)
    end
    def exit() : Void
      Binding.bg_QEventLoop_exit_(self)
    end
    def exit(return_code : Int32) : Void
      Binding.bg_QEventLoop_exit_int(self, return_code)
    end
    def running?() : Bool
      Binding.bg_QEventLoop_isRunning_(self)
    end
    def wake_up() : Void
      Binding.bg_QEventLoop_wakeUp_(self)
    end
    def event(event : QEvent*) : Bool
      Binding.bg_QEventLoop_event_QEvent_X(self, event)
    end
    def quit() : Void
      Binding.bg_QEventLoop_quit_(self)
    end
  end
  class TabWidget < Widget
    enum TabShape : UInt32
      Rounded = 0
      Triangular = 1
    end
    enum TabPosition : UInt32
      North = 0
      South = 1
      West = 2
      East = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QTabWidget_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTabWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QTabWidget_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TabWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width has_height_for_width? tab_inserted tab_removed show_event resize_event key_press_event paint_event change_event event dev_type visible= paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTabWidget.new(
      bg_QTabWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTabWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(width : Int32){ self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QTabWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QTabWidget_tabInserted_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_inserted") %} ->(index : Int32){ self.tab_inserted(index) } {% else %} nil {% end %}),
      bg_QTabWidget_tabRemoved_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_removed") %} ->(index : Int32){ self.tab_removed(index) } {% else %} nil {% end %}),
      bg_QTabWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTabWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QTabWidget_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TabWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint height_for_width has_height_for_width? tab_inserted tab_removed show_event resize_event key_press_event paint_event change_event event dev_type visible= paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTabWidget.new(
      bg_QTabWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTabWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(width : Int32){ self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QTabWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QTabWidget_tabInserted_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_inserted") %} ->(index : Int32){ self.tab_inserted(index) } {% else %} nil {% end %}),
      bg_QTabWidget_tabRemoved_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_removed") %} ->(index : Int32){ self.tab_removed(index) } {% else %} nil {% end %}),
      bg_QTabWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTabWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def add_tab(widget : Widget, unnamed_arg_1 : String) : Int32
      Binding.bg_QTabWidget_addTab_QWidget_X_const_QString_R(self, widget, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    def add_tab(widget : Widget, icon : QIcon*, label : String) : Int32
      Binding.bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(self, widget, icon, Qt::Converter::QString.wrap(label))
    end
    def insert_tab(index : Int32, widget : Widget, unnamed_arg_2 : String) : Int32
      Binding.bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(self, index, widget, Qt::Converter::QString.wrap(unnamed_arg_2))
    end
    def insert_tab(index : Int32, widget : Widget, icon : QIcon*, label : String) : Int32
      Binding.bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(self, index, widget, icon, Qt::Converter::QString.wrap(label))
    end
    def remove_tab(index : Int32) : Void
      Binding.bg_QTabWidget_removeTab_int(self, index)
    end
    def is_tab_enabled(index : Int32) : Bool
      Binding.bg_QTabWidget_isTabEnabled_int(self, index)
    end
    def set_tab_enabled(index : Int32, unnamed_arg_1 : Bool) : Void
      Binding.bg_QTabWidget_setTabEnabled_int_bool(self, index, unnamed_arg_1)
    end
    def tab_text(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabText_int(self, index))
    end
    def set_tab_text(index : Int32, unnamed_arg_1 : String) : Void
      Binding.bg_QTabWidget_setTabText_int_const_QString_R(self, index, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    def tab_icon(index : Int32) : QIcon*
      Binding.bg_QTabWidget_tabIcon_int(self, index)
    end
    def set_tab_icon(index : Int32, icon : QIcon*) : Void
      Binding.bg_QTabWidget_setTabIcon_int_const_QIcon_R(self, index, icon)
    end
    def set_tab_tool_tip(index : Int32, tip : String) : Void
      Binding.bg_QTabWidget_setTabToolTip_int_const_QString_R(self, index, Qt::Converter::QString.wrap(tip))
    end
    def tab_tool_tip(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabToolTip_int(self, index))
    end
    def set_tab_whats_this(index : Int32, text : String) : Void
      Binding.bg_QTabWidget_setTabWhatsThis_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    def tab_whats_this(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabWhatsThis_int(self, index))
    end
    def current_index() : Int32
      Binding.bg_QTabWidget_currentIndex_(self)
    end
    def current_widget() : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_currentWidget_(self))
    end
    def widget(index : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_widget_int(self, index))
    end
    def index_of(widget : Widget) : Int32
      Binding.bg_QTabWidget_indexOf_QWidget_X(self, widget)
    end
    def count() : Int32
      Binding.bg_QTabWidget_count_(self)
    end
    def tab_position() : TabWidget::TabPosition
      TabWidget::TabPosition.new(unwrap: Binding.bg_QTabWidget_tabPosition_(self))
    end
    def tab_position=(unnamed_arg_0 : TabWidget::TabPosition) : Void
      Binding.bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(self, unnamed_arg_0)
    end
    def tabs_closable() : Bool
      Binding.bg_QTabWidget_tabsClosable_(self)
    end
    def tabs_closable=(closeable : Bool) : Void
      Binding.bg_QTabWidget_setTabsClosable_bool(self, closeable)
    end
    def movable?() : Bool
      Binding.bg_QTabWidget_isMovable_(self)
    end
    def movable=(movable : Bool) : Void
      Binding.bg_QTabWidget_setMovable_bool(self, movable)
    end
    def tab_shape() : TabWidget::TabShape
      TabWidget::TabShape.new(unwrap: Binding.bg_QTabWidget_tabShape_(self))
    end
    def tab_shape=(s : TabWidget::TabShape) : Void
      Binding.bg_QTabWidget_setTabShape_QTabWidget__TabShape(self, s)
    end
    def size_hint() : QSize*
      Binding.bg_QTabWidget_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QTabWidget_minimumSizeHint_(self)
    end
    def height_for_width(width : Int32) : Int32
      Binding.bg_QTabWidget_heightForWidth_int(self, width)
    end
    def has_height_for_width?() : Bool
      Binding.bg_QTabWidget_hasHeightForWidth_(self)
    end
    def corner_widget=(w : Widget) : Void
      Binding.bg_QTabWidget_setCornerWidget_QWidget_X(self, w)
    end
    def set_corner_widget(w : Widget, corner : Corner) : Void
      Binding.bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(self, w, corner)
    end
    def corner_widget() : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_cornerWidget_(self))
    end
    def corner_widget(corner : Corner) : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_cornerWidget_Qt__Corner(self, corner))
    end
    def elide_mode() : TextElideMode
      TextElideMode.new(unwrap: Binding.bg_QTabWidget_elideMode_(self))
    end
    def elide_mode=(unnamed_arg_0 : TextElideMode) : Void
      Binding.bg_QTabWidget_setElideMode_Qt__TextElideMode(self, unnamed_arg_0)
    end
    def icon_size() : QSize*
      Binding.bg_QTabWidget_iconSize_(self)
    end
    def icon_size=(size : QSize*) : Void
      Binding.bg_QTabWidget_setIconSize_const_QSize_R(self, size)
    end
    def uses_scroll_buttons() : Bool
      Binding.bg_QTabWidget_usesScrollButtons_(self)
    end
    def uses_scroll_buttons=(use_buttons : Bool) : Void
      Binding.bg_QTabWidget_setUsesScrollButtons_bool(self, use_buttons)
    end
    def document_mode() : Bool
      Binding.bg_QTabWidget_documentMode_(self)
    end
    def document_mode=(set : Bool) : Void
      Binding.bg_QTabWidget_setDocumentMode_bool(self, set)
    end
    def tab_bar_auto_hide() : Bool
      Binding.bg_QTabWidget_tabBarAutoHide_(self)
    end
    def tab_bar_auto_hide=(enabled : Bool) : Void
      Binding.bg_QTabWidget_setTabBarAutoHide_bool(self, enabled)
    end
    def clear() : Void
      Binding.bg_QTabWidget_clear_(self)
    end
    def tab_bar() : QTabBar*
      Binding.bg_QTabWidget_tabBar_(self)
    end
    def current_index=(index : Int32) : Void
      Binding.bg_QTabWidget_setCurrentIndex_int(self, index)
    end
    def current_widget=(widget : Widget) : Void
      Binding.bg_QTabWidget_setCurrentWidget_QWidget_X(self, widget)
    end
    def current_changed(index : Int32) : Void
      Binding.bg_QTabWidget_currentChanged_int(self, index)
    end
    def on_current_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_currentChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_close_requested(index : Int32) : Void
      Binding.bg_QTabWidget_tabCloseRequested_int(self, index)
    end
    def on_tab_close_requested(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_tabCloseRequested_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_bar_clicked(index : Int32) : Void
      Binding.bg_QTabWidget_tabBarClicked_int(self, index)
    end
    def on_tab_bar_clicked(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_tabBarClicked_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_bar_double_clicked(index : Int32) : Void
      Binding.bg_QTabWidget_tabBarDoubleClicked_int(self, index)
    end
    def on_tab_bar_double_clicked(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_tabBarDoubleClicked_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    protected def tab_inserted(index : Int32) : Void
      Binding.bg_QTabWidget_tabInserted_int(self, index)
    end
    protected def tab_removed(index : Int32) : Void
      Binding.bg_QTabWidget_tabRemoved_int(self, index)
    end
    protected def show_event(unnamed_arg_0 : QShowEvent*) : Void
      Binding.bg_QTabWidget_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : QResizeEvent*) : Void
      Binding.bg_QTabWidget_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QTabWidget_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QTabWidget_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def tab_bar=(unnamed_arg_0 : QTabBar*) : Void
      Binding.bg_QTabWidget_setTabBar_QTabBar_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QTabWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QTabWidget_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionTabWidgetFrame*) : Void
      Binding.bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(self, option)
    end
  end
  abstract class LayoutItem 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QLayoutItem_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LayoutItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions geometry= geometry empty? has_height_for_width? height_for_width minimum_height_for_width invalidate widget layout spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayoutItem.new(
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QLayoutItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayoutItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayoutItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(alignment : Alignment)
      unwrap = Binding.bg_QLayoutItem_CONSTRUCT_Qt__Alignment(alignment)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LayoutItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions geometry= geometry empty? has_height_for_width? height_for_width minimum_height_for_width invalidate widget layout spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayoutItem.new(
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QLayoutItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayoutItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayoutItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    abstract def size_hint() : QSize*
    abstract def minimum_size() : QSize*
    abstract def maximum_size() : QSize*
    abstract def expanding_directions() : Orientations
    abstract def geometry=(unnamed_arg_0 : QRect*) : Void
    abstract def geometry() : QRect*
    abstract def empty?() : Bool
    def has_height_for_width?() : Bool
      Binding.bg_QLayoutItem_hasHeightForWidth_(self)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_heightForWidth_int(self, unnamed_arg_0)
    end
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    def invalidate() : Void
      Binding.bg_QLayoutItem_invalidate_(self)
    end
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayoutItem_widget_(self))
    end
    def layout() : Layout
      Layout.new(unwrap: Binding.bg_QLayoutItem_layout_(self))
    end
    def spacer_item() : QSpacerItem*
      Binding.bg_QLayoutItem_spacerItem_(self)
    end
    def alignment() : Alignment
      Alignment.new(unwrap: Binding.bg_QLayoutItem_alignment_(self))
    end
    def alignment=(a : Alignment) : Void
      Binding.bg_QLayoutItem_setAlignment_Qt__Alignment(self, a)
    end
  end
  class LayoutItemImpl < LayoutItem
    macro inherited
      {{ raise "You can't sub-class LayoutItemImpl, inherit from LayoutItem instead" }}
    end
    def size_hint() : QSize*
      Binding.bg_QLayoutItem_sizeHint_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QLayoutItem_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QLayoutItem_maximumSize_(self)
    end
    def expanding_directions() : Orientations
      Orientations.new(unwrap: Binding.bg_QLayoutItem_expandingDirections_(self))
    end
    def geometry=(unnamed_arg_0 : QRect*) : Void
      Binding.bg_QLayoutItem_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    def geometry() : QRect*
      Binding.bg_QLayoutItem_geometry_(self)
    end
    def empty?() : Bool
      Binding.bg_QLayoutItem_isEmpty_(self)
    end
  end
  abstract class Layout < Object
    enum SizeConstraint : UInt32
      SetDefaultConstraint = 0
      SetNoConstraint = 1
      SetMinimumSize = 2
      SetFixedSize = 3
      SetMaximumSize = 4
      SetMinAndMaxSize = 5
    end
    def initialize(@unwrap : Void*)
    end
    def as_layout_item() : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_bg_QLayout_AS_QLayoutItem_(self))
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QLayout_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.item_at(index)) } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.take_at(index)) } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize()
      unwrap = Binding.bg_QLayout_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.item_at(index)) } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.take_at(index)) } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def margin() : Int32
      Binding.bg_QLayout_margin_(self)
    end
    def spacing() : Int32
      Binding.bg_QLayout_spacing_(self)
    end
    def margin=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLayout_setMargin_int(self, unnamed_arg_0)
    end
    def spacing=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLayout_setSpacing_int(self, unnamed_arg_0)
    end
    def set_contents_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QLayout_setContentsMargins_int_int_int_int(self, left, top, right, bottom)
    end
    def contents_margins=(margins : QMargins*) : Void
      Binding.bg_QLayout_setContentsMargins_const_QMargins_R(self, margins)
    end
    def get_contents_margins(left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
      Binding.bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(self, left, top, right, bottom)
    end
    def contents_margins() : QMargins*
      Binding.bg_QLayout_contentsMargins_(self)
    end
    def contents_rect() : QRect*
      Binding.bg_QLayout_contentsRect_(self)
    end
    def set_alignment(w : Widget, alignment : Alignment) : Bool
      Binding.bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(self, w, alignment)
    end
    def set_alignment(l : Layout, alignment : Alignment) : Bool
      Binding.bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(self, l, alignment)
    end
    def size_constraint=(unnamed_arg_0 : Layout::SizeConstraint) : Void
      Binding.bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(self, unnamed_arg_0)
    end
    def size_constraint() : Layout::SizeConstraint
      Layout::SizeConstraint.new(unwrap: Binding.bg_QLayout_sizeConstraint_(self))
    end
    def menu_bar=(w : Widget) : Void
      Binding.bg_QLayout_setMenuBar_QWidget_X(self, w)
    end
    def menu_bar() : Widget
      Widget.new(unwrap: Binding.bg_QLayout_menuBar_(self))
    end
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayout_parentWidget_(self))
    end
    def invalidate() : Void
      Binding.bg_QLayout_invalidate_(self)
    end
    def geometry() : QRect*
      Binding.bg_QLayout_geometry_(self)
    end
    def activate() : Bool
      Binding.bg_QLayout_activate_(self)
    end
    def update() : Void
      Binding.bg_QLayout_update_(self)
    end
    def add_widget(w : Widget) : Void
      Binding.bg_QLayout_addWidget_QWidget_X(self, w)
    end
    abstract def add_item(unnamed_arg_0 : LayoutItem) : Void
    def remove_widget(w : Widget) : Void
      Binding.bg_QLayout_removeWidget_QWidget_X(self, w)
    end
    def remove_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QLayout_removeItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    def expanding_directions() : Orientations
      Orientations.new(unwrap: Binding.bg_QLayout_expandingDirections_(self))
    end
    def minimum_size() : QSize*
      Binding.bg_QLayout_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QLayout_maximumSize_(self)
    end
    def geometry=(unnamed_arg_0 : QRect*) : Void
      Binding.bg_QLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    abstract def item_at(index : Int32) : LayoutItem
    abstract def take_at(index : Int32) : LayoutItem
    def index_of(unnamed_arg_0 : Widget) : Int32
      Binding.bg_QLayout_indexOf_QWidget_X(self, unnamed_arg_0)
    end
    abstract def count() : Int32
    def empty?() : Bool
      Binding.bg_QLayout_isEmpty_(self)
    end
    def replace_widget(from : Widget, to : Widget) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_replaceWidget_QWidget_X_QWidget_X(self, from, to))
    end
    def replace_widget(from : Widget, to : Widget, options : FindChildOptions) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(self, from, to, options))
    end
    def total_height_for_width(w : Int32) : Int32
      Binding.bg_QLayout_totalHeightForWidth_int(self, w)
    end
    def total_minimum_size() : QSize*
      Binding.bg_QLayout_totalMinimumSize_(self)
    end
    def total_maximum_size() : QSize*
      Binding.bg_QLayout_totalMaximumSize_(self)
    end
    def total_size_hint() : QSize*
      Binding.bg_QLayout_totalSizeHint_(self)
    end
    def layout() : Layout
      Layout.new(unwrap: Binding.bg_QLayout_layout_(self))
    end
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLayout_setEnabled_bool(self, unnamed_arg_0)
    end
    def enabled?() : Bool
      Binding.bg_QLayout_isEnabled_(self)
    end
    def self.closest_acceptable_size(w : Widget, s : QSize*) : QSize*
      Binding.bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(w, s)
    end
    protected def widget_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QLayout_widgetEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def child_event(e : QChildEvent*) : Void
      Binding.bg_QLayout_childEvent_QChildEvent_X(self, e)
    end
    protected def add_child_layout(l : Layout) : Void
      Binding.bg_QLayout_addChildLayout_QLayout_X(self, l)
    end
    protected def add_child_widget(w : Widget) : Void
      Binding.bg_QLayout_addChildWidget_QWidget_X(self, w)
    end
    protected def adopt_layout(layout : Layout) : Bool
      Binding.bg_QLayout_adoptLayout_QLayout_X(self, layout)
    end
    protected def alignment_rect(unnamed_arg_0 : QRect*) : QRect*
      Binding.bg_QLayout_alignmentRect_const_QRect_R(self, unnamed_arg_0)
    end
    protected def initialize(d : QLayoutPrivate*, unnamed_arg_1 : Layout, unnamed_arg_2 : Widget)
      unwrap = Binding.bg_QLayout_CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(d, unnamed_arg_1, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.item_at(index)) } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.take_at(index)) } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class LayoutImpl < Layout
    macro inherited
      {{ raise "You can't sub-class LayoutImpl, inherit from Layout instead" }}
    end
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    def item_at(index : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_itemAt_int(self, index))
    end
    def take_at(index : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_takeAt_int(self, index))
    end
    def count() : Int32
      Binding.bg_QLayout_count_(self)
    end
  end
  class BoxLayout < Layout
    enum Direction : UInt32
      LeftToRight = 0
      RightToLeft = 1
      TopToBottom = 2
      BottomToTop = 3
      Down = 2
      Up = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QBoxLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(unnamed_arg_0 : BoxLayout::Direction)
      unwrap = Binding.bg_QBoxLayout_CONSTRUCT_QBoxLayout__Direction(unnamed_arg_0)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(BoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQBoxLayout.new(
      bg_QBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(unnamed_arg_0 : BoxLayout::Direction, parent : Widget)
      unwrap = Binding.bg_QBoxLayout_CONSTRUCT_QBoxLayout__Direction_QWidget_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(BoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQBoxLayout.new(
      bg_QBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def direction() : BoxLayout::Direction
      BoxLayout::Direction.new(unwrap: Binding.bg_QBoxLayout_direction_(self))
    end
    def direction=(unnamed_arg_0 : BoxLayout::Direction) : Void
      Binding.bg_QBoxLayout_setDirection_QBoxLayout__Direction(self, unnamed_arg_0)
    end
    def add_spacing(size : Int32) : Void
      Binding.bg_QBoxLayout_addSpacing_int(self, size)
    end
    def add_stretch() : Void
      Binding.bg_QBoxLayout_addStretch_(self)
    end
    def add_stretch(stretch : Int32) : Void
      Binding.bg_QBoxLayout_addStretch_int(self, stretch)
    end
    def add_spacer_item(spacer_item : QSpacerItem*) : Void
      Binding.bg_QBoxLayout_addSpacerItem_QSpacerItem_X(self, spacer_item)
    end
    def add_widget(unnamed_arg_0 : Widget) : Void
      Binding.bg_QBoxLayout_addWidget_QWidget_X(self, unnamed_arg_0)
    end
    def add_widget(unnamed_arg_0 : Widget, stretch : Int32) : Void
      Binding.bg_QBoxLayout_addWidget_QWidget_X_int(self, unnamed_arg_0, stretch)
    end
    def add_widget(unnamed_arg_0 : Widget, stretch : Int32, alignment : Alignment) : Void
      Binding.bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(self, unnamed_arg_0, stretch, alignment)
    end
    def add_layout(layout : Layout) : Void
      Binding.bg_QBoxLayout_addLayout_QLayout_X(self, layout)
    end
    def add_layout(layout : Layout, stretch : Int32) : Void
      Binding.bg_QBoxLayout_addLayout_QLayout_X_int(self, layout, stretch)
    end
    def add_strut(unnamed_arg_0 : Int32) : Void
      Binding.bg_QBoxLayout_addStrut_int(self, unnamed_arg_0)
    end
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QBoxLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    def insert_spacing(index : Int32, size : Int32) : Void
      Binding.bg_QBoxLayout_insertSpacing_int_int(self, index, size)
    end
    def insert_stretch(index : Int32) : Void
      Binding.bg_QBoxLayout_insertStretch_int(self, index)
    end
    def insert_stretch(index : Int32, stretch : Int32) : Void
      Binding.bg_QBoxLayout_insertStretch_int_int(self, index, stretch)
    end
    def insert_spacer_item(index : Int32, spacer_item : QSpacerItem*) : Void
      Binding.bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(self, index, spacer_item)
    end
    def insert_widget(index : Int32, widget : Widget) : Void
      Binding.bg_QBoxLayout_insertWidget_int_QWidget_X(self, index, widget)
    end
    def insert_widget(index : Int32, widget : Widget, stretch : Int32) : Void
      Binding.bg_QBoxLayout_insertWidget_int_QWidget_X_int(self, index, widget, stretch)
    end
    def insert_widget(index : Int32, widget : Widget, stretch : Int32, alignment : Alignment) : Void
      Binding.bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(self, index, widget, stretch, alignment)
    end
    def insert_layout(index : Int32, layout : Layout) : Void
      Binding.bg_QBoxLayout_insertLayout_int_QLayout_X(self, index, layout)
    end
    def insert_layout(index : Int32, layout : Layout, stretch : Int32) : Void
      Binding.bg_QBoxLayout_insertLayout_int_QLayout_X_int(self, index, layout, stretch)
    end
    def insert_item(index : Int32, unnamed_arg_1 : LayoutItem) : Void
      Binding.bg_QBoxLayout_insertItem_int_QLayoutItem_X(self, index, unnamed_arg_1)
    end
    def spacing() : Int32
      Binding.bg_QBoxLayout_spacing_(self)
    end
    def spacing=(spacing : Int32) : Void
      Binding.bg_QBoxLayout_setSpacing_int(self, spacing)
    end
    def set_stretch_factor(w : Widget, stretch : Int32) : Bool
      Binding.bg_QBoxLayout_setStretchFactor_QWidget_X_int(self, w, stretch)
    end
    def set_stretch_factor(l : Layout, stretch : Int32) : Bool
      Binding.bg_QBoxLayout_setStretchFactor_QLayout_X_int(self, l, stretch)
    end
    def set_stretch(index : Int32, stretch : Int32) : Void
      Binding.bg_QBoxLayout_setStretch_int_int(self, index, stretch)
    end
    def stretch(index : Int32) : Int32
      Binding.bg_QBoxLayout_stretch_int(self, index)
    end
    def size_hint() : QSize*
      Binding.bg_QBoxLayout_sizeHint_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QBoxLayout_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QBoxLayout_maximumSize_(self)
    end
    def has_height_for_width?() : Bool
      Binding.bg_QBoxLayout_hasHeightForWidth_(self)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_heightForWidth_int(self, unnamed_arg_0)
    end
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    def expanding_directions() : Orientations
      Orientations.new(unwrap: Binding.bg_QBoxLayout_expandingDirections_(self))
    end
    def invalidate() : Void
      Binding.bg_QBoxLayout_invalidate_(self)
    end
    def item_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QBoxLayout_itemAt_int(self, unnamed_arg_0))
    end
    def take_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QBoxLayout_takeAt_int(self, unnamed_arg_0))
    end
    def count() : Int32
      Binding.bg_QBoxLayout_count_(self)
    end
    def geometry=(unnamed_arg_0 : QRect*) : Void
      Binding.bg_QBoxLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
  end
  class HBoxLayout < BoxLayout
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QHBoxLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QHBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QHBoxLayout_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(HBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQHBoxLayout.new(
      bg_QHBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QHBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QHBoxLayout_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(HBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQHBoxLayout.new(
      bg_QHBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QHBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class VBoxLayout < BoxLayout
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QVBoxLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QVBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QVBoxLayout_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(VBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQVBoxLayout.new(
      bg_QVBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QVBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QVBoxLayout_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(VBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQVBoxLayout.new(
      bg_QVBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ Orientations.new(unwrap: self.expanding_directions()) } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : QRect*){ self.geometry=(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ self.geometry() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()) } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()) } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QVBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class KeySequence 
    enum StandardKey : UInt32
      UnknownKey = 0
      HelpContents = 1
      WhatsThis = 2
      Open = 3
      Close = 4
      Save = 5
      New = 6
      Delete = 7
      Cut = 8
      Copy = 9
      Paste = 10
      Undo = 11
      Redo = 12
      Back = 13
      Forward = 14
      Refresh = 15
      ZoomIn = 16
      ZoomOut = 17
      Print = 18
      AddTab = 19
      NextChild = 20
      PreviousChild = 21
      Find = 22
      FindNext = 23
      FindPrevious = 24
      Replace = 25
      SelectAll = 26
      Bold = 27
      Italic = 28
      Underline = 29
      MoveToNextChar = 30
      MoveToPreviousChar = 31
      MoveToNextWord = 32
      MoveToPreviousWord = 33
      MoveToNextLine = 34
      MoveToPreviousLine = 35
      MoveToNextPage = 36
      MoveToPreviousPage = 37
      MoveToStartOfLine = 38
      MoveToEndOfLine = 39
      MoveToStartOfBlock = 40
      MoveToEndOfBlock = 41
      MoveToStartOfDocument = 42
      MoveToEndOfDocument = 43
      SelectNextChar = 44
      SelectPreviousChar = 45
      SelectNextWord = 46
      SelectPreviousWord = 47
      SelectNextLine = 48
      SelectPreviousLine = 49
      SelectNextPage = 50
      SelectPreviousPage = 51
      SelectStartOfLine = 52
      SelectEndOfLine = 53
      SelectStartOfBlock = 54
      SelectEndOfBlock = 55
      SelectStartOfDocument = 56
      SelectEndOfDocument = 57
      DeleteStartOfWord = 58
      DeleteEndOfWord = 59
      DeleteEndOfLine = 60
      InsertParagraphSeparator = 61
      InsertLineSeparator = 62
      SaveAs = 63
      Preferences = 64
      Quit = 65
      FullScreen = 66
      Deselect = 67
      DeleteCompleteLine = 68
      Backspace = 69
      Cancel = 70
    end
    enum SequenceFormat : UInt32
      NativeText = 0
      PortableText = 1
    end
    enum SequenceMatch : UInt32
      NoMatch = 0
      PartialMatch = 1
      ExactMatch = 2
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(key : String)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(key))
    @unwrap = unwrap
    
    end
    def initialize(key : String, format : KeySequence::SequenceFormat)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(key), format)
    @unwrap = unwrap
    
    end
    def initialize(k1 : Int32)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_int(k1)
    @unwrap = unwrap
    
    end
    def initialize(k1 : Int32, k2 : Int32)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_int_int(k1, k2)
    @unwrap = unwrap
    
    end
    def initialize(k1 : Int32, k2 : Int32, k3 : Int32)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_int_int_int(k1, k2, k3)
    @unwrap = unwrap
    
    end
    def initialize(k1 : Int32, k2 : Int32, k3 : Int32, k4 : Int32)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_int_int_int_int(k1, k2, k3, k4)
    @unwrap = unwrap
    
    end
    def initialize(key : KeySequence::StandardKey)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_QKeySequence__StandardKey(key)
    @unwrap = unwrap
    
    end
    def count() : Int32
      Binding.bg_QKeySequence_count_(self)
    end
    def empty?() : Bool
      Binding.bg_QKeySequence_isEmpty_(self)
    end
    def to_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QKeySequence_toString_(self))
    end
    def to_string(format : KeySequence::SequenceFormat) : String
      Qt::Converter::QString.unwrap(Binding.bg_QKeySequence_toString_QKeySequence__SequenceFormat(self, format))
    end
    def self.from_string(str : String) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QKeySequence_fromString_STATIC_const_QString_R(Qt::Converter::QString.wrap(str)))
    end
    def self.from_string(str : String, format : KeySequence::SequenceFormat) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(str), format))
    end
    def matches(seq : KeySequence) : KeySequence::SequenceMatch
      KeySequence::SequenceMatch.new(unwrap: Binding.bg_QKeySequence_matches_const_QKeySequence_R(self, seq))
    end
    def self.mnemonic(text : String) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QKeySequence_mnemonic_STATIC_const_QString_R(Qt::Converter::QString.wrap(text)))
    end
    def swap(other : KeySequence) : Void
      Binding.bg_QKeySequence_swap_QKeySequence_R(self, other)
    end
    def detached?() : Bool
      Binding.bg_QKeySequence_isDetached_(self)
    end
  end
  class LineEdit < Widget
    enum ActionPosition : UInt32
      LeadingPosition = 0
      TrailingPosition = 1
    end
    enum EchoMode : UInt32
      Normal = 0
      NoEcho = 1
      Password = 2
      PasswordEchoOnEdit = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLineEdit_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLineEdit_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QLineEdit_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLineEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QLineEdit_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLineEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(unnamed_arg_0 : String)
      unwrap = Binding.bg_QLineEdit_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLineEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(unnamed_arg_0 : String, parent : Widget)
      unwrap = Binding.bg_QLineEdit_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(unnamed_arg_0), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter redirected shared_painter focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_move_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_release_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : QMouseEvent*){ self.mouse_double_click_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_in_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : QFocusEvent*){ self.focus_out_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : QPaintEvent*){ self.paint_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : QDragEnterEvent*){ self.drag_enter_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : QDropEvent*){ self.drop_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : QEvent*){ self.change_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : QEvent*){ self.event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : QShowEvent*){ self.show_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLineEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_text_(self))
    end
    def display_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_displayText_(self))
    end
    def placeholder_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_placeholderText_(self))
    end
    def placeholder_text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_setPlaceholderText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def max_length() : Int32
      Binding.bg_QLineEdit_maxLength_(self)
    end
    def max_length=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLineEdit_setMaxLength_int(self, unnamed_arg_0)
    end
    def frame=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setFrame_bool(self, unnamed_arg_0)
    end
    def has_frame?() : Bool
      Binding.bg_QLineEdit_hasFrame_(self)
    end
    def clear_button_enabled=(enable : Bool) : Void
      Binding.bg_QLineEdit_setClearButtonEnabled_bool(self, enable)
    end
    def clear_button_enabled?() : Bool
      Binding.bg_QLineEdit_isClearButtonEnabled_(self)
    end
    def echo_mode() : LineEdit::EchoMode
      LineEdit::EchoMode.new(unwrap: Binding.bg_QLineEdit_echoMode_(self))
    end
    def echo_mode=(unnamed_arg_0 : LineEdit::EchoMode) : Void
      Binding.bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(self, unnamed_arg_0)
    end
    def read_only?() : Bool
      Binding.bg_QLineEdit_isReadOnly_(self)
    end
    def read_only=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setReadOnly_bool(self, unnamed_arg_0)
    end
    def validator=(unnamed_arg_0 : QValidator*) : Void
      Binding.bg_QLineEdit_setValidator_const_QValidator_X(self, unnamed_arg_0)
    end
    def validator() : QValidator*
      Binding.bg_QLineEdit_validator_(self)
    end
    def completer=(completer : QCompleter*) : Void
      Binding.bg_QLineEdit_setCompleter_QCompleter_X(self, completer)
    end
    def completer() : QCompleter*
      Binding.bg_QLineEdit_completer_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QLineEdit_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QLineEdit_minimumSizeHint_(self)
    end
    def cursor_position() : Int32
      Binding.bg_QLineEdit_cursorPosition_(self)
    end
    def cursor_position=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLineEdit_setCursorPosition_int(self, unnamed_arg_0)
    end
    def cursor_position_at(pos : Binding::Point) : Int32
      Binding.bg_QLineEdit_cursorPositionAt_const_QPoint_R(self, pos)
    end
    def alignment=(flag : Alignment) : Void
      Binding.bg_QLineEdit_setAlignment_Qt__Alignment(self, flag)
    end
    def alignment() : Alignment
      Alignment.new(unwrap: Binding.bg_QLineEdit_alignment_(self))
    end
    def cursor_forward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorForward_bool(self, mark)
    end
    def cursor_forward(mark : Bool, steps : Int32) : Void
      Binding.bg_QLineEdit_cursorForward_bool_int(self, mark, steps)
    end
    def cursor_backward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorBackward_bool(self, mark)
    end
    def cursor_backward(mark : Bool, steps : Int32) : Void
      Binding.bg_QLineEdit_cursorBackward_bool_int(self, mark, steps)
    end
    def cursor_word_forward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorWordForward_bool(self, mark)
    end
    def cursor_word_backward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorWordBackward_bool(self, mark)
    end
    def backspace() : Void
      Binding.bg_QLineEdit_backspace_(self)
    end
    def del() : Void
      Binding.bg_QLineEdit_del_(self)
    end
    def home(mark : Bool) : Void
      Binding.bg_QLineEdit_home_bool(self, mark)
    end
    def end(mark : Bool) : Void
      Binding.bg_QLineEdit_end_bool(self, mark)
    end
    def modified?() : Bool
      Binding.bg_QLineEdit_isModified_(self)
    end
    def modified=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setModified_bool(self, unnamed_arg_0)
    end
    def set_selection(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLineEdit_setSelection_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    def has_selected_text?() : Bool
      Binding.bg_QLineEdit_hasSelectedText_(self)
    end
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_selectedText_(self))
    end
    def selection_start() : Int32
      Binding.bg_QLineEdit_selectionStart_(self)
    end
    def undo_available?() : Bool
      Binding.bg_QLineEdit_isUndoAvailable_(self)
    end
    def redo_available?() : Bool
      Binding.bg_QLineEdit_isRedoAvailable_(self)
    end
    def drag_enabled=(b : Bool) : Void
      Binding.bg_QLineEdit_setDragEnabled_bool(self, b)
    end
    def drag_enabled() : Bool
      Binding.bg_QLineEdit_dragEnabled_(self)
    end
    def cursor_move_style=(style : CursorMoveStyle) : Void
      Binding.bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(self, style)
    end
    def cursor_move_style() : CursorMoveStyle
      CursorMoveStyle.new(unwrap: Binding.bg_QLineEdit_cursorMoveStyle_(self))
    end
    def input_mask() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_inputMask_(self))
    end
    def input_mask=(input_mask : String) : Void
      Binding.bg_QLineEdit_setInputMask_const_QString_R(self, Qt::Converter::QString.wrap(input_mask))
    end
    def has_acceptable_input?() : Bool
      Binding.bg_QLineEdit_hasAcceptableInput_(self)
    end
    def set_text_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QLineEdit_setTextMargins_int_int_int_int(self, left, top, right, bottom)
    end
    def text_margins=(margins : QMargins*) : Void
      Binding.bg_QLineEdit_setTextMargins_const_QMargins_R(self, margins)
    end
    def get_text_margins(left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
      Binding.bg_QLineEdit_getTextMargins_int_X_int_X_int_X_int_X(self, left, top, right, bottom)
    end
    def text_margins() : QMargins*
      Binding.bg_QLineEdit_textMargins_(self)
    end
    def add_action(action : Action, position : LineEdit::ActionPosition) : Void
      Binding.bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(self, action, position)
    end
    def add_action(icon : QIcon*, position : LineEdit::ActionPosition) : Action
      Action.new(unwrap: Binding.bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(self, icon, position))
    end
    def text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_setText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def clear() : Void
      Binding.bg_QLineEdit_clear_(self)
    end
    def select_all() : Void
      Binding.bg_QLineEdit_selectAll_(self)
    end
    def undo() : Void
      Binding.bg_QLineEdit_undo_(self)
    end
    def redo() : Void
      Binding.bg_QLineEdit_redo_(self)
    end
    def cut() : Void
      Binding.bg_QLineEdit_cut_(self)
    end
    def copy() : Void
      Binding.bg_QLineEdit_copy_(self)
    end
    def paste() : Void
      Binding.bg_QLineEdit_paste_(self)
    end
    def deselect() : Void
      Binding.bg_QLineEdit_deselect_(self)
    end
    def insert(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_insert_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def create_standard_context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QLineEdit_createStandardContextMenu_(self))
    end
    def text_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_textChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_text_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_textChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
    def text_edited(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_textEdited_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_text_edited(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_textEdited_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
    def cursor_position_changed(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLineEdit_cursorPositionChanged_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    def on_cursor_position_changed(&block : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_cursorPositionChanged_CONNECT_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32){ block.call(unnamed_arg_0, unnamed_arg_1) })))
    end
    def return_pressed() : Void
      Binding.bg_QLineEdit_returnPressed_(self)
    end
    def on_return_pressed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_returnPressed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def editing_finished() : Void
      Binding.bg_QLineEdit_editingFinished_(self)
    end
    def on_editing_finished(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_editingFinished_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def selection_changed() : Void
      Binding.bg_QLineEdit_selectionChanged_(self)
    end
    def on_selection_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_selectionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def mouse_press_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QLineEdit_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_double_click_event(unnamed_arg_0 : QMouseEvent*) : Void
      Binding.bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QLineEdit_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def focus_in_event(unnamed_arg_0 : QFocusEvent*) : Void
      Binding.bg_QLineEdit_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def focus_out_event(unnamed_arg_0 : QFocusEvent*) : Void
      Binding.bg_QLineEdit_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : QPaintEvent*) : Void
      Binding.bg_QLineEdit_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def drag_enter_event(unnamed_arg_0 : QDragEnterEvent*) : Void
      Binding.bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(self, unnamed_arg_0)
    end
    protected def drag_move_event(e : QDragMoveEvent*) : Void
      Binding.bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(self, e)
    end
    protected def drag_leave_event(e : QDragLeaveEvent*) : Void
      Binding.bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(self, e)
    end
    protected def drop_event(unnamed_arg_0 : QDropEvent*) : Void
      Binding.bg_QLineEdit_dropEvent_QDropEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : QEvent*) : Void
      Binding.bg_QLineEdit_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def context_menu_event(unnamed_arg_0 : QContextMenuEvent*) : Void
      Binding.bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    protected def input_method_event(unnamed_arg_0 : QInputMethodEvent*) : Void
      Binding.bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionFrame*) : Void
      Binding.bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(self, option)
    end
    def event(unnamed_arg_0 : QEvent*) : Bool
      Binding.bg_QLineEdit_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def cursor_rect() : QRect*
      Binding.bg_QLineEdit_cursorRect_(self)
    end
  end
  class TextEdit < AbstractScrollArea
    @[Flags]
    enum AutoFormatting : UInt32
      AutoNone = 0
      AutoBulletList = 1
      AutoAll = 4294967295
    end
    enum AutoFormattingFlag : UInt32
      AutoNone = 0
      AutoBulletList = 1
      AutoAll = 4294967295
    end
    enum LineWrapMode : UInt32
      NoWrap = 0
      WidgetWidth = 1
      FixedPixelWidth = 2
      FixedColumnWidth = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QTextEdit_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTextEdit_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter redirected shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : QResizeEvent*){ self.resize_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : QMouseEvent*){ self.mouse_double_click_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : QDragEnterEvent*){ self.drag_enter_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : QDropEvent*){ self.drop_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ self.create_mime_data_from_selection() } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : QMimeData*){ self.can_insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : QMimeData*){ self.insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter redirected shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : QResizeEvent*){ self.resize_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : QMouseEvent*){ self.mouse_double_click_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : QDragEnterEvent*){ self.drag_enter_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : QDropEvent*){ self.drop_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ self.create_mime_data_from_selection() } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : QMimeData*){ self.can_insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : QMimeData*){ self.insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String)
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter redirected shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : QResizeEvent*){ self.resize_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : QMouseEvent*){ self.mouse_double_click_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : QDragEnterEvent*){ self.drag_enter_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : QDropEvent*){ self.drop_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ self.create_mime_data_from_selection() } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : QMimeData*){ self.can_insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : QMimeData*){ self.insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget)
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter redirected shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : QResizeEvent*){ self.resize_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : QMouseEvent*){ self.mouse_double_click_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : QDragEnterEvent*){ self.drag_enter_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : QDropEvent*){ self.drop_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ self.create_mime_data_from_selection() } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : QMimeData*){ self.can_insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : QMimeData*){ self.insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def document=(document : TextDocument) : Void
      Binding.bg_QTextEdit_setDocument_QTextDocument_X(self, document)
    end
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextEdit_document_(self))
    end
    def placeholder_text=(placeholder_text : String) : Void
      Binding.bg_QTextEdit_setPlaceholderText_const_QString_R(self, Qt::Converter::QString.wrap(placeholder_text))
    end
    def placeholder_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_placeholderText_(self))
    end
    def text_cursor=(cursor : TextCursor) : Void
      Binding.bg_QTextEdit_setTextCursor_const_QTextCursor_R(self, cursor)
    end
    def text_cursor() : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextEdit_textCursor_(self))
    end
    def read_only?() : Bool
      Binding.bg_QTextEdit_isReadOnly_(self)
    end
    def read_only=(ro : Bool) : Void
      Binding.bg_QTextEdit_setReadOnly_bool(self, ro)
    end
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    def text_interaction_flags() : TextInteractionFlags
      TextInteractionFlags.new(unwrap: Binding.bg_QTextEdit_textInteractionFlags_(self))
    end
    def font_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_fontFamily_(self))
    end
    def font_weight() : Int32
      Binding.bg_QTextEdit_fontWeight_(self)
    end
    def font_underline() : Bool
      Binding.bg_QTextEdit_fontUnderline_(self)
    end
    def font_italic() : Bool
      Binding.bg_QTextEdit_fontItalic_(self)
    end
    def text_color() : QColor*
      Binding.bg_QTextEdit_textColor_(self)
    end
    def text_background_color() : QColor*
      Binding.bg_QTextEdit_textBackgroundColor_(self)
    end
    def current_font() : QFont*
      Binding.bg_QTextEdit_currentFont_(self)
    end
    def alignment() : Alignment
      Alignment.new(unwrap: Binding.bg_QTextEdit_alignment_(self))
    end
    def merge_current_char_format(modifier : QTextCharFormat*) : Void
      Binding.bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    def current_char_format=(format : QTextCharFormat*) : Void
      Binding.bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(self, format)
    end
    def current_char_format() : QTextCharFormat*
      Binding.bg_QTextEdit_currentCharFormat_(self)
    end
    def auto_formatting() : TextEdit::AutoFormatting
      TextEdit::AutoFormatting.new(unwrap: Binding.bg_QTextEdit_autoFormatting_(self))
    end
    def auto_formatting=(features : TextEdit::AutoFormatting) : Void
      Binding.bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(self, features)
    end
    def tab_changes_focus() : Bool
      Binding.bg_QTextEdit_tabChangesFocus_(self)
    end
    def tab_changes_focus=(b : Bool) : Void
      Binding.bg_QTextEdit_setTabChangesFocus_bool(self, b)
    end
    def document_title=(title : String) : Void
      Binding.bg_QTextEdit_setDocumentTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def document_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_documentTitle_(self))
    end
    def undo_redo_enabled?() : Bool
      Binding.bg_QTextEdit_isUndoRedoEnabled_(self)
    end
    def undo_redo_enabled=(enable : Bool) : Void
      Binding.bg_QTextEdit_setUndoRedoEnabled_bool(self, enable)
    end
    def line_wrap_mode() : TextEdit::LineWrapMode
      TextEdit::LineWrapMode.new(unwrap: Binding.bg_QTextEdit_lineWrapMode_(self))
    end
    def line_wrap_mode=(mode : TextEdit::LineWrapMode) : Void
      Binding.bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(self, mode)
    end
    def line_wrap_column_or_width() : Int32
      Binding.bg_QTextEdit_lineWrapColumnOrWidth_(self)
    end
    def line_wrap_column_or_width=(w : Int32) : Void
      Binding.bg_QTextEdit_setLineWrapColumnOrWidth_int(self, w)
    end
    def word_wrap_mode() : TextOptionWrapMode
      TextOptionWrapMode.new(unwrap: Binding.bg_QTextEdit_wordWrapMode_(self))
    end
    def word_wrap_mode=(policy : TextOptionWrapMode) : Void
      Binding.bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(self, policy)
    end
    def find(exp : String) : Bool
      Binding.bg_QTextEdit_find_const_QString_R(self, Qt::Converter::QString.wrap(exp))
    end
    def find(exp : String, options : TextDocumentFindFlags) : Bool
      Binding.bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(exp), options)
    end
    def find(exp : QRegExp*) : Bool
      Binding.bg_QTextEdit_find_const_QRegExp_R(self, exp)
    end
    def find(exp : QRegExp*, options : TextDocumentFindFlags) : Bool
      Binding.bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(self, exp, options)
    end
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toPlainText_(self))
    end
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toHtml_(self))
    end
    def ensure_cursor_visible() : Void
      Binding.bg_QTextEdit_ensureCursorVisible_(self)
    end
    def create_standard_context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QTextEdit_createStandardContextMenu_(self))
    end
    def create_standard_context_menu(position : Binding::Point) : Menu
      Menu.new(unwrap: Binding.bg_QTextEdit_createStandardContextMenu_const_QPoint_R(self, position))
    end
    def cursor_for_position(pos : Binding::Point) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextEdit_cursorForPosition_const_QPoint_R(self, pos))
    end
    def cursor_rect(cursor : TextCursor) : QRect*
      Binding.bg_QTextEdit_cursorRect_const_QTextCursor_R(self, cursor)
    end
    def cursor_rect() : QRect*
      Binding.bg_QTextEdit_cursorRect_(self)
    end
    def anchor_at(pos : Binding::Point) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_anchorAt_const_QPoint_R(self, pos))
    end
    def overwrite_mode() : Bool
      Binding.bg_QTextEdit_overwriteMode_(self)
    end
    def overwrite_mode=(overwrite : Bool) : Void
      Binding.bg_QTextEdit_setOverwriteMode_bool(self, overwrite)
    end
    def tab_stop_width() : Int32
      Binding.bg_QTextEdit_tabStopWidth_(self)
    end
    def tab_stop_width=(width : Int32) : Void
      Binding.bg_QTextEdit_setTabStopWidth_int(self, width)
    end
    def cursor_width() : Int32
      Binding.bg_QTextEdit_cursorWidth_(self)
    end
    def cursor_width=(width : Int32) : Void
      Binding.bg_QTextEdit_setCursorWidth_int(self, width)
    end
    def accept_rich_text() : Bool
      Binding.bg_QTextEdit_acceptRichText_(self)
    end
    def accept_rich_text=(accept : Bool) : Void
      Binding.bg_QTextEdit_setAcceptRichText_bool(self, accept)
    end
    def move_cursor(operation : TextCursorMoveOperation) : Void
      Binding.bg_QTextEdit_moveCursor_QTextCursor__MoveOperation(self, operation)
    end
    def move_cursor(operation : TextCursorMoveOperation, mode : TextCursorMoveMode) : Void
      Binding.bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(self, operation, mode)
    end
    def can_paste() : Bool
      Binding.bg_QTextEdit_canPaste_(self)
    end
    def print(printer : QPagedPaintDevice*) : Void
      Binding.bg_QTextEdit_print_QPagedPaintDevice_X(self, printer)
    end
    def font_family=(font_family : String) : Void
      Binding.bg_QTextEdit_setFontFamily_const_QString_R(self, Qt::Converter::QString.wrap(font_family))
    end
    def font_weight=(w : Int32) : Void
      Binding.bg_QTextEdit_setFontWeight_int(self, w)
    end
    def font_underline=(b : Bool) : Void
      Binding.bg_QTextEdit_setFontUnderline_bool(self, b)
    end
    def font_italic=(b : Bool) : Void
      Binding.bg_QTextEdit_setFontItalic_bool(self, b)
    end
    def text_color=(c : QColor*) : Void
      Binding.bg_QTextEdit_setTextColor_const_QColor_R(self, c)
    end
    def text_background_color=(c : QColor*) : Void
      Binding.bg_QTextEdit_setTextBackgroundColor_const_QColor_R(self, c)
    end
    def current_font=(f : QFont*) : Void
      Binding.bg_QTextEdit_setCurrentFont_const_QFont_R(self, f)
    end
    def alignment=(a : Alignment) : Void
      Binding.bg_QTextEdit_setAlignment_Qt__Alignment(self, a)
    end
    def plain_text=(text : String) : Void
      Binding.bg_QTextEdit_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def html=(text : String) : Void
      Binding.bg_QTextEdit_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text=(text : String) : Void
      Binding.bg_QTextEdit_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def cut() : Void
      Binding.bg_QTextEdit_cut_(self)
    end
    def copy() : Void
      Binding.bg_QTextEdit_copy_(self)
    end
    def paste() : Void
      Binding.bg_QTextEdit_paste_(self)
    end
    def undo() : Void
      Binding.bg_QTextEdit_undo_(self)
    end
    def redo() : Void
      Binding.bg_QTextEdit_redo_(self)
    end
    def clear() : Void
      Binding.bg_QTextEdit_clear_(self)
    end
    def select_all() : Void
      Binding.bg_QTextEdit_selectAll_(self)
    end
    def insert_plain_text(text : String) : Void
      Binding.bg_QTextEdit_insertPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def insert_html(text : String) : Void
      Binding.bg_QTextEdit_insertHtml_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def append(text : String) : Void
      Binding.bg_QTextEdit_append_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def scroll_to_anchor(name : String) : Void
      Binding.bg_QTextEdit_scrollToAnchor_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def zoom_in() : Void
      Binding.bg_QTextEdit_zoomIn_(self)
    end
    def zoom_in(range : Int32) : Void
      Binding.bg_QTextEdit_zoomIn_int(self, range)
    end
    def zoom_out() : Void
      Binding.bg_QTextEdit_zoomOut_(self)
    end
    def zoom_out(range : Int32) : Void
      Binding.bg_QTextEdit_zoomOut_int(self, range)
    end
    def text_changed() : Void
      Binding.bg_QTextEdit_textChanged_(self)
    end
    def on_text_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_textChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def undo_available(b : Bool) : Void
      Binding.bg_QTextEdit_undoAvailable_bool(self, b)
    end
    def on_undo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_undoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(b : Bool){ block.call(b) })))
    end
    def redo_available(b : Bool) : Void
      Binding.bg_QTextEdit_redoAvailable_bool(self, b)
    end
    def on_redo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_redoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(b : Bool){ block.call(b) })))
    end
    def current_char_format_changed(format : QTextCharFormat*) : Void
      Binding.bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(self, format)
    end
    def on_current_char_format_changed(&block : Proc(QTextCharFormat*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_currentCharFormatChanged_CONNECT_CrystalProc_void__const_QTextCharFormatR_(self, BindgenHelper.wrap_proc(->(format : QTextCharFormat*){ block.call(format) })))
    end
    def copy_available(b : Bool) : Void
      Binding.bg_QTextEdit_copyAvailable_bool(self, b)
    end
    def on_copy_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_copyAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(b : Bool){ block.call(b) })))
    end
    def selection_changed() : Void
      Binding.bg_QTextEdit_selectionChanged_(self)
    end
    def on_selection_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_selectionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def cursor_position_changed() : Void
      Binding.bg_QTextEdit_cursorPositionChanged_(self)
    end
    def on_cursor_position_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_cursorPositionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(e : QEvent*) : Bool
      Binding.bg_QTextEdit_event_QEvent_X(self, e)
    end
    protected def timer_event(e : QTimerEvent*) : Void
      Binding.bg_QTextEdit_timerEvent_QTimerEvent_X(self, e)
    end
    protected def key_press_event(e : QKeyEvent*) : Void
      Binding.bg_QTextEdit_keyPressEvent_QKeyEvent_X(self, e)
    end
    protected def key_release_event(e : QKeyEvent*) : Void
      Binding.bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    protected def resize_event(e : QResizeEvent*) : Void
      Binding.bg_QTextEdit_resizeEvent_QResizeEvent_X(self, e)
    end
    protected def paint_event(e : QPaintEvent*) : Void
      Binding.bg_QTextEdit_paintEvent_QPaintEvent_X(self, e)
    end
    protected def mouse_press_event(e : QMouseEvent*) : Void
      Binding.bg_QTextEdit_mousePressEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_move_event(e : QMouseEvent*) : Void
      Binding.bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_release_event(e : QMouseEvent*) : Void
      Binding.bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_double_click_event(e : QMouseEvent*) : Void
      Binding.bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(self, e)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QTextEdit_focusNextPrevChild_bool(self, next_)
    end
    protected def context_menu_event(e : QContextMenuEvent*) : Void
      Binding.bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(self, e)
    end
    protected def drag_enter_event(e : QDragEnterEvent*) : Void
      Binding.bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(self, e)
    end
    protected def drag_leave_event(e : QDragLeaveEvent*) : Void
      Binding.bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(self, e)
    end
    protected def drag_move_event(e : QDragMoveEvent*) : Void
      Binding.bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(self, e)
    end
    protected def drop_event(e : QDropEvent*) : Void
      Binding.bg_QTextEdit_dropEvent_QDropEvent_X(self, e)
    end
    protected def focus_in_event(e : QFocusEvent*) : Void
      Binding.bg_QTextEdit_focusInEvent_QFocusEvent_X(self, e)
    end
    protected def focus_out_event(e : QFocusEvent*) : Void
      Binding.bg_QTextEdit_focusOutEvent_QFocusEvent_X(self, e)
    end
    protected def show_event(unnamed_arg_0 : QShowEvent*) : Void
      Binding.bg_QTextEdit_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(e : QEvent*) : Void
      Binding.bg_QTextEdit_changeEvent_QEvent_X(self, e)
    end
    protected def wheel_event(e : QWheelEvent*) : Void
      Binding.bg_QTextEdit_wheelEvent_QWheelEvent_X(self, e)
    end
    protected def create_mime_data_from_selection() : QMimeData*
      Binding.bg_QTextEdit_createMimeDataFromSelection_(self)
    end
    protected def can_insert_from_mime_data(source : QMimeData*) : Bool
      Binding.bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(self, source)
    end
    protected def insert_from_mime_data(source : QMimeData*) : Void
      Binding.bg_QTextEdit_insertFromMimeData_const_QMimeData_X(self, source)
    end
    protected def input_method_event(unnamed_arg_0 : QInputMethodEvent*) : Void
      Binding.bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    protected def initialize(dd : QTextEditPrivate*, parent : Widget)
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_QTextEditPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter redirected shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : QEvent*){ self.event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : QTimerEvent*){ self.timer_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : QResizeEvent*){ self.resize_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : QPaintEvent*){ self.paint_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : QMouseEvent*){ self.mouse_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : QMouseEvent*){ self.mouse_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : QMouseEvent*){ self.mouse_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : QMouseEvent*){ self.mouse_double_click_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : QDragEnterEvent*){ self.drag_enter_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : QDragLeaveEvent*){ self.drag_leave_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : QDragMoveEvent*){ self.drag_move_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : QDropEvent*){ self.drop_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : QFocusEvent*){ self.focus_in_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : QFocusEvent*){ self.focus_out_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ self.create_mime_data_from_selection() } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : QMimeData*){ self.can_insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : QMimeData*){ self.insert_from_mime_data(source) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : QEvent*){ self.viewport_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : QCloseEvent*){ self.close_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QTextEdit_scrollContentsBy_int_int(self, dx, dy)
    end
    protected def do_set_text_cursor(cursor : TextCursor) : Void
      Binding.bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(self, cursor)
    end
    protected def zoom_in_f(range : Float32) : Void
      Binding.bg_QTextEdit_zoomInF_float(self, range)
    end
  end
  class FileDialog < Dialog
    enum AcceptMode : UInt32
      AcceptOpen = 0
      AcceptSave = 1
    end
    enum DialogLabel : UInt32
      LookIn = 0
      FileName = 1
      FileType = 2
      Accept = 3
      Reject = 4
    end
    enum FileMode : UInt32
      AnyFile = 0
      ExistingFile = 1
      Directory = 2
      ExistingFiles = 3
      DirectoryOnly = 4
    end
    enum Option : UInt32
      ShowDirsOnly = 1
      DontResolveSymlinks = 2
      DontConfirmOverwrite = 4
      DontUseSheet = 8
      DontUseNativeDialog = 16
      ReadOnly = 32
      HideNameFilterDetails = 64
      DontUseCustomDirectoryIcons = 128
    end
    @[Flags]
    enum Options : UInt32
      ShowDirsOnly = 1
      DontResolveSymlinks = 2
      DontConfirmOverwrite = 4
      DontUseSheet = 8
      DontUseNativeDialog = 16
      ReadOnly = 32
      HideNameFilterDetails = 64
      DontUseCustomDirectoryIcons = 128
    end
    enum ViewMode : UInt32
      Detail = 0
      List = 1
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QFileDialog_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QFileDialog_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize()
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, caption : String)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, caption : String, directory : String)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(directory))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget, caption : String, directory : String, filter : String)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(directory), Qt::Converter::QString.wrap(filter))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def directory=(directory : String) : Void
      Binding.bg_QFileDialog_setDirectory_const_QString_R(self, Qt::Converter::QString.wrap(directory))
    end
    def directory=(directory : Dir) : Void
      Binding.bg_QFileDialog_setDirectory_const_QDir_R(self, directory)
    end
    def directory() : Dir
      Dir.new(unwrap: Binding.bg_QFileDialog_directory_(self))
    end
    def directory_url=(directory : QUrl*) : Void
      Binding.bg_QFileDialog_setDirectoryUrl_const_QUrl_R(self, directory)
    end
    def directory_url() : QUrl*
      Binding.bg_QFileDialog_directoryUrl_(self)
    end
    def select_file(filename : String) : Void
      Binding.bg_QFileDialog_selectFile_const_QString_R(self, Qt::Converter::QString.wrap(filename))
    end
    def selected_files() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_selectedFiles_(self))
    end
    def select_url(url : QUrl*) : Void
      Binding.bg_QFileDialog_selectUrl_const_QUrl_R(self, url)
    end
    def selected_urls() : Enumerable(QUrl)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_selectedUrls_(self))
    end
    def name_filter_details_visible=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setNameFilterDetailsVisible_bool(self, enabled)
    end
    def name_filter_details_visible?() : Bool
      Binding.bg_QFileDialog_isNameFilterDetailsVisible_(self)
    end
    def name_filter=(filter : String) : Void
      Binding.bg_QFileDialog_setNameFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def name_filters=(filters : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setNameFilters_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, filters))
    end
    def name_filters() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_nameFilters_(self))
    end
    def select_name_filter(filter : String) : Void
      Binding.bg_QFileDialog_selectNameFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def selected_mime_type_filter() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_selectedMimeTypeFilter_(self))
    end
    def selected_name_filter() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_selectedNameFilter_(self))
    end
    def mime_type_filters=(filters : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, filters))
    end
    def mime_type_filters() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_mimeTypeFilters_(self))
    end
    def select_mime_type_filter(filter : String) : Void
      Binding.bg_QFileDialog_selectMimeTypeFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def filter() : Dir::Filters
      Dir::Filters.new(unwrap: Binding.bg_QFileDialog_filter_(self))
    end
    def filter=(filters : Dir::Filters) : Void
      Binding.bg_QFileDialog_setFilter_QDir__Filters(self, filters)
    end
    def view_mode=(mode : FileDialog::ViewMode) : Void
      Binding.bg_QFileDialog_setViewMode_QFileDialog__ViewMode(self, mode)
    end
    def view_mode() : FileDialog::ViewMode
      FileDialog::ViewMode.new(unwrap: Binding.bg_QFileDialog_viewMode_(self))
    end
    def file_mode=(mode : FileDialog::FileMode) : Void
      Binding.bg_QFileDialog_setFileMode_QFileDialog__FileMode(self, mode)
    end
    def file_mode() : FileDialog::FileMode
      FileDialog::FileMode.new(unwrap: Binding.bg_QFileDialog_fileMode_(self))
    end
    def accept_mode=(mode : FileDialog::AcceptMode) : Void
      Binding.bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(self, mode)
    end
    def accept_mode() : FileDialog::AcceptMode
      FileDialog::AcceptMode.new(unwrap: Binding.bg_QFileDialog_acceptMode_(self))
    end
    def read_only=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setReadOnly_bool(self, enabled)
    end
    def read_only?() : Bool
      Binding.bg_QFileDialog_isReadOnly_(self)
    end
    def resolve_symlinks=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setResolveSymlinks_bool(self, enabled)
    end
    def resolve_symlinks() : Bool
      Binding.bg_QFileDialog_resolveSymlinks_(self)
    end
    def sidebar_urls=(urls : Enumerable(QUrl)) : Void
      Binding.bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(self, BindgenHelper.wrap_container(QList_QUrl, urls))
    end
    def sidebar_urls() : Enumerable(QUrl)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_sidebarUrls_(self))
    end
    def save_state() : QByteArray*
      Binding.bg_QFileDialog_saveState_(self)
    end
    def restore_state(state : QByteArray*) : Bool
      Binding.bg_QFileDialog_restoreState_const_QByteArray_R(self, state)
    end
    def confirm_overwrite=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setConfirmOverwrite_bool(self, enabled)
    end
    def confirm_overwrite() : Bool
      Binding.bg_QFileDialog_confirmOverwrite_(self)
    end
    def default_suffix=(suffix : String) : Void
      Binding.bg_QFileDialog_setDefaultSuffix_const_QString_R(self, Qt::Converter::QString.wrap(suffix))
    end
    def default_suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_defaultSuffix_(self))
    end
    def history=(paths : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setHistory_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, paths))
    end
    def history() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_history_(self))
    end
    def item_delegate=(delegate : QAbstractItemDelegate*) : Void
      Binding.bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(self, delegate)
    end
    def item_delegate() : QAbstractItemDelegate*
      Binding.bg_QFileDialog_itemDelegate_(self)
    end
    def icon_provider=(provider : QFileIconProvider*) : Void
      Binding.bg_QFileDialog_setIconProvider_QFileIconProvider_X(self, provider)
    end
    def icon_provider() : QFileIconProvider*
      Binding.bg_QFileDialog_iconProvider_(self)
    end
    def set_label_text(label : FileDialog::DialogLabel, text : String) : Void
      Binding.bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(self, label, Qt::Converter::QString.wrap(text))
    end
    def label_text(label : FileDialog::DialogLabel) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_labelText_QFileDialog__DialogLabel(self, label))
    end
    def supported_schemes=(schemes : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setSupportedSchemes_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, schemes))
    end
    def supported_schemes() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_supportedSchemes_(self))
    end
    def proxy_model=(model : QAbstractProxyModel*) : Void
      Binding.bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(self, model)
    end
    def proxy_model() : QAbstractProxyModel*
      Binding.bg_QFileDialog_proxyModel_(self)
    end
    def option=(option : FileDialog::Option) : Void
      Binding.bg_QFileDialog_setOption_QFileDialog__Option(self, option)
    end
    def set_option(option : FileDialog::Option, on : Bool) : Void
      Binding.bg_QFileDialog_setOption_QFileDialog__Option_bool(self, option, on)
    end
    def test_option(option : FileDialog::Option) : Bool
      Binding.bg_QFileDialog_testOption_QFileDialog__Option(self, option)
    end
    def options=(options : FileDialog::Options) : Void
      Binding.bg_QFileDialog_setOptions_QFileDialog__Options(self, options)
    end
    def options() : FileDialog::Options
      FileDialog::Options.new(unwrap: Binding.bg_QFileDialog_options_(self))
    end
    def open(receiver : Object, member : UInt8*) : Void
      Binding.bg_QFileDialog_open_QObject_X_const_char_X(self, receiver, member)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QFileDialog_setVisible_bool(self, visible)
    end
    def file_selected(file : String) : Void
      Binding.bg_QFileDialog_fileSelected_const_QString_R(self, Qt::Converter::QString.wrap(file))
    end
    def on_file_selected(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_fileSelected_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(file : CrystalString){ block.call(Qt::Converter::QString.unwrap(file)) })))
    end
    def files_selected(files : Enumerable(String)) : Void
      Binding.bg_QFileDialog_filesSelected_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, files))
    end
    def on_files_selected(&block : Proc(Enumerable(String), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_filesSelected_CONNECT_CrystalProc_void__const_QStringListR_(self, BindgenHelper.wrap_proc(->(files : Void*){ block.call(QList_QString.new(unwrap: files)) })))
    end
    def current_changed(path : String) : Void
      Binding.bg_QFileDialog_currentChanged_const_QString_R(self, Qt::Converter::QString.wrap(path))
    end
    def on_current_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_currentChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(path : CrystalString){ block.call(Qt::Converter::QString.unwrap(path)) })))
    end
    def directory_entered(directory : String) : Void
      Binding.bg_QFileDialog_directoryEntered_const_QString_R(self, Qt::Converter::QString.wrap(directory))
    end
    def on_directory_entered(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_directoryEntered_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(directory : CrystalString){ block.call(Qt::Converter::QString.unwrap(directory)) })))
    end
    def url_selected(url : QUrl*) : Void
      Binding.bg_QFileDialog_urlSelected_const_QUrl_R(self, url)
    end
    def on_url_selected(&block : Proc(QUrl*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_urlSelected_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(url : QUrl*){ block.call(url) })))
    end
    def urls_selected(urls : Enumerable(QUrl)) : Void
      Binding.bg_QFileDialog_urlsSelected_const_QList_QUrl__R(self, BindgenHelper.wrap_container(QList_QUrl, urls))
    end
    def on_urls_selected(&block : Proc(Enumerable(QUrl), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_urlsSelected_CONNECT_CrystalProc_void__const_QList_QUrl_R_(self, BindgenHelper.wrap_proc(->(urls : Void*){ block.call(QList_QUrl.new(unwrap: urls)) })))
    end
    def current_url_changed(url : QUrl*) : Void
      Binding.bg_QFileDialog_currentUrlChanged_const_QUrl_R(self, url)
    end
    def on_current_url_changed(&block : Proc(QUrl*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_currentUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(url : QUrl*){ block.call(url) })))
    end
    def directory_url_entered(directory : QUrl*) : Void
      Binding.bg_QFileDialog_directoryUrlEntered_const_QUrl_R(self, directory)
    end
    def on_directory_url_entered(&block : Proc(QUrl*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_directoryUrlEntered_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(directory : QUrl*){ block.call(directory) })))
    end
    def filter_selected(filter : String) : Void
      Binding.bg_QFileDialog_filterSelected_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def on_filter_selected(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_filterSelected_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(filter : CrystalString){ block.call(Qt::Converter::QString.unwrap(filter)) })))
    end
    def self.open_file_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_())
    end
    def self.get_open_file_name(parent : Widget) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X(parent))
    end
    def self.get_open_file_name(parent : Widget, caption : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_open_file_name(parent : Widget, caption : String, dir : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    def self.get_open_file_name(parent : Widget, caption : String, dir : String, filter : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), Qt::Converter::QString.wrap(filter)))
    end
    def self.open_file_url() : QUrl*
      Binding.bg_QFileDialog_getOpenFileUrl_STATIC_()
    end
    def self.get_open_file_url(parent : Widget) : QUrl*
      Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X(parent)
    end
    def self.get_open_file_url(parent : Widget, caption : String) : QUrl*
      Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption))
    end
    def self.get_open_file_url(parent : Widget, caption : String, dir : QUrl*) : QUrl*
      Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir)
    end
    def self.get_open_file_url(parent : Widget, caption : String, dir : QUrl*, filter : String) : QUrl*
      Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter))
    end
    def self.save_file_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_())
    end
    def self.get_save_file_name(parent : Widget) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X(parent))
    end
    def self.get_save_file_name(parent : Widget, caption : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_save_file_name(parent : Widget, caption : String, dir : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    def self.get_save_file_name(parent : Widget, caption : String, dir : String, filter : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), Qt::Converter::QString.wrap(filter)))
    end
    def self.save_file_url() : QUrl*
      Binding.bg_QFileDialog_getSaveFileUrl_STATIC_()
    end
    def self.get_save_file_url(parent : Widget) : QUrl*
      Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X(parent)
    end
    def self.get_save_file_url(parent : Widget, caption : String) : QUrl*
      Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption))
    end
    def self.get_save_file_url(parent : Widget, caption : String, dir : QUrl*) : QUrl*
      Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir)
    end
    def self.get_save_file_url(parent : Widget, caption : String, dir : QUrl*, filter : String) : QUrl*
      Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter))
    end
    def self.existing_directory() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_())
    end
    def self.get_existing_directory(parent : Widget) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X(parent))
    end
    def self.get_existing_directory(parent : Widget, caption : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_existing_directory(parent : Widget, caption : String, dir : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    def self.get_existing_directory(parent : Widget, caption : String, dir : String, options : FileDialog::Options) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), options))
    end
    def self.existing_directory_url() : QUrl*
      Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_()
    end
    def self.get_existing_directory_url(parent : Widget) : QUrl*
      Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X(parent)
    end
    def self.get_existing_directory_url(parent : Widget, caption : String) : QUrl*
      Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption))
    end
    def self.get_existing_directory_url(parent : Widget, caption : String, dir : QUrl*) : QUrl*
      Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir)
    end
    def self.get_existing_directory_url(parent : Widget, caption : String, dir : QUrl*, options : FileDialog::Options) : QUrl*
      Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(parent, Qt::Converter::QString.wrap(caption), dir, options)
    end
    def self.get_existing_directory_url(parent : Widget, caption : String, dir : QUrl*, options : FileDialog::Options, supported_schemes : Enumerable(String)) : QUrl*
      Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(parent, Qt::Converter::QString.wrap(caption), dir, options, BindgenHelper.wrap_container(QList_QString, supported_schemes))
    end
    def self.open_file_names() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_getOpenFileNames_STATIC_())
    end
    def self.get_open_file_names(parent : Widget) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X(parent))
    end
    def self.get_open_file_names(parent : Widget, caption : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_open_file_names(parent : Widget, caption : String, dir : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    def self.get_open_file_names(parent : Widget, caption : String, dir : String, filter : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), Qt::Converter::QString.wrap(filter)))
    end
    def self.open_file_urls() : Enumerable(QUrl)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_())
    end
    def self.get_open_file_urls(parent : Widget) : Enumerable(QUrl)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X(parent))
    end
    def self.get_open_file_urls(parent : Widget, caption : String) : Enumerable(QUrl)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_open_file_urls(parent : Widget, caption : String, dir : QUrl*) : Enumerable(QUrl)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    def self.get_open_file_urls(parent : Widget, caption : String, dir : QUrl*, filter : String) : Enumerable(QUrl)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter)))
    end
    protected def initialize(args : QFileDialogArgs*)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_const_QFileDialogArgs_R(args)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter redirected shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : QEvent*){ self.change_event(e) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : QCloseEvent*){ self.close_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : QShowEvent*){ self.show_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : QResizeEvent*){ self.resize_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), unnamed_arg_1) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : QFocusEvent*){ self.focus_in_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : QFocusEvent*){ self.focus_out_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : QEvent*){ self.enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : QEvent*){ self.leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : QPaintEvent*){ self.paint_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : QActionEvent*){ self.action_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QDragEnterEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QDragMoveEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QDragLeaveEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : QHideEvent*){ self.hide_event(event) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDeviceMetric){ self.metric(PaintDeviceMetric.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : QPainter*){ self.init_painter(painter) } {% else %} nil {% end %}),
      bg_QWidget_redirected_QPoint_X: BindgenHelper.wrap_proc({% if forwarded.includes?("redirected") %} ->(offset : QPoint*){ self.redirected(offset) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ self.shared_painter() } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : QInputMethodEvent*){ self.input_method_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def done(result : Int32) : Void
      Binding.bg_QFileDialog_done_int(self, result)
    end
    protected def accept() : Void
      Binding.bg_QFileDialog_accept_(self)
    end
    protected def change_event(e : QEvent*) : Void
      Binding.bg_QFileDialog_changeEvent_QEvent_X(self, e)
    end
  end
  class TextOption 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextOption_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(alignment : Alignment)
      unwrap = Binding.bg_QTextOption_CONSTRUCT_Qt__Alignment(alignment)
    @unwrap = unwrap
    
    end
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QTextOption_setAlignment_Qt__Alignment(self, alignment)
    end
    def alignment() : Alignment
      Alignment.new(unwrap: Binding.bg_QTextOption_alignment_(self))
    end
    def text_direction=(a_direction : LayoutDirection) : Void
      Binding.bg_QTextOption_setTextDirection_Qt__LayoutDirection(self, a_direction)
    end
    def text_direction() : LayoutDirection
      LayoutDirection.new(unwrap: Binding.bg_QTextOption_textDirection_(self))
    end
    def wrap_mode=(wrap : TextOptionWrapMode) : Void
      Binding.bg_QTextOption_setWrapMode_QTextOption__WrapMode(self, wrap)
    end
    def wrap_mode() : TextOptionWrapMode
      TextOptionWrapMode.new(unwrap: Binding.bg_QTextOption_wrapMode_(self))
    end
    def flags=(flags : TextOptionFlags) : Void
      Binding.bg_QTextOption_setFlags_QTextOption__Flags(self, flags)
    end
    def flags() : TextOptionFlags
      TextOptionFlags.new(unwrap: Binding.bg_QTextOption_flags_(self))
    end
    def use_design_metrics=(b : Bool) : Void
      Binding.bg_QTextOption_setUseDesignMetrics_bool(self, b)
    end
    def use_design_metrics() : Bool
      Binding.bg_QTextOption_useDesignMetrics_(self)
    end
  end
  class TextDocument < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QTextDocument_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTextDocument_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_tr_STATIC_const_char_X(s))
    end
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_trUtf8_STATIC_const_char_X(s))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X(s, c))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*, n : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : QTextFormat*){ self.create_object(f) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Object)
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : QTextFormat*){ self.create_object(f) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String)
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(text))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : QTextFormat*){ self.create_object(f) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Object)
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_const_QString_R_QObject_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : QTextFormat*){ self.create_object(f) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def clone() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextDocument_clone_(self))
    end
    def clone(parent : Object) : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextDocument_clone_QObject_X(self, parent))
    end
    def empty?() : Bool
      Binding.bg_QTextDocument_isEmpty_(self)
    end
    def clear() : Void
      Binding.bg_QTextDocument_clear_(self)
    end
    def undo_redo_enabled=(enable : Bool) : Void
      Binding.bg_QTextDocument_setUndoRedoEnabled_bool(self, enable)
    end
    def undo_redo_enabled?() : Bool
      Binding.bg_QTextDocument_isUndoRedoEnabled_(self)
    end
    def undo_available?() : Bool
      Binding.bg_QTextDocument_isUndoAvailable_(self)
    end
    def redo_available?() : Bool
      Binding.bg_QTextDocument_isRedoAvailable_(self)
    end
    def available_undo_steps() : Int32
      Binding.bg_QTextDocument_availableUndoSteps_(self)
    end
    def available_redo_steps() : Int32
      Binding.bg_QTextDocument_availableRedoSteps_(self)
    end
    def revision() : Int32
      Binding.bg_QTextDocument_revision_(self)
    end
    def document_layout=(layout : QAbstractTextDocumentLayout*) : Void
      Binding.bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(self, layout)
    end
    def document_layout() : QAbstractTextDocumentLayout*
      Binding.bg_QTextDocument_documentLayout_(self)
    end
    def set_meta_information(info : TextDocumentMetaInformation, unnamed_arg_1 : String) : Void
      Binding.bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(self, info, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    def meta_information(info : TextDocumentMetaInformation) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(self, info))
    end
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toHtml_(self))
    end
    def to_html(encoding : QByteArray*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toHtml_const_QByteArray_R(self, encoding))
    end
    def html=(html : String) : Void
      Binding.bg_QTextDocument_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    def to_raw_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toRawText_(self))
    end
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toPlainText_(self))
    end
    def plain_text=(text : String) : Void
      Binding.bg_QTextDocument_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def character_at(pos : Int32) : QChar*
      Binding.bg_QTextDocument_characterAt_int(self, pos)
    end
    def find(sub_string : String) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R(self, Qt::Converter::QString.wrap(sub_string)))
    end
    def find(sub_string : String, from : Int32) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_int(self, Qt::Converter::QString.wrap(sub_string), from))
    end
    def find(sub_string : String, from : Int32, options : TextDocumentFindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(sub_string), from, options))
    end
    def find(sub_string : String, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(self, Qt::Converter::QString.wrap(sub_string), cursor))
    end
    def find(sub_string : String, cursor : TextCursor, options : TextDocumentFindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(sub_string), cursor, options))
    end
    def find(expr : QRegExp*) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R(self, expr))
    end
    def find(expr : QRegExp*, from : Int32) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_int(self, expr, from))
    end
    def find(expr : QRegExp*, from : Int32, options : TextDocumentFindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(self, expr, from, options))
    end
    def find(expr : QRegExp*, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(self, expr, cursor))
    end
    def find(expr : QRegExp*, cursor : TextCursor, options : TextDocumentFindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(self, expr, cursor, options))
    end
    def find(expr : QRegularExpression*) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R(self, expr))
    end
    def find(expr : QRegularExpression*, from : Int32) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_int(self, expr, from))
    end
    def find(expr : QRegularExpression*, from : Int32, options : TextDocumentFindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(self, expr, from, options))
    end
    def find(expr : QRegularExpression*, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(self, expr, cursor))
    end
    def find(expr : QRegularExpression*, cursor : TextCursor, options : TextDocumentFindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(self, expr, cursor, options))
    end
    def frame_at(pos : Int32) : QTextFrame*
      Binding.bg_QTextDocument_frameAt_int(self, pos)
    end
    def root_frame() : QTextFrame*
      Binding.bg_QTextDocument_rootFrame_(self)
    end
    def object(object_index : Int32) : QTextObject*
      Binding.bg_QTextDocument_object_int(self, object_index)
    end
    def object_for_format(unnamed_arg_0 : QTextFormat*) : QTextObject*
      Binding.bg_QTextDocument_objectForFormat_const_QTextFormat_R(self, unnamed_arg_0)
    end
    def find_block(pos : Int32) : QTextBlock*
      Binding.bg_QTextDocument_findBlock_int(self, pos)
    end
    def find_block_by_number(block_number : Int32) : QTextBlock*
      Binding.bg_QTextDocument_findBlockByNumber_int(self, block_number)
    end
    def find_block_by_line_number(block_number : Int32) : QTextBlock*
      Binding.bg_QTextDocument_findBlockByLineNumber_int(self, block_number)
    end
    def begin() : QTextBlock*
      Binding.bg_QTextDocument_begin_(self)
    end
    def end() : QTextBlock*
      Binding.bg_QTextDocument_end_(self)
    end
    def first_block() : QTextBlock*
      Binding.bg_QTextDocument_firstBlock_(self)
    end
    def last_block() : QTextBlock*
      Binding.bg_QTextDocument_lastBlock_(self)
    end
    def page_size=(size : QSizeF*) : Void
      Binding.bg_QTextDocument_setPageSize_const_QSizeF_R(self, size)
    end
    def page_size() : QSizeF*
      Binding.bg_QTextDocument_pageSize_(self)
    end
    def default_font=(font : QFont*) : Void
      Binding.bg_QTextDocument_setDefaultFont_const_QFont_R(self, font)
    end
    def default_font() : QFont*
      Binding.bg_QTextDocument_defaultFont_(self)
    end
    def page_count() : Int32
      Binding.bg_QTextDocument_pageCount_(self)
    end
    def modified?() : Bool
      Binding.bg_QTextDocument_isModified_(self)
    end
    def print(printer : QPagedPaintDevice*) : Void
      Binding.bg_QTextDocument_print_QPagedPaintDevice_X(self, printer)
    end
    def mark_contents_dirty(from : Int32, length : Int32) : Void
      Binding.bg_QTextDocument_markContentsDirty_int_int(self, from, length)
    end
    def use_design_metrics=(b : Bool) : Void
      Binding.bg_QTextDocument_setUseDesignMetrics_bool(self, b)
    end
    def use_design_metrics() : Bool
      Binding.bg_QTextDocument_useDesignMetrics_(self)
    end
    def draw_contents(painter : QPainter*) : Void
      Binding.bg_QTextDocument_drawContents_QPainter_X(self, painter)
    end
    def draw_contents(painter : QPainter*, rect : QRectF*) : Void
      Binding.bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    def adjust_size() : Void
      Binding.bg_QTextDocument_adjustSize_(self)
    end
    def size() : QSizeF*
      Binding.bg_QTextDocument_size_(self)
    end
    def block_count() : Int32
      Binding.bg_QTextDocument_blockCount_(self)
    end
    def line_count() : Int32
      Binding.bg_QTextDocument_lineCount_(self)
    end
    def character_count() : Int32
      Binding.bg_QTextDocument_characterCount_(self)
    end
    def default_style_sheet=(sheet : String) : Void
      Binding.bg_QTextDocument_setDefaultStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(sheet))
    end
    def default_style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_defaultStyleSheet_(self))
    end
    def undo(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_undo_QTextCursor_X(self, cursor)
    end
    def redo(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_redo_QTextCursor_X(self, cursor)
    end
    def clear_undo_redo_stacks() : Void
      Binding.bg_QTextDocument_clearUndoRedoStacks_(self)
    end
    def clear_undo_redo_stacks(history_to_clear : TextDocumentStacks) : Void
      Binding.bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(self, history_to_clear)
    end
    def maximum_block_count() : Int32
      Binding.bg_QTextDocument_maximumBlockCount_(self)
    end
    def maximum_block_count=(maximum : Int32) : Void
      Binding.bg_QTextDocument_setMaximumBlockCount_int(self, maximum)
    end
    def default_text_option() : TextOption
      TextOption.new(unwrap: Binding.bg_QTextDocument_defaultTextOption_(self))
    end
    def default_text_option=(option : TextOption) : Void
      Binding.bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(self, option)
    end
    def base_url() : QUrl*
      Binding.bg_QTextDocument_baseUrl_(self)
    end
    def base_url=(url : QUrl*) : Void
      Binding.bg_QTextDocument_setBaseUrl_const_QUrl_R(self, url)
    end
    def default_cursor_move_style() : CursorMoveStyle
      CursorMoveStyle.new(unwrap: Binding.bg_QTextDocument_defaultCursorMoveStyle_(self))
    end
    def default_cursor_move_style=(style : CursorMoveStyle) : Void
      Binding.bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(self, style)
    end
    def contents_change(from : Int32, chars_removed : Int32, chars_added : Int32) : Void
      Binding.bg_QTextDocument_contentsChange_int_int_int(self, from, chars_removed, chars_added)
    end
    def on_contents_change(&block : Proc(Int32, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_contentsChange_CONNECT_CrystalProc_void__int__int__int_(self, BindgenHelper.wrap_proc(->(from : Int32, chars_removed : Int32, chars_added : Int32){ block.call(from, chars_removed, chars_added) })))
    end
    def contents_changed() : Void
      Binding.bg_QTextDocument_contentsChanged_(self)
    end
    def on_contents_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_contentsChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def undo_available(unnamed_arg_0 : Bool) : Void
      Binding.bg_QTextDocument_undoAvailable_bool(self, unnamed_arg_0)
    end
    def on_undo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_undoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Bool){ block.call(unnamed_arg_0) })))
    end
    def redo_available(unnamed_arg_0 : Bool) : Void
      Binding.bg_QTextDocument_redoAvailable_bool(self, unnamed_arg_0)
    end
    def on_redo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_redoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Bool){ block.call(unnamed_arg_0) })))
    end
    def undo_command_added() : Void
      Binding.bg_QTextDocument_undoCommandAdded_(self)
    end
    def on_undo_command_added(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_undoCommandAdded_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def modification_changed(m : Bool) : Void
      Binding.bg_QTextDocument_modificationChanged_bool(self, m)
    end
    def on_modification_changed(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_modificationChanged_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(m : Bool){ block.call(m) })))
    end
    def cursor_position_changed(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(self, cursor)
    end
    def on_cursor_position_changed(&block : Proc(TextCursor, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_cursorPositionChanged_CONNECT_CrystalProc_void__const_QTextCursorR_(self, BindgenHelper.wrap_proc(->(cursor : QTextCursor*){ block.call(TextCursor.new(unwrap: cursor)) })))
    end
    def block_count_changed(new_block_count : Int32) : Void
      Binding.bg_QTextDocument_blockCountChanged_int(self, new_block_count)
    end
    def on_block_count_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_blockCountChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(new_block_count : Int32){ block.call(new_block_count) })))
    end
    def base_url_changed(url : QUrl*) : Void
      Binding.bg_QTextDocument_baseUrlChanged_const_QUrl_R(self, url)
    end
    def on_base_url_changed(&block : Proc(QUrl*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_baseUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(url : QUrl*){ block.call(url) })))
    end
    def document_layout_changed() : Void
      Binding.bg_QTextDocument_documentLayoutChanged_(self)
    end
    def on_document_layout_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_documentLayoutChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def undo() : Void
      Binding.bg_QTextDocument_undo_(self)
    end
    def redo() : Void
      Binding.bg_QTextDocument_redo_(self)
    end
    def append_undo_item(unnamed_arg_0 : QAbstractUndoItem*) : Void
      Binding.bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(self, unnamed_arg_0)
    end
    def set_modified() : Void
      Binding.bg_QTextDocument_setModified_(self)
    end
    def modified=(m : Bool) : Void
      Binding.bg_QTextDocument_setModified_bool(self, m)
    end
    protected def create_object(f : QTextFormat*) : QTextObject*
      Binding.bg_QTextDocument_createObject_const_QTextFormat_R(self, f)
    end
    protected def initialize(dd : QTextDocumentPrivate*, parent : Object)
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_QTextDocumentPrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : QTextFormat*){ self.create_object(f) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : QEvent*){ self.event(event) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : QObject*, event : QEvent*){ self.event_filter(Object.new(unwrap: watched), event) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : QTimerEvent*){ self.timer_event(event) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : QEvent*){ self.custom_event(event) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def doc_handle() : QTextDocumentPrivate*
      Binding.bg_QTextDocument_docHandle_(self)
    end
  end
  class TextCursor 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(document : TextDocument)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextDocument_X(document)
    @unwrap = unwrap
    
    end
    def initialize(p : QTextDocumentPrivate*, pos : Int32)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextDocumentPrivate_X_int(p, pos)
    @unwrap = unwrap
    
    end
    def initialize(d : QTextCursorPrivate*)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextCursorPrivate_X(d)
    @unwrap = unwrap
    
    end
    def initialize(frame : QTextFrame*)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextFrame_X(frame)
    @unwrap = unwrap
    
    end
    def initialize(block : QTextBlock*)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_const_QTextBlock_R(block)
    @unwrap = unwrap
    
    end
    def swap(other : TextCursor) : Void
      Binding.bg_QTextCursor_swap_QTextCursor_R(self, other)
    end
    def null?() : Bool
      Binding.bg_QTextCursor_isNull_(self)
    end
    def position=(pos : Int32) : Void
      Binding.bg_QTextCursor_setPosition_int(self, pos)
    end
    def set_position(pos : Int32, mode : TextCursorMoveMode) : Void
      Binding.bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(self, pos, mode)
    end
    def position() : Int32
      Binding.bg_QTextCursor_position_(self)
    end
    def position_in_block() : Int32
      Binding.bg_QTextCursor_positionInBlock_(self)
    end
    def anchor() : Int32
      Binding.bg_QTextCursor_anchor_(self)
    end
    def insert_text(text : String) : Void
      Binding.bg_QTextCursor_insertText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def insert_text(text : String, format : QTextCharFormat*) : Void
      Binding.bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(self, Qt::Converter::QString.wrap(text), format)
    end
    def move_position(op : TextCursorMoveOperation) : Bool
      Binding.bg_QTextCursor_movePosition_QTextCursor__MoveOperation(self, op)
    end
    def move_position(op : TextCursorMoveOperation, unnamed_arg_1 : TextCursorMoveMode) : Bool
      Binding.bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode(self, op, unnamed_arg_1)
    end
    def move_position(op : TextCursorMoveOperation, unnamed_arg_1 : TextCursorMoveMode, n : Int32) : Bool
      Binding.bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(self, op, unnamed_arg_1, n)
    end
    def visual_navigation() : Bool
      Binding.bg_QTextCursor_visualNavigation_(self)
    end
    def visual_navigation=(b : Bool) : Void
      Binding.bg_QTextCursor_setVisualNavigation_bool(self, b)
    end
    def vertical_movement_x=(x : Int32) : Void
      Binding.bg_QTextCursor_setVerticalMovementX_int(self, x)
    end
    def vertical_movement_x() : Int32
      Binding.bg_QTextCursor_verticalMovementX_(self)
    end
    def keep_position_on_insert=(b : Bool) : Void
      Binding.bg_QTextCursor_setKeepPositionOnInsert_bool(self, b)
    end
    def keep_position_on_insert() : Bool
      Binding.bg_QTextCursor_keepPositionOnInsert_(self)
    end
    def delete_char() : Void
      Binding.bg_QTextCursor_deleteChar_(self)
    end
    def delete_previous_char() : Void
      Binding.bg_QTextCursor_deletePreviousChar_(self)
    end
    def select(selection : TextCursorSelectionType) : Void
      Binding.bg_QTextCursor_select_QTextCursor__SelectionType(self, selection)
    end
    def has_selection?() : Bool
      Binding.bg_QTextCursor_hasSelection_(self)
    end
    def has_complex_selection?() : Bool
      Binding.bg_QTextCursor_hasComplexSelection_(self)
    end
    def remove_selected_text() : Void
      Binding.bg_QTextCursor_removeSelectedText_(self)
    end
    def clear_selection() : Void
      Binding.bg_QTextCursor_clearSelection_(self)
    end
    def selection_start() : Int32
      Binding.bg_QTextCursor_selectionStart_(self)
    end
    def selection_end() : Int32
      Binding.bg_QTextCursor_selectionEnd_(self)
    end
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCursor_selectedText_(self))
    end
    def selection() : QTextDocumentFragment*
      Binding.bg_QTextCursor_selection_(self)
    end
    def selected_table_cells(first_row : Int32*, num_rows : Int32*, first_column : Int32*, num_columns : Int32*) : Void
      Binding.bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(self, first_row, num_rows, first_column, num_columns)
    end
    def block() : QTextBlock*
      Binding.bg_QTextCursor_block_(self)
    end
    def char_format() : QTextCharFormat*
      Binding.bg_QTextCursor_charFormat_(self)
    end
    def char_format=(format : QTextCharFormat*) : Void
      Binding.bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(self, format)
    end
    def merge_char_format(modifier : QTextCharFormat*) : Void
      Binding.bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    def block_format() : QTextBlockFormat*
      Binding.bg_QTextCursor_blockFormat_(self)
    end
    def block_format=(format : QTextBlockFormat*) : Void
      Binding.bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(self, format)
    end
    def merge_block_format(modifier : QTextBlockFormat*) : Void
      Binding.bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(self, modifier)
    end
    def block_char_format() : QTextCharFormat*
      Binding.bg_QTextCursor_blockCharFormat_(self)
    end
    def block_char_format=(format : QTextCharFormat*) : Void
      Binding.bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(self, format)
    end
    def merge_block_char_format(modifier : QTextCharFormat*) : Void
      Binding.bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    def at_block_start() : Bool
      Binding.bg_QTextCursor_atBlockStart_(self)
    end
    def at_block_end() : Bool
      Binding.bg_QTextCursor_atBlockEnd_(self)
    end
    def at_start() : Bool
      Binding.bg_QTextCursor_atStart_(self)
    end
    def at_end() : Bool
      Binding.bg_QTextCursor_atEnd_(self)
    end
    def insert_block() : Void
      Binding.bg_QTextCursor_insertBlock_(self)
    end
    def insert_block(format : QTextBlockFormat*) : Void
      Binding.bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(self, format)
    end
    def insert_block(format : QTextBlockFormat*, char_format : QTextCharFormat*) : Void
      Binding.bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(self, format, char_format)
    end
    def insert_list(format : QTextListFormat*) : QTextList*
      Binding.bg_QTextCursor_insertList_const_QTextListFormat_R(self, format)
    end
    def insert_list(style : TextListFormatStyle) : QTextList*
      Binding.bg_QTextCursor_insertList_QTextListFormat__Style(self, style)
    end
    def create_list(format : QTextListFormat*) : QTextList*
      Binding.bg_QTextCursor_createList_const_QTextListFormat_R(self, format)
    end
    def create_list(style : TextListFormatStyle) : QTextList*
      Binding.bg_QTextCursor_createList_QTextListFormat__Style(self, style)
    end
    def current_list() : QTextList*
      Binding.bg_QTextCursor_currentList_(self)
    end
    def insert_table(rows : Int32, cols : Int32, format : QTextTableFormat*) : QTextTable*
      Binding.bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(self, rows, cols, format)
    end
    def insert_table(rows : Int32, cols : Int32) : QTextTable*
      Binding.bg_QTextCursor_insertTable_int_int(self, rows, cols)
    end
    def current_table() : QTextTable*
      Binding.bg_QTextCursor_currentTable_(self)
    end
    def insert_frame(format : QTextFrameFormat*) : QTextFrame*
      Binding.bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(self, format)
    end
    def current_frame() : QTextFrame*
      Binding.bg_QTextCursor_currentFrame_(self)
    end
    def insert_fragment(fragment : QTextDocumentFragment*) : Void
      Binding.bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(self, fragment)
    end
    def insert_html(html : String) : Void
      Binding.bg_QTextCursor_insertHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    def insert_image(format : QTextImageFormat*, alignment : TextFrameFormatPosition) : Void
      Binding.bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(self, format, alignment)
    end
    def insert_image(format : QTextImageFormat*) : Void
      Binding.bg_QTextCursor_insertImage_const_QTextImageFormat_R(self, format)
    end
    def insert_image(name : String) : Void
      Binding.bg_QTextCursor_insertImage_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def insert_image(image : Image) : Void
      Binding.bg_QTextCursor_insertImage_const_QImage_R(self, image)
    end
    def insert_image(image : Image, name : String) : Void
      Binding.bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(self, image, Qt::Converter::QString.wrap(name))
    end
    def begin_edit_block() : Void
      Binding.bg_QTextCursor_beginEditBlock_(self)
    end
    def join_previous_edit_block() : Void
      Binding.bg_QTextCursor_joinPreviousEditBlock_(self)
    end
    def end_edit_block() : Void
      Binding.bg_QTextCursor_endEditBlock_(self)
    end
    def is_copy_of(other : TextCursor) : Bool
      Binding.bg_QTextCursor_isCopyOf_const_QTextCursor_R(self, other)
    end
    def block_number() : Int32
      Binding.bg_QTextCursor_blockNumber_(self)
    end
    def column_number() : Int32
      Binding.bg_QTextCursor_columnNumber_(self)
    end
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextCursor_document_(self))
    end
  end
  class Dir 
    @[Flags]
    enum Filters : Int32
      Dirs = 1
      Files = 2
      Drives = 4
      NoSymLinks = 8
      AllEntries = 7
      TypeMask = 15
      Readable = 16
      Writable = 32
      Executable = 64
      PermissionMask = 112
      Modified = 128
      Hidden = 256
      System = 512
      AccessMask = 1008
      AllDirs = 1024
      CaseSensitive = 2048
      NoDot = 8192
      NoDotDot = 16384
      NoDotAndDotDot = 24576
      NoFilter = -1
    end
    @[Flags]
    enum SortFlags : Int32
      Name = 0
      Time = 1
      Size = 2
      Unsorted = 3
      SortByMask = 3
      DirsFirst = 4
      Reversed = 8
      IgnoreCase = 16
      DirsLast = 32
      LocaleAware = 64
      Type = 128
      NoSort = -1
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QDir_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(path : String)
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(path))
    @unwrap = unwrap
    
    end
    def initialize(path : String, name_filter : String)
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter))
    @unwrap = unwrap
    
    end
    def initialize(path : String, name_filter : String, sort : Dir::SortFlags)
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter), sort)
    @unwrap = unwrap
    
    end
    def initialize(path : String, name_filter : String, sort : Dir::SortFlags, filter : Dir::Filters)
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter), sort, filter)
    @unwrap = unwrap
    
    end
    def swap(other : Dir) : Void
      Binding.bg_QDir_swap_QDir_R(self, other)
    end
    def path=(path : String) : Void
      Binding.bg_QDir_setPath_const_QString_R(self, Qt::Converter::QString.wrap(path))
    end
    def path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_path_(self))
    end
    def absolute_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_absolutePath_(self))
    end
    def canonical_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_canonicalPath_(self))
    end
    def self.add_resource_search_path(path : String) : Void
      Binding.bg_QDir_addResourceSearchPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def self.set_search_paths(prefix : String, search_paths : Enumerable(String)) : Void
      Binding.bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(Qt::Converter::QString.wrap(prefix), BindgenHelper.wrap_container(QList_QString, search_paths))
    end
    def self.add_search_path(prefix : String, path : String) : Void
      Binding.bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(prefix), Qt::Converter::QString.wrap(path))
    end
    def self.search_paths(prefix : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_searchPaths_STATIC_const_QString_R(Qt::Converter::QString.wrap(prefix)))
    end
    def dir_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_dirName_(self))
    end
    def file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_filePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    def absolute_file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_absoluteFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    def relative_file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_relativeFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    def self.to_native_separators(path_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_toNativeSeparators_STATIC_const_QString_R(Qt::Converter::QString.wrap(path_name)))
    end
    def self.from_native_separators(path_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_fromNativeSeparators_STATIC_const_QString_R(Qt::Converter::QString.wrap(path_name)))
    end
    def cd(dir_name : String) : Bool
      Binding.bg_QDir_cd_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    def cd_up() : Bool
      Binding.bg_QDir_cdUp_(self)
    end
    def name_filters() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_nameFilters_(self))
    end
    def name_filters=(name_filters : Enumerable(String)) : Void
      Binding.bg_QDir_setNameFilters_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, name_filters))
    end
    def filter() : Dir::Filters
      Dir::Filters.new(unwrap: Binding.bg_QDir_filter_(self))
    end
    def filter=(filter : Dir::Filters) : Void
      Binding.bg_QDir_setFilter_QDir__Filters(self, filter)
    end
    def sorting() : Dir::SortFlags
      Dir::SortFlags.new(unwrap: Binding.bg_QDir_sorting_(self))
    end
    def sorting=(sort : Dir::SortFlags) : Void
      Binding.bg_QDir_setSorting_QDir__SortFlags(self, sort)
    end
    def count() : UInt32
      Binding.bg_QDir_count_(self)
    end
    def empty?() : Bool
      Binding.bg_QDir_isEmpty_(self)
    end
    def is_empty(filters : Dir::Filters) : Bool
      Binding.bg_QDir_isEmpty_QDir__Filters(self, filters)
    end
    def self.name_filters_from_string(name_filter : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_nameFiltersFromString_STATIC_const_QString_R(Qt::Converter::QString.wrap(name_filter)))
    end
    def entry_list() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_(self))
    end
    def entry_list(filters : Dir::Filters) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_QDir__Filters(self, filters))
    end
    def entry_list(filters : Dir::Filters, sort : Dir::SortFlags) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_QDir__Filters_QDir__SortFlags(self, filters, sort))
    end
    def entry_list(name_filters : Enumerable(String)) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, name_filters)))
    end
    def entry_list(name_filters : Enumerable(String), filters : Dir::Filters) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_const_QStringList_R_QDir__Filters(self, BindgenHelper.wrap_container(QList_QString, name_filters), filters))
    end
    def entry_list(name_filters : Enumerable(String), filters : Dir::Filters, sort : Dir::SortFlags) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(self, BindgenHelper.wrap_container(QList_QString, name_filters), filters, sort))
    end
    def entry_info_list() : QFileInfoList*
      Binding.bg_QDir_entryInfoList_(self)
    end
    def entry_info_list(filters : Dir::Filters) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_QDir__Filters(self, filters)
    end
    def entry_info_list(filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(self, filters, sort)
    end
    def entry_info_list(name_filters : Enumerable(String)) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, name_filters))
    end
    def entry_info_list(name_filters : Enumerable(String), filters : Dir::Filters) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(self, BindgenHelper.wrap_container(QList_QString, name_filters), filters)
    end
    def entry_info_list(name_filters : Enumerable(String), filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(self, BindgenHelper.wrap_container(QList_QString, name_filters), filters, sort)
    end
    def mkdir(dir_name : String) : Bool
      Binding.bg_QDir_mkdir_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    def rmdir(dir_name : String) : Bool
      Binding.bg_QDir_rmdir_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    def mkpath(dir_path : String) : Bool
      Binding.bg_QDir_mkpath_const_QString_R(self, Qt::Converter::QString.wrap(dir_path))
    end
    def rmpath(dir_path : String) : Bool
      Binding.bg_QDir_rmpath_const_QString_R(self, Qt::Converter::QString.wrap(dir_path))
    end
    def remove_recursively() : Bool
      Binding.bg_QDir_removeRecursively_(self)
    end
    def readable?() : Bool
      Binding.bg_QDir_isReadable_(self)
    end
    def exists() : Bool
      Binding.bg_QDir_exists_(self)
    end
    def root?() : Bool
      Binding.bg_QDir_isRoot_(self)
    end
    def self.is_relative_path(path : String) : Bool
      Binding.bg_QDir_isRelativePath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def self.is_absolute_path(path : String) : Bool
      Binding.bg_QDir_isAbsolutePath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def relative?() : Bool
      Binding.bg_QDir_isRelative_(self)
    end
    def absolute?() : Bool
      Binding.bg_QDir_isAbsolute_(self)
    end
    def make_absolute() : Bool
      Binding.bg_QDir_makeAbsolute_(self)
    end
    def remove(file_name : String) : Bool
      Binding.bg_QDir_remove_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    def rename(old_name : String, new_name : String) : Bool
      Binding.bg_QDir_rename_const_QString_R_const_QString_R(self, Qt::Converter::QString.wrap(old_name), Qt::Converter::QString.wrap(new_name))
    end
    def exists(name : String) : Bool
      Binding.bg_QDir_exists_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def self.drives() : QFileInfoList*
      Binding.bg_QDir_drives_STATIC_()
    end
    def self.list_separator() : QChar*
      Binding.bg_QDir_listSeparator_STATIC_()
    end
    def self.separator() : QChar*
      Binding.bg_QDir_separator_STATIC_()
    end
    def self.set_current(path : String) : Bool
      Binding.bg_QDir_setCurrent_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def self.current() : Dir
      Dir.new(unwrap: Binding.bg_QDir_current_STATIC_())
    end
    def self.current_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_currentPath_STATIC_())
    end
    def self.home() : Dir
      Dir.new(unwrap: Binding.bg_QDir_home_STATIC_())
    end
    def self.home_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_homePath_STATIC_())
    end
    def self.root() : Dir
      Dir.new(unwrap: Binding.bg_QDir_root_STATIC_())
    end
    def self.root_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_rootPath_STATIC_())
    end
    def self.temp() : Dir
      Dir.new(unwrap: Binding.bg_QDir_temp_STATIC_())
    end
    def self.temp_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_tempPath_STATIC_())
    end
    def self.match(filters : Enumerable(String), file_name : String) : Bool
      Binding.bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(BindgenHelper.wrap_container(QList_QString, filters), Qt::Converter::QString.wrap(file_name))
    end
    def self.match(filter : String, file_name : String) : Bool
      Binding.bg_QDir_match_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(filter), Qt::Converter::QString.wrap(file_name))
    end
    def self.clean_path(path : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_cleanPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path)))
    end
    def refresh() : Void
      Binding.bg_QDir_refresh_(self)
    end
    protected def initialize(d : QDirPrivate*)
      unwrap = Binding.bg_QDir_CONSTRUCT_QDirPrivate_R(d)
    @unwrap = unwrap
    
    end
  end
  class QList_QString < BindgenHelper::SequentialContainer(String)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QString_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QList_QString_at_int(self, index))
    end
    def push(value : String) : Void
      Binding.bg_QList_QString_push_back_QString(self, Qt::Converter::QString.wrap(value))
    end
    def size() : Int32
      Binding.bg_QList_QString_size_(self)
    end
  end
  class QList_QObject_X < BindgenHelper::SequentialContainer(Object)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QObject_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Object
      Object.new(unwrap: Binding.bg_QList_QObject_X_at_int(self, index))
    end
    def push(value : Object) : Void
      Binding.bg_QList_QObject_X_push_back_QObject_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QObject_X_size_(self)
    end
  end
  class QList_QWidget_X < BindgenHelper::SequentialContainer(Widget)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QWidget_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QList_QWidget_X_at_int(self, index))
    end
    def push(value : Widget) : Void
      Binding.bg_QList_QWidget_X_push_back_QWidget_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QWidget_X_size_(self)
    end
  end
  class QList_QAction_X < BindgenHelper::SequentialContainer(Action)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QAction_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Action
      Action.new(unwrap: Binding.bg_QList_QAction_X_at_int(self, index))
    end
    def push(value : Action) : Void
      Binding.bg_QList_QAction_X_push_back_QAction_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QAction_X_size_(self)
    end
  end
  class QList_QUrl < BindgenHelper::SequentialContainer(Binding::QUrl)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QUrl_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : QUrl*
      Binding.bg_QList_QUrl_at_int(self, index)
    end
    def push(value : QUrl*) : Void
      Binding.bg_QList_QUrl_push_back_QUrl(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QUrl_size_(self)
    end
  end
  class QList_QAbstractEventDispatcher__TimerInfo < BindgenHelper::SequentialContainer(Binding::EventDispatcherTimerInfo)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Binding::EventDispatcherTimerInfo
      Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_at_int(self, index)
    end
    def push(value : Binding::EventDispatcherTimerInfo) : Void
      Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_push_back_QAbstractEventDispatcher__TimerInfo(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_size_(self)
    end
  end
end
