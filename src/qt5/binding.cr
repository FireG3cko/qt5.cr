module Qt
  
  # Native bindings.  Mostly generated.
  lib Binding
    # Container for string data.
    struct CrystalString
      ptr : LibC::Char*
      size : LibC::Int
    end
  
    # Container for a `Proc`
    struct CrystalProc
      ptr : Void*
      context : Void*
    end
  
    # Container for raw memory-data.  The `ptr` could be anything.
    struct CrystalSlice
      ptr : Void*
      size : LibC::Int
    end
  end
  
  # Helpers for bindings.  Required.
  module BindgenHelper
    # Wraps `Proc` to a `Binding::CrystalProc`, which can then passed on to C++.
    def self.wrap_proc(proc : Proc)
      Binding::CrystalProc.new(
        ptr: proc.pointer,
        context: proc.closure_data,
      )
    end
  
    # Wraps `Proc` to a `Binding::CrystalProc`, which can then passed on to C++.
    # `Nil` version, returns a null-proc.
    def self.wrap_proc(nothing : Nil)
      Binding::CrystalProc.new(
        ptr: Pointer(Void).null,
        context: Pointer(Void).null,
      )
    end
  
    # Wraps a *list* into a container *wrapper*, if it's not already one.
    macro wrap_container(wrapper, list)
      %instance = {{ list }}
      if %instance.is_a?({{ wrapper }})
        %instance
      else
        {{wrapper}}.new.concat(%instance)
      end
    end
  
    # Wrapper for an instantiated, sequential container type.
    #
    # This offers (almost) all read-only methods known from `Array`.
    # Additionally, there's `#<<`.  Other than that, the container type is not
    # meant to be used for storage, but for data transmission between the C++
    # and the Crystal world.  Don't let that discourage you though.
    abstract class SequentialContainer(T)
      include Indexable(T)
  
      # `#unsafe_at` and `#size` will be implemented by the wrapper class.
  
      # Adds an element at the end.  Implemented by the wrapper.
      abstract def push(value)
  
      # Adds *element* at the end of the container.
      def <<(value : T) : self
        push(value)
        self
      end
  
      # Adds all *elements* at the end of the container, retaining their order.
      def concat(values : Enumerable(T)) : self
        values.each{|v| push(v)}
        self
      end
  
      def to_s(io)
        to_a.to_s(io)
      end
  
      def inspect(io)
        io << "<Wrapped "
        to_a.inspect(io)
        io << ">"
      end
    end
  end
  
  @[Link(ldflags: "#{__DIR__}/../../ext/binding.a -lstdc++ -lQt5Core -lQt5Gui -lQt5Widgets")]
  lib Binding
    alias QList_QString = Void
    alias QList_QObject_X = Void
    alias QObject = Void
    alias QList_QWidget_X = Void
    alias QWidget = Void
    alias QList_QDockWidget_X = Void
    alias QDockWidget = Void
    alias QList_QAction_X = Void
    alias QAction = Void
    alias QList_QGesture_X = Void
    alias QGesture = Void
    alias QList_QAbstractButton_X = Void
    alias QAbstractButton = Void
    alias QList_QUrl = Void
    alias QUrl = Void
    alias QList_QGraphicsItem_X = Void
    alias QGraphicsItem = Void
    alias QList_QGraphicsWidget_X = Void
    alias QGraphicsWidget = Void
    alias QList_QGraphicsTransform_X = Void
    alias QGraphicsTransform = Void
    alias QList_QGraphicsView_X = Void
    alias QGraphicsView = Void
    alias QList_QAbstractEventDispatcher__TimerInfo = Void
    alias QList_QSize = Void
    alias QSize = Void
    alias QList_QKeySequence = Void
    alias QKeySequence = Void
    alias QList_QRectF = Void
    alias QRectF = Void
    alias QList_QScreen_X = Void
    alias QScreen = Void
    alias QList_qreal = Void
    alias QList_int = Void
    alias QVector_QLine = Void
    alias QLine = Void
    alias QVector_QLineF = Void
    alias QLineF = Void
    alias QVector_QPoint = Void
    alias QVector_QPointF = Void
    alias QVector_QRect = Void
    alias QRect = Void
    alias QVector_QRectF = Void
    alias QVector_QRgb = Void
    alias QVector_QTextLength = Void
    alias QTextLength = Void
    alias QVector_QTextFormat = Void
    alias QTextFormat = Void
    alias QMetaObject = Void
    alias QEvent = Void
    alias QThread = Void
    alias QMetaMethod = Void
    alias QObjectUserData = Void
    alias QTimerEvent = Void
    alias QChildEvent = Void
    alias QObjectPrivate = Void
    alias QAbstractEventDispatcher = Void
    alias QSocketNotifier = Void
    alias QAbstractNativeEventFilter = Void
    alias QByteArray = Void
    alias QAbstractEventDispatcherPrivate = Void
    alias QPaintDevice = Void
    alias QPaintEngine = Void
    alias QPainter = Void
    alias QStyle = Void
    alias QRegion = Void
    alias QPalette = Void
    alias QFont = Void
    alias QFontMetrics = Void
    alias QFontInfo = Void
    alias QCursor = Void
    alias QBitmap = Void
    alias QPixmap = Void
    alias QGraphicsEffect = Void
    alias QIcon = Void
    alias QLocale = Void
    alias QGraphicsProxyWidget = Void
    alias QSizePolicy = Void
    alias QMargins = Void
    alias QLayout = Void
    alias QBackingStore = Void
    alias QWindow = Void
    alias QMouseEvent = Void
    alias QWheelEvent = Void
    alias QKeyEvent = Void
    alias QFocusEvent = Void
    alias QPaintEvent = Void
    alias QMoveEvent = Void
    alias QResizeEvent = Void
    alias QCloseEvent = Void
    alias QContextMenuEvent = Void
    alias QTabletEvent = Void
    alias QActionEvent = Void
    alias QDragEnterEvent = Void
    alias QDragMoveEvent = Void
    alias QDragLeaveEvent = Void
    alias QDropEvent = Void
    alias QShowEvent = Void
    alias QHideEvent = Void
    alias QInputMethodEvent = Void
    alias QWidgetPrivate = Void
    alias QButtonGroup = Void
    alias QAbstractButtonPrivate = Void
    alias QToolButton = Void
    alias QMenu = Void
    alias QStyleOptionToolButton = Void
    alias QToolBar = Void
    alias QStyleOptionToolBar = Void
    alias QFrame = Void
    alias QFramePrivate = Void
    alias QStyleOptionFrame = Void
    alias QProgressBar = Void
    alias QStyleOptionProgressBar = Void
    alias QAbstractSlider = Void
    alias QAbstractSliderPrivate = Void
    alias QDial = Void
    alias QStyleOptionSlider = Void
    alias QScrollBar = Void
    alias QSlider = Void
    alias QAbstractScrollArea = Void
    alias QAbstractScrollAreaPrivate = Void
    alias QScrollArea = Void
    alias QScrollAreaPrivate = Void
    alias QAbstractSpinBox = Void
    alias QStyleOptionSpinBox = Void
    alias QLineEdit = Void
    alias QAbstractSpinBoxPrivate = Void
    alias QSpinBox = Void
    alias QDoubleSpinBox = Void
    alias QMenuBar = Void
    alias QPlatformMenuBar = Void
    alias QStyleOptionMenuItem = Void
    alias QPlatformMenu = Void
    alias QMenuPrivate = Void
    alias QActionGroup = Void
    alias QActionPrivate = Void
    alias QStatusBar = Void
    alias QMainWindow = Void
    alias QStyleOptionDockWidget = Void
    alias QDialog = Void
    alias QDialogPrivate = Void
    alias QLabel = Void
    alias QPicture = Void
    alias QMovie = Void
    alias QLCDNumber = Void
    alias QPushButton = Void
    alias QStyleOptionButton = Void
    alias QPushButtonPrivate = Void
    alias QCheckBox = Void
    alias QRadioButton = Void
    alias QGroupBox = Void
    alias QStyleOptionGroupBox = Void
    alias QCoreApplication = Void
    alias QTranslator = Void
    alias QPostEventList = Void
    alias QCoreApplicationPrivate = Void
    alias QGuiApplication = Void
    alias QWindowList = Void
    alias QClipboard = Void
    alias QStyleHints = Void
    alias QInputMethod = Void
    alias QPlatformNativeInterface = Void
    alias QSessionManager = Void
    alias QGuiApplicationPrivate = Void
    alias QApplication = Void
    alias QDesktopWidget = Void
    alias QImage = Void
    alias QColor = Void
    alias QMatrix = Void
    alias QTransform = Void
    alias QIODevice = Void
    alias QPixelFormat = Void
    alias QPlatformPixmap = Void
    alias QImageReader = Void
    alias QIconEngine = Void
    alias QEventLoop = Void
    alias QTabBar = Void
    alias QStyleOptionTab = Void
    alias QTabWidget = Void
    alias QStyleOptionTabWidgetFrame = Void
    alias QLayoutItem = Void
    alias QSpacerItem = Void
    alias QLayoutPrivate = Void
    alias QBoxLayout = Void
    alias QHBoxLayout = Void
    alias QVBoxLayout = Void
    alias QBrush = Void
    alias QSizeF = Void
    alias QMarginsF = Void
    alias QValidator = Void
    alias QCompleter = Void
    alias QTextEdit = Void
    alias QTextDocument = Void
    alias QTextCursor = Void
    alias QTextCharFormat = Void
    alias QRegExp = Void
    alias QPagedPaintDevice = Void
    alias QMimeData = Void
    alias QTextEditPrivate = Void
    alias QFileDialog = Void
    alias QDir = Void
    alias QAbstractItemDelegate = Void
    alias QFileIconProvider = Void
    alias QAbstractProxyModel = Void
    alias QFileDialogArgs = Void
    alias QTextOption = Void
    alias QAbstractTextDocumentLayout = Void
    alias QChar = Void
    alias QRegularExpression = Void
    alias QTextFrame = Void
    alias QTextObject = Void
    alias QTextBlock = Void
    alias QAbstractUndoItem = Void
    alias QTextDocumentPrivate = Void
    alias QTextCursorPrivate = Void
    alias QTextDocumentFragment = Void
    alias QTextBlockFormat = Void
    alias QTextList = Void
    alias QTextListFormat = Void
    alias QTextTable = Void
    alias QTextTableFormat = Void
    alias QTextFrameFormat = Void
    alias QTextImageFormat = Void
    alias QFileInfoList = Void
    alias QDirPrivate = Void
    alias QGraphicsScene = Void
    alias QGraphicsObject = Void
    alias QGraphicsItemGroup = Void
    alias QPainterPath = Void
    alias QStyleOptionGraphicsItem = Void
    alias QPolygonF = Void
    alias QGraphicsSceneContextMenuEvent = Void
    alias QGraphicsSceneDragDropEvent = Void
    alias QGraphicsSceneHoverEvent = Void
    alias QGraphicsSceneMouseEvent = Void
    alias QGraphicsSceneWheelEvent = Void
    alias QGraphicsItemPrivate = Void
    alias QGraphicsEllipseItem = Void
    alias QPen = Void
    alias QGraphicsLineItem = Void
    alias QGraphicsPathItem = Void
    alias QGraphicsPixmapItem = Void
    alias QGraphicsPolygonItem = Void
    alias QGraphicsRectItem = Void
    alias QGraphicsTextItem = Void
    alias QGraphicsSimpleTextItem = Void
    alias QGraphicsSceneHelpEvent = Void
    alias QPolygon = Void
    alias QGraphicsViewPrivate = Void
    alias QGraphicsLayout = Void
    alias QStyleOption = Void
    alias QGraphicsSceneMoveEvent = Void
    alias QGraphicsSceneResizeEvent = Void
    alias QGraphicsWidgetPrivate = Void
    alias QMatrix4x4 = Void
    alias QGraphicsTransformPrivate = Void
    alias QAbstractGraphicsShapeItem = Void
    alias QAbstractGraphicsShapeItemPrivate = Void
    alias QGradient = Void
    alias QRgba64 = Void
    alias QLatin1String = Void
    alias QDynamicPropertyChangeEvent = Void
    alias QDeferredDeleteEvent = Void
    alias QInputEvent = Void
    alias QEnterEvent = Void
    alias QExposeEvent = Void
    alias QPlatformSurfaceEvent = Void
    alias QIconDragEvent = Void
    alias QInputMethodQueryEvent = Void
    alias QDrag = Void
    alias QHelpEvent = Void
    alias QStatusTipEvent = Void
    alias QWhatsThisClickedEvent = Void
    alias QFileOpenEvent = Void
    alias QFile = Void
    alias QToolBarChangeEvent = Void
    alias QShortcutEvent = Void
    alias QScrollPrepareEvent = Void
    alias QScrollEvent = Void
    alias QScreenOrientationChangeEvent = Void
    alias QApplicationStateChangeEvent = Void
    alias QGestureEvent = Void
    alias QGraphicsSceneEvent = Void
    alias QGraphicsSceneEventPrivate = Void
    alias QIODevicePrivate = Void
    alias QGesturePrivate = Void
    alias QGlyphRun = Void
    alias QStaticText = Void
    alias QTextItem = Void
    alias QSystemTrayIcon = Void
    alias QDesktopServices = Void
    alias QStandardPaths = Void
    alias QUrlQuery = Void
    alias QPlatformScreen = Void
    alias QTextTableCellFormat = Void
    struct EventDispatcherTimerInfo
      timer_id : Int32
      interval : Int32
      timer_type : TimerType
    end
    struct QPoint
      xp : Int32
      yp : Int32
    end
    struct QPointF
      xp : Float64
      yp : Float64
    end

    struct BgTableQObject
      bg_QObject_metaObject_ : CrystalProc
      bg_QObject_qt_metacast_const_char_X : CrystalProc
      bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QObject_JUMPTABLE(self : QObject*, table : BgTableQObject*) : Void
    struct BgTableQAbstractEventDispatcher
      bg_QAbstractEventDispatcher_metaObject_ : CrystalProc
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags : CrystalProc
      bg_QAbstractEventDispatcher_hasPendingEvents_ : CrystalProc
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X : CrystalProc
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X : CrystalProc
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_unregisterTimer_int : CrystalProc
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_remainingTime_int : CrystalProc
      bg_QAbstractEventDispatcher_wakeUp_ : CrystalProc
      bg_QAbstractEventDispatcher_interrupt_ : CrystalProc
      bg_QAbstractEventDispatcher_flush_ : CrystalProc
      bg_QAbstractEventDispatcher_startingUp_ : CrystalProc
      bg_QAbstractEventDispatcher_closingDown_ : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractEventDispatcher_JUMPTABLE(self : QAbstractEventDispatcher*, table : BgTableQAbstractEventDispatcher*) : Void
    struct BgTableQSocketNotifier
      bg_QSocketNotifier_metaObject_ : CrystalProc
      bg_QSocketNotifier_qt_metacast_const_char_X : CrystalProc
      bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSocketNotifier_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QSocketNotifier_JUMPTABLE(self : QSocketNotifier*, table : BgTableQSocketNotifier*) : Void
    struct BgTableQPaintDevice
      bg_QPaintDevice_devType_ : CrystalProc
      bg_QPaintDevice_paintEngine_ : CrystalProc
      bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QPaintDevice_initPainter_QPainter_X : CrystalProc
      bg_QPaintDevice_sharedPainter_ : CrystalProc
    end
    fun bg_QPaintDevice_JUMPTABLE(self : QPaintDevice*, table : BgTableQPaintDevice*) : Void
    struct BgTableQWidget
      bg_QWidget_metaObject_ : CrystalProc
      bg_QWidget_qt_metacast_const_char_X : CrystalProc
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QWidget_JUMPTABLE(self : QWidget*, table : BgTableQWidget*) : Void
    struct BgTableQAbstractButton
      bg_QAbstractButton_metaObject_ : CrystalProc
      bg_QAbstractButton_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractButton_hitButton_const_QPoint_R : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_event_QEvent_X : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractButton_JUMPTABLE(self : QAbstractButton*, table : BgTableQAbstractButton*) : Void
    struct BgTableQToolButton
      bg_QToolButton_metaObject_ : CrystalProc
      bg_QToolButton_qt_metacast_const_char_X : CrystalProc
      bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QToolButton_sizeHint_ : CrystalProc
      bg_QToolButton_minimumSizeHint_ : CrystalProc
      bg_QToolButton_event_QEvent_X : CrystalProc
      bg_QToolButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QToolButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QToolButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QToolButton_actionEvent_QActionEvent_X : CrystalProc
      bg_QToolButton_enterEvent_QEvent_X : CrystalProc
      bg_QToolButton_leaveEvent_QEvent_X : CrystalProc
      bg_QToolButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QToolButton_changeEvent_QEvent_X : CrystalProc
      bg_QToolButton_hitButton_const_QPoint_R : CrystalProc
      bg_QToolButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QToolButton_JUMPTABLE(self : QToolButton*, table : BgTableQToolButton*) : Void
    struct BgTableQToolBar
      bg_QToolBar_metaObject_ : CrystalProc
      bg_QToolBar_qt_metacast_const_char_X : CrystalProc
      bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QToolBar_actionEvent_QActionEvent_X : CrystalProc
      bg_QToolBar_changeEvent_QEvent_X : CrystalProc
      bg_QToolBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QToolBar_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QToolBar_JUMPTABLE(self : QToolBar*, table : BgTableQToolBar*) : Void
    struct BgTableQFrame
      bg_QFrame_metaObject_ : CrystalProc
      bg_QFrame_qt_metacast_const_char_X : CrystalProc
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QFrame_sizeHint_ : CrystalProc
      bg_QFrame_event_QEvent_X : CrystalProc
      bg_QFrame_paintEvent_QPaintEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QFrame_JUMPTABLE(self : QFrame*, table : BgTableQFrame*) : Void
    struct BgTableQProgressBar
      bg_QProgressBar_metaObject_ : CrystalProc
      bg_QProgressBar_qt_metacast_const_char_X : CrystalProc
      bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QProgressBar_text_ : CrystalProc
      bg_QProgressBar_sizeHint_ : CrystalProc
      bg_QProgressBar_minimumSizeHint_ : CrystalProc
      bg_QProgressBar_event_QEvent_X : CrystalProc
      bg_QProgressBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QProgressBar_JUMPTABLE(self : QProgressBar*, table : BgTableQProgressBar*) : Void
    struct BgTableQAbstractSlider
      bg_QAbstractSlider_metaObject_ : CrystalProc
      bg_QAbstractSlider_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractSlider_event_QEvent_X : CrystalProc
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractSlider_JUMPTABLE(self : QAbstractSlider*, table : BgTableQAbstractSlider*) : Void
    struct BgTableQDial
      bg_QDial_metaObject_ : CrystalProc
      bg_QDial_qt_metacast_const_char_X : CrystalProc
      bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDial_sizeHint_ : CrystalProc
      bg_QDial_minimumSizeHint_ : CrystalProc
      bg_QDial_event_QEvent_X : CrystalProc
      bg_QDial_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDial_paintEvent_QPaintEvent_X : CrystalProc
      bg_QDial_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QDial_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QDial_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QDial_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QDial_JUMPTABLE(self : QDial*, table : BgTableQDial*) : Void
    struct BgTableQScrollBar
      bg_QScrollBar_metaObject_ : CrystalProc
      bg_QScrollBar_qt_metacast_const_char_X : CrystalProc
      bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QScrollBar_sizeHint_ : CrystalProc
      bg_QScrollBar_event_QEvent_X : CrystalProc
      bg_QScrollBar_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QScrollBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QScrollBar_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QScrollBar_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QScrollBar_hideEvent_QHideEvent_X : CrystalProc
      bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QScrollBar_JUMPTABLE(self : QScrollBar*, table : BgTableQScrollBar*) : Void
    struct BgTableQSlider
      bg_QSlider_metaObject_ : CrystalProc
      bg_QSlider_qt_metacast_const_char_X : CrystalProc
      bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSlider_sizeHint_ : CrystalProc
      bg_QSlider_minimumSizeHint_ : CrystalProc
      bg_QSlider_event_QEvent_X : CrystalProc
      bg_QSlider_paintEvent_QPaintEvent_X : CrystalProc
      bg_QSlider_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QSlider_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QSlider_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QSlider_JUMPTABLE(self : QSlider*, table : BgTableQSlider*) : Void
    struct BgTableQAbstractScrollArea
      bg_QAbstractScrollArea_metaObject_ : CrystalProc
      bg_QAbstractScrollArea_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_sizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_event_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractScrollArea_scrollContentsBy_int_int : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractScrollArea_JUMPTABLE(self : QAbstractScrollArea*, table : BgTableQAbstractScrollArea*) : Void
    struct BgTableQScrollArea
      bg_QScrollArea_metaObject_ : CrystalProc
      bg_QScrollArea_qt_metacast_const_char_X : CrystalProc
      bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QScrollArea_sizeHint_ : CrystalProc
      bg_QScrollArea_focusNextPrevChild_bool : CrystalProc
      bg_QScrollArea_event_QEvent_X : CrystalProc
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QScrollArea_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QScrollArea_scrollContentsBy_int_int : CrystalProc
      bg_QScrollArea_viewportSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QScrollArea_JUMPTABLE(self : QScrollArea*, table : BgTableQScrollArea*) : Void
    struct BgTableQAbstractSpinBox
      bg_QAbstractSpinBox_metaObject_ : CrystalProc
      bg_QAbstractSpinBox_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractSpinBox_sizeHint_ : CrystalProc
      bg_QAbstractSpinBox_minimumSizeHint_ : CrystalProc
      bg_QAbstractSpinBox_event_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepBy_int : CrystalProc
      bg_QAbstractSpinBox_clear_ : CrystalProc
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSpinBox_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X : CrystalProc
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractSpinBox_showEvent_QShowEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepEnabled_ : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAbstractSpinBox_JUMPTABLE(self : QAbstractSpinBox*, table : BgTableQAbstractSpinBox*) : Void
    struct BgTableQSpinBox
      bg_QSpinBox_metaObject_ : CrystalProc
      bg_QSpinBox_qt_metacast_const_char_X : CrystalProc
      bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSpinBox_event_QEvent_X : CrystalProc
      bg_QSpinBox_valueFromText_const_QString_R : CrystalProc
      bg_QSpinBox_textFromValue_int : CrystalProc
      bg_QAbstractSpinBox_sizeHint_ : CrystalProc
      bg_QAbstractSpinBox_minimumSizeHint_ : CrystalProc
      bg_QAbstractSpinBox_stepBy_int : CrystalProc
      bg_QAbstractSpinBox_clear_ : CrystalProc
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSpinBox_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X : CrystalProc
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractSpinBox_showEvent_QShowEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepEnabled_ : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QSpinBox_JUMPTABLE(self : QSpinBox*, table : BgTableQSpinBox*) : Void
    struct BgTableQDoubleSpinBox
      bg_QDoubleSpinBox_metaObject_ : CrystalProc
      bg_QDoubleSpinBox_qt_metacast_const_char_X : CrystalProc
      bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDoubleSpinBox_valueFromText_const_QString_R : CrystalProc
      bg_QDoubleSpinBox_textFromValue_double : CrystalProc
      bg_QAbstractSpinBox_sizeHint_ : CrystalProc
      bg_QAbstractSpinBox_minimumSizeHint_ : CrystalProc
      bg_QAbstractSpinBox_event_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepBy_int : CrystalProc
      bg_QAbstractSpinBox_clear_ : CrystalProc
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSpinBox_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X : CrystalProc
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractSpinBox_showEvent_QShowEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepEnabled_ : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QDoubleSpinBox_JUMPTABLE(self : QDoubleSpinBox*, table : BgTableQDoubleSpinBox*) : Void
    struct BgTableQMenuBar
      bg_QMenuBar_metaObject_ : CrystalProc
      bg_QMenuBar_qt_metacast_const_char_X : CrystalProc
      bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMenuBar_sizeHint_ : CrystalProc
      bg_QMenuBar_minimumSizeHint_ : CrystalProc
      bg_QMenuBar_heightForWidth_int : CrystalProc
      bg_QMenuBar_setVisible_bool : CrystalProc
      bg_QMenuBar_changeEvent_QEvent_X : CrystalProc
      bg_QMenuBar_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_leaveEvent_QEvent_X : CrystalProc
      bg_QMenuBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QMenuBar_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QMenuBar_actionEvent_QActionEvent_X : CrystalProc
      bg_QMenuBar_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QMenuBar_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QMenuBar_timerEvent_QTimerEvent_X : CrystalProc
      bg_QMenuBar_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QMenuBar_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QMenuBar_JUMPTABLE(self : QMenuBar*, table : BgTableQMenuBar*) : Void
    struct BgTableQMenu
      bg_QMenu_metaObject_ : CrystalProc
      bg_QMenu_qt_metacast_const_char_X : CrystalProc
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMenu_sizeHint_ : CrystalProc
      bg_QMenu_changeEvent_QEvent_X : CrystalProc
      bg_QMenu_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QMenu_enterEvent_QEvent_X : CrystalProc
      bg_QMenu_leaveEvent_QEvent_X : CrystalProc
      bg_QMenu_hideEvent_QHideEvent_X : CrystalProc
      bg_QMenu_paintEvent_QPaintEvent_X : CrystalProc
      bg_QMenu_actionEvent_QActionEvent_X : CrystalProc
      bg_QMenu_timerEvent_QTimerEvent_X : CrystalProc
      bg_QMenu_event_QEvent_X : CrystalProc
      bg_QMenu_focusNextPrevChild_bool : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QMenu_JUMPTABLE(self : QMenu*, table : BgTableQMenu*) : Void
    struct BgTableQAction
      bg_QAction_metaObject_ : CrystalProc
      bg_QAction_qt_metacast_const_char_X : CrystalProc
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAction_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QAction_JUMPTABLE(self : QAction*, table : BgTableQAction*) : Void
    struct BgTableQStatusBar
      bg_QStatusBar_metaObject_ : CrystalProc
      bg_QStatusBar_qt_metacast_const_char_X : CrystalProc
      bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QStatusBar_showEvent_QShowEvent_X : CrystalProc
      bg_QStatusBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QStatusBar_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QStatusBar_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QStatusBar_JUMPTABLE(self : QStatusBar*, table : BgTableQStatusBar*) : Void
    struct BgTableQMainWindow
      bg_QMainWindow_metaObject_ : CrystalProc
      bg_QMainWindow_qt_metacast_const_char_X : CrystalProc
      bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMainWindow_createPopupMenu_ : CrystalProc
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QMainWindow_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QMainWindow_JUMPTABLE(self : QMainWindow*, table : BgTableQMainWindow*) : Void
    struct BgTableQDockWidget
      bg_QDockWidget_metaObject_ : CrystalProc
      bg_QDockWidget_qt_metacast_const_char_X : CrystalProc
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDockWidget_changeEvent_QEvent_X : CrystalProc
      bg_QDockWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDockWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QDockWidget_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QDockWidget_JUMPTABLE(self : QDockWidget*, table : BgTableQDockWidget*) : Void
    struct BgTableQDialog
      bg_QDialog_metaObject_ : CrystalProc
      bg_QDialog_qt_metacast_const_char_X : CrystalProc
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDialog_setVisible_bool : CrystalProc
      bg_QDialog_sizeHint_ : CrystalProc
      bg_QDialog_minimumSizeHint_ : CrystalProc
      bg_QDialog_open_ : CrystalProc
      bg_QDialog_exec_ : CrystalProc
      bg_QDialog_done_int : CrystalProc
      bg_QDialog_accept_ : CrystalProc
      bg_QDialog_reject_ : CrystalProc
      bg_QDialog_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QDialog_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDialog_showEvent_QShowEvent_X : CrystalProc
      bg_QDialog_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QDialog_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QDialog_JUMPTABLE(self : QDialog*, table : BgTableQDialog*) : Void
    struct BgTableQLabel
      bg_QLabel_metaObject_ : CrystalProc
      bg_QLabel_qt_metacast_const_char_X : CrystalProc
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLabel_sizeHint_ : CrystalProc
      bg_QLabel_minimumSizeHint_ : CrystalProc
      bg_QLabel_heightForWidth_int : CrystalProc
      bg_QLabel_event_QEvent_X : CrystalProc
      bg_QLabel_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QLabel_paintEvent_QPaintEvent_X : CrystalProc
      bg_QLabel_changeEvent_QEvent_X : CrystalProc
      bg_QLabel_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QLabel_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QLabel_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QLabel_focusNextPrevChild_bool : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QLabel_JUMPTABLE(self : QLabel*, table : BgTableQLabel*) : Void
    struct BgTableQLCDNumber
      bg_QLCDNumber_metaObject_ : CrystalProc
      bg_QLCDNumber_qt_metacast_const_char_X : CrystalProc
      bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLCDNumber_sizeHint_ : CrystalProc
      bg_QLCDNumber_event_QEvent_X : CrystalProc
      bg_QLCDNumber_paintEvent_QPaintEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QLCDNumber_JUMPTABLE(self : QLCDNumber*, table : BgTableQLCDNumber*) : Void
    struct BgTableQPushButton
      bg_QPushButton_metaObject_ : CrystalProc
      bg_QPushButton_qt_metacast_const_char_X : CrystalProc
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QPushButton_sizeHint_ : CrystalProc
      bg_QPushButton_minimumSizeHint_ : CrystalProc
      bg_QPushButton_event_QEvent_X : CrystalProc
      bg_QPushButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QPushButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QPushButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QPushButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_hitButton_const_QPoint_R : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QPushButton_JUMPTABLE(self : QPushButton*, table : BgTableQPushButton*) : Void
    struct BgTableQCheckBox
      bg_QCheckBox_metaObject_ : CrystalProc
      bg_QCheckBox_qt_metacast_const_char_X : CrystalProc
      bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QCheckBox_sizeHint_ : CrystalProc
      bg_QCheckBox_minimumSizeHint_ : CrystalProc
      bg_QCheckBox_event_QEvent_X : CrystalProc
      bg_QCheckBox_hitButton_const_QPoint_R : CrystalProc
      bg_QCheckBox_checkStateSet_ : CrystalProc
      bg_QCheckBox_nextCheckState_ : CrystalProc
      bg_QCheckBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QCheckBox_JUMPTABLE(self : QCheckBox*, table : BgTableQCheckBox*) : Void
    struct BgTableQRadioButton
      bg_QRadioButton_metaObject_ : CrystalProc
      bg_QRadioButton_qt_metacast_const_char_X : CrystalProc
      bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QRadioButton_sizeHint_ : CrystalProc
      bg_QRadioButton_minimumSizeHint_ : CrystalProc
      bg_QRadioButton_event_QEvent_X : CrystalProc
      bg_QRadioButton_hitButton_const_QPoint_R : CrystalProc
      bg_QRadioButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QRadioButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QRadioButton_JUMPTABLE(self : QRadioButton*, table : BgTableQRadioButton*) : Void
    struct BgTableQButtonGroup
      bg_QButtonGroup_metaObject_ : CrystalProc
      bg_QButtonGroup_qt_metacast_const_char_X : CrystalProc
      bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QButtonGroup_JUMPTABLE(self : QButtonGroup*, table : BgTableQButtonGroup*) : Void
    struct BgTableQGroupBox
      bg_QGroupBox_metaObject_ : CrystalProc
      bg_QGroupBox_qt_metacast_const_char_X : CrystalProc
      bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGroupBox_minimumSizeHint_ : CrystalProc
      bg_QGroupBox_event_QEvent_X : CrystalProc
      bg_QGroupBox_childEvent_QChildEvent_X : CrystalProc
      bg_QGroupBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QGroupBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QGroupBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGroupBox_changeEvent_QEvent_X : CrystalProc
      bg_QGroupBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QGroupBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QGroupBox_JUMPTABLE(self : QGroupBox*, table : BgTableQGroupBox*) : Void
    struct BgTableQCoreApplication
      bg_QCoreApplication_metaObject_ : CrystalProc
      bg_QCoreApplication_qt_metacast_const_char_X : CrystalProc
      bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QCoreApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QCoreApplication_event_QEvent_X : CrystalProc
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QCoreApplication_JUMPTABLE(self : QCoreApplication*, table : BgTableQCoreApplication*) : Void
    struct BgTableQGuiApplication
      bg_QGuiApplication_metaObject_ : CrystalProc
      bg_QGuiApplication_qt_metacast_const_char_X : CrystalProc
      bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGuiApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QGuiApplication_event_QEvent_X : CrystalProc
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QGuiApplication_JUMPTABLE(self : QGuiApplication*, table : BgTableQGuiApplication*) : Void
    struct BgTableQApplication
      bg_QApplication_metaObject_ : CrystalProc
      bg_QApplication_qt_metacast_const_char_X : CrystalProc
      bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QApplication_event_QEvent_X : CrystalProc
      bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QApplication_JUMPTABLE(self : QApplication*, table : BgTableQApplication*) : Void
    struct BgTableQEventLoop
      bg_QEventLoop_metaObject_ : CrystalProc
      bg_QEventLoop_qt_metacast_const_char_X : CrystalProc
      bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QEventLoop_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QEventLoop_JUMPTABLE(self : QEventLoop*, table : BgTableQEventLoop*) : Void
    struct BgTableQTabBar
      bg_QTabBar_metaObject_ : CrystalProc
      bg_QTabBar_qt_metacast_const_char_X : CrystalProc
      bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTabBar_sizeHint_ : CrystalProc
      bg_QTabBar_minimumSizeHint_ : CrystalProc
      bg_QTabBar_tabSizeHint_int : CrystalProc
      bg_QTabBar_minimumTabSizeHint_int : CrystalProc
      bg_QTabBar_tabInserted_int : CrystalProc
      bg_QTabBar_tabRemoved_int : CrystalProc
      bg_QTabBar_tabLayoutChange_ : CrystalProc
      bg_QTabBar_event_QEvent_X : CrystalProc
      bg_QTabBar_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTabBar_showEvent_QShowEvent_X : CrystalProc
      bg_QTabBar_hideEvent_QHideEvent_X : CrystalProc
      bg_QTabBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTabBar_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QTabBar_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QTabBar_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QTabBar_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QTabBar_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTabBar_changeEvent_QEvent_X : CrystalProc
      bg_QTabBar_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QTabBar_JUMPTABLE(self : QTabBar*, table : BgTableQTabBar*) : Void
    struct BgTableQTabWidget
      bg_QTabWidget_metaObject_ : CrystalProc
      bg_QTabWidget_qt_metacast_const_char_X : CrystalProc
      bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTabWidget_sizeHint_ : CrystalProc
      bg_QTabWidget_minimumSizeHint_ : CrystalProc
      bg_QTabWidget_heightForWidth_int : CrystalProc
      bg_QTabWidget_hasHeightForWidth_ : CrystalProc
      bg_QTabWidget_tabInserted_int : CrystalProc
      bg_QTabWidget_tabRemoved_int : CrystalProc
      bg_QTabWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QTabWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTabWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTabWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTabWidget_changeEvent_QEvent_X : CrystalProc
      bg_QTabWidget_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QTabWidget_JUMPTABLE(self : QTabWidget*, table : BgTableQTabWidget*) : Void
    struct BgTableQLayoutItem
      bg_QLayoutItem_sizeHint_ : CrystalProc
      bg_QLayoutItem_minimumSize_ : CrystalProc
      bg_QLayoutItem_maximumSize_ : CrystalProc
      bg_QLayoutItem_expandingDirections_ : CrystalProc
      bg_QLayoutItem_setGeometry_const_QRect_R : CrystalProc
      bg_QLayoutItem_geometry_ : CrystalProc
      bg_QLayoutItem_isEmpty_ : CrystalProc
      bg_QLayoutItem_hasHeightForWidth_ : CrystalProc
      bg_QLayoutItem_heightForWidth_int : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_invalidate_ : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_layout_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
      bg_QLayoutItem_controlTypes_ : CrystalProc
    end
    fun bg_QLayoutItem_JUMPTABLE(self : QLayoutItem*, table : BgTableQLayoutItem*) : Void
    struct BgTableQLayout
      bg_QLayout_metaObject_ : CrystalProc
      bg_QLayout_qt_metacast_const_char_X : CrystalProc
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLayout_invalidate_ : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QLayout_expandingDirections_ : CrystalProc
      bg_QLayout_minimumSize_ : CrystalProc
      bg_QLayout_maximumSize_ : CrystalProc
      bg_QLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_itemAt_int : CrystalProc
      bg_QLayout_takeAt_int : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_count_ : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_sizeHint_ : CrystalProc
      bg_QLayoutItem_hasHeightForWidth_ : CrystalProc
      bg_QLayoutItem_heightForWidth_int : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QLayout_JUMPTABLE(self : QLayout*, table : BgTableQLayout*) : Void
    struct BgTableQBoxLayout
      bg_QBoxLayout_metaObject_ : CrystalProc
      bg_QBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QBoxLayout_JUMPTABLE(self : QBoxLayout*, table : BgTableQBoxLayout*) : Void
    struct BgTableQHBoxLayout
      bg_QHBoxLayout_metaObject_ : CrystalProc
      bg_QHBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QHBoxLayout_JUMPTABLE(self : QHBoxLayout*, table : BgTableQHBoxLayout*) : Void
    struct BgTableQVBoxLayout
      bg_QVBoxLayout_metaObject_ : CrystalProc
      bg_QVBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    fun bg_QVBoxLayout_JUMPTABLE(self : QVBoxLayout*, table : BgTableQVBoxLayout*) : Void
    struct BgTableQLineEdit
      bg_QLineEdit_metaObject_ : CrystalProc
      bg_QLineEdit_qt_metacast_const_char_X : CrystalProc
      bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLineEdit_sizeHint_ : CrystalProc
      bg_QLineEdit_minimumSizeHint_ : CrystalProc
      bg_QLineEdit_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QLineEdit_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QLineEdit_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QLineEdit_paintEvent_QPaintEvent_X : CrystalProc
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QLineEdit_dropEvent_QDropEvent_X : CrystalProc
      bg_QLineEdit_changeEvent_QEvent_X : CrystalProc
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QLineEdit_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QLineEdit_JUMPTABLE(self : QLineEdit*, table : BgTableQLineEdit*) : Void
    struct BgTableQTextEdit
      bg_QTextEdit_metaObject_ : CrystalProc
      bg_QTextEdit_qt_metacast_const_char_X : CrystalProc
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTextEdit_event_QEvent_X : CrystalProc
      bg_QTextEdit_timerEvent_QTimerEvent_X : CrystalProc
      bg_QTextEdit_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QTextEdit_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTextEdit_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTextEdit_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_focusNextPrevChild_bool : CrystalProc
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QTextEdit_dropEvent_QDropEvent_X : CrystalProc
      bg_QTextEdit_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QTextEdit_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QTextEdit_showEvent_QShowEvent_X : CrystalProc
      bg_QTextEdit_changeEvent_QEvent_X : CrystalProc
      bg_QTextEdit_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QTextEdit_createMimeDataFromSelection_ : CrystalProc
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X : CrystalProc
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X : CrystalProc
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QTextEdit_scrollContentsBy_int_int : CrystalProc
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_sizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QTextEdit_JUMPTABLE(self : QTextEdit*, table : BgTableQTextEdit*) : Void
    struct BgTableQFileDialog
      bg_QFileDialog_metaObject_ : CrystalProc
      bg_QFileDialog_qt_metacast_const_char_X : CrystalProc
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QFileDialog_setVisible_bool : CrystalProc
      bg_QFileDialog_done_int : CrystalProc
      bg_QFileDialog_accept_ : CrystalProc
      bg_QFileDialog_changeEvent_QEvent_X : CrystalProc
      bg_QDialog_sizeHint_ : CrystalProc
      bg_QDialog_minimumSizeHint_ : CrystalProc
      bg_QDialog_open_ : CrystalProc
      bg_QDialog_exec_ : CrystalProc
      bg_QDialog_reject_ : CrystalProc
      bg_QDialog_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QDialog_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDialog_showEvent_QShowEvent_X : CrystalProc
      bg_QDialog_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QDialog_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QFileDialog_JUMPTABLE(self : QFileDialog*, table : BgTableQFileDialog*) : Void
    struct BgTableQTextDocument
      bg_QTextDocument_metaObject_ : CrystalProc
      bg_QTextDocument_qt_metacast_const_char_X : CrystalProc
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTextDocument_clear_ : CrystalProc
      bg_QTextDocument_createObject_const_QTextFormat_R : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QTextDocument_JUMPTABLE(self : QTextDocument*, table : BgTableQTextDocument*) : Void
    struct BgTableQGraphicsItem
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_boundingRect_ : CrystalProc
      bg_QGraphicsItem_shape_ : CrystalProc
      bg_QGraphicsItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsItem_opaqueArea_ : CrystalProc
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsItem_type_ : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
    end
    fun bg_QGraphicsItem_JUMPTABLE(self : QGraphicsItem*, table : BgTableQGraphicsItem*) : Void
    struct BgTableQGraphicsScene
      bg_QGraphicsScene_metaObject_ : CrystalProc
      bg_QGraphicsScene_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsScene_event_QEvent_X : CrystalProc
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X : CrystalProc
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QGraphicsScene_JUMPTABLE(self : QGraphicsScene*, table : BgTableQGraphicsScene*) : Void
    struct BgTableQGraphicsView
      bg_QGraphicsView_metaObject_ : CrystalProc
      bg_QGraphicsView_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsView_sizeHint_ : CrystalProc
      bg_QGraphicsView_setupViewport_QWidget_X : CrystalProc
      bg_QGraphicsView_event_QEvent_X : CrystalProc
      bg_QGraphicsView_viewportEvent_QEvent_X : CrystalProc
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QGraphicsView_dropEvent_QDropEvent_X : CrystalProc
      bg_QGraphicsView_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsView_focusNextPrevChild_bool : CrystalProc
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QGraphicsView_paintEvent_QPaintEvent_X : CrystalProc
      bg_QGraphicsView_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QGraphicsView_scrollContentsBy_int_int : CrystalProc
      bg_QGraphicsView_showEvent_QShowEvent_X : CrystalProc
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QGraphicsView_JUMPTABLE(self : QGraphicsView*, table : BgTableQGraphicsView*) : Void
    struct BgTableQGraphicsObject
      bg_QGraphicsObject_metaObject_ : CrystalProc
      bg_QGraphicsObject_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_boundingRect_ : CrystalProc
      bg_QGraphicsItem_shape_ : CrystalProc
      bg_QGraphicsItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsItem_opaqueArea_ : CrystalProc
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsItem_type_ : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
    end
    fun bg_QGraphicsObject_JUMPTABLE(self : QGraphicsObject*, table : BgTableQGraphicsObject*) : Void
    struct BgTableQGraphicsWidget
      bg_QGraphicsWidget_metaObject_ : CrystalProc
      bg_QGraphicsWidget_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsWidget_setGeometry_const_QRectF_R : CrystalProc
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X : CrystalProc
      bg_QGraphicsWidget_type_ : CrystalProc
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsWidget_boundingRect_ : CrystalProc
      bg_QGraphicsWidget_shape_ : CrystalProc
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X : CrystalProc
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R : CrystalProc
      bg_QGraphicsWidget_updateGeometry_ : CrystalProc
      bg_QGraphicsWidget_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R : CrystalProc
      bg_QGraphicsWidget_event_QEvent_X : CrystalProc
      bg_QGraphicsWidget_changeEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsWidget_focusNextPrevChild_bool : CrystalProc
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X : CrystalProc
      bg_QGraphicsWidget_polishEvent_ : CrystalProc
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X : CrystalProc
      bg_QGraphicsWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsItem_opaqueArea_ : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
    end
    fun bg_QGraphicsWidget_JUMPTABLE(self : QGraphicsWidget*, table : BgTableQGraphicsWidget*) : Void
    struct BgTableQGraphicsTextItem
      bg_QGraphicsTextItem_metaObject_ : CrystalProc
      bg_QGraphicsTextItem_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsTextItem_boundingRect_ : CrystalProc
      bg_QGraphicsTextItem_shape_ : CrystalProc
      bg_QGraphicsTextItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsTextItem_opaqueArea_ : CrystalProc
      bg_QGraphicsTextItem_type_ : CrystalProc
      bg_QGraphicsTextItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
    end
    fun bg_QGraphicsTextItem_JUMPTABLE(self : QGraphicsTextItem*, table : BgTableQGraphicsTextItem*) : Void
    struct BgTableQGraphicsTransform
      bg_QGraphicsTransform_metaObject_ : CrystalProc
      bg_QGraphicsTransform_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsTransform_applyTo_QMatrix4x4_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QGraphicsTransform_JUMPTABLE(self : QGraphicsTransform*, table : BgTableQGraphicsTransform*) : Void
    struct BgTableQAbstractGraphicsShapeItem
      bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QAbstractGraphicsShapeItem_opaqueArea_ : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_boundingRect_ : CrystalProc
      bg_QGraphicsItem_shape_ : CrystalProc
      bg_QGraphicsItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsItem_type_ : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
    end
    fun bg_QAbstractGraphicsShapeItem_JUMPTABLE(self : QAbstractGraphicsShapeItem*, table : BgTableQAbstractGraphicsShapeItem*) : Void
    struct BgTableQGraphicsEllipseItem
      bg_QGraphicsEllipseItem_boundingRect_ : CrystalProc
      bg_QGraphicsEllipseItem_shape_ : CrystalProc
      bg_QGraphicsEllipseItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsEllipseItem_opaqueArea_ : CrystalProc
      bg_QGraphicsEllipseItem_type_ : CrystalProc
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
    end
    fun bg_QGraphicsEllipseItem_JUMPTABLE(self : QGraphicsEllipseItem*, table : BgTableQGraphicsEllipseItem*) : Void
    struct BgTableQGraphicsPathItem
      bg_QGraphicsPathItem_boundingRect_ : CrystalProc
      bg_QGraphicsPathItem_shape_ : CrystalProc
      bg_QGraphicsPathItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsPathItem_opaqueArea_ : CrystalProc
      bg_QGraphicsPathItem_type_ : CrystalProc
      bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
    end
    fun bg_QGraphicsPathItem_JUMPTABLE(self : QGraphicsPathItem*, table : BgTableQGraphicsPathItem*) : Void
    struct BgTableQGraphicsPolygonItem
      bg_QGraphicsPolygonItem_boundingRect_ : CrystalProc
      bg_QGraphicsPolygonItem_shape_ : CrystalProc
      bg_QGraphicsPolygonItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsPolygonItem_opaqueArea_ : CrystalProc
      bg_QGraphicsPolygonItem_type_ : CrystalProc
      bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
    end
    fun bg_QGraphicsPolygonItem_JUMPTABLE(self : QGraphicsPolygonItem*, table : BgTableQGraphicsPolygonItem*) : Void
    struct BgTableQGraphicsRectItem
      bg_QGraphicsRectItem_boundingRect_ : CrystalProc
      bg_QGraphicsRectItem_shape_ : CrystalProc
      bg_QGraphicsRectItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsRectItem_opaqueArea_ : CrystalProc
      bg_QGraphicsRectItem_type_ : CrystalProc
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
    end
    fun bg_QGraphicsRectItem_JUMPTABLE(self : QGraphicsRectItem*, table : BgTableQGraphicsRectItem*) : Void
    struct BgTableQGraphicsSimpleTextItem
      bg_QGraphicsSimpleTextItem_boundingRect_ : CrystalProc
      bg_QGraphicsSimpleTextItem_shape_ : CrystalProc
      bg_QGraphicsSimpleTextItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsSimpleTextItem_opaqueArea_ : CrystalProc
      bg_QGraphicsSimpleTextItem_type_ : CrystalProc
      bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
    end
    fun bg_QGraphicsSimpleTextItem_JUMPTABLE(self : QGraphicsSimpleTextItem*, table : BgTableQGraphicsSimpleTextItem*) : Void
    struct BgTableQGraphicsPixmapItem
      bg_QGraphicsPixmapItem_boundingRect_ : CrystalProc
      bg_QGraphicsPixmapItem_shape_ : CrystalProc
      bg_QGraphicsPixmapItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsPixmapItem_opaqueArea_ : CrystalProc
      bg_QGraphicsPixmapItem_type_ : CrystalProc
      bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
    end
    fun bg_QGraphicsPixmapItem_JUMPTABLE(self : QGraphicsPixmapItem*, table : BgTableQGraphicsPixmapItem*) : Void
    struct BgTableQDrag
      bg_QDrag_metaObject_ : CrystalProc
      bg_QDrag_qt_metacast_const_char_X : CrystalProc
      bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QDrag_JUMPTABLE(self : QDrag*, table : BgTableQDrag*) : Void
    struct BgTableQIODevice
      bg_QIODevice_metaObject_ : CrystalProc
      bg_QIODevice_qt_metacast_const_char_X : CrystalProc
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QIODevice_isSequential_ : CrystalProc
      bg_QIODevice_open_QIODevice__OpenMode : CrystalProc
      bg_QIODevice_close_ : CrystalProc
      bg_QIODevice_pos_ : CrystalProc
      bg_QIODevice_size_ : CrystalProc
      bg_QIODevice_seek_qint64 : CrystalProc
      bg_QIODevice_atEnd_ : CrystalProc
      bg_QIODevice_reset_ : CrystalProc
      bg_QIODevice_bytesAvailable_ : CrystalProc
      bg_QIODevice_bytesToWrite_ : CrystalProc
      bg_QIODevice_canReadLine_ : CrystalProc
      bg_QIODevice_waitForReadyRead_int : CrystalProc
      bg_QIODevice_waitForBytesWritten_int : CrystalProc
      bg_QIODevice_readData_char_X_qint64 : CrystalProc
      bg_QIODevice_readLineData_char_X_qint64 : CrystalProc
      bg_QIODevice_writeData_const_char_X_qint64 : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QIODevice_JUMPTABLE(self : QIODevice*, table : BgTableQIODevice*) : Void
    struct BgTableQGesture
      bg_QGesture_metaObject_ : CrystalProc
      bg_QGesture_qt_metacast_const_char_X : CrystalProc
      bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QGesture_JUMPTABLE(self : QGesture*, table : BgTableQGesture*) : Void
    struct BgTableQSystemTrayIcon
      bg_QSystemTrayIcon_metaObject_ : CrystalProc
      bg_QSystemTrayIcon_qt_metacast_const_char_X : CrystalProc
      bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSystemTrayIcon_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QSystemTrayIcon_JUMPTABLE(self : QSystemTrayIcon*, table : BgTableQSystemTrayIcon*) : Void
    struct BgTableQDesktopWidget
      bg_QDesktopWidget_metaObject_ : CrystalProc
      bg_QDesktopWidget_qt_metacast_const_char_X : CrystalProc
      bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDesktopWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QDesktopWidget_JUMPTABLE(self : QDesktopWidget*, table : BgTableQDesktopWidget*) : Void
    struct BgTableQMimeData
      bg_QMimeData_metaObject_ : CrystalProc
      bg_QMimeData_qt_metacast_const_char_X : CrystalProc
      bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMimeData_hasFormat_const_QString_R : CrystalProc
      bg_QMimeData_formats_ : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QMimeData_JUMPTABLE(self : QMimeData*, table : BgTableQMimeData*) : Void
    struct BgTableQScreen
      bg_QScreen_metaObject_ : CrystalProc
      bg_QScreen_qt_metacast_const_char_X : CrystalProc
      bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    fun bg_QScreen_JUMPTABLE(self : QScreen*, table : BgTableQScreen*) : Void

    fun bg_QList_QString_CONSTRUCT_() : QList_QString*
    fun bg_QList_QString_at_int(_self_ : Binding::QList_QString*, index : Int32) : Binding::CrystalString
    fun bg_QList_QString_push_back_QString(_self_ : Binding::QList_QString*, value : CrystalString) : Void
    fun bg_QList_QString_size_(_self_ : Binding::QList_QString*) : Int32
    fun bg_QList_QString_DESTROY_(_self_ : Binding::QList_QString*) : Void
    fun bg_QList_QObject_X_CONSTRUCT_() : QList_QObject_X*
    fun bg_QList_QObject_X_at_int(_self_ : Binding::QList_QObject_X*, index : Int32) : Binding::QObject*
    fun bg_QList_QObject_X_push_back_QObject_X(_self_ : Binding::QList_QObject_X*, value : QObject*) : Void
    fun bg_QList_QObject_X_size_(_self_ : Binding::QList_QObject_X*) : Int32
    fun bg_QList_QObject_X_DESTROY_(_self_ : Binding::QList_QObject_X*) : Void
    fun bg_QList_QWidget_X_CONSTRUCT_() : QList_QWidget_X*
    fun bg_QList_QWidget_X_at_int(_self_ : Binding::QList_QWidget_X*, index : Int32) : Binding::QWidget*
    fun bg_QList_QWidget_X_push_back_QWidget_X(_self_ : Binding::QList_QWidget_X*, value : QWidget*) : Void
    fun bg_QList_QWidget_X_size_(_self_ : Binding::QList_QWidget_X*) : Int32
    fun bg_QList_QWidget_X_DESTROY_(_self_ : Binding::QList_QWidget_X*) : Void
    fun bg_QList_QDockWidget_X_CONSTRUCT_() : QList_QDockWidget_X*
    fun bg_QList_QDockWidget_X_at_int(_self_ : Binding::QList_QDockWidget_X*, index : Int32) : Binding::QDockWidget*
    fun bg_QList_QDockWidget_X_push_back_QDockWidget_X(_self_ : Binding::QList_QDockWidget_X*, value : QDockWidget*) : Void
    fun bg_QList_QDockWidget_X_size_(_self_ : Binding::QList_QDockWidget_X*) : Int32
    fun bg_QList_QDockWidget_X_DESTROY_(_self_ : Binding::QList_QDockWidget_X*) : Void
    fun bg_QList_QAction_X_CONSTRUCT_() : QList_QAction_X*
    fun bg_QList_QAction_X_at_int(_self_ : Binding::QList_QAction_X*, index : Int32) : Binding::QAction*
    fun bg_QList_QAction_X_push_back_QAction_X(_self_ : Binding::QList_QAction_X*, value : QAction*) : Void
    fun bg_QList_QAction_X_size_(_self_ : Binding::QList_QAction_X*) : Int32
    fun bg_QList_QAction_X_DESTROY_(_self_ : Binding::QList_QAction_X*) : Void
    fun bg_QList_QGesture_X_CONSTRUCT_() : QList_QGesture_X*
    fun bg_QList_QGesture_X_at_int(_self_ : Binding::QList_QGesture_X*, index : Int32) : Binding::QGesture*
    fun bg_QList_QGesture_X_push_back_QGesture_X(_self_ : Binding::QList_QGesture_X*, value : QGesture*) : Void
    fun bg_QList_QGesture_X_size_(_self_ : Binding::QList_QGesture_X*) : Int32
    fun bg_QList_QGesture_X_DESTROY_(_self_ : Binding::QList_QGesture_X*) : Void
    fun bg_QList_QAbstractButton_X_CONSTRUCT_() : QList_QAbstractButton_X*
    fun bg_QList_QAbstractButton_X_at_int(_self_ : Binding::QList_QAbstractButton_X*, index : Int32) : Binding::QAbstractButton*
    fun bg_QList_QAbstractButton_X_push_back_QAbstractButton_X(_self_ : Binding::QList_QAbstractButton_X*, value : QAbstractButton*) : Void
    fun bg_QList_QAbstractButton_X_size_(_self_ : Binding::QList_QAbstractButton_X*) : Int32
    fun bg_QList_QAbstractButton_X_DESTROY_(_self_ : Binding::QList_QAbstractButton_X*) : Void
    fun bg_QList_QUrl_CONSTRUCT_() : QList_QUrl*
    fun bg_QList_QUrl_at_int(_self_ : Binding::QList_QUrl*, index : Int32) : Binding::QUrl*
    fun bg_QList_QUrl_push_back_QUrl(_self_ : Binding::QList_QUrl*, value : QUrl*) : Void
    fun bg_QList_QUrl_size_(_self_ : Binding::QList_QUrl*) : Int32
    fun bg_QList_QUrl_DESTROY_(_self_ : Binding::QList_QUrl*) : Void
    fun bg_QList_QGraphicsItem_X_CONSTRUCT_() : QList_QGraphicsItem_X*
    fun bg_QList_QGraphicsItem_X_at_int(_self_ : Binding::QList_QGraphicsItem_X*, index : Int32) : Binding::QGraphicsItem*
    fun bg_QList_QGraphicsItem_X_push_back_QGraphicsItem_X(_self_ : Binding::QList_QGraphicsItem_X*, value : QGraphicsItem*) : Void
    fun bg_QList_QGraphicsItem_X_size_(_self_ : Binding::QList_QGraphicsItem_X*) : Int32
    fun bg_QList_QGraphicsItem_X_DESTROY_(_self_ : Binding::QList_QGraphicsItem_X*) : Void
    fun bg_QList_QGraphicsWidget_X_CONSTRUCT_() : QList_QGraphicsWidget_X*
    fun bg_QList_QGraphicsWidget_X_at_int(_self_ : Binding::QList_QGraphicsWidget_X*, index : Int32) : Binding::QGraphicsWidget*
    fun bg_QList_QGraphicsWidget_X_push_back_QGraphicsWidget_X(_self_ : Binding::QList_QGraphicsWidget_X*, value : QGraphicsWidget*) : Void
    fun bg_QList_QGraphicsWidget_X_size_(_self_ : Binding::QList_QGraphicsWidget_X*) : Int32
    fun bg_QList_QGraphicsWidget_X_DESTROY_(_self_ : Binding::QList_QGraphicsWidget_X*) : Void
    fun bg_QList_QGraphicsTransform_X_CONSTRUCT_() : QList_QGraphicsTransform_X*
    fun bg_QList_QGraphicsTransform_X_at_int(_self_ : Binding::QList_QGraphicsTransform_X*, index : Int32) : Binding::QGraphicsTransform*
    fun bg_QList_QGraphicsTransform_X_push_back_QGraphicsTransform_X(_self_ : Binding::QList_QGraphicsTransform_X*, value : QGraphicsTransform*) : Void
    fun bg_QList_QGraphicsTransform_X_size_(_self_ : Binding::QList_QGraphicsTransform_X*) : Int32
    fun bg_QList_QGraphicsTransform_X_DESTROY_(_self_ : Binding::QList_QGraphicsTransform_X*) : Void
    fun bg_QList_QGraphicsView_X_CONSTRUCT_() : QList_QGraphicsView_X*
    fun bg_QList_QGraphicsView_X_at_int(_self_ : Binding::QList_QGraphicsView_X*, index : Int32) : Binding::QGraphicsView*
    fun bg_QList_QGraphicsView_X_push_back_QGraphicsView_X(_self_ : Binding::QList_QGraphicsView_X*, value : QGraphicsView*) : Void
    fun bg_QList_QGraphicsView_X_size_(_self_ : Binding::QList_QGraphicsView_X*) : Int32
    fun bg_QList_QGraphicsView_X_DESTROY_(_self_ : Binding::QList_QGraphicsView_X*) : Void
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_CONSTRUCT_() : QList_QAbstractEventDispatcher__TimerInfo*
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_at_int(_self_ : Binding::QList_QAbstractEventDispatcher__TimerInfo*, index : Int32) : Binding::EventDispatcherTimerInfo
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_push_back_QAbstractEventDispatcher__TimerInfo(_self_ : Binding::QList_QAbstractEventDispatcher__TimerInfo*, value : EventDispatcherTimerInfo) : Void
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_size_(_self_ : Binding::QList_QAbstractEventDispatcher__TimerInfo*) : Int32
    fun bg_QList_QAbstractEventDispatcher__TimerInfo_DESTROY_(_self_ : Binding::QList_QAbstractEventDispatcher__TimerInfo*) : Void
    fun bg_QList_QSize_CONSTRUCT_() : QList_QSize*
    fun bg_QList_QSize_at_int(_self_ : Binding::QList_QSize*, index : Int32) : QSize*
    fun bg_QList_QSize_push_back_QSize(_self_ : Binding::QList_QSize*, value : QSize*) : Void
    fun bg_QList_QSize_size_(_self_ : Binding::QList_QSize*) : Int32
    fun bg_QList_QSize_DESTROY_(_self_ : Binding::QList_QSize*) : Void
    fun bg_QList_QKeySequence_CONSTRUCT_() : QList_QKeySequence*
    fun bg_QList_QKeySequence_at_int(_self_ : Binding::QList_QKeySequence*, index : Int32) : Binding::QKeySequence*
    fun bg_QList_QKeySequence_push_back_QKeySequence(_self_ : Binding::QList_QKeySequence*, value : QKeySequence*) : Void
    fun bg_QList_QKeySequence_size_(_self_ : Binding::QList_QKeySequence*) : Int32
    fun bg_QList_QKeySequence_DESTROY_(_self_ : Binding::QList_QKeySequence*) : Void
    fun bg_QList_QRectF_CONSTRUCT_() : QList_QRectF*
    fun bg_QList_QRectF_at_int(_self_ : Binding::QList_QRectF*, index : Int32) : Binding::QRectF*
    fun bg_QList_QRectF_push_back_QRectF(_self_ : Binding::QList_QRectF*, value : QRectF*) : Void
    fun bg_QList_QRectF_size_(_self_ : Binding::QList_QRectF*) : Int32
    fun bg_QList_QRectF_DESTROY_(_self_ : Binding::QList_QRectF*) : Void
    fun bg_QList_QScreen_X_CONSTRUCT_() : QList_QScreen_X*
    fun bg_QList_QScreen_X_at_int(_self_ : Binding::QList_QScreen_X*, index : Int32) : Binding::QScreen*
    fun bg_QList_QScreen_X_push_back_QScreen_X(_self_ : Binding::QList_QScreen_X*, value : QScreen*) : Void
    fun bg_QList_QScreen_X_size_(_self_ : Binding::QList_QScreen_X*) : Int32
    fun bg_QList_QScreen_X_DESTROY_(_self_ : Binding::QList_QScreen_X*) : Void
    fun bg_QList_qreal_CONSTRUCT_() : QList_qreal*
    fun bg_QList_qreal_at_int(_self_ : Binding::QList_qreal*, index : Int32) : Float64
    fun bg_QList_qreal_push_back_qreal(_self_ : Binding::QList_qreal*, value : Float64) : Void
    fun bg_QList_qreal_size_(_self_ : Binding::QList_qreal*) : Int32
    fun bg_QList_qreal_DESTROY_(_self_ : Binding::QList_qreal*) : Void
    fun bg_QList_int_CONSTRUCT_() : QList_int*
    fun bg_QList_int_at_int(_self_ : Binding::QList_int*, index : Int32) : Int32
    fun bg_QList_int_push_back_int(_self_ : Binding::QList_int*, value : Int32) : Void
    fun bg_QList_int_size_(_self_ : Binding::QList_int*) : Int32
    fun bg_QList_int_DESTROY_(_self_ : Binding::QList_int*) : Void
    fun bg_QVector_QLine_CONSTRUCT_() : QVector_QLine*
    fun bg_QVector_QLine_at_int(_self_ : Binding::QVector_QLine*, index : Int32) : Binding::QLine*
    fun bg_QVector_QLine_push_back_QLine(_self_ : Binding::QVector_QLine*, value : QLine*) : Void
    fun bg_QVector_QLine_size_(_self_ : Binding::QVector_QLine*) : Int32
    fun bg_QVector_QLine_DESTROY_(_self_ : Binding::QVector_QLine*) : Void
    fun bg_QVector_QLineF_CONSTRUCT_() : QVector_QLineF*
    fun bg_QVector_QLineF_at_int(_self_ : Binding::QVector_QLineF*, index : Int32) : Binding::QLineF*
    fun bg_QVector_QLineF_push_back_QLineF(_self_ : Binding::QVector_QLineF*, value : QLineF*) : Void
    fun bg_QVector_QLineF_size_(_self_ : Binding::QVector_QLineF*) : Int32
    fun bg_QVector_QLineF_DESTROY_(_self_ : Binding::QVector_QLineF*) : Void
    fun bg_QVector_QPoint_CONSTRUCT_() : QVector_QPoint*
    fun bg_QVector_QPoint_at_int(_self_ : Binding::QVector_QPoint*, index : Int32) : Binding::QPoint
    fun bg_QVector_QPoint_push_back_QPoint(_self_ : Binding::QVector_QPoint*, value : QPoint) : Void
    fun bg_QVector_QPoint_size_(_self_ : Binding::QVector_QPoint*) : Int32
    fun bg_QVector_QPoint_DESTROY_(_self_ : Binding::QVector_QPoint*) : Void
    fun bg_QVector_QPointF_CONSTRUCT_() : QVector_QPointF*
    fun bg_QVector_QPointF_at_int(_self_ : Binding::QVector_QPointF*, index : Int32) : Binding::QPointF
    fun bg_QVector_QPointF_push_back_QPointF(_self_ : Binding::QVector_QPointF*, value : QPointF) : Void
    fun bg_QVector_QPointF_size_(_self_ : Binding::QVector_QPointF*) : Int32
    fun bg_QVector_QPointF_DESTROY_(_self_ : Binding::QVector_QPointF*) : Void
    fun bg_QVector_QRect_CONSTRUCT_() : QVector_QRect*
    fun bg_QVector_QRect_at_int(_self_ : Binding::QVector_QRect*, index : Int32) : Binding::QRect*
    fun bg_QVector_QRect_push_back_QRect(_self_ : Binding::QVector_QRect*, value : QRect*) : Void
    fun bg_QVector_QRect_size_(_self_ : Binding::QVector_QRect*) : Int32
    fun bg_QVector_QRect_DESTROY_(_self_ : Binding::QVector_QRect*) : Void
    fun bg_QVector_QRectF_CONSTRUCT_() : QVector_QRectF*
    fun bg_QVector_QRectF_at_int(_self_ : Binding::QVector_QRectF*, index : Int32) : Binding::QRectF*
    fun bg_QVector_QRectF_push_back_QRectF(_self_ : Binding::QVector_QRectF*, value : QRectF*) : Void
    fun bg_QVector_QRectF_size_(_self_ : Binding::QVector_QRectF*) : Int32
    fun bg_QVector_QRectF_DESTROY_(_self_ : Binding::QVector_QRectF*) : Void
    fun bg_QVector_QRgb_CONSTRUCT_() : QVector_QRgb*
    fun bg_QVector_QRgb_at_int(_self_ : Binding::QVector_QRgb*, index : Int32) : UInt32
    fun bg_QVector_QRgb_push_back_QRgb(_self_ : Binding::QVector_QRgb*, value : UInt32) : Void
    fun bg_QVector_QRgb_size_(_self_ : Binding::QVector_QRgb*) : Int32
    fun bg_QVector_QRgb_DESTROY_(_self_ : Binding::QVector_QRgb*) : Void
    fun bg_QVector_QTextLength_CONSTRUCT_() : QVector_QTextLength*
    fun bg_QVector_QTextLength_at_int(_self_ : Binding::QVector_QTextLength*, index : Int32) : Binding::QTextLength*
    fun bg_QVector_QTextLength_push_back_QTextLength(_self_ : Binding::QVector_QTextLength*, value : QTextLength*) : Void
    fun bg_QVector_QTextLength_size_(_self_ : Binding::QVector_QTextLength*) : Int32
    fun bg_QVector_QTextLength_DESTROY_(_self_ : Binding::QVector_QTextLength*) : Void
    fun bg_QVector_QTextFormat_CONSTRUCT_() : QVector_QTextFormat*
    fun bg_QVector_QTextFormat_at_int(_self_ : Binding::QVector_QTextFormat*, index : Int32) : Binding::QTextFormat*
    fun bg_QVector_QTextFormat_push_back_QTextFormat(_self_ : Binding::QVector_QTextFormat*, value : QTextFormat*) : Void
    fun bg_QVector_QTextFormat_size_(_self_ : Binding::QVector_QTextFormat*) : Int32
    fun bg_QVector_QTextFormat_DESTROY_(_self_ : Binding::QVector_QTextFormat*) : Void
    fun bg_QObject_metaObject_(_self_ : Binding::QObject*) : QMetaObject*
    fun bg_QObject_qt_metacast_const_char_X(_self_ : Binding::QObject*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QObject*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QObject_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QObject_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QObject_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QObject*
    fun bg_QObject_event_QEvent_X(_self_ : Binding::QObject*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : Binding::QObject*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_objectName_(_self_ : Binding::QObject*) : Binding::CrystalString
    fun bg_QObject_setObjectName_const_QString_R(_self_ : Binding::QObject*, name : CrystalString) : Void
    fun bg_QObject_isWidgetType_(_self_ : Binding::QObject*) : Bool
    fun bg_QObject_isWindowType_(_self_ : Binding::QObject*) : Bool
    fun bg_QObject_signalsBlocked_(_self_ : Binding::QObject*) : Bool
    fun bg_QObject_blockSignals_bool(_self_ : Binding::QObject*, b : Bool) : Bool
    fun bg_QObject_thread_(_self_ : Binding::QObject*) : QThread*
    fun bg_QObject_moveToThread_QThread_X(_self_ : Binding::QObject*, thread : QThread*) : Void
    fun bg_QObject_startTimer_int_Qt__TimerType(_self_ : Binding::QObject*, interval : Int32, timer_type : TimerType) : Int32
    fun bg_QObject_startTimer_std__chrono__milliseconds_Qt__TimerType(_self_ : Binding::QObject*, time : Int64, timer_type : TimerType) : Int32
    fun bg_QObject_killTimer_int(_self_ : Binding::QObject*, id : Int32) : Void
    fun bg_QObject_children_(_self_ : Binding::QObject*) : Void**
    fun bg_QObject_setParent_QObject_X(_self_ : Binding::QObject*, parent : QObject*) : Void
    fun bg_QObject_installEventFilter_QObject_X(_self_ : Binding::QObject*, filter_obj : QObject*) : Void
    fun bg_QObject_removeEventFilter_QObject_X(_self_ : Binding::QObject*, obj : QObject*) : Void
    fun bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(sender : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*, unnamed_arg_4 : ConnectionType) : Binding::QMetaObjectConnection*
    fun bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(sender : QObject*, signal : QMetaMethod*, receiver : QObject*, method : QMetaMethod*, type : ConnectionType) : Binding::QMetaObjectConnection*
    fun bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(_self_ : Binding::QObject*, sender : QObject*, signal : UInt8*, member : UInt8*, type : ConnectionType) : Binding::QMetaObjectConnection*
    fun bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender : QObject*, signal : QMetaMethod*, receiver : QObject*, member : QMetaMethod*) : Bool
    fun bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(_self_ : Binding::QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_const_QObject_X_const_char_X(_self_ : Binding::QObject*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(unnamed_arg_0 : QMetaObjectConnection*) : Bool
    fun bg_QObject_dumpObjectTree_(_self_ : Binding::QObject*) : Void
    fun bg_QObject_dumpObjectInfo_(_self_ : Binding::QObject*) : Void
    fun bg_QObject_registerUserData_STATIC_() : UInt32
    fun bg_QObject_setUserData_uint_QObjectUserData_X(_self_ : Binding::QObject*, id : UInt32, data : QObjectUserData*) : Void
    fun bg_QObject_userData_uint(_self_ : Binding::QObject*, id : UInt32) : QObjectUserData*
    fun bg_QObject_destroyed_QObject_X(_self_ : Binding::QObject*, unnamed_arg_0 : QObject*) : Void
    fun bg_QObject_destroyed_CONNECT_CrystalProc_void__QObjectX_(_self_ : Binding::QObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QObject_parent_(_self_ : Binding::QObject*) : Binding::QObject*
    fun bg_QObject_inherits_const_char_X(_self_ : Binding::QObject*, classname : UInt8*) : Bool
    fun bg_QObject_deleteLater_(_self_ : Binding::QObject*) : Void
    fun bg_QObject_sender_(_self_ : Binding::QObject*) : Binding::QObject*
    fun bg_QObject_senderSignalIndex_(_self_ : Binding::QObject*) : Int32
    fun bg_QObject_receivers_const_char_X(_self_ : Binding::QObject*, signal : UInt8*) : Int32
    fun bg_QObject_isSignalConnected_const_QMetaMethod_R(_self_ : Binding::QObject*, signal : QMetaMethod*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : Binding::QObject*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : Binding::QObject*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : Binding::QObject*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : Binding::QObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : Binding::QObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_CONSTRUCT_QObjectPrivate_R_QObject_X(dd : QObjectPrivate*, parent : QObject*) : Binding::QObject*
    fun bg_QObject_DESTROY_(_self_ : Binding::QObject*) : Void
    fun bg_QMetaObject__Connection_CONSTRUCT_() : Binding::QMetaObjectConnection*
    fun bg_QMetaObject__Connection_DESTROY_(_self_ : Binding::QMetaObjectConnection*) : Void
    fun bg_QAbstractEventDispatcher_metaObject_(_self_ : Binding::QAbstractEventDispatcher*) : QMetaObject*
    fun bg_QAbstractEventDispatcher_qt_metacast_const_char_X(_self_ : Binding::QAbstractEventDispatcher*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QAbstractEventDispatcher*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractEventDispatcher_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(thread : QThread*) : Binding::QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(_self_ : Binding::QAbstractEventDispatcher*, flags : EventLoop::ProcessEventsFlags) : Bool
    fun bg_QAbstractEventDispatcher_hasPendingEvents_(_self_ : Binding::QAbstractEventDispatcher*) : Bool
    fun bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(_self_ : Binding::QAbstractEventDispatcher*, notifier : QSocketNotifier*) : Void
    fun bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(_self_ : Binding::QAbstractEventDispatcher*, notifier : QSocketNotifier*) : Void
    fun bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(_self_ : Binding::QAbstractEventDispatcher*, interval : Int32, timer_type : TimerType, object : QObject*) : Int32
    fun bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(_self_ : Binding::QAbstractEventDispatcher*, timer_id : Int32, interval : Int32, timer_type : TimerType, object : QObject*) : Void
    fun bg_QAbstractEventDispatcher_unregisterTimer_int(_self_ : Binding::QAbstractEventDispatcher*, timer_id : Int32) : Bool
    fun bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(_self_ : Binding::QAbstractEventDispatcher*, object : QObject*) : Bool
    fun bg_QAbstractEventDispatcher_registeredTimers_QObject_X(_self_ : Binding::QAbstractEventDispatcher*, object : QObject*) : Void*
    fun bg_QAbstractEventDispatcher_remainingTime_int(_self_ : Binding::QAbstractEventDispatcher*, timer_id : Int32) : Int32
    fun bg_QAbstractEventDispatcher_wakeUp_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_interrupt_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_flush_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_startingUp_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_closingDown_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : Binding::QAbstractEventDispatcher*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : Binding::QAbstractEventDispatcher*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(_self_ : Binding::QAbstractEventDispatcher*, event_type : QByteArray*, message : Void*, result : Int32*) : Bool
    fun bg_QAbstractEventDispatcher_aboutToBlock_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_aboutToBlock_CONNECT_CrystalProc_void_(_self_ : Binding::QAbstractEventDispatcher*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractEventDispatcher_awake_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_awake_CONNECT_CrystalProc_void_(_self_ : Binding::QAbstractEventDispatcher*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractEventDispatcher_CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(unnamed_arg_0 : QAbstractEventDispatcherPrivate*, parent : QObject*) : Binding::QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_DESTROY_(_self_ : Binding::QAbstractEventDispatcher*) : Void
    fun bg_QSocketNotifier_metaObject_(_self_ : Binding::QSocketNotifier*) : QMetaObject*
    fun bg_QSocketNotifier_qt_metacast_const_char_X(_self_ : Binding::QSocketNotifier*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QSocketNotifier*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSocketNotifier_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSocketNotifier_CONSTRUCT_qintptr_QSocketNotifier__Type_QObject_X(socket : Int64, unnamed_arg_1 : SocketNotifier::Type, parent : QObject*) : Binding::QSocketNotifier*
    fun bg_QSocketNotifier_socket_(_self_ : Binding::QSocketNotifier*) : Int64
    fun bg_QSocketNotifier_type_(_self_ : Binding::QSocketNotifier*) : SocketNotifier::Type
    fun bg_QSocketNotifier_isEnabled_(_self_ : Binding::QSocketNotifier*) : Bool
    fun bg_QSocketNotifier_setEnabled_bool(_self_ : Binding::QSocketNotifier*, unnamed_arg_0 : Bool) : Void
    fun bg_QSocketNotifier_event_QEvent_X(_self_ : Binding::QSocketNotifier*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QSocketNotifier_DESTROY_(_self_ : Binding::QSocketNotifier*) : Void
    fun bg_QPaintDevice_devType_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_paintingActive_(_self_ : Binding::QPaintDevice*) : Bool
    fun bg_QPaintDevice_paintEngine_(_self_ : Binding::QPaintDevice*) : QPaintEngine*
    fun bg_QPaintDevice_width_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_height_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_widthMM_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_heightMM_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_logicalDpiX_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_logicalDpiY_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_physicalDpiX_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_physicalDpiY_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_devicePixelRatio_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_devicePixelRatioF_(_self_ : Binding::QPaintDevice*) : Float64
    fun bg_QPaintDevice_colorCount_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_depth_(_self_ : Binding::QPaintDevice*) : Int32
    fun bg_QPaintDevice_devicePixelRatioFScale_STATIC_() : Float64
    fun bg_QPaintDevice_CONSTRUCT_() : Binding::QPaintDevice*
    fun bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric(_self_ : Binding::QPaintDevice*, metric : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPaintDevice_initPainter_QPainter_X(_self_ : Binding::QPaintDevice*, painter : QPainter*) : Void
    fun bg_QPaintDevice_sharedPainter_(_self_ : Binding::QPaintDevice*) : Binding::QPainter*
    fun bg_QPaintDevice_DESTROY_(_self_ : Binding::QPaintDevice*) : Void
    fun bg_QWidget_metaObject_(_self_ : Binding::QWidget*) : QMetaObject*
    fun bg_QWidget_qt_metacast_const_char_X(_self_ : Binding::QWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QWidget_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QWidget*
    fun bg_QWidget_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : Binding::QWidget*
    fun bg_QWidget_devType_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_createWinId_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_style_(_self_ : Binding::QWidget*) : QStyle*
    fun bg_QWidget_setStyle_QStyle_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QStyle*) : Void
    fun bg_QWidget_isTopLevel_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isWindow_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isModal_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_windowModality_(_self_ : Binding::QWidget*) : WindowModality
    fun bg_QWidget_setWindowModality_Qt__WindowModality(_self_ : Binding::QWidget*, window_modality : WindowModality) : Void
    fun bg_QWidget_isEnabled_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isEnabledTo_const_QWidget_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QWidget*) : Bool
    fun bg_QWidget_isEnabledToTLW_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setEnabled_bool(_self_ : Binding::QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_setDisabled_bool(_self_ : Binding::QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_setWindowModified_bool(_self_ : Binding::QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_frameGeometry_(_self_ : Binding::QWidget*) : Binding::QRect*
    fun bg_QWidget_geometry_(_self_ : Binding::QWidget*) : Binding::QRect*
    fun bg_QWidget_normalGeometry_(_self_ : Binding::QWidget*) : Binding::QRect*
    fun bg_QWidget_x_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_y_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_pos_(_self_ : Binding::QWidget*) : Binding::QPoint
    fun bg_QWidget_frameSize_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_size_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_width_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_height_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_rect_(_self_ : Binding::QWidget*) : Binding::QRect*
    fun bg_QWidget_childrenRect_(_self_ : Binding::QWidget*) : Binding::QRect*
    fun bg_QWidget_childrenRegion_(_self_ : Binding::QWidget*) : QRegion*
    fun bg_QWidget_minimumSize_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_maximumSize_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_minimumWidth_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_minimumHeight_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_maximumWidth_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_maximumHeight_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_setMinimumSize_const_QSize_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setMinimumSize_int_int(_self_ : Binding::QWidget*, minw : Int32, minh : Int32) : Void
    fun bg_QWidget_setMaximumSize_const_QSize_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setMaximumSize_int_int(_self_ : Binding::QWidget*, maxw : Int32, maxh : Int32) : Void
    fun bg_QWidget_setMinimumWidth_int(_self_ : Binding::QWidget*, minw : Int32) : Void
    fun bg_QWidget_setMinimumHeight_int(_self_ : Binding::QWidget*, minh : Int32) : Void
    fun bg_QWidget_setMaximumWidth_int(_self_ : Binding::QWidget*, maxw : Int32) : Void
    fun bg_QWidget_setMaximumHeight_int(_self_ : Binding::QWidget*, maxh : Int32) : Void
    fun bg_QWidget_sizeIncrement_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_setSizeIncrement_const_QSize_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setSizeIncrement_int_int(_self_ : Binding::QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_baseSize_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_setBaseSize_const_QSize_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setBaseSize_int_int(_self_ : Binding::QWidget*, basew : Int32, baseh : Int32) : Void
    fun bg_QWidget_setFixedSize_const_QSize_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setFixedSize_int_int(_self_ : Binding::QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_setFixedWidth_int(_self_ : Binding::QWidget*, w : Int32) : Void
    fun bg_QWidget_setFixedHeight_int(_self_ : Binding::QWidget*, h : Int32) : Void
    fun bg_QWidget_mapToGlobal_const_QPoint_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QPoint) : Binding::QPoint
    fun bg_QWidget_mapFromGlobal_const_QPoint_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QPoint) : Binding::QPoint
    fun bg_QWidget_mapToParent_const_QPoint_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QPoint) : Binding::QPoint
    fun bg_QWidget_mapFromParent_const_QPoint_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QPoint) : Binding::QPoint
    fun bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QWidget*, unnamed_arg_1 : QPoint) : Binding::QPoint
    fun bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QWidget*, unnamed_arg_1 : QPoint) : Binding::QPoint
    fun bg_QWidget_window_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_nativeParentWidget_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_topLevelWidget_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_palette_(_self_ : Binding::QWidget*) : Binding::QPalette*
    fun bg_QWidget_setPalette_const_QPalette_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QPalette*) : Void
    fun bg_QWidget_setBackgroundRole_QPalette__ColorRole(_self_ : Binding::QWidget*, unnamed_arg_0 : Palette::ColorRole) : Void
    fun bg_QWidget_backgroundRole_(_self_ : Binding::QWidget*) : Palette::ColorRole
    fun bg_QWidget_setForegroundRole_QPalette__ColorRole(_self_ : Binding::QWidget*, unnamed_arg_0 : Palette::ColorRole) : Void
    fun bg_QWidget_foregroundRole_(_self_ : Binding::QWidget*) : Palette::ColorRole
    fun bg_QWidget_font_(_self_ : Binding::QWidget*) : Binding::QFont*
    fun bg_QWidget_setFont_const_QFont_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QFont*) : Void
    fun bg_QWidget_fontMetrics_(_self_ : Binding::QWidget*) : QFontMetrics*
    fun bg_QWidget_fontInfo_(_self_ : Binding::QWidget*) : QFontInfo*
    fun bg_QWidget_cursor_(_self_ : Binding::QWidget*) : QCursor*
    fun bg_QWidget_setCursor_const_QCursor_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QCursor*) : Void
    fun bg_QWidget_unsetCursor_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_setMouseTracking_bool(_self_ : Binding::QWidget*, enable : Bool) : Void
    fun bg_QWidget_hasMouseTracking_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_underMouse_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setTabletTracking_bool(_self_ : Binding::QWidget*, enable : Bool) : Void
    fun bg_QWidget_hasTabletTracking_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setMask_const_QBitmap_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QBitmap*) : Void
    fun bg_QWidget_setMask_const_QRegion_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_mask_(_self_ : Binding::QWidget*) : QRegion*
    fun bg_QWidget_clearMask_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_render_QPaintDevice_X(_self_ : Binding::QWidget*, target : QPaintDevice*) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R(_self_ : Binding::QWidget*, target : QPaintDevice*, target_offset : QPoint) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(_self_ : Binding::QWidget*, target : QPaintDevice*, target_offset : QPoint, source_region : QRegion*) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(_self_ : Binding::QWidget*, target : QPaintDevice*, target_offset : QPoint, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
    fun bg_QWidget_render_QPainter_X(_self_ : Binding::QWidget*, painter : QPainter*) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R(_self_ : Binding::QWidget*, painter : QPainter*, target_offset : QPoint) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(_self_ : Binding::QWidget*, painter : QPainter*, target_offset : QPoint, source_region : QRegion*) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(_self_ : Binding::QWidget*, painter : QPainter*, target_offset : QPoint, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
    fun bg_QWidget_grab_(_self_ : Binding::QWidget*) : Binding::QPixmap*
    fun bg_QWidget_grab_const_QRect_R(_self_ : Binding::QWidget*, rectangle : QRect*) : Binding::QPixmap*
    fun bg_QWidget_graphicsEffect_(_self_ : Binding::QWidget*) : QGraphicsEffect*
    fun bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(_self_ : Binding::QWidget*, effect : QGraphicsEffect*) : Void
    fun bg_QWidget_grabGesture_Qt__GestureType(_self_ : Binding::QWidget*, type : GestureType) : Void
    fun bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(_self_ : Binding::QWidget*, type : GestureType, flags : GestureFlags) : Void
    fun bg_QWidget_ungrabGesture_Qt__GestureType(_self_ : Binding::QWidget*, type : GestureType) : Void
    fun bg_QWidget_setWindowTitle_const_QString_R(_self_ : Binding::QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_setStyleSheet_const_QString_R(_self_ : Binding::QWidget*, style_sheet : CrystalString) : Void
    fun bg_QWidget_styleSheet_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_windowTitle_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setWindowIcon_const_QIcon_R(_self_ : Binding::QWidget*, icon : QIcon*) : Void
    fun bg_QWidget_windowIcon_(_self_ : Binding::QWidget*) : Binding::QIcon*
    fun bg_QWidget_setWindowIconText_const_QString_R(_self_ : Binding::QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_windowIconText_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setWindowRole_const_QString_R(_self_ : Binding::QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_windowRole_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setWindowFilePath_const_QString_R(_self_ : Binding::QWidget*, file_path : CrystalString) : Void
    fun bg_QWidget_windowFilePath_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setWindowOpacity_qreal(_self_ : Binding::QWidget*, level : Float64) : Void
    fun bg_QWidget_windowOpacity_(_self_ : Binding::QWidget*) : Float64
    fun bg_QWidget_isWindowModified_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setToolTip_const_QString_R(_self_ : Binding::QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_toolTip_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setToolTipDuration_int(_self_ : Binding::QWidget*, msec : Int32) : Void
    fun bg_QWidget_toolTipDuration_(_self_ : Binding::QWidget*) : Int32
    fun bg_QWidget_setStatusTip_const_QString_R(_self_ : Binding::QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_statusTip_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setWhatsThis_const_QString_R(_self_ : Binding::QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_whatsThis_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_accessibleName_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setAccessibleName_const_QString_R(_self_ : Binding::QWidget*, name : CrystalString) : Void
    fun bg_QWidget_accessibleDescription_(_self_ : Binding::QWidget*) : Binding::CrystalString
    fun bg_QWidget_setAccessibleDescription_const_QString_R(_self_ : Binding::QWidget*, description : CrystalString) : Void
    fun bg_QWidget_setLayoutDirection_Qt__LayoutDirection(_self_ : Binding::QWidget*, direction : LayoutDirection) : Void
    fun bg_QWidget_layoutDirection_(_self_ : Binding::QWidget*) : LayoutDirection
    fun bg_QWidget_unsetLayoutDirection_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_setLocale_const_QLocale_R(_self_ : Binding::QWidget*, locale : QLocale*) : Void
    fun bg_QWidget_locale_(_self_ : Binding::QWidget*) : QLocale*
    fun bg_QWidget_unsetLocale_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_isRightToLeft_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isLeftToRight_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setFocus_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_isActiveWindow_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_activateWindow_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_clearFocus_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_setFocus_Qt__FocusReason(_self_ : Binding::QWidget*, reason : FocusReason) : Void
    fun bg_QWidget_focusPolicy_(_self_ : Binding::QWidget*) : FocusPolicy
    fun bg_QWidget_setFocusPolicy_Qt__FocusPolicy(_self_ : Binding::QWidget*, policy : FocusPolicy) : Void
    fun bg_QWidget_hasFocus_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(unnamed_arg_0 : QWidget*, unnamed_arg_1 : QWidget*) : Void
    fun bg_QWidget_setFocusProxy_QWidget_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QWidget_focusProxy_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_contextMenuPolicy_(_self_ : Binding::QWidget*) : ContextMenuPolicy
    fun bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(_self_ : Binding::QWidget*, policy : ContextMenuPolicy) : Void
    fun bg_QWidget_grabMouse_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_grabMouse_const_QCursor_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QCursor*) : Void
    fun bg_QWidget_releaseMouse_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_grabKeyboard_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_releaseKeyboard_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(_self_ : Binding::QWidget*, key : QKeySequence*, context : ShortcutContext) : Int32
    fun bg_QWidget_releaseShortcut_int(_self_ : Binding::QWidget*, id : Int32) : Void
    fun bg_QWidget_setShortcutEnabled_int_bool(_self_ : Binding::QWidget*, id : Int32, enable : Bool) : Void
    fun bg_QWidget_setShortcutAutoRepeat_int_bool(_self_ : Binding::QWidget*, id : Int32, enable : Bool) : Void
    fun bg_QWidget_mouseGrabber_STATIC_() : Binding::QWidget*
    fun bg_QWidget_keyboardGrabber_STATIC_() : Binding::QWidget*
    fun bg_QWidget_updatesEnabled_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setUpdatesEnabled_bool(_self_ : Binding::QWidget*, enable : Bool) : Void
    fun bg_QWidget_graphicsProxyWidget_(_self_ : Binding::QWidget*) : QGraphicsProxyWidget*
    fun bg_QWidget_update_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_repaint_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_update_int_int_int_int(_self_ : Binding::QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_update_const_QRect_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_update_const_QRegion_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_repaint_int_int_int_int(_self_ : Binding::QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_repaint_const_QRect_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_repaint_const_QRegion_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_setVisible_bool(_self_ : Binding::QWidget*, visible : Bool) : Void
    fun bg_QWidget_setHidden_bool(_self_ : Binding::QWidget*, hidden : Bool) : Void
    fun bg_QWidget_show_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_hide_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_showMinimized_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_showMaximized_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_showFullScreen_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_showNormal_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_close_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_raise_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_lower_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_stackUnder_QWidget_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QWidget_move_int_int(_self_ : Binding::QWidget*, x : Int32, y : Int32) : Void
    fun bg_QWidget_move_const_QPoint_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QPoint) : Void
    fun bg_QWidget_resize_int_int(_self_ : Binding::QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_resize_const_QSize_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setGeometry_int_int_int_int(_self_ : Binding::QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_setGeometry_const_QRect_R(_self_ : Binding::QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_saveGeometry_(_self_ : Binding::QWidget*) : QByteArray*
    fun bg_QWidget_restoreGeometry_const_QByteArray_R(_self_ : Binding::QWidget*, geometry : QByteArray*) : Bool
    fun bg_QWidget_adjustSize_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_isVisible_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isVisibleTo_const_QWidget_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QWidget*) : Bool
    fun bg_QWidget_isHidden_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isMinimized_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isMaximized_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_isFullScreen_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_windowState_(_self_ : Binding::QWidget*) : WindowStates
    fun bg_QWidget_setWindowState_Qt__WindowStates(_self_ : Binding::QWidget*, state : WindowStates) : Void
    fun bg_QWidget_overrideWindowState_Qt__WindowStates(_self_ : Binding::QWidget*, state : WindowStates) : Void
    fun bg_QWidget_sizeHint_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : Binding::QWidget*) : QSize*
    fun bg_QWidget_sizePolicy_(_self_ : Binding::QWidget*) : Binding::QSizePolicy*
    fun bg_QWidget_setSizePolicy_QSizePolicy(_self_ : Binding::QWidget*, unnamed_arg_0 : QSizePolicy*) : Void
    fun bg_QWidget_setSizePolicy_QSizePolicy__Policy_QSizePolicy__Policy(_self_ : Binding::QWidget*, horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy) : Void
    fun bg_QWidget_heightForWidth_int(_self_ : Binding::QWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_visibleRegion_(_self_ : Binding::QWidget*) : QRegion*
    fun bg_QWidget_setContentsMargins_int_int_int_int(_self_ : Binding::QWidget*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QWidget_setContentsMargins_const_QMargins_R(_self_ : Binding::QWidget*, margins : QMargins*) : Void
    fun bg_QWidget_getContentsMargins_int_X_int_X_int_X_int_X(_self_ : Binding::QWidget*, left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
    fun bg_QWidget_contentsMargins_(_self_ : Binding::QWidget*) : QMargins*
    fun bg_QWidget_contentsRect_(_self_ : Binding::QWidget*) : Binding::QRect*
    fun bg_QWidget_layout_(_self_ : Binding::QWidget*) : Binding::QLayout*
    fun bg_QWidget_setLayout_QLayout_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QLayout*) : Void
    fun bg_QWidget_updateGeometry_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_setParent_QWidget_X(_self_ : Binding::QWidget*, parent : QWidget*) : Void
    fun bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(_self_ : Binding::QWidget*, parent : QWidget*, f : WindowFlags) : Void
    fun bg_QWidget_scroll_int_int(_self_ : Binding::QWidget*, dx : Int32, dy : Int32) : Void
    fun bg_QWidget_scroll_int_int_const_QRect_R(_self_ : Binding::QWidget*, dx : Int32, dy : Int32, unnamed_arg_2 : QRect*) : Void
    fun bg_QWidget_focusWidget_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_nextInFocusChain_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_previousInFocusChain_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_acceptDrops_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setAcceptDrops_bool(_self_ : Binding::QWidget*, on : Bool) : Void
    fun bg_QWidget_addAction_QAction_X(_self_ : Binding::QWidget*, action : QAction*) : Void
    fun bg_QWidget_addActions_QList_QAction_X_(_self_ : Binding::QWidget*, actions : Void*) : Void
    fun bg_QWidget_insertActions_QAction_X_QList_QAction_X_(_self_ : Binding::QWidget*, before : QAction*, actions : Void*) : Void
    fun bg_QWidget_insertAction_QAction_X_QAction_X(_self_ : Binding::QWidget*, before : QAction*, action : QAction*) : Void
    fun bg_QWidget_removeAction_QAction_X(_self_ : Binding::QWidget*, action : QAction*) : Void
    fun bg_QWidget_actions_(_self_ : Binding::QWidget*) : Void*
    fun bg_QWidget_parentWidget_(_self_ : Binding::QWidget*) : Binding::QWidget*
    fun bg_QWidget_setWindowFlags_Qt__WindowFlags(_self_ : Binding::QWidget*, type : WindowFlags) : Void
    fun bg_QWidget_windowFlags_(_self_ : Binding::QWidget*) : WindowFlags
    fun bg_QWidget_setWindowFlag_Qt__WindowType_bool(_self_ : Binding::QWidget*, unnamed_arg_0 : WindowType, on : Bool) : Void
    fun bg_QWidget_overrideWindowFlags_Qt__WindowFlags(_self_ : Binding::QWidget*, type : WindowFlags) : Void
    fun bg_QWidget_windowType_(_self_ : Binding::QWidget*) : WindowType
    fun bg_QWidget_childAt_int_int(_self_ : Binding::QWidget*, x : Int32, y : Int32) : Binding::QWidget*
    fun bg_QWidget_childAt_const_QPoint_R(_self_ : Binding::QWidget*, p : QPoint) : Binding::QWidget*
    fun bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(_self_ : Binding::QWidget*, unnamed_arg_0 : WidgetAttribute, on : Bool) : Void
    fun bg_QWidget_testAttribute_Qt__WidgetAttribute(_self_ : Binding::QWidget*, unnamed_arg_0 : WidgetAttribute) : Bool
    fun bg_QWidget_paintEngine_(_self_ : Binding::QWidget*) : QPaintEngine*
    fun bg_QWidget_ensurePolished_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_isAncestorOf_const_QWidget_X(_self_ : Binding::QWidget*, child : QWidget*) : Bool
    fun bg_QWidget_autoFillBackground_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_setAutoFillBackground_bool(_self_ : Binding::QWidget*, enabled : Bool) : Void
    fun bg_QWidget_backingStore_(_self_ : Binding::QWidget*) : QBackingStore*
    fun bg_QWidget_windowHandle_(_self_ : Binding::QWidget*) : QWindow*
    fun bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(window : QWindow*, parent : QWidget*) : Binding::QWidget*
    fun bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(window : QWindow*, parent : QWidget*, flags : WindowFlags) : Binding::QWidget*
    fun bg_QWidget_windowTitleChanged_const_QString_R(_self_ : Binding::QWidget*, title : CrystalString) : Void
    fun bg_QWidget_windowTitleChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QWidget_windowIconChanged_const_QIcon_R(_self_ : Binding::QWidget*, icon : QIcon*) : Void
    fun bg_QWidget_windowIconChanged_CONNECT_CrystalProc_void__const_QIconR_(_self_ : Binding::QWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QWidget_windowIconTextChanged_const_QString_R(_self_ : Binding::QWidget*, icon_text : CrystalString) : Void
    fun bg_QWidget_windowIconTextChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QWidget_customContextMenuRequested_const_QPoint_R(_self_ : Binding::QWidget*, pos : QPoint) : Void
    fun bg_QWidget_customContextMenuRequested_CONNECT_CrystalProc_void__const_QPoint_(_self_ : Binding::QWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QWidget_event_QEvent_X(_self_ : Binding::QWidget*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : Binding::QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : Binding::QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : Binding::QWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : Binding::QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : Binding::QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : Binding::QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : Binding::QWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : Binding::QWidget*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_QPaintEvent_X(_self_ : Binding::QWidget*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : Binding::QWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : Binding::QWidget*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : Binding::QWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : Binding::QWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : Binding::QWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : Binding::QWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : Binding::QWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : Binding::QWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : Binding::QWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : Binding::QWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : Binding::QWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : Binding::QWidget*, event_type : QByteArray*, message : Void*, result : Int32*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : Binding::QWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : Binding::QWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : Binding::QWidget*) : Binding::QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : Binding::QWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodHints_(_self_ : Binding::QWidget*) : InputMethodHints
    fun bg_QWidget_setInputMethodHints_Qt__InputMethodHints(_self_ : Binding::QWidget*, hints : InputMethodHints) : Void
    fun bg_QWidget_updateMicroFocus_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_destroy_bool_bool(_self_ : Binding::QWidget*, destroy_window : Bool, destroy_sub_windows : Bool) : Void
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : Binding::QWidget*, next_ : Bool) : Bool
    fun bg_QWidget_focusNextChild_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_focusPreviousChild_(_self_ : Binding::QWidget*) : Bool
    fun bg_QWidget_CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(d : QWidgetPrivate*, parent : QWidget*, f : WindowFlags) : Binding::QWidget*
    fun bg_QWidget_DESTROY_(_self_ : Binding::QWidget*) : Void
    fun bg_QWidget_AS_QPaintDevice_(_self_ : Binding::QWidget*) : Binding::QPaintDevice*
    fun bg_QAbstractButton_metaObject_(_self_ : Binding::QAbstractButton*) : QMetaObject*
    fun bg_QAbstractButton_qt_metacast_const_char_X(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractButton_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QAbstractButton*
    fun bg_QAbstractButton_setText_const_QString_R(_self_ : Binding::QAbstractButton*, text : CrystalString) : Void
    fun bg_QAbstractButton_text_(_self_ : Binding::QAbstractButton*) : Binding::CrystalString
    fun bg_QAbstractButton_setIcon_const_QIcon_R(_self_ : Binding::QAbstractButton*, icon : QIcon*) : Void
    fun bg_QAbstractButton_icon_(_self_ : Binding::QAbstractButton*) : Binding::QIcon*
    fun bg_QAbstractButton_iconSize_(_self_ : Binding::QAbstractButton*) : QSize*
    fun bg_QAbstractButton_setShortcut_const_QKeySequence_R(_self_ : Binding::QAbstractButton*, key : QKeySequence*) : Void
    fun bg_QAbstractButton_shortcut_(_self_ : Binding::QAbstractButton*) : Binding::QKeySequence*
    fun bg_QAbstractButton_setCheckable_bool(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_isCheckable_(_self_ : Binding::QAbstractButton*) : Bool
    fun bg_QAbstractButton_isChecked_(_self_ : Binding::QAbstractButton*) : Bool
    fun bg_QAbstractButton_setDown_bool(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_isDown_(_self_ : Binding::QAbstractButton*) : Bool
    fun bg_QAbstractButton_setAutoRepeat_bool(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_autoRepeat_(_self_ : Binding::QAbstractButton*) : Bool
    fun bg_QAbstractButton_setAutoRepeatDelay_int(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractButton_autoRepeatDelay_(_self_ : Binding::QAbstractButton*) : Int32
    fun bg_QAbstractButton_setAutoRepeatInterval_int(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractButton_autoRepeatInterval_(_self_ : Binding::QAbstractButton*) : Int32
    fun bg_QAbstractButton_setAutoExclusive_bool(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_autoExclusive_(_self_ : Binding::QAbstractButton*) : Bool
    fun bg_QAbstractButton_group_(_self_ : Binding::QAbstractButton*) : Binding::QButtonGroup*
    fun bg_QAbstractButton_setIconSize_const_QSize_R(_self_ : Binding::QAbstractButton*, size : QSize*) : Void
    fun bg_QAbstractButton_animateClick_int(_self_ : Binding::QAbstractButton*, msec : Int32) : Void
    fun bg_QAbstractButton_click_(_self_ : Binding::QAbstractButton*) : Void
    fun bg_QAbstractButton_toggle_(_self_ : Binding::QAbstractButton*) : Void
    fun bg_QAbstractButton_setChecked_bool(_self_ : Binding::QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_pressed_(_self_ : Binding::QAbstractButton*) : Void
    fun bg_QAbstractButton_pressed_CONNECT_CrystalProc_void_(_self_ : Binding::QAbstractButton*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractButton_released_(_self_ : Binding::QAbstractButton*) : Void
    fun bg_QAbstractButton_released_CONNECT_CrystalProc_void_(_self_ : Binding::QAbstractButton*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractButton_clicked_bool(_self_ : Binding::QAbstractButton*, checked : Bool) : Void
    fun bg_QAbstractButton_clicked_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QAbstractButton*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractButton_toggled_bool(_self_ : Binding::QAbstractButton*, checked : Bool) : Void
    fun bg_QAbstractButton_toggled_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QAbstractButton*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractButton_paintEvent_QPaintEvent_X(_self_ : Binding::QAbstractButton*, e : QPaintEvent*) : Void
    fun bg_QAbstractButton_hitButton_const_QPoint_R(_self_ : Binding::QAbstractButton*, pos : QPoint) : Bool
    fun bg_QAbstractButton_checkStateSet_(_self_ : Binding::QAbstractButton*) : Void
    fun bg_QAbstractButton_nextCheckState_(_self_ : Binding::QAbstractButton*) : Void
    fun bg_QAbstractButton_event_QEvent_X(_self_ : Binding::QAbstractButton*, e : QEvent*) : Bool
    fun bg_QAbstractButton_keyPressEvent_QKeyEvent_X(_self_ : Binding::QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_QMouseEvent_X(_self_ : Binding::QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_QFocusEvent_X(_self_ : Binding::QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_QFocusEvent_X(_self_ : Binding::QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_QEvent_X(_self_ : Binding::QAbstractButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_QTimerEvent_X(_self_ : Binding::QAbstractButton*, e : QTimerEvent*) : Void
    fun bg_QAbstractButton_CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(dd : QAbstractButtonPrivate*, parent : QWidget*) : Binding::QAbstractButton*
    fun bg_QAbstractButton_DESTROY_(_self_ : Binding::QAbstractButton*) : Void
    fun bg_QToolButton_metaObject_(_self_ : Binding::QToolButton*) : QMetaObject*
    fun bg_QToolButton_qt_metacast_const_char_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QToolButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QToolButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QToolButton_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QToolButton_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QToolButton*
    fun bg_QToolButton_sizeHint_(_self_ : Binding::QToolButton*) : QSize*
    fun bg_QToolButton_minimumSizeHint_(_self_ : Binding::QToolButton*) : QSize*
    fun bg_QToolButton_toolButtonStyle_(_self_ : Binding::QToolButton*) : ToolButtonStyle
    fun bg_QToolButton_arrowType_(_self_ : Binding::QToolButton*) : ArrowType
    fun bg_QToolButton_setArrowType_Qt__ArrowType(_self_ : Binding::QToolButton*, type : ArrowType) : Void
    fun bg_QToolButton_setMenu_QMenu_X(_self_ : Binding::QToolButton*, menu : QMenu*) : Void
    fun bg_QToolButton_menu_(_self_ : Binding::QToolButton*) : Binding::QMenu*
    fun bg_QToolButton_setPopupMode_QToolButton__ToolButtonPopupMode(_self_ : Binding::QToolButton*, mode : ToolButton::ToolButtonPopupMode) : Void
    fun bg_QToolButton_popupMode_(_self_ : Binding::QToolButton*) : ToolButton::ToolButtonPopupMode
    fun bg_QToolButton_defaultAction_(_self_ : Binding::QToolButton*) : Binding::QAction*
    fun bg_QToolButton_setAutoRaise_bool(_self_ : Binding::QToolButton*, enable : Bool) : Void
    fun bg_QToolButton_autoRaise_(_self_ : Binding::QToolButton*) : Bool
    fun bg_QToolButton_showMenu_(_self_ : Binding::QToolButton*) : Void
    fun bg_QToolButton_setToolButtonStyle_Qt__ToolButtonStyle(_self_ : Binding::QToolButton*, style : ToolButtonStyle) : Void
    fun bg_QToolButton_setDefaultAction_QAction_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QAction*) : Void
    fun bg_QToolButton_triggered_QAction_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QAction*) : Void
    fun bg_QToolButton_triggered_CONNECT_CrystalProc_void__QActionX_(_self_ : Binding::QToolButton*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolButton_event_QEvent_X(_self_ : Binding::QToolButton*, e : QEvent*) : Bool
    fun bg_QToolButton_mousePressEvent_QMouseEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QToolButton_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QToolButton_paintEvent_QPaintEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QToolButton_actionEvent_QActionEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QToolButton_enterEvent_QEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_leaveEvent_QEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_timerEvent_QTimerEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QToolButton_changeEvent_QEvent_X(_self_ : Binding::QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_hitButton_const_QPoint_R(_self_ : Binding::QToolButton*, pos : QPoint) : Bool
    fun bg_QToolButton_nextCheckState_(_self_ : Binding::QToolButton*) : Void
    fun bg_QToolButton_initStyleOption_QStyleOptionToolButton_X(_self_ : Binding::QToolButton*, option : QStyleOptionToolButton*) : Void
    fun bg_QToolButton_DESTROY_(_self_ : Binding::QToolButton*) : Void
    fun bg_QToolBar_metaObject_(_self_ : Binding::QToolBar*) : QMetaObject*
    fun bg_QToolBar_qt_metacast_const_char_X(_self_ : Binding::QToolBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QToolBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QToolBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QToolBar_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QToolBar_CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : Binding::QToolBar*
    fun bg_QToolBar_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QToolBar*
    fun bg_QToolBar_setMovable_bool(_self_ : Binding::QToolBar*, movable : Bool) : Void
    fun bg_QToolBar_isMovable_(_self_ : Binding::QToolBar*) : Bool
    fun bg_QToolBar_setAllowedAreas_Qt__ToolBarAreas(_self_ : Binding::QToolBar*, areas : ToolBarAreas) : Void
    fun bg_QToolBar_allowedAreas_(_self_ : Binding::QToolBar*) : ToolBarAreas
    fun bg_QToolBar_isAreaAllowed_Qt__ToolBarArea(_self_ : Binding::QToolBar*, area : ToolBarArea) : Bool
    fun bg_QToolBar_setOrientation_Qt__Orientation(_self_ : Binding::QToolBar*, orientation : Orientation) : Void
    fun bg_QToolBar_orientation_(_self_ : Binding::QToolBar*) : Orientation
    fun bg_QToolBar_clear_(_self_ : Binding::QToolBar*) : Void
    fun bg_QToolBar_addAction_const_QString_R(_self_ : Binding::QToolBar*, text : CrystalString) : Binding::QAction*
    fun bg_QToolBar_addAction_const_QIcon_R_const_QString_R(_self_ : Binding::QToolBar*, icon : QIcon*, text : CrystalString) : Binding::QAction*
    fun bg_QToolBar_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : Binding::QToolBar*, text : CrystalString, receiver : QObject*, member : UInt8*) : Binding::QAction*
    fun bg_QToolBar_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(_self_ : Binding::QToolBar*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*) : Binding::QAction*
    fun bg_QToolBar_addSeparator_(_self_ : Binding::QToolBar*) : Binding::QAction*
    fun bg_QToolBar_insertSeparator_QAction_X(_self_ : Binding::QToolBar*, before : QAction*) : Binding::QAction*
    fun bg_QToolBar_addWidget_QWidget_X(_self_ : Binding::QToolBar*, widget : QWidget*) : Binding::QAction*
    fun bg_QToolBar_insertWidget_QAction_X_QWidget_X(_self_ : Binding::QToolBar*, before : QAction*, widget : QWidget*) : Binding::QAction*
    fun bg_QToolBar_actionGeometry_QAction_X(_self_ : Binding::QToolBar*, action : QAction*) : Binding::QRect*
    fun bg_QToolBar_actionAt_const_QPoint_R(_self_ : Binding::QToolBar*, p : QPoint) : Binding::QAction*
    fun bg_QToolBar_actionAt_int_int(_self_ : Binding::QToolBar*, x : Int32, y : Int32) : Binding::QAction*
    fun bg_QToolBar_toggleViewAction_(_self_ : Binding::QToolBar*) : Binding::QAction*
    fun bg_QToolBar_iconSize_(_self_ : Binding::QToolBar*) : QSize*
    fun bg_QToolBar_toolButtonStyle_(_self_ : Binding::QToolBar*) : ToolButtonStyle
    fun bg_QToolBar_widgetForAction_QAction_X(_self_ : Binding::QToolBar*, action : QAction*) : Binding::QWidget*
    fun bg_QToolBar_isFloatable_(_self_ : Binding::QToolBar*) : Bool
    fun bg_QToolBar_setFloatable_bool(_self_ : Binding::QToolBar*, floatable : Bool) : Void
    fun bg_QToolBar_isFloating_(_self_ : Binding::QToolBar*) : Bool
    fun bg_QToolBar_setIconSize_const_QSize_R(_self_ : Binding::QToolBar*, icon_size : QSize*) : Void
    fun bg_QToolBar_setToolButtonStyle_Qt__ToolButtonStyle(_self_ : Binding::QToolBar*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QToolBar_actionTriggered_QAction_X(_self_ : Binding::QToolBar*, action : QAction*) : Void
    fun bg_QToolBar_actionTriggered_CONNECT_CrystalProc_void__QActionX_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_movableChanged_bool(_self_ : Binding::QToolBar*, movable : Bool) : Void
    fun bg_QToolBar_movableChanged_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_allowedAreasChanged_Qt__ToolBarAreas(_self_ : Binding::QToolBar*, allowed_areas : ToolBarAreas) : Void
    fun bg_QToolBar_allowedAreasChanged_CONNECT_CrystalProc_void__Qt__ToolBarAreas_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_orientationChanged_Qt__Orientation(_self_ : Binding::QToolBar*, orientation : Orientation) : Void
    fun bg_QToolBar_orientationChanged_CONNECT_CrystalProc_void__Qt__Orientation_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_iconSizeChanged_const_QSize_R(_self_ : Binding::QToolBar*, icon_size : QSize*) : Void
    fun bg_QToolBar_iconSizeChanged_CONNECT_CrystalProc_void__const_QSizeR_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_toolButtonStyleChanged_Qt__ToolButtonStyle(_self_ : Binding::QToolBar*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QToolBar_toolButtonStyleChanged_CONNECT_CrystalProc_void__Qt__ToolButtonStyle_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_topLevelChanged_bool(_self_ : Binding::QToolBar*, top_level : Bool) : Void
    fun bg_QToolBar_topLevelChanged_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_visibilityChanged_bool(_self_ : Binding::QToolBar*, visible : Bool) : Void
    fun bg_QToolBar_visibilityChanged_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QToolBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QToolBar_actionEvent_QActionEvent_X(_self_ : Binding::QToolBar*, event : QActionEvent*) : Void
    fun bg_QToolBar_changeEvent_QEvent_X(_self_ : Binding::QToolBar*, event : QEvent*) : Void
    fun bg_QToolBar_paintEvent_QPaintEvent_X(_self_ : Binding::QToolBar*, event : QPaintEvent*) : Void
    fun bg_QToolBar_event_QEvent_X(_self_ : Binding::QToolBar*, event : QEvent*) : Bool
    fun bg_QToolBar_initStyleOption_QStyleOptionToolBar_X(_self_ : Binding::QToolBar*, option : QStyleOptionToolBar*) : Void
    fun bg_QToolBar_DESTROY_(_self_ : Binding::QToolBar*) : Void
    fun bg_QFrame_metaObject_(_self_ : Binding::QFrame*) : QMetaObject*
    fun bg_QFrame_qt_metacast_const_char_X(_self_ : Binding::QFrame*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QFrame*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QFrame_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QFrame*
    fun bg_QFrame_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : Binding::QFrame*
    fun bg_QFrame_frameStyle_(_self_ : Binding::QFrame*) : Int32
    fun bg_QFrame_setFrameStyle_int(_self_ : Binding::QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_frameWidth_(_self_ : Binding::QFrame*) : Int32
    fun bg_QFrame_sizeHint_(_self_ : Binding::QFrame*) : QSize*
    fun bg_QFrame_frameShape_(_self_ : Binding::QFrame*) : Frame::Shape
    fun bg_QFrame_setFrameShape_QFrame__Shape(_self_ : Binding::QFrame*, unnamed_arg_0 : Frame::Shape) : Void
    fun bg_QFrame_frameShadow_(_self_ : Binding::QFrame*) : Frame::Shadow
    fun bg_QFrame_setFrameShadow_QFrame__Shadow(_self_ : Binding::QFrame*, unnamed_arg_0 : Frame::Shadow) : Void
    fun bg_QFrame_lineWidth_(_self_ : Binding::QFrame*) : Int32
    fun bg_QFrame_setLineWidth_int(_self_ : Binding::QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_midLineWidth_(_self_ : Binding::QFrame*) : Int32
    fun bg_QFrame_setMidLineWidth_int(_self_ : Binding::QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_frameRect_(_self_ : Binding::QFrame*) : Binding::QRect*
    fun bg_QFrame_setFrameRect_const_QRect_R(_self_ : Binding::QFrame*, unnamed_arg_0 : QRect*) : Void
    fun bg_QFrame_event_QEvent_X(_self_ : Binding::QFrame*, e : QEvent*) : Bool
    fun bg_QFrame_paintEvent_QPaintEvent_X(_self_ : Binding::QFrame*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QFrame_changeEvent_QEvent_X(_self_ : Binding::QFrame*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QFrame_drawFrame_QPainter_X(_self_ : Binding::QFrame*, unnamed_arg_0 : QPainter*) : Void
    fun bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X(dd : QFramePrivate*, parent : QWidget*) : Binding::QFrame*
    fun bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(dd : QFramePrivate*, parent : QWidget*, f : WindowFlags) : Binding::QFrame*
    fun bg_QFrame_initStyleOption_QStyleOptionFrame_X(_self_ : Binding::QFrame*, option : QStyleOptionFrame*) : Void
    fun bg_QFrame_DESTROY_(_self_ : Binding::QFrame*) : Void
    fun bg_QProgressBar_metaObject_(_self_ : Binding::QProgressBar*) : QMetaObject*
    fun bg_QProgressBar_qt_metacast_const_char_X(_self_ : Binding::QProgressBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QProgressBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QProgressBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QProgressBar_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QProgressBar_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QProgressBar*
    fun bg_QProgressBar_minimum_(_self_ : Binding::QProgressBar*) : Int32
    fun bg_QProgressBar_maximum_(_self_ : Binding::QProgressBar*) : Int32
    fun bg_QProgressBar_value_(_self_ : Binding::QProgressBar*) : Int32
    fun bg_QProgressBar_text_(_self_ : Binding::QProgressBar*) : Binding::CrystalString
    fun bg_QProgressBar_setTextVisible_bool(_self_ : Binding::QProgressBar*, visible : Bool) : Void
    fun bg_QProgressBar_isTextVisible_(_self_ : Binding::QProgressBar*) : Bool
    fun bg_QProgressBar_alignment_(_self_ : Binding::QProgressBar*) : Alignment
    fun bg_QProgressBar_setAlignment_Qt__Alignment(_self_ : Binding::QProgressBar*, alignment : Alignment) : Void
    fun bg_QProgressBar_sizeHint_(_self_ : Binding::QProgressBar*) : QSize*
    fun bg_QProgressBar_minimumSizeHint_(_self_ : Binding::QProgressBar*) : QSize*
    fun bg_QProgressBar_orientation_(_self_ : Binding::QProgressBar*) : Orientation
    fun bg_QProgressBar_setInvertedAppearance_bool(_self_ : Binding::QProgressBar*, invert : Bool) : Void
    fun bg_QProgressBar_invertedAppearance_(_self_ : Binding::QProgressBar*) : Bool
    fun bg_QProgressBar_setTextDirection_QProgressBar__Direction(_self_ : Binding::QProgressBar*, text_direction : ProgressBar::Direction) : Void
    fun bg_QProgressBar_textDirection_(_self_ : Binding::QProgressBar*) : ProgressBar::Direction
    fun bg_QProgressBar_setFormat_const_QString_R(_self_ : Binding::QProgressBar*, format : CrystalString) : Void
    fun bg_QProgressBar_resetFormat_(_self_ : Binding::QProgressBar*) : Void
    fun bg_QProgressBar_format_(_self_ : Binding::QProgressBar*) : Binding::CrystalString
    fun bg_QProgressBar_reset_(_self_ : Binding::QProgressBar*) : Void
    fun bg_QProgressBar_setRange_int_int(_self_ : Binding::QProgressBar*, minimum : Int32, maximum : Int32) : Void
    fun bg_QProgressBar_setMinimum_int(_self_ : Binding::QProgressBar*, minimum : Int32) : Void
    fun bg_QProgressBar_setMaximum_int(_self_ : Binding::QProgressBar*, maximum : Int32) : Void
    fun bg_QProgressBar_setValue_int(_self_ : Binding::QProgressBar*, value : Int32) : Void
    fun bg_QProgressBar_setOrientation_Qt__Orientation(_self_ : Binding::QProgressBar*, unnamed_arg_0 : Orientation) : Void
    fun bg_QProgressBar_valueChanged_int(_self_ : Binding::QProgressBar*, value : Int32) : Void
    fun bg_QProgressBar_valueChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QProgressBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QProgressBar_event_QEvent_X(_self_ : Binding::QProgressBar*, e : QEvent*) : Bool
    fun bg_QProgressBar_paintEvent_QPaintEvent_X(_self_ : Binding::QProgressBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QProgressBar_initStyleOption_QStyleOptionProgressBar_X(_self_ : Binding::QProgressBar*, option : QStyleOptionProgressBar*) : Void
    fun bg_QProgressBar_DESTROY_(_self_ : Binding::QProgressBar*) : Void
    fun bg_QAbstractSlider_metaObject_(_self_ : Binding::QAbstractSlider*) : QMetaObject*
    fun bg_QAbstractSlider_qt_metacast_const_char_X(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractSlider_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractSlider_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QAbstractSlider*
    fun bg_QAbstractSlider_orientation_(_self_ : Binding::QAbstractSlider*) : Orientation
    fun bg_QAbstractSlider_setMinimum_int(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_minimum_(_self_ : Binding::QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setMaximum_int(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_maximum_(_self_ : Binding::QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setSingleStep_int(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_singleStep_(_self_ : Binding::QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setPageStep_int(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_pageStep_(_self_ : Binding::QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setTracking_bool(_self_ : Binding::QAbstractSlider*, enable : Bool) : Void
    fun bg_QAbstractSlider_hasTracking_(_self_ : Binding::QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_setSliderDown_bool(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSlider_isSliderDown_(_self_ : Binding::QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_setSliderPosition_int(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_sliderPosition_(_self_ : Binding::QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setInvertedAppearance_bool(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSlider_invertedAppearance_(_self_ : Binding::QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_setInvertedControls_bool(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSlider_invertedControls_(_self_ : Binding::QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_value_(_self_ : Binding::QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_triggerAction_QAbstractSlider__SliderAction(_self_ : Binding::QAbstractSlider*, action : AbstractSlider::SliderAction) : Void
    fun bg_QAbstractSlider_setValue_int(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_setOrientation_Qt__Orientation(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : Orientation) : Void
    fun bg_QAbstractSlider_setRange_int_int(_self_ : Binding::QAbstractSlider*, min : Int32, max : Int32) : Void
    fun bg_QAbstractSlider_valueChanged_int(_self_ : Binding::QAbstractSlider*, value : Int32) : Void
    fun bg_QAbstractSlider_valueChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QAbstractSlider*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractSlider_sliderPressed_(_self_ : Binding::QAbstractSlider*) : Void
    fun bg_QAbstractSlider_sliderPressed_CONNECT_CrystalProc_void_(_self_ : Binding::QAbstractSlider*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractSlider_sliderMoved_int(_self_ : Binding::QAbstractSlider*, position : Int32) : Void
    fun bg_QAbstractSlider_sliderMoved_CONNECT_CrystalProc_void__int_(_self_ : Binding::QAbstractSlider*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractSlider_sliderReleased_(_self_ : Binding::QAbstractSlider*) : Void
    fun bg_QAbstractSlider_sliderReleased_CONNECT_CrystalProc_void_(_self_ : Binding::QAbstractSlider*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractSlider_rangeChanged_int_int(_self_ : Binding::QAbstractSlider*, min : Int32, max : Int32) : Void
    fun bg_QAbstractSlider_rangeChanged_CONNECT_CrystalProc_void__int__int_(_self_ : Binding::QAbstractSlider*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractSlider_actionTriggered_int(_self_ : Binding::QAbstractSlider*, action : Int32) : Void
    fun bg_QAbstractSlider_actionTriggered_CONNECT_CrystalProc_void__int_(_self_ : Binding::QAbstractSlider*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractSlider_event_QEvent_X(_self_ : Binding::QAbstractSlider*, e : QEvent*) : Bool
    fun bg_QAbstractSlider_setRepeatAction_QAbstractSlider__SliderAction_int_int(_self_ : Binding::QAbstractSlider*, action : AbstractSlider::SliderAction, threshold_time : Int32, repeat_time : Int32) : Void
    fun bg_QAbstractSlider_repeatAction_(_self_ : Binding::QAbstractSlider*) : AbstractSlider::SliderAction
    fun bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(_self_ : Binding::QAbstractSlider*, change : AbstractSlider::SliderChange) : Void
    fun bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(_self_ : Binding::QAbstractSlider*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_QTimerEvent_X(_self_ : Binding::QAbstractSlider*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_wheelEvent_QWheelEvent_X(_self_ : Binding::QAbstractSlider*, e : QWheelEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_QEvent_X(_self_ : Binding::QAbstractSlider*, e : QEvent*) : Void
    fun bg_QAbstractSlider_CONSTRUCT_QAbstractSliderPrivate_R_QWidget_X(dd : QAbstractSliderPrivate*, parent : QWidget*) : Binding::QAbstractSlider*
    fun bg_QAbstractSlider_DESTROY_(_self_ : Binding::QAbstractSlider*) : Void
    fun bg_QDial_metaObject_(_self_ : Binding::QDial*) : QMetaObject*
    fun bg_QDial_qt_metacast_const_char_X(_self_ : Binding::QDial*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QDial*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDial_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDial_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDial_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QDial*
    fun bg_QDial_wrapping_(_self_ : Binding::QDial*) : Bool
    fun bg_QDial_notchSize_(_self_ : Binding::QDial*) : Int32
    fun bg_QDial_setNotchTarget_double(_self_ : Binding::QDial*, target : Float64) : Void
    fun bg_QDial_notchTarget_(_self_ : Binding::QDial*) : Float64
    fun bg_QDial_notchesVisible_(_self_ : Binding::QDial*) : Bool
    fun bg_QDial_sizeHint_(_self_ : Binding::QDial*) : QSize*
    fun bg_QDial_minimumSizeHint_(_self_ : Binding::QDial*) : QSize*
    fun bg_QDial_setNotchesVisible_bool(_self_ : Binding::QDial*, visible : Bool) : Void
    fun bg_QDial_setWrapping_bool(_self_ : Binding::QDial*, on : Bool) : Void
    fun bg_QDial_event_QEvent_X(_self_ : Binding::QDial*, e : QEvent*) : Bool
    fun bg_QDial_resizeEvent_QResizeEvent_X(_self_ : Binding::QDial*, re : QResizeEvent*) : Void
    fun bg_QDial_paintEvent_QPaintEvent_X(_self_ : Binding::QDial*, pe : QPaintEvent*) : Void
    fun bg_QDial_mousePressEvent_QMouseEvent_X(_self_ : Binding::QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_sliderChange_QAbstractSlider__SliderChange(_self_ : Binding::QDial*, change : AbstractSlider::SliderChange) : Void
    fun bg_QDial_initStyleOption_QStyleOptionSlider_X(_self_ : Binding::QDial*, option : QStyleOptionSlider*) : Void
    fun bg_QDial_DESTROY_(_self_ : Binding::QDial*) : Void
    fun bg_QScrollBar_metaObject_(_self_ : Binding::QScrollBar*) : QMetaObject*
    fun bg_QScrollBar_qt_metacast_const_char_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QScrollBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QScrollBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QScrollBar_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QScrollBar_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QScrollBar*
    fun bg_QScrollBar_CONSTRUCT_Qt__Orientation_QWidget_X(unnamed_arg_0 : Orientation, parent : QWidget*) : Binding::QScrollBar*
    fun bg_QScrollBar_sizeHint_(_self_ : Binding::QScrollBar*) : QSize*
    fun bg_QScrollBar_event_QEvent_X(_self_ : Binding::QScrollBar*, event : QEvent*) : Bool
    fun bg_QScrollBar_wheelEvent_QWheelEvent_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QScrollBar_paintEvent_QPaintEvent_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QScrollBar_mousePressEvent_QMouseEvent_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_hideEvent_QHideEvent_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange(_self_ : Binding::QScrollBar*, change : AbstractSlider::SliderChange) : Void
    fun bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QScrollBar*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QScrollBar_initStyleOption_QStyleOptionSlider_X(_self_ : Binding::QScrollBar*, option : QStyleOptionSlider*) : Void
    fun bg_QScrollBar_DESTROY_(_self_ : Binding::QScrollBar*) : Void
    fun bg_QSlider_metaObject_(_self_ : Binding::QSlider*) : QMetaObject*
    fun bg_QSlider_qt_metacast_const_char_X(_self_ : Binding::QSlider*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QSlider*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSlider_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSlider_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSlider_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QSlider*
    fun bg_QSlider_CONSTRUCT_Qt__Orientation_QWidget_X(orientation : Orientation, parent : QWidget*) : Binding::QSlider*
    fun bg_QSlider_sizeHint_(_self_ : Binding::QSlider*) : QSize*
    fun bg_QSlider_minimumSizeHint_(_self_ : Binding::QSlider*) : QSize*
    fun bg_QSlider_setTickPosition_QSlider__TickPosition(_self_ : Binding::QSlider*, position : Slider::TickPosition) : Void
    fun bg_QSlider_tickPosition_(_self_ : Binding::QSlider*) : Slider::TickPosition
    fun bg_QSlider_setTickInterval_int(_self_ : Binding::QSlider*, ti : Int32) : Void
    fun bg_QSlider_tickInterval_(_self_ : Binding::QSlider*) : Int32
    fun bg_QSlider_event_QEvent_X(_self_ : Binding::QSlider*, event : QEvent*) : Bool
    fun bg_QSlider_paintEvent_QPaintEvent_X(_self_ : Binding::QSlider*, ev : QPaintEvent*) : Void
    fun bg_QSlider_mousePressEvent_QMouseEvent_X(_self_ : Binding::QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_initStyleOption_QStyleOptionSlider_X(_self_ : Binding::QSlider*, option : QStyleOptionSlider*) : Void
    fun bg_QSlider_DESTROY_(_self_ : Binding::QSlider*) : Void
    fun bg_QAbstractScrollArea_metaObject_(_self_ : Binding::QAbstractScrollArea*) : QMetaObject*
    fun bg_QAbstractScrollArea_qt_metacast_const_char_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractScrollArea_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QAbstractScrollArea*
    fun bg_QAbstractScrollArea_verticalScrollBarPolicy_(_self_ : Binding::QAbstractScrollArea*) : ScrollBarPolicy
    fun bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : ScrollBarPolicy) : Void
    fun bg_QAbstractScrollArea_verticalScrollBar_(_self_ : Binding::QAbstractScrollArea*) : Binding::QScrollBar*
    fun bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(_self_ : Binding::QAbstractScrollArea*, scrollbar : QScrollBar*) : Void
    fun bg_QAbstractScrollArea_horizontalScrollBarPolicy_(_self_ : Binding::QAbstractScrollArea*) : ScrollBarPolicy
    fun bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : ScrollBarPolicy) : Void
    fun bg_QAbstractScrollArea_horizontalScrollBar_(_self_ : Binding::QAbstractScrollArea*) : Binding::QScrollBar*
    fun bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(_self_ : Binding::QAbstractScrollArea*, scrollbar : QScrollBar*) : Void
    fun bg_QAbstractScrollArea_cornerWidget_(_self_ : Binding::QAbstractScrollArea*) : Binding::QWidget*
    fun bg_QAbstractScrollArea_setCornerWidget_QWidget_X(_self_ : Binding::QAbstractScrollArea*, widget : QWidget*) : Void
    fun bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(_self_ : Binding::QAbstractScrollArea*, widget : QWidget*, alignment : Alignment) : Void
    fun bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(_self_ : Binding::QAbstractScrollArea*, alignment : Alignment) : Void*
    fun bg_QAbstractScrollArea_viewport_(_self_ : Binding::QAbstractScrollArea*) : Binding::QWidget*
    fun bg_QAbstractScrollArea_setViewport_QWidget_X(_self_ : Binding::QAbstractScrollArea*, widget : QWidget*) : Void
    fun bg_QAbstractScrollArea_maximumViewportSize_(_self_ : Binding::QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_minimumSizeHint_(_self_ : Binding::QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_(_self_ : Binding::QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_QWidget_X(_self_ : Binding::QAbstractScrollArea*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_sizeAdjustPolicy_(_self_ : Binding::QAbstractScrollArea*) : AbstractScrollArea::SizeAdjustPolicy
    fun bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(_self_ : Binding::QAbstractScrollArea*, policy : AbstractScrollArea::SizeAdjustPolicy) : Void
    fun bg_QAbstractScrollArea_CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(dd : QAbstractScrollAreaPrivate*, parent : QWidget*) : Binding::QAbstractScrollArea*
    fun bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(_self_ : Binding::QAbstractScrollArea*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(_self_ : Binding::QAbstractScrollArea*, margins : QMargins*) : Void
    fun bg_QAbstractScrollArea_viewportMargins_(_self_ : Binding::QAbstractScrollArea*) : QMargins*
    fun bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_event_QEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportEvent_QEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QDragMoveEvent*) : Void
    fun bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QDragLeaveEvent*) : Void
    fun bg_QAbstractScrollArea_dropEvent_QDropEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(_self_ : Binding::QAbstractScrollArea*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QAbstractScrollArea_scrollContentsBy_int_int(_self_ : Binding::QAbstractScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QAbstractScrollArea_viewportSizeHint_(_self_ : Binding::QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_DESTROY_(_self_ : Binding::QAbstractScrollArea*) : Void
    fun bg_QScrollArea_metaObject_(_self_ : Binding::QScrollArea*) : QMetaObject*
    fun bg_QScrollArea_qt_metacast_const_char_X(_self_ : Binding::QScrollArea*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QScrollArea*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QScrollArea_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QScrollArea*
    fun bg_QScrollArea_widget_(_self_ : Binding::QScrollArea*) : Binding::QWidget*
    fun bg_QScrollArea_setWidget_QWidget_X(_self_ : Binding::QScrollArea*, widget : QWidget*) : Void
    fun bg_QScrollArea_takeWidget_(_self_ : Binding::QScrollArea*) : Binding::QWidget*
    fun bg_QScrollArea_widgetResizable_(_self_ : Binding::QScrollArea*) : Bool
    fun bg_QScrollArea_setWidgetResizable_bool(_self_ : Binding::QScrollArea*, resizable : Bool) : Void
    fun bg_QScrollArea_sizeHint_(_self_ : Binding::QScrollArea*) : QSize*
    fun bg_QScrollArea_focusNextPrevChild_bool(_self_ : Binding::QScrollArea*, next_ : Bool) : Bool
    fun bg_QScrollArea_alignment_(_self_ : Binding::QScrollArea*) : Alignment
    fun bg_QScrollArea_setAlignment_Qt__Alignment(_self_ : Binding::QScrollArea*, unnamed_arg_0 : Alignment) : Void
    fun bg_QScrollArea_ensureVisible_int_int_int_int(_self_ : Binding::QScrollArea*, x : Int32, y : Int32, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(_self_ : Binding::QScrollArea*, child_widget : QWidget*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QScrollArea_CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(dd : QScrollAreaPrivate*, parent : QWidget*) : Binding::QScrollArea*
    fun bg_QScrollArea_event_QEvent_X(_self_ : Binding::QScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : Binding::QScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QScrollArea_resizeEvent_QResizeEvent_X(_self_ : Binding::QScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QScrollArea_scrollContentsBy_int_int(_self_ : Binding::QScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QScrollArea_viewportSizeHint_(_self_ : Binding::QScrollArea*) : QSize*
    fun bg_QScrollArea_DESTROY_(_self_ : Binding::QScrollArea*) : Void
    fun bg_QAbstractSpinBox_metaObject_(_self_ : Binding::QAbstractSpinBox*) : QMetaObject*
    fun bg_QAbstractSpinBox_qt_metacast_const_char_X(_self_ : Binding::QAbstractSpinBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QAbstractSpinBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAbstractSpinBox_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QAbstractSpinBox*
    fun bg_QAbstractSpinBox_buttonSymbols_(_self_ : Binding::QAbstractSpinBox*) : AbstractSpinBox::ButtonSymbols
    fun bg_QAbstractSpinBox_setButtonSymbols_QAbstractSpinBox__ButtonSymbols(_self_ : Binding::QAbstractSpinBox*, bs : AbstractSpinBox::ButtonSymbols) : Void
    fun bg_QAbstractSpinBox_setCorrectionMode_QAbstractSpinBox__CorrectionMode(_self_ : Binding::QAbstractSpinBox*, cm : AbstractSpinBox::CorrectionMode) : Void
    fun bg_QAbstractSpinBox_correctionMode_(_self_ : Binding::QAbstractSpinBox*) : AbstractSpinBox::CorrectionMode
    fun bg_QAbstractSpinBox_hasAcceptableInput_(_self_ : Binding::QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_text_(_self_ : Binding::QAbstractSpinBox*) : Binding::CrystalString
    fun bg_QAbstractSpinBox_specialValueText_(_self_ : Binding::QAbstractSpinBox*) : Binding::CrystalString
    fun bg_QAbstractSpinBox_setSpecialValueText_const_QString_R(_self_ : Binding::QAbstractSpinBox*, txt : CrystalString) : Void
    fun bg_QAbstractSpinBox_wrapping_(_self_ : Binding::QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setWrapping_bool(_self_ : Binding::QAbstractSpinBox*, w : Bool) : Void
    fun bg_QAbstractSpinBox_setReadOnly_bool(_self_ : Binding::QAbstractSpinBox*, r : Bool) : Void
    fun bg_QAbstractSpinBox_isReadOnly_(_self_ : Binding::QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setKeyboardTracking_bool(_self_ : Binding::QAbstractSpinBox*, kt : Bool) : Void
    fun bg_QAbstractSpinBox_keyboardTracking_(_self_ : Binding::QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setAlignment_Qt__Alignment(_self_ : Binding::QAbstractSpinBox*, flag : Alignment) : Void
    fun bg_QAbstractSpinBox_alignment_(_self_ : Binding::QAbstractSpinBox*) : Alignment
    fun bg_QAbstractSpinBox_setFrame_bool(_self_ : Binding::QAbstractSpinBox*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSpinBox_hasFrame_(_self_ : Binding::QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setAccelerated_bool(_self_ : Binding::QAbstractSpinBox*, on : Bool) : Void
    fun bg_QAbstractSpinBox_isAccelerated_(_self_ : Binding::QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setGroupSeparatorShown_bool(_self_ : Binding::QAbstractSpinBox*, shown : Bool) : Void
    fun bg_QAbstractSpinBox_isGroupSeparatorShown_(_self_ : Binding::QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_sizeHint_(_self_ : Binding::QAbstractSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_minimumSizeHint_(_self_ : Binding::QAbstractSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_interpretText_(_self_ : Binding::QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_event_QEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QEvent*) : Bool
    fun bg_QAbstractSpinBox_stepBy_int(_self_ : Binding::QAbstractSpinBox*, steps : Int32) : Void
    fun bg_QAbstractSpinBox_stepUp_(_self_ : Binding::QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_stepDown_(_self_ : Binding::QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_selectAll_(_self_ : Binding::QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_clear_(_self_ : Binding::QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QWheelEvent*) : Void
    fun bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_QEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_QHideEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_QShowEvent_X(_self_ : Binding::QAbstractSpinBox*, event : QShowEvent*) : Void
    fun bg_QAbstractSpinBox_initStyleOption_QStyleOptionSpinBox_X(_self_ : Binding::QAbstractSpinBox*, option : QStyleOptionSpinBox*) : Void
    fun bg_QAbstractSpinBox_lineEdit_(_self_ : Binding::QAbstractSpinBox*) : Binding::QLineEdit*
    fun bg_QAbstractSpinBox_setLineEdit_QLineEdit_X(_self_ : Binding::QAbstractSpinBox*, edit : QLineEdit*) : Void
    fun bg_QAbstractSpinBox_stepEnabled_(_self_ : Binding::QAbstractSpinBox*) : AbstractSpinBox::StepEnabled
    fun bg_QAbstractSpinBox_editingFinished_(_self_ : Binding::QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_editingFinished_CONNECT_CrystalProc_void_(_self_ : Binding::QAbstractSpinBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAbstractSpinBox_CONSTRUCT_QAbstractSpinBoxPrivate_R_QWidget_X(dd : QAbstractSpinBoxPrivate*, parent : QWidget*) : Binding::QAbstractSpinBox*
    fun bg_QAbstractSpinBox_DESTROY_(_self_ : Binding::QAbstractSpinBox*) : Void
    fun bg_QSpinBox_metaObject_(_self_ : Binding::QSpinBox*) : QMetaObject*
    fun bg_QSpinBox_qt_metacast_const_char_X(_self_ : Binding::QSpinBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QSpinBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSpinBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSpinBox_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QSpinBox*
    fun bg_QSpinBox_value_(_self_ : Binding::QSpinBox*) : Int32
    fun bg_QSpinBox_prefix_(_self_ : Binding::QSpinBox*) : Binding::CrystalString
    fun bg_QSpinBox_setPrefix_const_QString_R(_self_ : Binding::QSpinBox*, prefix : CrystalString) : Void
    fun bg_QSpinBox_suffix_(_self_ : Binding::QSpinBox*) : Binding::CrystalString
    fun bg_QSpinBox_setSuffix_const_QString_R(_self_ : Binding::QSpinBox*, suffix : CrystalString) : Void
    fun bg_QSpinBox_cleanText_(_self_ : Binding::QSpinBox*) : Binding::CrystalString
    fun bg_QSpinBox_singleStep_(_self_ : Binding::QSpinBox*) : Int32
    fun bg_QSpinBox_setSingleStep_int(_self_ : Binding::QSpinBox*, val : Int32) : Void
    fun bg_QSpinBox_minimum_(_self_ : Binding::QSpinBox*) : Int32
    fun bg_QSpinBox_setMinimum_int(_self_ : Binding::QSpinBox*, min : Int32) : Void
    fun bg_QSpinBox_maximum_(_self_ : Binding::QSpinBox*) : Int32
    fun bg_QSpinBox_setMaximum_int(_self_ : Binding::QSpinBox*, max : Int32) : Void
    fun bg_QSpinBox_setRange_int_int(_self_ : Binding::QSpinBox*, min : Int32, max : Int32) : Void
    fun bg_QSpinBox_displayIntegerBase_(_self_ : Binding::QSpinBox*) : Int32
    fun bg_QSpinBox_setDisplayIntegerBase_int(_self_ : Binding::QSpinBox*, base : Int32) : Void
    fun bg_QSpinBox_event_QEvent_X(_self_ : Binding::QSpinBox*, event : QEvent*) : Bool
    fun bg_QSpinBox_valueFromText_const_QString_R(_self_ : Binding::QSpinBox*, text : CrystalString) : Int32
    fun bg_QSpinBox_textFromValue_int(_self_ : Binding::QSpinBox*, val : Int32) : Binding::CrystalString
    fun bg_QSpinBox_setValue_int(_self_ : Binding::QSpinBox*, val : Int32) : Void
    fun bg_QSpinBox_valueChanged_int(_self_ : Binding::QSpinBox*, unnamed_arg_0 : Int32) : Void
    fun bg_QSpinBox_valueChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QSpinBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QSpinBox_valueChanged_const_QString_R(_self_ : Binding::QSpinBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QSpinBox_valueChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QSpinBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QSpinBox_DESTROY_(_self_ : Binding::QSpinBox*) : Void
    fun bg_QDoubleSpinBox_metaObject_(_self_ : Binding::QDoubleSpinBox*) : QMetaObject*
    fun bg_QDoubleSpinBox_qt_metacast_const_char_X(_self_ : Binding::QDoubleSpinBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QDoubleSpinBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDoubleSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDoubleSpinBox_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QDoubleSpinBox*
    fun bg_QDoubleSpinBox_value_(_self_ : Binding::QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_prefix_(_self_ : Binding::QDoubleSpinBox*) : Binding::CrystalString
    fun bg_QDoubleSpinBox_setPrefix_const_QString_R(_self_ : Binding::QDoubleSpinBox*, prefix : CrystalString) : Void
    fun bg_QDoubleSpinBox_suffix_(_self_ : Binding::QDoubleSpinBox*) : Binding::CrystalString
    fun bg_QDoubleSpinBox_setSuffix_const_QString_R(_self_ : Binding::QDoubleSpinBox*, suffix : CrystalString) : Void
    fun bg_QDoubleSpinBox_cleanText_(_self_ : Binding::QDoubleSpinBox*) : Binding::CrystalString
    fun bg_QDoubleSpinBox_singleStep_(_self_ : Binding::QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_setSingleStep_double(_self_ : Binding::QDoubleSpinBox*, val : Float64) : Void
    fun bg_QDoubleSpinBox_minimum_(_self_ : Binding::QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_setMinimum_double(_self_ : Binding::QDoubleSpinBox*, min : Float64) : Void
    fun bg_QDoubleSpinBox_maximum_(_self_ : Binding::QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_setMaximum_double(_self_ : Binding::QDoubleSpinBox*, max : Float64) : Void
    fun bg_QDoubleSpinBox_setRange_double_double(_self_ : Binding::QDoubleSpinBox*, min : Float64, max : Float64) : Void
    fun bg_QDoubleSpinBox_decimals_(_self_ : Binding::QDoubleSpinBox*) : Int32
    fun bg_QDoubleSpinBox_setDecimals_int(_self_ : Binding::QDoubleSpinBox*, prec : Int32) : Void
    fun bg_QDoubleSpinBox_valueFromText_const_QString_R(_self_ : Binding::QDoubleSpinBox*, text : CrystalString) : Float64
    fun bg_QDoubleSpinBox_textFromValue_double(_self_ : Binding::QDoubleSpinBox*, val : Float64) : Binding::CrystalString
    fun bg_QDoubleSpinBox_setValue_double(_self_ : Binding::QDoubleSpinBox*, val : Float64) : Void
    fun bg_QDoubleSpinBox_valueChanged_double(_self_ : Binding::QDoubleSpinBox*, unnamed_arg_0 : Float64) : Void
    fun bg_QDoubleSpinBox_valueChanged_CONNECT_CrystalProc_void__double_(_self_ : Binding::QDoubleSpinBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDoubleSpinBox_valueChanged_const_QString_R(_self_ : Binding::QDoubleSpinBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QDoubleSpinBox_valueChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QDoubleSpinBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDoubleSpinBox_DESTROY_(_self_ : Binding::QDoubleSpinBox*) : Void
    fun bg_QMenuBar_metaObject_(_self_ : Binding::QMenuBar*) : QMetaObject*
    fun bg_QMenuBar_qt_metacast_const_char_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QMenuBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMenuBar_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QMenuBar*
    fun bg_QMenuBar_addAction_const_QString_R(_self_ : Binding::QMenuBar*, text : CrystalString) : Binding::QAction*
    fun bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : Binding::QMenuBar*, text : CrystalString, receiver : QObject*, member : UInt8*) : Binding::QAction*
    fun bg_QMenuBar_addMenu_QMenu_X(_self_ : Binding::QMenuBar*, menu : QMenu*) : Binding::QAction*
    fun bg_QMenuBar_addMenu_const_QString_R(_self_ : Binding::QMenuBar*, title : CrystalString) : Binding::QMenu*
    fun bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(_self_ : Binding::QMenuBar*, icon : QIcon*, title : CrystalString) : Binding::QMenu*
    fun bg_QMenuBar_addSeparator_(_self_ : Binding::QMenuBar*) : Binding::QAction*
    fun bg_QMenuBar_insertSeparator_QAction_X(_self_ : Binding::QMenuBar*, before : QAction*) : Binding::QAction*
    fun bg_QMenuBar_insertMenu_QAction_X_QMenu_X(_self_ : Binding::QMenuBar*, before : QAction*, menu : QMenu*) : Binding::QAction*
    fun bg_QMenuBar_clear_(_self_ : Binding::QMenuBar*) : Void
    fun bg_QMenuBar_activeAction_(_self_ : Binding::QMenuBar*) : Binding::QAction*
    fun bg_QMenuBar_setActiveAction_QAction_X(_self_ : Binding::QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_setDefaultUp_bool(_self_ : Binding::QMenuBar*, unnamed_arg_0 : Bool) : Void
    fun bg_QMenuBar_isDefaultUp_(_self_ : Binding::QMenuBar*) : Bool
    fun bg_QMenuBar_sizeHint_(_self_ : Binding::QMenuBar*) : QSize*
    fun bg_QMenuBar_minimumSizeHint_(_self_ : Binding::QMenuBar*) : QSize*
    fun bg_QMenuBar_heightForWidth_int(_self_ : Binding::QMenuBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QMenuBar_actionGeometry_QAction_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QAction*) : Binding::QRect*
    fun bg_QMenuBar_actionAt_const_QPoint_R(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QPoint) : Binding::QAction*
    fun bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(_self_ : Binding::QMenuBar*, w : QWidget*, corner : Corner) : Void
    fun bg_QMenuBar_cornerWidget_Qt__Corner(_self_ : Binding::QMenuBar*, corner : Corner) : Binding::QWidget*
    fun bg_QMenuBar_isNativeMenuBar_(_self_ : Binding::QMenuBar*) : Bool
    fun bg_QMenuBar_setNativeMenuBar_bool(_self_ : Binding::QMenuBar*, native_menu_bar : Bool) : Void
    fun bg_QMenuBar_platformMenuBar_(_self_ : Binding::QMenuBar*) : QPlatformMenuBar*
    fun bg_QMenuBar_setVisible_bool(_self_ : Binding::QMenuBar*, visible : Bool) : Void
    fun bg_QMenuBar_triggered_QAction_X(_self_ : Binding::QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_triggered_CONNECT_CrystalProc_void__QActionX_(_self_ : Binding::QMenuBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMenuBar_hovered_QAction_X(_self_ : Binding::QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_hovered_CONNECT_CrystalProc_void__QActionX_(_self_ : Binding::QMenuBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMenuBar_changeEvent_QEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_keyPressEvent_QKeyEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mousePressEvent_QMouseEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_leaveEvent_QEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_paintEvent_QPaintEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenuBar_resizeEvent_QResizeEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QMenuBar_actionEvent_QActionEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenuBar_focusOutEvent_QFocusEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_focusInEvent_QFocusEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_timerEvent_QTimerEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenuBar_eventFilter_QObject_X_QEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QMenuBar_event_QEvent_X(_self_ : Binding::QMenuBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(_self_ : Binding::QMenuBar*, option : QStyleOptionMenuItem*, action : QAction*) : Void
    fun bg_QMenuBar_DESTROY_(_self_ : Binding::QMenuBar*) : Void
    fun bg_QMenu_metaObject_(_self_ : Binding::QMenu*) : QMetaObject*
    fun bg_QMenu_qt_metacast_const_char_X(_self_ : Binding::QMenu*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QMenu*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMenu_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QMenu*
    fun bg_QMenu_CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : Binding::QMenu*
    fun bg_QMenu_addAction_const_QString_R(_self_ : Binding::QMenu*, text : CrystalString) : Binding::QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R(_self_ : Binding::QMenu*, icon : QIcon*, text : CrystalString) : Binding::QAction*
    fun bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : Binding::QMenu*, text : CrystalString, receiver : QObject*, member : UInt8*) : Binding::QAction*
    fun bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(_self_ : Binding::QMenu*, text : CrystalString, receiver : QObject*, member : UInt8*, shortcut : QKeySequence*) : Binding::QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(_self_ : Binding::QMenu*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*) : Binding::QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(_self_ : Binding::QMenu*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*, shortcut : QKeySequence*) : Binding::QAction*
    fun bg_QMenu_addMenu_QMenu_X(_self_ : Binding::QMenu*, menu : QMenu*) : Binding::QAction*
    fun bg_QMenu_addMenu_const_QString_R(_self_ : Binding::QMenu*, title : CrystalString) : Binding::QMenu*
    fun bg_QMenu_addMenu_const_QIcon_R_const_QString_R(_self_ : Binding::QMenu*, icon : QIcon*, title : CrystalString) : Binding::QMenu*
    fun bg_QMenu_addSeparator_(_self_ : Binding::QMenu*) : Binding::QAction*
    fun bg_QMenu_addSection_const_QString_R(_self_ : Binding::QMenu*, text : CrystalString) : Binding::QAction*
    fun bg_QMenu_addSection_const_QIcon_R_const_QString_R(_self_ : Binding::QMenu*, icon : QIcon*, text : CrystalString) : Binding::QAction*
    fun bg_QMenu_insertMenu_QAction_X_QMenu_X(_self_ : Binding::QMenu*, before : QAction*, menu : QMenu*) : Binding::QAction*
    fun bg_QMenu_insertSeparator_QAction_X(_self_ : Binding::QMenu*, before : QAction*) : Binding::QAction*
    fun bg_QMenu_insertSection_QAction_X_const_QString_R(_self_ : Binding::QMenu*, before : QAction*, text : CrystalString) : Binding::QAction*
    fun bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(_self_ : Binding::QMenu*, before : QAction*, icon : QIcon*, text : CrystalString) : Binding::QAction*
    fun bg_QMenu_isEmpty_(_self_ : Binding::QMenu*) : Bool
    fun bg_QMenu_clear_(_self_ : Binding::QMenu*) : Void
    fun bg_QMenu_setTearOffEnabled_bool(_self_ : Binding::QMenu*, unnamed_arg_0 : Bool) : Void
    fun bg_QMenu_isTearOffEnabled_(_self_ : Binding::QMenu*) : Bool
    fun bg_QMenu_isTearOffMenuVisible_(_self_ : Binding::QMenu*) : Bool
    fun bg_QMenu_showTearOffMenu_(_self_ : Binding::QMenu*) : Void
    fun bg_QMenu_showTearOffMenu_const_QPoint_R(_self_ : Binding::QMenu*, pos : QPoint) : Void
    fun bg_QMenu_hideTearOffMenu_(_self_ : Binding::QMenu*) : Void
    fun bg_QMenu_setDefaultAction_QAction_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QAction*) : Void
    fun bg_QMenu_defaultAction_(_self_ : Binding::QMenu*) : Binding::QAction*
    fun bg_QMenu_setActiveAction_QAction_X(_self_ : Binding::QMenu*, act : QAction*) : Void
    fun bg_QMenu_activeAction_(_self_ : Binding::QMenu*) : Binding::QAction*
    fun bg_QMenu_popup_const_QPoint_R_QAction_X(_self_ : Binding::QMenu*, pos : QPoint, at : QAction*) : Void
    fun bg_QMenu_exec_(_self_ : Binding::QMenu*) : Binding::QAction*
    fun bg_QMenu_exec_const_QPoint_R_QAction_X(_self_ : Binding::QMenu*, pos : QPoint, at : QAction*) : Binding::QAction*
    fun bg_QMenu_exec_STATIC_QList_QAction_X__const_QPoint_R_QAction_X_QWidget_X(actions : Void*, pos : QPoint, at : QAction*, parent : QWidget*) : Binding::QAction*
    fun bg_QMenu_sizeHint_(_self_ : Binding::QMenu*) : QSize*
    fun bg_QMenu_actionGeometry_QAction_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QAction*) : Binding::QRect*
    fun bg_QMenu_actionAt_const_QPoint_R(_self_ : Binding::QMenu*, unnamed_arg_0 : QPoint) : Binding::QAction*
    fun bg_QMenu_menuAction_(_self_ : Binding::QMenu*) : Binding::QAction*
    fun bg_QMenu_title_(_self_ : Binding::QMenu*) : Binding::CrystalString
    fun bg_QMenu_setTitle_const_QString_R(_self_ : Binding::QMenu*, title : CrystalString) : Void
    fun bg_QMenu_icon_(_self_ : Binding::QMenu*) : Binding::QIcon*
    fun bg_QMenu_setIcon_const_QIcon_R(_self_ : Binding::QMenu*, icon : QIcon*) : Void
    fun bg_QMenu_setNoReplayFor_QWidget_X(_self_ : Binding::QMenu*, widget : QWidget*) : Void
    fun bg_QMenu_platformMenu_(_self_ : Binding::QMenu*) : QPlatformMenu*
    fun bg_QMenu_setPlatformMenu_QPlatformMenu_X(_self_ : Binding::QMenu*, platform_menu : QPlatformMenu*) : Void
    fun bg_QMenu_separatorsCollapsible_(_self_ : Binding::QMenu*) : Bool
    fun bg_QMenu_setSeparatorsCollapsible_bool(_self_ : Binding::QMenu*, collapse : Bool) : Void
    fun bg_QMenu_toolTipsVisible_(_self_ : Binding::QMenu*) : Bool
    fun bg_QMenu_setToolTipsVisible_bool(_self_ : Binding::QMenu*, visible : Bool) : Void
    fun bg_QMenu_aboutToShow_(_self_ : Binding::QMenu*) : Void
    fun bg_QMenu_aboutToShow_CONNECT_CrystalProc_void_(_self_ : Binding::QMenu*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMenu_aboutToHide_(_self_ : Binding::QMenu*) : Void
    fun bg_QMenu_aboutToHide_CONNECT_CrystalProc_void_(_self_ : Binding::QMenu*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMenu_triggered_QAction_X(_self_ : Binding::QMenu*, action : QAction*) : Void
    fun bg_QMenu_triggered_CONNECT_CrystalProc_void__QActionX_(_self_ : Binding::QMenu*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMenu_hovered_QAction_X(_self_ : Binding::QMenu*, action : QAction*) : Void
    fun bg_QMenu_hovered_CONNECT_CrystalProc_void__QActionX_(_self_ : Binding::QMenu*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMenu_columnCount_(_self_ : Binding::QMenu*) : Int32
    fun bg_QMenu_changeEvent_QEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_keyPressEvent_QKeyEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenu_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mousePressEvent_QMouseEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_wheelEvent_QWheelEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QMenu_enterEvent_QEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_leaveEvent_QEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_hideEvent_QHideEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QMenu_paintEvent_QPaintEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenu_actionEvent_QActionEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenu_timerEvent_QTimerEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenu_event_QEvent_X(_self_ : Binding::QMenu*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QMenu_focusNextPrevChild_bool(_self_ : Binding::QMenu*, next_ : Bool) : Bool
    fun bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(_self_ : Binding::QMenu*, option : QStyleOptionMenuItem*, action : QAction*) : Void
    fun bg_QMenu_CONSTRUCT_QMenuPrivate_R_QWidget_X(dd : QMenuPrivate*, parent : QWidget*) : Binding::QMenu*
    fun bg_QMenu_DESTROY_(_self_ : Binding::QMenu*) : Void
    fun bg_QAction_metaObject_(_self_ : Binding::QAction*) : QMetaObject*
    fun bg_QAction_qt_metacast_const_char_X(_self_ : Binding::QAction*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QAction*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAction_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAction_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QAction_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QAction*
    fun bg_QAction_CONSTRUCT_const_QString_R_QObject_X(text : CrystalString, parent : QObject*) : Binding::QAction*
    fun bg_QAction_CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(icon : QIcon*, text : CrystalString, parent : QObject*) : Binding::QAction*
    fun bg_QAction_setActionGroup_QActionGroup_X(_self_ : Binding::QAction*, group : QActionGroup*) : Void
    fun bg_QAction_actionGroup_(_self_ : Binding::QAction*) : QActionGroup*
    fun bg_QAction_setIcon_const_QIcon_R(_self_ : Binding::QAction*, icon : QIcon*) : Void
    fun bg_QAction_icon_(_self_ : Binding::QAction*) : Binding::QIcon*
    fun bg_QAction_setText_const_QString_R(_self_ : Binding::QAction*, text : CrystalString) : Void
    fun bg_QAction_text_(_self_ : Binding::QAction*) : Binding::CrystalString
    fun bg_QAction_setIconText_const_QString_R(_self_ : Binding::QAction*, text : CrystalString) : Void
    fun bg_QAction_iconText_(_self_ : Binding::QAction*) : Binding::CrystalString
    fun bg_QAction_setToolTip_const_QString_R(_self_ : Binding::QAction*, tip : CrystalString) : Void
    fun bg_QAction_toolTip_(_self_ : Binding::QAction*) : Binding::CrystalString
    fun bg_QAction_setStatusTip_const_QString_R(_self_ : Binding::QAction*, status_tip : CrystalString) : Void
    fun bg_QAction_statusTip_(_self_ : Binding::QAction*) : Binding::CrystalString
    fun bg_QAction_setWhatsThis_const_QString_R(_self_ : Binding::QAction*, what : CrystalString) : Void
    fun bg_QAction_whatsThis_(_self_ : Binding::QAction*) : Binding::CrystalString
    fun bg_QAction_setPriority_QAction__Priority(_self_ : Binding::QAction*, priority : Action::Priority) : Void
    fun bg_QAction_priority_(_self_ : Binding::QAction*) : Action::Priority
    fun bg_QAction_menu_(_self_ : Binding::QAction*) : Binding::QMenu*
    fun bg_QAction_setMenu_QMenu_X(_self_ : Binding::QAction*, menu : QMenu*) : Void
    fun bg_QAction_setSeparator_bool(_self_ : Binding::QAction*, b : Bool) : Void
    fun bg_QAction_isSeparator_(_self_ : Binding::QAction*) : Bool
    fun bg_QAction_setShortcut_const_QKeySequence_R(_self_ : Binding::QAction*, shortcut : QKeySequence*) : Void
    fun bg_QAction_shortcut_(_self_ : Binding::QAction*) : Binding::QKeySequence*
    fun bg_QAction_setShortcuts_const_QList_QKeySequence__R(_self_ : Binding::QAction*, shortcuts : Void*) : Void
    fun bg_QAction_setShortcuts_QKeySequence__StandardKey(_self_ : Binding::QAction*, unnamed_arg_0 : KeySequence::StandardKey) : Void
    fun bg_QAction_shortcuts_(_self_ : Binding::QAction*) : Void*
    fun bg_QAction_setShortcutContext_Qt__ShortcutContext(_self_ : Binding::QAction*, context : ShortcutContext) : Void
    fun bg_QAction_shortcutContext_(_self_ : Binding::QAction*) : ShortcutContext
    fun bg_QAction_setAutoRepeat_bool(_self_ : Binding::QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_autoRepeat_(_self_ : Binding::QAction*) : Bool
    fun bg_QAction_setFont_const_QFont_R(_self_ : Binding::QAction*, font : QFont*) : Void
    fun bg_QAction_font_(_self_ : Binding::QAction*) : Binding::QFont*
    fun bg_QAction_setCheckable_bool(_self_ : Binding::QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_isCheckable_(_self_ : Binding::QAction*) : Bool
    fun bg_QAction_isChecked_(_self_ : Binding::QAction*) : Bool
    fun bg_QAction_isEnabled_(_self_ : Binding::QAction*) : Bool
    fun bg_QAction_isVisible_(_self_ : Binding::QAction*) : Bool
    fun bg_QAction_activate_QAction__ActionEvent(_self_ : Binding::QAction*, event : Action::Event) : Void
    fun bg_QAction_showStatusText_QWidget_X(_self_ : Binding::QAction*, widget : QWidget*) : Bool
    fun bg_QAction_setMenuRole_QAction__MenuRole(_self_ : Binding::QAction*, menu_role : Action::MenuRole) : Void
    fun bg_QAction_menuRole_(_self_ : Binding::QAction*) : Action::MenuRole
    fun bg_QAction_setIconVisibleInMenu_bool(_self_ : Binding::QAction*, visible : Bool) : Void
    fun bg_QAction_isIconVisibleInMenu_(_self_ : Binding::QAction*) : Bool
    fun bg_QAction_parentWidget_(_self_ : Binding::QAction*) : Binding::QWidget*
    fun bg_QAction_associatedWidgets_(_self_ : Binding::QAction*) : Void*
    fun bg_QAction_associatedGraphicsWidgets_(_self_ : Binding::QAction*) : Void*
    fun bg_QAction_event_QEvent_X(_self_ : Binding::QAction*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAction_CONSTRUCT_QActionPrivate_R_QObject_X(dd : QActionPrivate*, parent : QObject*) : Binding::QAction*
    fun bg_QAction_trigger_(_self_ : Binding::QAction*) : Void
    fun bg_QAction_hover_(_self_ : Binding::QAction*) : Void
    fun bg_QAction_setChecked_bool(_self_ : Binding::QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_toggle_(_self_ : Binding::QAction*) : Void
    fun bg_QAction_setEnabled_bool(_self_ : Binding::QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_setDisabled_bool(_self_ : Binding::QAction*, b : Bool) : Void
    fun bg_QAction_setVisible_bool(_self_ : Binding::QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_changed_(_self_ : Binding::QAction*) : Void
    fun bg_QAction_changed_CONNECT_CrystalProc_void_(_self_ : Binding::QAction*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAction_triggered_bool(_self_ : Binding::QAction*, checked : Bool) : Void
    fun bg_QAction_triggered_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QAction*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAction_hovered_(_self_ : Binding::QAction*) : Void
    fun bg_QAction_hovered_CONNECT_CrystalProc_void_(_self_ : Binding::QAction*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAction_toggled_bool(_self_ : Binding::QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_toggled_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QAction*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QAction_DESTROY_(_self_ : Binding::QAction*) : Void
    fun bg_QStatusBar_metaObject_(_self_ : Binding::QStatusBar*) : QMetaObject*
    fun bg_QStatusBar_qt_metacast_const_char_X(_self_ : Binding::QStatusBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QStatusBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QStatusBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QStatusBar_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QStatusBar_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QStatusBar*
    fun bg_QStatusBar_addWidget_QWidget_X_int(_self_ : Binding::QStatusBar*, widget : QWidget*, stretch : Int32) : Void
    fun bg_QStatusBar_insertWidget_int_QWidget_X_int(_self_ : Binding::QStatusBar*, index : Int32, widget : QWidget*, stretch : Int32) : Int32
    fun bg_QStatusBar_addPermanentWidget_QWidget_X_int(_self_ : Binding::QStatusBar*, widget : QWidget*, stretch : Int32) : Void
    fun bg_QStatusBar_insertPermanentWidget_int_QWidget_X_int(_self_ : Binding::QStatusBar*, index : Int32, widget : QWidget*, stretch : Int32) : Int32
    fun bg_QStatusBar_removeWidget_QWidget_X(_self_ : Binding::QStatusBar*, widget : QWidget*) : Void
    fun bg_QStatusBar_setSizeGripEnabled_bool(_self_ : Binding::QStatusBar*, unnamed_arg_0 : Bool) : Void
    fun bg_QStatusBar_isSizeGripEnabled_(_self_ : Binding::QStatusBar*) : Bool
    fun bg_QStatusBar_currentMessage_(_self_ : Binding::QStatusBar*) : Binding::CrystalString
    fun bg_QStatusBar_showMessage_const_QString_R_int(_self_ : Binding::QStatusBar*, text : CrystalString, timeout : Int32) : Void
    fun bg_QStatusBar_clearMessage_(_self_ : Binding::QStatusBar*) : Void
    fun bg_QStatusBar_messageChanged_const_QString_R(_self_ : Binding::QStatusBar*, text : CrystalString) : Void
    fun bg_QStatusBar_messageChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QStatusBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QStatusBar_showEvent_QShowEvent_X(_self_ : Binding::QStatusBar*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QStatusBar_paintEvent_QPaintEvent_X(_self_ : Binding::QStatusBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QStatusBar_resizeEvent_QResizeEvent_X(_self_ : Binding::QStatusBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QStatusBar_reformat_(_self_ : Binding::QStatusBar*) : Void
    fun bg_QStatusBar_hideOrShow_(_self_ : Binding::QStatusBar*) : Void
    fun bg_QStatusBar_event_QEvent_X(_self_ : Binding::QStatusBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QStatusBar_DESTROY_(_self_ : Binding::QStatusBar*) : Void
    fun bg_QMainWindow_metaObject_(_self_ : Binding::QMainWindow*) : QMetaObject*
    fun bg_QMainWindow_qt_metacast_const_char_X(_self_ : Binding::QMainWindow*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QMainWindow*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMainWindow_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QMainWindow*
    fun bg_QMainWindow_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, flags : WindowFlags) : Binding::QMainWindow*
    fun bg_QMainWindow_iconSize_(_self_ : Binding::QMainWindow*) : QSize*
    fun bg_QMainWindow_setIconSize_const_QSize_R(_self_ : Binding::QMainWindow*, icon_size : QSize*) : Void
    fun bg_QMainWindow_toolButtonStyle_(_self_ : Binding::QMainWindow*) : ToolButtonStyle
    fun bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(_self_ : Binding::QMainWindow*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QMainWindow_isAnimated_(_self_ : Binding::QMainWindow*) : Bool
    fun bg_QMainWindow_isDockNestingEnabled_(_self_ : Binding::QMainWindow*) : Bool
    fun bg_QMainWindow_documentMode_(_self_ : Binding::QMainWindow*) : Bool
    fun bg_QMainWindow_setDocumentMode_bool(_self_ : Binding::QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_tabShape_(_self_ : Binding::QMainWindow*) : TabWidget::TabShape
    fun bg_QMainWindow_setTabShape_QTabWidget__TabShape(_self_ : Binding::QMainWindow*, tab_shape : TabWidget::TabShape) : Void
    fun bg_QMainWindow_tabPosition_Qt__DockWidgetArea(_self_ : Binding::QMainWindow*, area : DockWidgetArea) : TabWidget::TabPosition
    fun bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(_self_ : Binding::QMainWindow*, areas : DockWidgetAreas, tab_position : TabWidget::TabPosition) : Void
    fun bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(_self_ : Binding::QMainWindow*, options : MainWindow::DockOptions) : Void
    fun bg_QMainWindow_dockOptions_(_self_ : Binding::QMainWindow*) : MainWindow::DockOptions
    fun bg_QMainWindow_isSeparator_const_QPoint_R(_self_ : Binding::QMainWindow*, pos : QPoint) : Bool
    fun bg_QMainWindow_menuBar_(_self_ : Binding::QMainWindow*) : Binding::QMenuBar*
    fun bg_QMainWindow_setMenuBar_QMenuBar_X(_self_ : Binding::QMainWindow*, menubar : QMenuBar*) : Void
    fun bg_QMainWindow_menuWidget_(_self_ : Binding::QMainWindow*) : Binding::QWidget*
    fun bg_QMainWindow_setMenuWidget_QWidget_X(_self_ : Binding::QMainWindow*, menubar : QWidget*) : Void
    fun bg_QMainWindow_statusBar_(_self_ : Binding::QMainWindow*) : Binding::QStatusBar*
    fun bg_QMainWindow_setStatusBar_QStatusBar_X(_self_ : Binding::QMainWindow*, statusbar : QStatusBar*) : Void
    fun bg_QMainWindow_centralWidget_(_self_ : Binding::QMainWindow*) : Binding::QWidget*
    fun bg_QMainWindow_setCentralWidget_QWidget_X(_self_ : Binding::QMainWindow*, widget : QWidget*) : Void
    fun bg_QMainWindow_takeCentralWidget_(_self_ : Binding::QMainWindow*) : Binding::QWidget*
    fun bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(_self_ : Binding::QMainWindow*, corner : Corner, area : DockWidgetArea) : Void
    fun bg_QMainWindow_corner_Qt__Corner(_self_ : Binding::QMainWindow*, corner : Corner) : DockWidgetArea
    fun bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(_self_ : Binding::QMainWindow*, area : ToolBarArea) : Void
    fun bg_QMainWindow_insertToolBarBreak_QToolBar_X(_self_ : Binding::QMainWindow*, before : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(_self_ : Binding::QMainWindow*, area : ToolBarArea, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_QToolBar_X(_self_ : Binding::QMainWindow*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_const_QString_R(_self_ : Binding::QMainWindow*, title : CrystalString) : Binding::QToolBar*
    fun bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(_self_ : Binding::QMainWindow*, before : QToolBar*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_removeToolBar_QToolBar_X(_self_ : Binding::QMainWindow*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_removeToolBarBreak_QToolBar_X(_self_ : Binding::QMainWindow*, before : QToolBar*) : Void
    fun bg_QMainWindow_unifiedTitleAndToolBarOnMac_(_self_ : Binding::QMainWindow*) : Bool
    fun bg_QMainWindow_toolBarArea_QToolBar_X(_self_ : Binding::QMainWindow*, toolbar : QToolBar*) : ToolBarArea
    fun bg_QMainWindow_toolBarBreak_QToolBar_X(_self_ : Binding::QMainWindow*, toolbar : QToolBar*) : Bool
    fun bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(_self_ : Binding::QMainWindow*, area : DockWidgetArea, dockwidget : QDockWidget*) : Void
    fun bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(_self_ : Binding::QMainWindow*, area : DockWidgetArea, dockwidget : QDockWidget*, orientation : Orientation) : Void
    fun bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(_self_ : Binding::QMainWindow*, after : QDockWidget*, dockwidget : QDockWidget*, orientation : Orientation) : Void
    fun bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(_self_ : Binding::QMainWindow*, first : QDockWidget*, second : QDockWidget*) : Void
    fun bg_QMainWindow_tabifiedDockWidgets_QDockWidget_X(_self_ : Binding::QMainWindow*, dockwidget : QDockWidget*) : Void*
    fun bg_QMainWindow_removeDockWidget_QDockWidget_X(_self_ : Binding::QMainWindow*, dockwidget : QDockWidget*) : Void
    fun bg_QMainWindow_restoreDockWidget_QDockWidget_X(_self_ : Binding::QMainWindow*, dockwidget : QDockWidget*) : Bool
    fun bg_QMainWindow_dockWidgetArea_QDockWidget_X(_self_ : Binding::QMainWindow*, dockwidget : QDockWidget*) : DockWidgetArea
    fun bg_QMainWindow_resizeDocks_const_QList_QDockWidget_X__R_const_QList_int__R_Qt__Orientation(_self_ : Binding::QMainWindow*, docks : Void*, sizes : Void*, orientation : Orientation) : Void
    fun bg_QMainWindow_saveState_int(_self_ : Binding::QMainWindow*, version : Int32) : QByteArray*
    fun bg_QMainWindow_restoreState_const_QByteArray_R_int(_self_ : Binding::QMainWindow*, state : QByteArray*, version : Int32) : Bool
    fun bg_QMainWindow_createPopupMenu_(_self_ : Binding::QMainWindow*) : Binding::QMenu*
    fun bg_QMainWindow_setAnimated_bool(_self_ : Binding::QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_setDockNestingEnabled_bool(_self_ : Binding::QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(_self_ : Binding::QMainWindow*, set : Bool) : Void
    fun bg_QMainWindow_iconSizeChanged_const_QSize_R(_self_ : Binding::QMainWindow*, icon_size : QSize*) : Void
    fun bg_QMainWindow_iconSizeChanged_CONNECT_CrystalProc_void__const_QSizeR_(_self_ : Binding::QMainWindow*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(_self_ : Binding::QMainWindow*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QMainWindow_toolButtonStyleChanged_CONNECT_CrystalProc_void__Qt__ToolButtonStyle_(_self_ : Binding::QMainWindow*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMainWindow_tabifiedDockWidgetActivated_QDockWidget_X(_self_ : Binding::QMainWindow*, dock_widget : QDockWidget*) : Void
    fun bg_QMainWindow_tabifiedDockWidgetActivated_CONNECT_CrystalProc_void__QDockWidgetX_(_self_ : Binding::QMainWindow*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QMainWindow*, event : QContextMenuEvent*) : Void
    fun bg_QMainWindow_event_QEvent_X(_self_ : Binding::QMainWindow*, event : QEvent*) : Bool
    fun bg_QMainWindow_DESTROY_(_self_ : Binding::QMainWindow*) : Void
    fun bg_QDockWidget_metaObject_(_self_ : Binding::QDockWidget*) : QMetaObject*
    fun bg_QDockWidget_qt_metacast_const_char_X(_self_ : Binding::QDockWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QDockWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDockWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDockWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDockWidget_CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : Binding::QDockWidget*
    fun bg_QDockWidget_CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(title : CrystalString, parent : QWidget*, flags : WindowFlags) : Binding::QDockWidget*
    fun bg_QDockWidget_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QDockWidget*
    fun bg_QDockWidget_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, flags : WindowFlags) : Binding::QDockWidget*
    fun bg_QDockWidget_widget_(_self_ : Binding::QDockWidget*) : Binding::QWidget*
    fun bg_QDockWidget_setWidget_QWidget_X(_self_ : Binding::QDockWidget*, widget : QWidget*) : Void
    fun bg_QDockWidget_setFeatures_QDockWidget__DockWidgetFeatures(_self_ : Binding::QDockWidget*, features : DockWidget::Features) : Void
    fun bg_QDockWidget_features_(_self_ : Binding::QDockWidget*) : DockWidget::Features
    fun bg_QDockWidget_setFloating_bool(_self_ : Binding::QDockWidget*, floating : Bool) : Void
    fun bg_QDockWidget_isFloating_(_self_ : Binding::QDockWidget*) : Bool
    fun bg_QDockWidget_setAllowedAreas_Qt__DockWidgetAreas(_self_ : Binding::QDockWidget*, areas : DockWidgetAreas) : Void
    fun bg_QDockWidget_allowedAreas_(_self_ : Binding::QDockWidget*) : DockWidgetAreas
    fun bg_QDockWidget_setTitleBarWidget_QWidget_X(_self_ : Binding::QDockWidget*, widget : QWidget*) : Void
    fun bg_QDockWidget_titleBarWidget_(_self_ : Binding::QDockWidget*) : Binding::QWidget*
    fun bg_QDockWidget_isAreaAllowed_Qt__DockWidgetArea(_self_ : Binding::QDockWidget*, area : DockWidgetArea) : Bool
    fun bg_QDockWidget_toggleViewAction_(_self_ : Binding::QDockWidget*) : Binding::QAction*
    fun bg_QDockWidget_featuresChanged_QDockWidget__DockWidgetFeatures(_self_ : Binding::QDockWidget*, features : DockWidget::Features) : Void
    fun bg_QDockWidget_featuresChanged_CONNECT_CrystalProc_void__QDockWidget__DockWidgetFeatures_(_self_ : Binding::QDockWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDockWidget_topLevelChanged_bool(_self_ : Binding::QDockWidget*, top_level : Bool) : Void
    fun bg_QDockWidget_topLevelChanged_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QDockWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDockWidget_allowedAreasChanged_Qt__DockWidgetAreas(_self_ : Binding::QDockWidget*, allowed_areas : DockWidgetAreas) : Void
    fun bg_QDockWidget_allowedAreasChanged_CONNECT_CrystalProc_void__Qt__DockWidgetAreas_(_self_ : Binding::QDockWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDockWidget_visibilityChanged_bool(_self_ : Binding::QDockWidget*, visible : Bool) : Void
    fun bg_QDockWidget_visibilityChanged_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QDockWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDockWidget_dockLocationChanged_Qt__DockWidgetArea(_self_ : Binding::QDockWidget*, area : DockWidgetArea) : Void
    fun bg_QDockWidget_dockLocationChanged_CONNECT_CrystalProc_void__Qt__DockWidgetArea_(_self_ : Binding::QDockWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDockWidget_changeEvent_QEvent_X(_self_ : Binding::QDockWidget*, event : QEvent*) : Void
    fun bg_QDockWidget_closeEvent_QCloseEvent_X(_self_ : Binding::QDockWidget*, event : QCloseEvent*) : Void
    fun bg_QDockWidget_paintEvent_QPaintEvent_X(_self_ : Binding::QDockWidget*, event : QPaintEvent*) : Void
    fun bg_QDockWidget_event_QEvent_X(_self_ : Binding::QDockWidget*, event : QEvent*) : Bool
    fun bg_QDockWidget_initStyleOption_QStyleOptionDockWidget_X(_self_ : Binding::QDockWidget*, option : QStyleOptionDockWidget*) : Void
    fun bg_QDockWidget_DESTROY_(_self_ : Binding::QDockWidget*) : Void
    fun bg_QDialog_metaObject_(_self_ : Binding::QDialog*) : QMetaObject*
    fun bg_QDialog_qt_metacast_const_char_X(_self_ : Binding::QDialog*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QDialog*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDialog_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QDialog*
    fun bg_QDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : Binding::QDialog*
    fun bg_QDialog_result_(_self_ : Binding::QDialog*) : Int32
    fun bg_QDialog_setVisible_bool(_self_ : Binding::QDialog*, visible : Bool) : Void
    fun bg_QDialog_setOrientation_Qt__Orientation(_self_ : Binding::QDialog*, orientation : Orientation) : Void
    fun bg_QDialog_orientation_(_self_ : Binding::QDialog*) : Orientation
    fun bg_QDialog_setExtension_QWidget_X(_self_ : Binding::QDialog*, extension : QWidget*) : Void
    fun bg_QDialog_extension_(_self_ : Binding::QDialog*) : Binding::QWidget*
    fun bg_QDialog_sizeHint_(_self_ : Binding::QDialog*) : QSize*
    fun bg_QDialog_minimumSizeHint_(_self_ : Binding::QDialog*) : QSize*
    fun bg_QDialog_setSizeGripEnabled_bool(_self_ : Binding::QDialog*, unnamed_arg_0 : Bool) : Void
    fun bg_QDialog_isSizeGripEnabled_(_self_ : Binding::QDialog*) : Bool
    fun bg_QDialog_setModal_bool(_self_ : Binding::QDialog*, modal : Bool) : Void
    fun bg_QDialog_setResult_int(_self_ : Binding::QDialog*, r : Int32) : Void
    fun bg_QDialog_finished_int(_self_ : Binding::QDialog*, result : Int32) : Void
    fun bg_QDialog_finished_CONNECT_CrystalProc_void__int_(_self_ : Binding::QDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDialog_accepted_(_self_ : Binding::QDialog*) : Void
    fun bg_QDialog_accepted_CONNECT_CrystalProc_void_(_self_ : Binding::QDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDialog_rejected_(_self_ : Binding::QDialog*) : Void
    fun bg_QDialog_rejected_CONNECT_CrystalProc_void_(_self_ : Binding::QDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDialog_open_(_self_ : Binding::QDialog*) : Void
    fun bg_QDialog_exec_(_self_ : Binding::QDialog*) : Int32
    fun bg_QDialog_done_int(_self_ : Binding::QDialog*, unnamed_arg_0 : Int32) : Void
    fun bg_QDialog_accept_(_self_ : Binding::QDialog*) : Void
    fun bg_QDialog_reject_(_self_ : Binding::QDialog*) : Void
    fun bg_QDialog_showExtension_bool(_self_ : Binding::QDialog*, unnamed_arg_0 : Bool) : Void
    fun bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X(unnamed_arg_0 : QDialogPrivate*, parent : QWidget*) : Binding::QDialog*
    fun bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(unnamed_arg_0 : QDialogPrivate*, parent : QWidget*, f : WindowFlags) : Binding::QDialog*
    fun bg_QDialog_keyPressEvent_QKeyEvent_X(_self_ : Binding::QDialog*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QDialog_closeEvent_QCloseEvent_X(_self_ : Binding::QDialog*, unnamed_arg_0 : QCloseEvent*) : Void
    fun bg_QDialog_showEvent_QShowEvent_X(_self_ : Binding::QDialog*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QDialog_resizeEvent_QResizeEvent_X(_self_ : Binding::QDialog*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QDialog_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QDialog*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QDialog_eventFilter_QObject_X_QEvent_X(_self_ : Binding::QDialog*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QDialog_adjustPosition_QWidget_X(_self_ : Binding::QDialog*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QDialog_DESTROY_(_self_ : Binding::QDialog*) : Void
    fun bg_QLabel_metaObject_(_self_ : Binding::QLabel*) : QMetaObject*
    fun bg_QLabel_qt_metacast_const_char_X(_self_ : Binding::QLabel*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QLabel*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLabel_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QLabel*
    fun bg_QLabel_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : Binding::QLabel*
    fun bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : Binding::QLabel*
    fun bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(text : CrystalString, parent : QWidget*, f : WindowFlags) : Binding::QLabel*
    fun bg_QLabel_text_(_self_ : Binding::QLabel*) : Binding::CrystalString
    fun bg_QLabel_pixmap_(_self_ : Binding::QLabel*) : Binding::QPixmap*
    fun bg_QLabel_picture_(_self_ : Binding::QLabel*) : QPicture*
    fun bg_QLabel_movie_(_self_ : Binding::QLabel*) : QMovie*
    fun bg_QLabel_textFormat_(_self_ : Binding::QLabel*) : TextFormatEnum
    fun bg_QLabel_setTextFormat_Qt__TextFormat(_self_ : Binding::QLabel*, unnamed_arg_0 : TextFormatEnum) : Void
    fun bg_QLabel_alignment_(_self_ : Binding::QLabel*) : Alignment
    fun bg_QLabel_setAlignment_Qt__Alignment(_self_ : Binding::QLabel*, unnamed_arg_0 : Alignment) : Void
    fun bg_QLabel_setWordWrap_bool(_self_ : Binding::QLabel*, on : Bool) : Void
    fun bg_QLabel_wordWrap_(_self_ : Binding::QLabel*) : Bool
    fun bg_QLabel_indent_(_self_ : Binding::QLabel*) : Int32
    fun bg_QLabel_setIndent_int(_self_ : Binding::QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_margin_(_self_ : Binding::QLabel*) : Int32
    fun bg_QLabel_setMargin_int(_self_ : Binding::QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_hasScaledContents_(_self_ : Binding::QLabel*) : Bool
    fun bg_QLabel_setScaledContents_bool(_self_ : Binding::QLabel*, unnamed_arg_0 : Bool) : Void
    fun bg_QLabel_sizeHint_(_self_ : Binding::QLabel*) : QSize*
    fun bg_QLabel_minimumSizeHint_(_self_ : Binding::QLabel*) : QSize*
    fun bg_QLabel_setBuddy_QWidget_X(_self_ : Binding::QLabel*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QLabel_buddy_(_self_ : Binding::QLabel*) : Binding::QWidget*
    fun bg_QLabel_heightForWidth_int(_self_ : Binding::QLabel*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLabel_openExternalLinks_(_self_ : Binding::QLabel*) : Bool
    fun bg_QLabel_setOpenExternalLinks_bool(_self_ : Binding::QLabel*, open : Bool) : Void
    fun bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : Binding::QLabel*, flags : TextInteractionFlags) : Void
    fun bg_QLabel_textInteractionFlags_(_self_ : Binding::QLabel*) : TextInteractionFlags
    fun bg_QLabel_setSelection_int_int(_self_ : Binding::QLabel*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLabel_hasSelectedText_(_self_ : Binding::QLabel*) : Bool
    fun bg_QLabel_selectedText_(_self_ : Binding::QLabel*) : Binding::CrystalString
    fun bg_QLabel_selectionStart_(_self_ : Binding::QLabel*) : Int32
    fun bg_QLabel_setText_const_QString_R(_self_ : Binding::QLabel*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLabel_setPixmap_const_QPixmap_R(_self_ : Binding::QLabel*, unnamed_arg_0 : QPixmap*) : Void
    fun bg_QLabel_setPicture_const_QPicture_R(_self_ : Binding::QLabel*, unnamed_arg_0 : QPicture*) : Void
    fun bg_QLabel_setMovie_QMovie_X(_self_ : Binding::QLabel*, movie : QMovie*) : Void
    fun bg_QLabel_setNum_int(_self_ : Binding::QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_setNum_double(_self_ : Binding::QLabel*, unnamed_arg_0 : Float64) : Void
    fun bg_QLabel_clear_(_self_ : Binding::QLabel*) : Void
    fun bg_QLabel_linkActivated_const_QString_R(_self_ : Binding::QLabel*, link : CrystalString) : Void
    fun bg_QLabel_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QLabel*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLabel_linkHovered_const_QString_R(_self_ : Binding::QLabel*, link : CrystalString) : Void
    fun bg_QLabel_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QLabel*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLabel_event_QEvent_X(_self_ : Binding::QLabel*, e : QEvent*) : Bool
    fun bg_QLabel_keyPressEvent_QKeyEvent_X(_self_ : Binding::QLabel*, ev : QKeyEvent*) : Void
    fun bg_QLabel_paintEvent_QPaintEvent_X(_self_ : Binding::QLabel*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLabel_changeEvent_QEvent_X(_self_ : Binding::QLabel*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLabel_mousePressEvent_QMouseEvent_X(_self_ : Binding::QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QLabel*, ev : QContextMenuEvent*) : Void
    fun bg_QLabel_focusInEvent_QFocusEvent_X(_self_ : Binding::QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusOutEvent_QFocusEvent_X(_self_ : Binding::QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusNextPrevChild_bool(_self_ : Binding::QLabel*, next_ : Bool) : Bool
    fun bg_QLabel_DESTROY_(_self_ : Binding::QLabel*) : Void
    fun bg_QLCDNumber_metaObject_(_self_ : Binding::QLCDNumber*) : QMetaObject*
    fun bg_QLCDNumber_qt_metacast_const_char_X(_self_ : Binding::QLCDNumber*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QLCDNumber*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLCDNumber_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QLCDNumber*
    fun bg_QLCDNumber_CONSTRUCT_uint_QWidget_X(num_digits : UInt32, parent : QWidget*) : Binding::QLCDNumber*
    fun bg_QLCDNumber_smallDecimalPoint_(_self_ : Binding::QLCDNumber*) : Bool
    fun bg_QLCDNumber_digitCount_(_self_ : Binding::QLCDNumber*) : Int32
    fun bg_QLCDNumber_setDigitCount_int(_self_ : Binding::QLCDNumber*, n_digits : Int32) : Void
    fun bg_QLCDNumber_checkOverflow_double(_self_ : Binding::QLCDNumber*, num : Float64) : Bool
    fun bg_QLCDNumber_checkOverflow_int(_self_ : Binding::QLCDNumber*, num : Int32) : Bool
    fun bg_QLCDNumber_mode_(_self_ : Binding::QLCDNumber*) : LcdNumber::Mode
    fun bg_QLCDNumber_setMode_QLCDNumber__Mode(_self_ : Binding::QLCDNumber*, unnamed_arg_0 : LcdNumber::Mode) : Void
    fun bg_QLCDNumber_segmentStyle_(_self_ : Binding::QLCDNumber*) : LcdNumber::SegmentStyle
    fun bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(_self_ : Binding::QLCDNumber*, unnamed_arg_0 : LcdNumber::SegmentStyle) : Void
    fun bg_QLCDNumber_value_(_self_ : Binding::QLCDNumber*) : Float64
    fun bg_QLCDNumber_intValue_(_self_ : Binding::QLCDNumber*) : Int32
    fun bg_QLCDNumber_sizeHint_(_self_ : Binding::QLCDNumber*) : QSize*
    fun bg_QLCDNumber_display_const_QString_R(_self_ : Binding::QLCDNumber*, str : CrystalString) : Void
    fun bg_QLCDNumber_display_int(_self_ : Binding::QLCDNumber*, num : Int32) : Void
    fun bg_QLCDNumber_display_double(_self_ : Binding::QLCDNumber*, num : Float64) : Void
    fun bg_QLCDNumber_setHexMode_(_self_ : Binding::QLCDNumber*) : Void
    fun bg_QLCDNumber_setDecMode_(_self_ : Binding::QLCDNumber*) : Void
    fun bg_QLCDNumber_setOctMode_(_self_ : Binding::QLCDNumber*) : Void
    fun bg_QLCDNumber_setBinMode_(_self_ : Binding::QLCDNumber*) : Void
    fun bg_QLCDNumber_setSmallDecimalPoint_bool(_self_ : Binding::QLCDNumber*, unnamed_arg_0 : Bool) : Void
    fun bg_QLCDNumber_overflow_(_self_ : Binding::QLCDNumber*) : Void
    fun bg_QLCDNumber_overflow_CONNECT_CrystalProc_void_(_self_ : Binding::QLCDNumber*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLCDNumber_event_QEvent_X(_self_ : Binding::QLCDNumber*, e : QEvent*) : Bool
    fun bg_QLCDNumber_paintEvent_QPaintEvent_X(_self_ : Binding::QLCDNumber*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLCDNumber_DESTROY_(_self_ : Binding::QLCDNumber*) : Void
    fun bg_QPushButton_metaObject_(_self_ : Binding::QPushButton*) : QMetaObject*
    fun bg_QPushButton_qt_metacast_const_char_X(_self_ : Binding::QPushButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QPushButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QPushButton_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QPushButton*
    fun bg_QPushButton_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : Binding::QPushButton*
    fun bg_QPushButton_CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(icon : QIcon*, text : CrystalString, parent : QWidget*) : Binding::QPushButton*
    fun bg_QPushButton_sizeHint_(_self_ : Binding::QPushButton*) : QSize*
    fun bg_QPushButton_minimumSizeHint_(_self_ : Binding::QPushButton*) : QSize*
    fun bg_QPushButton_autoDefault_(_self_ : Binding::QPushButton*) : Bool
    fun bg_QPushButton_setAutoDefault_bool(_self_ : Binding::QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_isDefault_(_self_ : Binding::QPushButton*) : Bool
    fun bg_QPushButton_setDefault_bool(_self_ : Binding::QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_setMenu_QMenu_X(_self_ : Binding::QPushButton*, menu : QMenu*) : Void
    fun bg_QPushButton_menu_(_self_ : Binding::QPushButton*) : Binding::QMenu*
    fun bg_QPushButton_setFlat_bool(_self_ : Binding::QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_isFlat_(_self_ : Binding::QPushButton*) : Bool
    fun bg_QPushButton_showMenu_(_self_ : Binding::QPushButton*) : Void
    fun bg_QPushButton_event_QEvent_X(_self_ : Binding::QPushButton*, e : QEvent*) : Bool
    fun bg_QPushButton_paintEvent_QPaintEvent_X(_self_ : Binding::QPushButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QPushButton_keyPressEvent_QKeyEvent_X(_self_ : Binding::QPushButton*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QPushButton_focusInEvent_QFocusEvent_X(_self_ : Binding::QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_focusOutEvent_QFocusEvent_X(_self_ : Binding::QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_initStyleOption_QStyleOptionButton_X(_self_ : Binding::QPushButton*, option : QStyleOptionButton*) : Void
    fun bg_QPushButton_CONSTRUCT_QPushButtonPrivate_R_QWidget_X(dd : QPushButtonPrivate*, parent : QWidget*) : Binding::QPushButton*
    fun bg_QPushButton_DESTROY_(_self_ : Binding::QPushButton*) : Void
    fun bg_QCheckBox_metaObject_(_self_ : Binding::QCheckBox*) : QMetaObject*
    fun bg_QCheckBox_qt_metacast_const_char_X(_self_ : Binding::QCheckBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QCheckBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QCheckBox_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QCheckBox*
    fun bg_QCheckBox_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : Binding::QCheckBox*
    fun bg_QCheckBox_sizeHint_(_self_ : Binding::QCheckBox*) : QSize*
    fun bg_QCheckBox_minimumSizeHint_(_self_ : Binding::QCheckBox*) : QSize*
    fun bg_QCheckBox_setTristate_bool(_self_ : Binding::QCheckBox*, y : Bool) : Void
    fun bg_QCheckBox_isTristate_(_self_ : Binding::QCheckBox*) : Bool
    fun bg_QCheckBox_checkState_(_self_ : Binding::QCheckBox*) : CheckState
    fun bg_QCheckBox_setCheckState_Qt__CheckState(_self_ : Binding::QCheckBox*, state : CheckState) : Void
    fun bg_QCheckBox_stateChanged_int(_self_ : Binding::QCheckBox*, unnamed_arg_0 : Int32) : Void
    fun bg_QCheckBox_stateChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QCheckBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QCheckBox_event_QEvent_X(_self_ : Binding::QCheckBox*, e : QEvent*) : Bool
    fun bg_QCheckBox_hitButton_const_QPoint_R(_self_ : Binding::QCheckBox*, pos : QPoint) : Bool
    fun bg_QCheckBox_checkStateSet_(_self_ : Binding::QCheckBox*) : Void
    fun bg_QCheckBox_nextCheckState_(_self_ : Binding::QCheckBox*) : Void
    fun bg_QCheckBox_paintEvent_QPaintEvent_X(_self_ : Binding::QCheckBox*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QCheckBox*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QCheckBox_initStyleOption_QStyleOptionButton_X(_self_ : Binding::QCheckBox*, option : QStyleOptionButton*) : Void
    fun bg_QCheckBox_DESTROY_(_self_ : Binding::QCheckBox*) : Void
    fun bg_QRadioButton_metaObject_(_self_ : Binding::QRadioButton*) : QMetaObject*
    fun bg_QRadioButton_qt_metacast_const_char_X(_self_ : Binding::QRadioButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QRadioButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QRadioButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QRadioButton_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QRadioButton_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QRadioButton*
    fun bg_QRadioButton_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : Binding::QRadioButton*
    fun bg_QRadioButton_sizeHint_(_self_ : Binding::QRadioButton*) : QSize*
    fun bg_QRadioButton_minimumSizeHint_(_self_ : Binding::QRadioButton*) : QSize*
    fun bg_QRadioButton_event_QEvent_X(_self_ : Binding::QRadioButton*, e : QEvent*) : Bool
    fun bg_QRadioButton_hitButton_const_QPoint_R(_self_ : Binding::QRadioButton*, unnamed_arg_0 : QPoint) : Bool
    fun bg_QRadioButton_paintEvent_QPaintEvent_X(_self_ : Binding::QRadioButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QRadioButton_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QRadioButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QRadioButton_initStyleOption_QStyleOptionButton_X(_self_ : Binding::QRadioButton*, button : QStyleOptionButton*) : Void
    fun bg_QRadioButton_DESTROY_(_self_ : Binding::QRadioButton*) : Void
    fun bg_QButtonGroup_metaObject_(_self_ : Binding::QButtonGroup*) : QMetaObject*
    fun bg_QButtonGroup_qt_metacast_const_char_X(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QButtonGroup_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QButtonGroup_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QButtonGroup*
    fun bg_QButtonGroup_setExclusive_bool(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : Bool) : Void
    fun bg_QButtonGroup_exclusive_(_self_ : Binding::QButtonGroup*) : Bool
    fun bg_QButtonGroup_addButton_QAbstractButton_X_int(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : QAbstractButton*, id : Int32) : Void
    fun bg_QButtonGroup_removeButton_QAbstractButton_X(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : QAbstractButton*) : Void
    fun bg_QButtonGroup_buttons_(_self_ : Binding::QButtonGroup*) : Void*
    fun bg_QButtonGroup_checkedButton_(_self_ : Binding::QButtonGroup*) : Binding::QAbstractButton*
    fun bg_QButtonGroup_button_int(_self_ : Binding::QButtonGroup*, id : Int32) : Binding::QAbstractButton*
    fun bg_QButtonGroup_setId_QAbstractButton_X_int(_self_ : Binding::QButtonGroup*, button : QAbstractButton*, id : Int32) : Void
    fun bg_QButtonGroup_id_QAbstractButton_X(_self_ : Binding::QButtonGroup*, button : QAbstractButton*) : Int32
    fun bg_QButtonGroup_checkedId_(_self_ : Binding::QButtonGroup*) : Int32
    fun bg_QButtonGroup_buttonClicked_QAbstractButton_X(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : QAbstractButton*) : Void
    fun bg_QButtonGroup_buttonClicked_CONNECT_CrystalProc_void__QAbstractButtonX_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_buttonClicked_int(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : Int32) : Void
    fun bg_QButtonGroup_buttonClicked_CONNECT_CrystalProc_void__int_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_buttonPressed_QAbstractButton_X(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : QAbstractButton*) : Void
    fun bg_QButtonGroup_buttonPressed_CONNECT_CrystalProc_void__QAbstractButtonX_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_buttonPressed_int(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : Int32) : Void
    fun bg_QButtonGroup_buttonPressed_CONNECT_CrystalProc_void__int_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_buttonReleased_QAbstractButton_X(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : QAbstractButton*) : Void
    fun bg_QButtonGroup_buttonReleased_CONNECT_CrystalProc_void__QAbstractButtonX_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_buttonReleased_int(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : Int32) : Void
    fun bg_QButtonGroup_buttonReleased_CONNECT_CrystalProc_void__int_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_buttonToggled_QAbstractButton_X_bool(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : QAbstractButton*, unnamed_arg_1 : Bool) : Void
    fun bg_QButtonGroup_buttonToggled_CONNECT_CrystalProc_void__QAbstractButtonX__bool_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_buttonToggled_int_bool(_self_ : Binding::QButtonGroup*, unnamed_arg_0 : Int32, unnamed_arg_1 : Bool) : Void
    fun bg_QButtonGroup_buttonToggled_CONNECT_CrystalProc_void__int__bool_(_self_ : Binding::QButtonGroup*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QButtonGroup_DESTROY_(_self_ : Binding::QButtonGroup*) : Void
    fun bg_QGroupBox_metaObject_(_self_ : Binding::QGroupBox*) : QMetaObject*
    fun bg_QGroupBox_qt_metacast_const_char_X(_self_ : Binding::QGroupBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGroupBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGroupBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGroupBox_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGroupBox_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QGroupBox*
    fun bg_QGroupBox_CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : Binding::QGroupBox*
    fun bg_QGroupBox_title_(_self_ : Binding::QGroupBox*) : Binding::CrystalString
    fun bg_QGroupBox_setTitle_const_QString_R(_self_ : Binding::QGroupBox*, title : CrystalString) : Void
    fun bg_QGroupBox_alignment_(_self_ : Binding::QGroupBox*) : Alignment
    fun bg_QGroupBox_setAlignment_int(_self_ : Binding::QGroupBox*, alignment : Int32) : Void
    fun bg_QGroupBox_minimumSizeHint_(_self_ : Binding::QGroupBox*) : QSize*
    fun bg_QGroupBox_isFlat_(_self_ : Binding::QGroupBox*) : Bool
    fun bg_QGroupBox_setFlat_bool(_self_ : Binding::QGroupBox*, flat : Bool) : Void
    fun bg_QGroupBox_isCheckable_(_self_ : Binding::QGroupBox*) : Bool
    fun bg_QGroupBox_setCheckable_bool(_self_ : Binding::QGroupBox*, checkable : Bool) : Void
    fun bg_QGroupBox_isChecked_(_self_ : Binding::QGroupBox*) : Bool
    fun bg_QGroupBox_setChecked_bool(_self_ : Binding::QGroupBox*, checked : Bool) : Void
    fun bg_QGroupBox_clicked_bool(_self_ : Binding::QGroupBox*, checked : Bool) : Void
    fun bg_QGroupBox_clicked_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QGroupBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGroupBox_toggled_bool(_self_ : Binding::QGroupBox*, unnamed_arg_0 : Bool) : Void
    fun bg_QGroupBox_toggled_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QGroupBox*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGroupBox_event_QEvent_X(_self_ : Binding::QGroupBox*, event : QEvent*) : Bool
    fun bg_QGroupBox_childEvent_QChildEvent_X(_self_ : Binding::QGroupBox*, event : QChildEvent*) : Void
    fun bg_QGroupBox_resizeEvent_QResizeEvent_X(_self_ : Binding::QGroupBox*, event : QResizeEvent*) : Void
    fun bg_QGroupBox_paintEvent_QPaintEvent_X(_self_ : Binding::QGroupBox*, event : QPaintEvent*) : Void
    fun bg_QGroupBox_focusInEvent_QFocusEvent_X(_self_ : Binding::QGroupBox*, event : QFocusEvent*) : Void
    fun bg_QGroupBox_changeEvent_QEvent_X(_self_ : Binding::QGroupBox*, event : QEvent*) : Void
    fun bg_QGroupBox_mousePressEvent_QMouseEvent_X(_self_ : Binding::QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_initStyleOption_QStyleOptionGroupBox_X(_self_ : Binding::QGroupBox*, option : QStyleOptionGroupBox*) : Void
    fun bg_QGroupBox_DESTROY_(_self_ : Binding::QGroupBox*) : Void
    fun bg_QCoreApplication_metaObject_(_self_ : Binding::QCoreApplication*) : QMetaObject*
    fun bg_QCoreApplication_qt_metacast_const_char_X(_self_ : Binding::QCoreApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QCoreApplication*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QCoreApplication_CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : Binding::QCoreApplication*
    fun bg_QCoreApplication_arguments_STATIC_() : Void*
    fun bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(attribute : ApplicationAttribute, on : Bool) : Void
    fun bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(attribute : ApplicationAttribute) : Bool
    fun bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(org_domain : CrystalString) : Void
    fun bg_QCoreApplication_organizationDomain_STATIC_() : Binding::CrystalString
    fun bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(org_name : CrystalString) : Void
    fun bg_QCoreApplication_organizationName_STATIC_() : Binding::CrystalString
    fun bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(application : CrystalString) : Void
    fun bg_QCoreApplication_applicationName_STATIC_() : Binding::CrystalString
    fun bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(version : CrystalString) : Void
    fun bg_QCoreApplication_applicationVersion_STATIC_() : Binding::CrystalString
    fun bg_QCoreApplication_setSetuidAllowed_STATIC_bool(allow : Bool) : Void
    fun bg_QCoreApplication_isSetuidAllowed_STATIC_() : Bool
    fun bg_QCoreApplication_instance_STATIC_() : Binding::QCoreApplication*
    fun bg_QCoreApplication_exec_STATIC_() : Int32
    fun bg_QCoreApplication_processEvents_STATIC_() : Void
    fun bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(flags : EventLoop::ProcessEventsFlags) : Void
    fun bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(flags : EventLoop::ProcessEventsFlags, maxtime : Int32) : Void
    fun bg_QCoreApplication_exit_STATIC_int(retcode : Int32) : Void
    fun bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(receiver : QObject*, event : QEvent*) : Bool
    fun bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(receiver : QObject*, event : QEvent*, priority : Int32) : Void
    fun bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(receiver : QObject*, event_type : Int32) : Void
    fun bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(receiver : QObject*, event_type : Int32) : Void
    fun bg_QCoreApplication_hasPendingEvents_STATIC_() : Bool
    fun bg_QCoreApplication_eventDispatcher_STATIC_() : Binding::QAbstractEventDispatcher*
    fun bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(event_dispatcher : QAbstractEventDispatcher*) : Void
    fun bg_QCoreApplication_notify_QObject_X_QEvent_X(_self_ : Binding::QCoreApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QCoreApplication_startingUp_STATIC_() : Bool
    fun bg_QCoreApplication_closingDown_STATIC_() : Bool
    fun bg_QCoreApplication_applicationDirPath_STATIC_() : Binding::CrystalString
    fun bg_QCoreApplication_applicationFilePath_STATIC_() : Binding::CrystalString
    fun bg_QCoreApplication_applicationPid_STATIC_() : Int64
    fun bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(unnamed_arg_0 : Void*) : Void
    fun bg_QCoreApplication_libraryPaths_STATIC_() : Void*
    fun bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(message_file : QTranslator*) : Bool
    fun bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(message_file : QTranslator*) : Bool
    fun bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(context : UInt8*, key : UInt8*, disambiguation : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QCoreApplication_flush_STATIC_() : Void
    fun bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : Binding::QCoreApplication*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : Binding::QCoreApplication*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QCoreApplication_isQuitLockEnabled_STATIC_() : Bool
    fun bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(enabled : Bool) : Void
    fun bg_QCoreApplication_quit_STATIC_() : Void
    fun bg_QCoreApplication_organizationNameChanged_(_self_ : Binding::QCoreApplication*) : Void
    fun bg_QCoreApplication_organizationNameChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QCoreApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QCoreApplication_organizationDomainChanged_(_self_ : Binding::QCoreApplication*) : Void
    fun bg_QCoreApplication_organizationDomainChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QCoreApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QCoreApplication_applicationNameChanged_(_self_ : Binding::QCoreApplication*) : Void
    fun bg_QCoreApplication_applicationNameChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QCoreApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QCoreApplication_applicationVersionChanged_(_self_ : Binding::QCoreApplication*) : Void
    fun bg_QCoreApplication_applicationVersionChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QCoreApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QCoreApplication_event_QEvent_X(_self_ : Binding::QCoreApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : Binding::QCoreApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QCoreApplication_CONSTRUCT_QCoreApplicationPrivate_R(p : QCoreApplicationPrivate*) : Binding::QCoreApplication*
    fun bg_QCoreApplication_DESTROY_(_self_ : Binding::QCoreApplication*) : Void
    fun bg_QGuiApplication_metaObject_(_self_ : Binding::QGuiApplication*) : QMetaObject*
    fun bg_QGuiApplication_qt_metacast_const_char_X(_self_ : Binding::QGuiApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGuiApplication*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGuiApplication_CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : Binding::QGuiApplication*
    fun bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(name : CrystalString) : Void
    fun bg_QGuiApplication_applicationDisplayName_STATIC_() : Binding::CrystalString
    fun bg_QGuiApplication_setDesktopFileName_STATIC_const_QString_R(name : CrystalString) : Void
    fun bg_QGuiApplication_desktopFileName_STATIC_() : Binding::CrystalString
    fun bg_QGuiApplication_allWindows_STATIC_() : QWindowList*
    fun bg_QGuiApplication_topLevelWindows_STATIC_() : QWindowList*
    fun bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(pos : QPoint) : QWindow*
    fun bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(icon : QIcon*) : Void
    fun bg_QGuiApplication_windowIcon_STATIC_() : Binding::QIcon*
    fun bg_QGuiApplication_platformName_STATIC_() : Binding::CrystalString
    fun bg_QGuiApplication_modalWindow_STATIC_() : QWindow*
    fun bg_QGuiApplication_focusWindow_STATIC_() : QWindow*
    fun bg_QGuiApplication_focusObject_STATIC_() : Binding::QObject*
    fun bg_QGuiApplication_primaryScreen_STATIC_() : Binding::QScreen*
    fun bg_QGuiApplication_screens_STATIC_() : Void*
    fun bg_QGuiApplication_devicePixelRatio_(_self_ : Binding::QGuiApplication*) : Float64
    fun bg_QGuiApplication_overrideCursor_STATIC_() : QCursor*
    fun bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0 : QCursor*) : Void
    fun bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0 : QCursor*) : Void
    fun bg_QGuiApplication_restoreOverrideCursor_STATIC_() : Void
    fun bg_QGuiApplication_font_STATIC_() : Binding::QFont*
    fun bg_QGuiApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0 : QFont*) : Void
    fun bg_QGuiApplication_clipboard_STATIC_() : QClipboard*
    fun bg_QGuiApplication_palette_STATIC_() : Binding::QPalette*
    fun bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(pal : QPalette*) : Void
    fun bg_QGuiApplication_keyboardModifiers_STATIC_() : KeyboardModifiers
    fun bg_QGuiApplication_queryKeyboardModifiers_STATIC_() : KeyboardModifiers
    fun bg_QGuiApplication_mouseButtons_STATIC_() : MouseButtons
    fun bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(direction : LayoutDirection) : Void
    fun bg_QGuiApplication_layoutDirection_STATIC_() : LayoutDirection
    fun bg_QGuiApplication_isRightToLeft_STATIC_() : Bool
    fun bg_QGuiApplication_isLeftToRight_STATIC_() : Bool
    fun bg_QGuiApplication_styleHints_STATIC_() : QStyleHints*
    fun bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(on : Bool) : Void
    fun bg_QGuiApplication_desktopSettingsAware_STATIC_() : Bool
    fun bg_QGuiApplication_inputMethod_STATIC_() : QInputMethod*
    fun bg_QGuiApplication_platformNativeInterface_STATIC_() : QPlatformNativeInterface*
    fun bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(quit : Bool) : Void
    fun bg_QGuiApplication_quitOnLastWindowClosed_STATIC_() : Bool
    fun bg_QGuiApplication_applicationState_STATIC_() : ApplicationState
    fun bg_QGuiApplication_exec_STATIC_() : Int32
    fun bg_QGuiApplication_notify_QObject_X_QEvent_X(_self_ : Binding::QGuiApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QGuiApplication_isSessionRestored_(_self_ : Binding::QGuiApplication*) : Bool
    fun bg_QGuiApplication_sessionId_(_self_ : Binding::QGuiApplication*) : Binding::CrystalString
    fun bg_QGuiApplication_sessionKey_(_self_ : Binding::QGuiApplication*) : Binding::CrystalString
    fun bg_QGuiApplication_isSavingSession_(_self_ : Binding::QGuiApplication*) : Bool
    fun bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_() : Bool
    fun bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(unnamed_arg_0 : Bool) : Void
    fun bg_QGuiApplication_sync_STATIC_() : Void
    fun bg_QGuiApplication_fontDatabaseChanged_(_self_ : Binding::QGuiApplication*) : Void
    fun bg_QGuiApplication_fontDatabaseChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_screenAdded_QScreen_X(_self_ : Binding::QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_screenAdded_CONNECT_CrystalProc_void__QScreenX_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_screenRemoved_QScreen_X(_self_ : Binding::QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_screenRemoved_CONNECT_CrystalProc_void__QScreenX_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_primaryScreenChanged_QScreen_X(_self_ : Binding::QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_primaryScreenChanged_CONNECT_CrystalProc_void__QScreenX_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_lastWindowClosed_(_self_ : Binding::QGuiApplication*) : Void
    fun bg_QGuiApplication_lastWindowClosed_CONNECT_CrystalProc_void_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_focusObjectChanged_QObject_X(_self_ : Binding::QGuiApplication*, focus_object : QObject*) : Void
    fun bg_QGuiApplication_focusObjectChanged_CONNECT_CrystalProc_void__QObjectX_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_focusWindowChanged_QWindow_X(_self_ : Binding::QGuiApplication*, focus_window : QWindow*) : Void
    fun bg_QGuiApplication_focusWindowChanged_CONNECT_CrystalProc_void__QWindowX_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(_self_ : Binding::QGuiApplication*, state : ApplicationState) : Void
    fun bg_QGuiApplication_applicationStateChanged_CONNECT_CrystalProc_void__Qt__ApplicationState_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(_self_ : Binding::QGuiApplication*, direction : LayoutDirection) : Void
    fun bg_QGuiApplication_layoutDirectionChanged_CONNECT_CrystalProc_void__Qt__LayoutDirection_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_commitDataRequest_QSessionManager_R(_self_ : Binding::QGuiApplication*, session_manager : QSessionManager*) : Void
    fun bg_QGuiApplication_commitDataRequest_CONNECT_CrystalProc_void__QSessionManagerR_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_saveStateRequest_QSessionManager_R(_self_ : Binding::QGuiApplication*, session_manager : QSessionManager*) : Void
    fun bg_QGuiApplication_saveStateRequest_CONNECT_CrystalProc_void__QSessionManagerR_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_paletteChanged_const_QPalette_R(_self_ : Binding::QGuiApplication*, pal : QPalette*) : Void
    fun bg_QGuiApplication_paletteChanged_CONNECT_CrystalProc_void__const_QPaletteR_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_applicationDisplayNameChanged_(_self_ : Binding::QGuiApplication*) : Void
    fun bg_QGuiApplication_applicationDisplayNameChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGuiApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGuiApplication_event_QEvent_X(_self_ : Binding::QGuiApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : Binding::QGuiApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QGuiApplication_CONSTRUCT_QGuiApplicationPrivate_R(p : QGuiApplicationPrivate*) : Binding::QGuiApplication*
    fun bg_QGuiApplication_DESTROY_(_self_ : Binding::QGuiApplication*) : Void
    fun bg_QApplication_metaObject_(_self_ : Binding::QApplication*) : QMetaObject*
    fun bg_QApplication_qt_metacast_const_char_X(_self_ : Binding::QApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QApplication*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QApplication_CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : Binding::QApplication*
    fun bg_QApplication_style_STATIC_() : QStyle*
    fun bg_QApplication_setStyle_STATIC_QStyle_X(unnamed_arg_0 : QStyle*) : Void
    fun bg_QApplication_setStyle_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QStyle*
    fun bg_QApplication_colorSpec_STATIC_() : Int32
    fun bg_QApplication_setColorSpec_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_palette_STATIC_const_QWidget_X(unnamed_arg_0 : QWidget*) : Binding::QPalette*
    fun bg_QApplication_palette_STATIC_const_char_X(class_name : UInt8*) : Binding::QPalette*
    fun bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(unnamed_arg_0 : QPalette*, class_name : UInt8*) : Void
    fun bg_QApplication_font_STATIC_() : Binding::QFont*
    fun bg_QApplication_font_STATIC_const_QWidget_X(unnamed_arg_0 : QWidget*) : Binding::QFont*
    fun bg_QApplication_font_STATIC_const_char_X(class_name : UInt8*) : Binding::QFont*
    fun bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(unnamed_arg_0 : QFont*, class_name : UInt8*) : Void
    fun bg_QApplication_fontMetrics_STATIC_() : QFontMetrics*
    fun bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(icon : QIcon*) : Void
    fun bg_QApplication_windowIcon_STATIC_() : Binding::QIcon*
    fun bg_QApplication_allWidgets_STATIC_() : Void*
    fun bg_QApplication_topLevelWidgets_STATIC_() : Void*
    fun bg_QApplication_desktop_STATIC_() : Binding::QDesktopWidget*
    fun bg_QApplication_activePopupWidget_STATIC_() : Binding::QWidget*
    fun bg_QApplication_activeModalWidget_STATIC_() : Binding::QWidget*
    fun bg_QApplication_focusWidget_STATIC_() : Binding::QWidget*
    fun bg_QApplication_activeWindow_STATIC_() : Binding::QWidget*
    fun bg_QApplication_setActiveWindow_STATIC_QWidget_X(act : QWidget*) : Void
    fun bg_QApplication_widgetAt_STATIC_const_QPoint_R(p : QPoint) : Binding::QWidget*
    fun bg_QApplication_widgetAt_STATIC_int_int(x : Int32, y : Int32) : Binding::QWidget*
    fun bg_QApplication_topLevelAt_STATIC_const_QPoint_R(p : QPoint) : Binding::QWidget*
    fun bg_QApplication_topLevelAt_STATIC_int_int(x : Int32, y : Int32) : Binding::QWidget*
    fun bg_QApplication_beep_STATIC_() : Void
    fun bg_QApplication_alert_STATIC_QWidget_X_int(widget : QWidget*, duration : Int32) : Void
    fun bg_QApplication_setCursorFlashTime_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_cursorFlashTime_STATIC_() : Int32
    fun bg_QApplication_setDoubleClickInterval_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_doubleClickInterval_STATIC_() : Int32
    fun bg_QApplication_setKeyboardInputInterval_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_keyboardInputInterval_STATIC_() : Int32
    fun bg_QApplication_setWheelScrollLines_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_wheelScrollLines_STATIC_() : Int32
    fun bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(unnamed_arg_0 : QSize*) : Void
    fun bg_QApplication_globalStrut_STATIC_() : QSize*
    fun bg_QApplication_setStartDragTime_STATIC_int(ms : Int32) : Void
    fun bg_QApplication_startDragTime_STATIC_() : Int32
    fun bg_QApplication_setStartDragDistance_STATIC_int(l : Int32) : Void
    fun bg_QApplication_startDragDistance_STATIC_() : Int32
    fun bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0 : UIEffect) : Bool
    fun bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(unnamed_arg_0 : UIEffect, enable : Bool) : Void
    fun bg_QApplication_exec_STATIC_() : Int32
    fun bg_QApplication_notify_QObject_X_QEvent_X(_self_ : Binding::QApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QApplication_focusChanged_QWidget_X_QWidget_X(_self_ : Binding::QApplication*, old : QWidget*, now : QWidget*) : Void
    fun bg_QApplication_focusChanged_CONNECT_CrystalProc_void__QWidgetX__QWidgetX_(_self_ : Binding::QApplication*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QApplication_styleSheet_(_self_ : Binding::QApplication*) : Binding::CrystalString
    fun bg_QApplication_setStyleSheet_const_QString_R(_self_ : Binding::QApplication*, sheet : CrystalString) : Void
    fun bg_QApplication_setAutoSipEnabled_const_bool(_self_ : Binding::QApplication*, enabled : Bool) : Void
    fun bg_QApplication_autoSipEnabled_(_self_ : Binding::QApplication*) : Bool
    fun bg_QApplication_closeAllWindows_STATIC_() : Void
    fun bg_QApplication_aboutQt_STATIC_() : Void
    fun bg_QApplication_event_QEvent_X(_self_ : Binding::QApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : Binding::QApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QApplication_DESTROY_(_self_ : Binding::QApplication*) : Void
    fun bg_QImage_CONSTRUCT_() : Binding::QImage*
    fun bg_QImage_CONSTRUCT_const_QSize_R_QImage__Format(size : QSize*, format : Image::Format) : Binding::QImage*
    fun bg_QImage_CONSTRUCT_int_int_QImage__Format(width : Int32, height : Int32, format : Image::Format) : Binding::QImage*
    fun bg_QImage_CONSTRUCT_const_char_Xconst_X(xpm : UInt8**) : Binding::QImage*
    fun bg_QImage_CONSTRUCT_const_QString_R_const_char_X(file_name : CrystalString, format : UInt8*) : Binding::QImage*
    fun bg_QImage_swap_QImage_R(_self_ : Binding::QImage*, other : QImage*) : Void
    fun bg_QImage_isNull_(_self_ : Binding::QImage*) : Bool
    fun bg_QImage_devType_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_detach_(_self_ : Binding::QImage*) : Void
    fun bg_QImage_isDetached_(_self_ : Binding::QImage*) : Bool
    fun bg_QImage_copy_(_self_ : Binding::QImage*) : Binding::QImage*
    fun bg_QImage_copy_const_QRect_R(_self_ : Binding::QImage*, rect : QRect*) : Binding::QImage*
    fun bg_QImage_copy_int_int_int_int(_self_ : Binding::QImage*, x : Int32, y : Int32, w : Int32, h : Int32) : Binding::QImage*
    fun bg_QImage_format_(_self_ : Binding::QImage*) : Image::Format
    fun bg_QImage_convertToFormat_QImage__Format(_self_ : Binding::QImage*, f : Image::Format) : Binding::QImage*
    fun bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(_self_ : Binding::QImage*, f : Image::Format, flags : ImageConversionFlags) : Binding::QImage*
    fun bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R(_self_ : Binding::QImage*, f : Image::Format, color_table : Void*) : Binding::QImage*
    fun bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R_Qt__ImageConversionFlags(_self_ : Binding::QImage*, f : Image::Format, color_table : Void*, flags : ImageConversionFlags) : Binding::QImage*
    fun bg_QImage_reinterpretAsFormat_QImage__Format(_self_ : Binding::QImage*, f : Image::Format) : Bool
    fun bg_QImage_width_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_height_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_size_(_self_ : Binding::QImage*) : QSize*
    fun bg_QImage_rect_(_self_ : Binding::QImage*) : Binding::QRect*
    fun bg_QImage_depth_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_colorCount_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_bitPlaneCount_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_color_int(_self_ : Binding::QImage*, i : Int32) : UInt32
    fun bg_QImage_setColor_int_QRgb(_self_ : Binding::QImage*, i : Int32, c : UInt32) : Void
    fun bg_QImage_setColorCount_int(_self_ : Binding::QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_allGray_(_self_ : Binding::QImage*) : Bool
    fun bg_QImage_isGrayscale_(_self_ : Binding::QImage*) : Bool
    fun bg_QImage_bits_(_self_ : Binding::QImage*) : UInt8*
    fun bg_QImage_constBits_(_self_ : Binding::QImage*) : UInt8*
    fun bg_QImage_byteCount_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_scanLine_int(_self_ : Binding::QImage*, unnamed_arg_0 : Int32) : UInt8*
    fun bg_QImage_constScanLine_int(_self_ : Binding::QImage*, unnamed_arg_0 : Int32) : UInt8*
    fun bg_QImage_bytesPerLine_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_valid_int_int(_self_ : Binding::QImage*, x : Int32, y : Int32) : Bool
    fun bg_QImage_valid_const_QPoint_R(_self_ : Binding::QImage*, pt : QPoint) : Bool
    fun bg_QImage_pixelIndex_int_int(_self_ : Binding::QImage*, x : Int32, y : Int32) : Int32
    fun bg_QImage_pixelIndex_const_QPoint_R(_self_ : Binding::QImage*, pt : QPoint) : Int32
    fun bg_QImage_pixel_int_int(_self_ : Binding::QImage*, x : Int32, y : Int32) : UInt32
    fun bg_QImage_pixel_const_QPoint_R(_self_ : Binding::QImage*, pt : QPoint) : UInt32
    fun bg_QImage_setPixel_int_int_uint(_self_ : Binding::QImage*, x : Int32, y : Int32, index_or_rgb : UInt32) : Void
    fun bg_QImage_setPixel_const_QPoint_R_uint(_self_ : Binding::QImage*, pt : QPoint, index_or_rgb : UInt32) : Void
    fun bg_QImage_pixelColor_int_int(_self_ : Binding::QImage*, x : Int32, y : Int32) : Binding::QColor*
    fun bg_QImage_pixelColor_const_QPoint_R(_self_ : Binding::QImage*, pt : QPoint) : Binding::QColor*
    fun bg_QImage_setPixelColor_int_int_const_QColor_R(_self_ : Binding::QImage*, x : Int32, y : Int32, c : QColor*) : Void
    fun bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(_self_ : Binding::QImage*, pt : QPoint, c : QColor*) : Void
    fun bg_QImage_colorTable_(_self_ : Binding::QImage*) : Void*
    fun bg_QImage_setColorTable_const_QVector_QRgb_(_self_ : Binding::QImage*, colors : Void*) : Void
    fun bg_QImage_devicePixelRatio_(_self_ : Binding::QImage*) : Float64
    fun bg_QImage_setDevicePixelRatio_qreal(_self_ : Binding::QImage*, scale_factor : Float64) : Void
    fun bg_QImage_fill_uint(_self_ : Binding::QImage*, pixel : UInt32) : Void
    fun bg_QImage_fill_const_QColor_R(_self_ : Binding::QImage*, color : QColor*) : Void
    fun bg_QImage_fill_Qt__GlobalColor(_self_ : Binding::QImage*, color : GlobalColor) : Void
    fun bg_QImage_hasAlphaChannel_(_self_ : Binding::QImage*) : Bool
    fun bg_QImage_setAlphaChannel_const_QImage_R(_self_ : Binding::QImage*, alpha_channel : QImage*) : Void
    fun bg_QImage_alphaChannel_(_self_ : Binding::QImage*) : Binding::QImage*
    fun bg_QImage_createAlphaMask_(_self_ : Binding::QImage*) : Binding::QImage*
    fun bg_QImage_createAlphaMask_Qt__ImageConversionFlags(_self_ : Binding::QImage*, flags : ImageConversionFlags) : Binding::QImage*
    fun bg_QImage_createHeuristicMask_bool(_self_ : Binding::QImage*, clip_tight : Bool) : Binding::QImage*
    fun bg_QImage_createMaskFromColor_QRgb_Qt__MaskMode(_self_ : Binding::QImage*, color : UInt32, mode : MaskMode) : Binding::QImage*
    fun bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : Binding::QImage*, w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : Binding::QImage*
    fun bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : Binding::QImage*, s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : Binding::QImage*
    fun bg_QImage_scaledToWidth_int_Qt__TransformationMode(_self_ : Binding::QImage*, w : Int32, mode : TransformationMode) : Binding::QImage*
    fun bg_QImage_scaledToHeight_int_Qt__TransformationMode(_self_ : Binding::QImage*, h : Int32, mode : TransformationMode) : Binding::QImage*
    fun bg_QImage_transformed_const_QMatrix_R_Qt__TransformationMode(_self_ : Binding::QImage*, matrix : QMatrix*, mode : TransformationMode) : Binding::QImage*
    fun bg_QImage_trueMatrix_STATIC_const_QMatrix_R_int_int(unnamed_arg_0 : QMatrix*, w : Int32, h : Int32) : QMatrix*
    fun bg_QImage_transformed_const_QTransform_R_Qt__TransformationMode(_self_ : Binding::QImage*, matrix : QTransform*, mode : TransformationMode) : Binding::QImage*
    fun bg_QImage_trueMatrix_STATIC_const_QTransform_R_int_int(unnamed_arg_0 : QTransform*, w : Int32, h : Int32) : QTransform*
    fun bg_QImage_mirrored_bool_bool(_self_ : Binding::QImage*, horizontally : Bool, vertically : Bool) : Binding::QImage*
    fun bg_QImage_rgbSwapped_(_self_ : Binding::QImage*) : Binding::QImage*
    fun bg_QImage_invertPixels_QImage__InvertMode(_self_ : Binding::QImage*, unnamed_arg_0 : Image::InvertMode) : Void
    fun bg_QImage_load_QIODevice_X_const_char_X(_self_ : Binding::QImage*, device : QIODevice*, format : UInt8*) : Bool
    fun bg_QImage_load_const_QString_R_const_char_X(_self_ : Binding::QImage*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QImage_loadFromData_const_uchar_X_int_const_char_X(_self_ : Binding::QImage*, buf : UInt8*, len : Int32, format : UInt8*) : Bool
    fun bg_QImage_loadFromData_const_QByteArray_R_const_char_X(_self_ : Binding::QImage*, data : QByteArray*, aformat : UInt8*) : Bool
    fun bg_QImage_save_const_QString_R_const_char_X_int(_self_ : Binding::QImage*, file_name : CrystalString, format : UInt8*, quality : Int32) : Bool
    fun bg_QImage_save_QIODevice_X_const_char_X_int(_self_ : Binding::QImage*, device : QIODevice*, format : UInt8*, quality : Int32) : Bool
    fun bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(data : UInt8*, size : Int32, format : UInt8*) : Binding::QImage*
    fun bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(data : QByteArray*, format : UInt8*) : Binding::QImage*
    fun bg_QImage_cacheKey_(_self_ : Binding::QImage*) : Int64
    fun bg_QImage_paintEngine_(_self_ : Binding::QImage*) : QPaintEngine*
    fun bg_QImage_dotsPerMeterX_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_dotsPerMeterY_(_self_ : Binding::QImage*) : Int32
    fun bg_QImage_setDotsPerMeterX_int(_self_ : Binding::QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_setDotsPerMeterY_int(_self_ : Binding::QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_offset_(_self_ : Binding::QImage*) : Binding::QPoint
    fun bg_QImage_setOffset_const_QPoint_R(_self_ : Binding::QImage*, unnamed_arg_0 : QPoint) : Void
    fun bg_QImage_textKeys_(_self_ : Binding::QImage*) : Void*
    fun bg_QImage_text_const_QString_R(_self_ : Binding::QImage*, key : CrystalString) : Binding::CrystalString
    fun bg_QImage_setText_const_QString_R_const_QString_R(_self_ : Binding::QImage*, key : CrystalString, value : CrystalString) : Void
    fun bg_QImage_pixelFormat_(_self_ : Binding::QImage*) : Binding::QPixelFormat*
    fun bg_QImage_toPixelFormat_STATIC_QImage__Format(format : Image::Format) : Binding::QPixelFormat*
    fun bg_QImage_toImageFormat_STATIC_QPixelFormat(format : QPixelFormat*) : Image::Format
    fun bg_QImage_metric_QPaintDevice__PaintDeviceMetric(_self_ : Binding::QImage*, metric : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QImage_mirrored_helper_bool_bool(_self_ : Binding::QImage*, horizontal : Bool, vertical : Bool) : Binding::QImage*
    fun bg_QImage_rgbSwapped_helper_(_self_ : Binding::QImage*) : Binding::QImage*
    fun bg_QImage_mirrored_inplace_bool_bool(_self_ : Binding::QImage*, horizontal : Bool, vertical : Bool) : Void
    fun bg_QImage_rgbSwapped_inplace_(_self_ : Binding::QImage*) : Void
    fun bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(_self_ : Binding::QImage*, format : Image::Format, flags : ImageConversionFlags) : Binding::QImage*
    fun bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(_self_ : Binding::QImage*, format : Image::Format, flags : ImageConversionFlags) : Bool
    fun bg_QImage_smoothScaled_int_int(_self_ : Binding::QImage*, w : Int32, h : Int32) : Binding::QImage*
    fun bg_QImage_DESTROY_(_self_ : Binding::QImage*) : Void
    fun bg_QPixmap_CONSTRUCT_() : Binding::QPixmap*
    fun bg_QPixmap_CONSTRUCT_QPlatformPixmap_X(data : QPlatformPixmap*) : Binding::QPixmap*
    fun bg_QPixmap_CONSTRUCT_int_int(w : Int32, h : Int32) : Binding::QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_QSize_R(unnamed_arg_0 : QSize*) : Binding::QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X(file_name : CrystalString, format : UInt8*) : Binding::QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(file_name : CrystalString, format : UInt8*, flags : ImageConversionFlags) : Binding::QPixmap*
    fun bg_QPixmap_CONSTRUCT_const_char_Xconst_X(xpm : UInt8**) : Binding::QPixmap*
    fun bg_QPixmap_swap_QPixmap_R(_self_ : Binding::QPixmap*, other : QPixmap*) : Void
    fun bg_QPixmap_isNull_(_self_ : Binding::QPixmap*) : Bool
    fun bg_QPixmap_devType_(_self_ : Binding::QPixmap*) : Int32
    fun bg_QPixmap_width_(_self_ : Binding::QPixmap*) : Int32
    fun bg_QPixmap_height_(_self_ : Binding::QPixmap*) : Int32
    fun bg_QPixmap_size_(_self_ : Binding::QPixmap*) : QSize*
    fun bg_QPixmap_rect_(_self_ : Binding::QPixmap*) : Binding::QRect*
    fun bg_QPixmap_depth_(_self_ : Binding::QPixmap*) : Int32
    fun bg_QPixmap_defaultDepth_STATIC_() : Int32
    fun bg_QPixmap_fill_(_self_ : Binding::QPixmap*) : Void
    fun bg_QPixmap_fill_const_QColor_R(_self_ : Binding::QPixmap*, fill_color : QColor*) : Void
    fun bg_QPixmap_fill_const_QPaintDevice_X_const_QPoint_R(_self_ : Binding::QPixmap*, device : QPaintDevice*, ofs : QPoint) : Void
    fun bg_QPixmap_fill_const_QPaintDevice_X_int_int(_self_ : Binding::QPixmap*, device : QPaintDevice*, xofs : Int32, yofs : Int32) : Void
    fun bg_QPixmap_mask_(_self_ : Binding::QPixmap*) : QBitmap*
    fun bg_QPixmap_setMask_const_QBitmap_R(_self_ : Binding::QPixmap*, unnamed_arg_0 : QBitmap*) : Void
    fun bg_QPixmap_devicePixelRatio_(_self_ : Binding::QPixmap*) : Float64
    fun bg_QPixmap_setDevicePixelRatio_qreal(_self_ : Binding::QPixmap*, scale_factor : Float64) : Void
    fun bg_QPixmap_hasAlpha_(_self_ : Binding::QPixmap*) : Bool
    fun bg_QPixmap_hasAlphaChannel_(_self_ : Binding::QPixmap*) : Bool
    fun bg_QPixmap_createHeuristicMask_bool(_self_ : Binding::QPixmap*, clip_tight : Bool) : QBitmap*
    fun bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(_self_ : Binding::QPixmap*, mask_color : QColor*, mode : MaskMode) : QBitmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X_const_QRect_R(widget : QObject*, rect : QRect*) : Binding::QPixmap*
    fun bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int_int(widget : QObject*, x : Int32, y : Int32, w : Int32, h : Int32) : Binding::QPixmap*
    fun bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : Binding::QPixmap*, w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : Binding::QPixmap*
    fun bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : Binding::QPixmap*, s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : Binding::QPixmap*
    fun bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(_self_ : Binding::QPixmap*, w : Int32, mode : TransformationMode) : Binding::QPixmap*
    fun bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(_self_ : Binding::QPixmap*, h : Int32, mode : TransformationMode) : Binding::QPixmap*
    fun bg_QPixmap_transformed_const_QMatrix_R_Qt__TransformationMode(_self_ : Binding::QPixmap*, unnamed_arg_0 : QMatrix*, mode : TransformationMode) : Binding::QPixmap*
    fun bg_QPixmap_trueMatrix_STATIC_const_QMatrix_R_int_int(m : QMatrix*, w : Int32, h : Int32) : QMatrix*
    fun bg_QPixmap_transformed_const_QTransform_R_Qt__TransformationMode(_self_ : Binding::QPixmap*, unnamed_arg_0 : QTransform*, mode : TransformationMode) : Binding::QPixmap*
    fun bg_QPixmap_trueMatrix_STATIC_const_QTransform_R_int_int(m : QTransform*, w : Int32, h : Int32) : QTransform*
    fun bg_QPixmap_toImage_(_self_ : Binding::QPixmap*) : Binding::QImage*
    fun bg_QPixmap_fromImage_STATIC_const_QImage_R(image : QImage*) : Binding::QPixmap*
    fun bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image : QImage*, flags : ImageConversionFlags) : Binding::QPixmap*
    fun bg_QPixmap_fromImageReader_STATIC_QImageReader_X(image_reader : QImageReader*) : Binding::QPixmap*
    fun bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(image_reader : QImageReader*, flags : ImageConversionFlags) : Binding::QPixmap*
    fun bg_QPixmap_load_const_QString_R_const_char_X(_self_ : Binding::QPixmap*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(_self_ : Binding::QPixmap*, file_name : CrystalString, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(_self_ : Binding::QPixmap*, buf : UInt8*, len : UInt32, format : UInt8*) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(_self_ : Binding::QPixmap*, buf : UInt8*, len : UInt32, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(_self_ : Binding::QPixmap*, data : QByteArray*, format : UInt8*) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(_self_ : Binding::QPixmap*, data : QByteArray*, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_save_const_QString_R_const_char_X_int(_self_ : Binding::QPixmap*, file_name : CrystalString, format : UInt8*, quality : Int32) : Bool
    fun bg_QPixmap_save_QIODevice_X_const_char_X_int(_self_ : Binding::QPixmap*, device : QIODevice*, format : UInt8*, quality : Int32) : Bool
    fun bg_QPixmap_convertFromImage_const_QImage_R(_self_ : Binding::QPixmap*, img : QImage*) : Bool
    fun bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(_self_ : Binding::QPixmap*, img : QImage*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_copy_int_int_int_int(_self_ : Binding::QPixmap*, x : Int32, y : Int32, width : Int32, height : Int32) : Binding::QPixmap*
    fun bg_QPixmap_copy_(_self_ : Binding::QPixmap*) : Binding::QPixmap*
    fun bg_QPixmap_copy_const_QRect_R(_self_ : Binding::QPixmap*, rect : QRect*) : Binding::QPixmap*
    fun bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(_self_ : Binding::QPixmap*, dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32, exposed : QRegion*) : Void
    fun bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(_self_ : Binding::QPixmap*, dx : Int32, dy : Int32, rect : QRect*, exposed : QRegion*) : Void
    fun bg_QPixmap_cacheKey_(_self_ : Binding::QPixmap*) : Int64
    fun bg_QPixmap_isDetached_(_self_ : Binding::QPixmap*) : Bool
    fun bg_QPixmap_detach_(_self_ : Binding::QPixmap*) : Void
    fun bg_QPixmap_isQBitmap_(_self_ : Binding::QPixmap*) : Bool
    fun bg_QPixmap_paintEngine_(_self_ : Binding::QPixmap*) : QPaintEngine*
    fun bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(_self_ : Binding::QPixmap*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPixmap_fromImageInPlace_STATIC_QImage_R(image : QImage*) : Binding::QPixmap*
    fun bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(image : QImage*, flags : ImageConversionFlags) : Binding::QPixmap*
    fun bg_QPixmap_handle_(_self_ : Binding::QPixmap*) : QPlatformPixmap*
    fun bg_QPixmap_DESTROY_(_self_ : Binding::QPixmap*) : Void
    fun bg_QIcon_CONSTRUCT_() : Binding::QIcon*
    fun bg_QIcon_CONSTRUCT_const_QPixmap_R(pixmap : QPixmap*) : Binding::QIcon*
    fun bg_QIcon_CONSTRUCT_const_QString_R(file_name : CrystalString) : Binding::QIcon*
    fun bg_QIcon_CONSTRUCT_QIconEngine_X(engine : QIconEngine*) : Binding::QIcon*
    fun bg_QIcon_swap_QIcon_R(_self_ : Binding::QIcon*, other : QIcon*) : Void
    fun bg_QIcon_pixmap_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, size : QSize*, mode : Icon::Mode, state : Icon::State) : Binding::QPixmap*
    fun bg_QIcon_pixmap_int_int_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, w : Int32, h : Int32, mode : Icon::Mode, state : Icon::State) : Binding::QPixmap*
    fun bg_QIcon_pixmap_int_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, extent : Int32, mode : Icon::Mode, state : Icon::State) : Binding::QPixmap*
    fun bg_QIcon_pixmap_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, window : QWindow*, size : QSize*, mode : Icon::Mode, state : Icon::State) : Binding::QPixmap*
    fun bg_QIcon_actualSize_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, size : QSize*, mode : Icon::Mode, state : Icon::State) : QSize*
    fun bg_QIcon_actualSize_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, window : QWindow*, size : QSize*, mode : Icon::Mode, state : Icon::State) : QSize*
    fun bg_QIcon_name_(_self_ : Binding::QIcon*) : Binding::CrystalString
    fun bg_QIcon_paint_QPainter_X_const_QRect_R(_self_ : Binding::QIcon*, painter : QPainter*, rect : QRect*) : Void
    fun bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment(_self_ : Binding::QIcon*, painter : QPainter*, rect : QRect*, alignment : Alignment) : Void
    fun bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode(_self_ : Binding::QIcon*, painter : QPainter*, rect : QRect*, alignment : Alignment, mode : Icon::Mode) : Void
    fun bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, painter : QPainter*, rect : QRect*, alignment : Alignment, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int(_self_ : Binding::QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment(_self_ : Binding::QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode(_self_ : Binding::QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_isNull_(_self_ : Binding::QIcon*) : Bool
    fun bg_QIcon_isDetached_(_self_ : Binding::QIcon*) : Bool
    fun bg_QIcon_detach_(_self_ : Binding::QIcon*) : Void
    fun bg_QIcon_cacheKey_(_self_ : Binding::QIcon*) : Int64
    fun bg_QIcon_addPixmap_const_QPixmap_R_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, pixmap : QPixmap*, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_addFile_const_QString_R(_self_ : Binding::QIcon*, file_name : CrystalString) : Void
    fun bg_QIcon_addFile_const_QString_R_const_QSize_R(_self_ : Binding::QIcon*, file_name : CrystalString, size : QSize*) : Void
    fun bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode(_self_ : Binding::QIcon*, file_name : CrystalString, size : QSize*, mode : Icon::Mode) : Void
    fun bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, file_name : CrystalString, size : QSize*, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_availableSizes_QIcon__Mode_QIcon__State(_self_ : Binding::QIcon*, mode : Icon::Mode, state : Icon::State) : Void*
    fun bg_QIcon_setIsMask_bool(_self_ : Binding::QIcon*, is_mask : Bool) : Void
    fun bg_QIcon_isMask_(_self_ : Binding::QIcon*) : Bool
    fun bg_QIcon_fromTheme_STATIC_const_QString_R(name : CrystalString) : Binding::QIcon*
    fun bg_QIcon_fromTheme_STATIC_const_QString_R_const_QIcon_R(name : CrystalString, fallback : QIcon*) : Binding::QIcon*
    fun bg_QIcon_hasThemeIcon_STATIC_const_QString_R(name : CrystalString) : Bool
    fun bg_QIcon_themeSearchPaths_STATIC_() : Void*
    fun bg_QIcon_setThemeSearchPaths_STATIC_const_QStringList_R(searchpath : Void*) : Void
    fun bg_QIcon_themeName_STATIC_() : Binding::CrystalString
    fun bg_QIcon_setThemeName_STATIC_const_QString_R(path : CrystalString) : Void
    fun bg_QIcon_DESTROY_(_self_ : Binding::QIcon*) : Void
    fun bg_QEventLoop_metaObject_(_self_ : Binding::QEventLoop*) : QMetaObject*
    fun bg_QEventLoop_qt_metacast_const_char_X(_self_ : Binding::QEventLoop*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QEventLoop*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QEventLoop_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QEventLoop*
    fun bg_QEventLoop_processEvents_(_self_ : Binding::QEventLoop*) : Bool
    fun bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(_self_ : Binding::QEventLoop*, flags : EventLoop::ProcessEventsFlags) : Bool
    fun bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(_self_ : Binding::QEventLoop*, flags : EventLoop::ProcessEventsFlags, maximum_time : Int32) : Void
    fun bg_QEventLoop_exec_(_self_ : Binding::QEventLoop*) : Int32
    fun bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(_self_ : Binding::QEventLoop*, flags : EventLoop::ProcessEventsFlags) : Int32
    fun bg_QEventLoop_exit_int(_self_ : Binding::QEventLoop*, return_code : Int32) : Void
    fun bg_QEventLoop_isRunning_(_self_ : Binding::QEventLoop*) : Bool
    fun bg_QEventLoop_wakeUp_(_self_ : Binding::QEventLoop*) : Void
    fun bg_QEventLoop_event_QEvent_X(_self_ : Binding::QEventLoop*, event : QEvent*) : Bool
    fun bg_QEventLoop_quit_(_self_ : Binding::QEventLoop*) : Void
    fun bg_QEventLoop_DESTROY_(_self_ : Binding::QEventLoop*) : Void
    fun bg_QTabBar_metaObject_(_self_ : Binding::QTabBar*) : QMetaObject*
    fun bg_QTabBar_qt_metacast_const_char_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QTabBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTabBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTabBar_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTabBar_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QTabBar*
    fun bg_QTabBar_shape_(_self_ : Binding::QTabBar*) : TabBar::Shape
    fun bg_QTabBar_setShape_QTabBar__Shape(_self_ : Binding::QTabBar*, shape : TabBar::Shape) : Void
    fun bg_QTabBar_addTab_const_QString_R(_self_ : Binding::QTabBar*, text : CrystalString) : Int32
    fun bg_QTabBar_addTab_const_QIcon_R_const_QString_R(_self_ : Binding::QTabBar*, icon : QIcon*, text : CrystalString) : Int32
    fun bg_QTabBar_insertTab_int_const_QString_R(_self_ : Binding::QTabBar*, index : Int32, text : CrystalString) : Int32
    fun bg_QTabBar_insertTab_int_const_QIcon_R_const_QString_R(_self_ : Binding::QTabBar*, index : Int32, icon : QIcon*, text : CrystalString) : Int32
    fun bg_QTabBar_removeTab_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_moveTab_int_int(_self_ : Binding::QTabBar*, from : Int32, to : Int32) : Void
    fun bg_QTabBar_isTabEnabled_int(_self_ : Binding::QTabBar*, index : Int32) : Bool
    fun bg_QTabBar_setTabEnabled_int_bool(_self_ : Binding::QTabBar*, index : Int32, unnamed_arg_1 : Bool) : Void
    fun bg_QTabBar_tabText_int(_self_ : Binding::QTabBar*, index : Int32) : Binding::CrystalString
    fun bg_QTabBar_setTabText_int_const_QString_R(_self_ : Binding::QTabBar*, index : Int32, text : CrystalString) : Void
    fun bg_QTabBar_tabTextColor_int(_self_ : Binding::QTabBar*, index : Int32) : Binding::QColor*
    fun bg_QTabBar_setTabTextColor_int_const_QColor_R(_self_ : Binding::QTabBar*, index : Int32, color : QColor*) : Void
    fun bg_QTabBar_tabIcon_int(_self_ : Binding::QTabBar*, index : Int32) : Binding::QIcon*
    fun bg_QTabBar_setTabIcon_int_const_QIcon_R(_self_ : Binding::QTabBar*, index : Int32, icon : QIcon*) : Void
    fun bg_QTabBar_elideMode_(_self_ : Binding::QTabBar*) : TextElideMode
    fun bg_QTabBar_setElideMode_Qt__TextElideMode(_self_ : Binding::QTabBar*, unnamed_arg_0 : TextElideMode) : Void
    fun bg_QTabBar_setTabToolTip_int_const_QString_R(_self_ : Binding::QTabBar*, index : Int32, tip : CrystalString) : Void
    fun bg_QTabBar_tabToolTip_int(_self_ : Binding::QTabBar*, index : Int32) : Binding::CrystalString
    fun bg_QTabBar_setTabWhatsThis_int_const_QString_R(_self_ : Binding::QTabBar*, index : Int32, text : CrystalString) : Void
    fun bg_QTabBar_tabWhatsThis_int(_self_ : Binding::QTabBar*, index : Int32) : Binding::CrystalString
    fun bg_QTabBar_tabRect_int(_self_ : Binding::QTabBar*, index : Int32) : Binding::QRect*
    fun bg_QTabBar_tabAt_const_QPoint_R(_self_ : Binding::QTabBar*, pos : QPoint) : Int32
    fun bg_QTabBar_currentIndex_(_self_ : Binding::QTabBar*) : Int32
    fun bg_QTabBar_count_(_self_ : Binding::QTabBar*) : Int32
    fun bg_QTabBar_sizeHint_(_self_ : Binding::QTabBar*) : QSize*
    fun bg_QTabBar_minimumSizeHint_(_self_ : Binding::QTabBar*) : QSize*
    fun bg_QTabBar_setDrawBase_bool(_self_ : Binding::QTabBar*, draw_the_base : Bool) : Void
    fun bg_QTabBar_drawBase_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_iconSize_(_self_ : Binding::QTabBar*) : QSize*
    fun bg_QTabBar_setIconSize_const_QSize_R(_self_ : Binding::QTabBar*, size : QSize*) : Void
    fun bg_QTabBar_usesScrollButtons_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_setUsesScrollButtons_bool(_self_ : Binding::QTabBar*, use_buttons : Bool) : Void
    fun bg_QTabBar_tabsClosable_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_setTabsClosable_bool(_self_ : Binding::QTabBar*, closable : Bool) : Void
    fun bg_QTabBar_setTabButton_int_QTabBar__ButtonPosition_QWidget_X(_self_ : Binding::QTabBar*, index : Int32, position : TabBar::ButtonPosition, widget : QWidget*) : Void
    fun bg_QTabBar_tabButton_int_QTabBar__ButtonPosition(_self_ : Binding::QTabBar*, index : Int32, position : TabBar::ButtonPosition) : Binding::QWidget*
    fun bg_QTabBar_selectionBehaviorOnRemove_(_self_ : Binding::QTabBar*) : TabBar::SelectionBehavior
    fun bg_QTabBar_setSelectionBehaviorOnRemove_QTabBar__SelectionBehavior(_self_ : Binding::QTabBar*, behavior : TabBar::SelectionBehavior) : Void
    fun bg_QTabBar_expanding_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_setExpanding_bool(_self_ : Binding::QTabBar*, enabled : Bool) : Void
    fun bg_QTabBar_isMovable_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_setMovable_bool(_self_ : Binding::QTabBar*, movable : Bool) : Void
    fun bg_QTabBar_documentMode_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_setDocumentMode_bool(_self_ : Binding::QTabBar*, set : Bool) : Void
    fun bg_QTabBar_autoHide_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_setAutoHide_bool(_self_ : Binding::QTabBar*, hide : Bool) : Void
    fun bg_QTabBar_changeCurrentOnDrag_(_self_ : Binding::QTabBar*) : Bool
    fun bg_QTabBar_setChangeCurrentOnDrag_bool(_self_ : Binding::QTabBar*, change : Bool) : Void
    fun bg_QTabBar_accessibleTabName_int(_self_ : Binding::QTabBar*, index : Int32) : Binding::CrystalString
    fun bg_QTabBar_setAccessibleTabName_int_const_QString_R(_self_ : Binding::QTabBar*, index : Int32, name : CrystalString) : Void
    fun bg_QTabBar_setCurrentIndex_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_currentChanged_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_currentChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabBar_tabCloseRequested_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabCloseRequested_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabBar_tabMoved_int_int(_self_ : Binding::QTabBar*, from : Int32, to : Int32) : Void
    fun bg_QTabBar_tabMoved_CONNECT_CrystalProc_void__int__int_(_self_ : Binding::QTabBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabBar_tabBarClicked_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabBarClicked_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabBar_tabBarDoubleClicked_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabBarDoubleClicked_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabBar*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabBar_tabSizeHint_int(_self_ : Binding::QTabBar*, index : Int32) : QSize*
    fun bg_QTabBar_minimumTabSizeHint_int(_self_ : Binding::QTabBar*, index : Int32) : QSize*
    fun bg_QTabBar_tabInserted_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabRemoved_int(_self_ : Binding::QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabLayoutChange_(_self_ : Binding::QTabBar*) : Void
    fun bg_QTabBar_event_QEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QTabBar_resizeEvent_QResizeEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QTabBar_showEvent_QShowEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTabBar_hideEvent_QHideEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QTabBar_paintEvent_QPaintEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QTabBar_mousePressEvent_QMouseEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_wheelEvent_QWheelEvent_X(_self_ : Binding::QTabBar*, event : QWheelEvent*) : Void
    fun bg_QTabBar_keyPressEvent_QKeyEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QTabBar_changeEvent_QEvent_X(_self_ : Binding::QTabBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QTabBar_timerEvent_QTimerEvent_X(_self_ : Binding::QTabBar*, event : QTimerEvent*) : Void
    fun bg_QTabBar_initStyleOption_QStyleOptionTab_X_int(_self_ : Binding::QTabBar*, option : QStyleOptionTab*, tab_index : Int32) : Void
    fun bg_QTabBar_DESTROY_(_self_ : Binding::QTabBar*) : Void
    fun bg_QTabWidget_metaObject_(_self_ : Binding::QTabWidget*) : QMetaObject*
    fun bg_QTabWidget_qt_metacast_const_char_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QTabWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTabWidget_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QTabWidget*
    fun bg_QTabWidget_addTab_QWidget_X_const_QString_R(_self_ : Binding::QTabWidget*, widget : QWidget*, unnamed_arg_1 : CrystalString) : Int32
    fun bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(_self_ : Binding::QTabWidget*, widget : QWidget*, icon : QIcon*, label : CrystalString) : Int32
    fun bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(_self_ : Binding::QTabWidget*, index : Int32, widget : QWidget*, unnamed_arg_2 : CrystalString) : Int32
    fun bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(_self_ : Binding::QTabWidget*, index : Int32, widget : QWidget*, icon : QIcon*, label : CrystalString) : Int32
    fun bg_QTabWidget_removeTab_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_isTabEnabled_int(_self_ : Binding::QTabWidget*, index : Int32) : Bool
    fun bg_QTabWidget_setTabEnabled_int_bool(_self_ : Binding::QTabWidget*, index : Int32, unnamed_arg_1 : Bool) : Void
    fun bg_QTabWidget_tabText_int(_self_ : Binding::QTabWidget*, index : Int32) : Binding::CrystalString
    fun bg_QTabWidget_setTabText_int_const_QString_R(_self_ : Binding::QTabWidget*, index : Int32, unnamed_arg_1 : CrystalString) : Void
    fun bg_QTabWidget_tabIcon_int(_self_ : Binding::QTabWidget*, index : Int32) : Binding::QIcon*
    fun bg_QTabWidget_setTabIcon_int_const_QIcon_R(_self_ : Binding::QTabWidget*, index : Int32, icon : QIcon*) : Void
    fun bg_QTabWidget_setTabToolTip_int_const_QString_R(_self_ : Binding::QTabWidget*, index : Int32, tip : CrystalString) : Void
    fun bg_QTabWidget_tabToolTip_int(_self_ : Binding::QTabWidget*, index : Int32) : Binding::CrystalString
    fun bg_QTabWidget_setTabWhatsThis_int_const_QString_R(_self_ : Binding::QTabWidget*, index : Int32, text : CrystalString) : Void
    fun bg_QTabWidget_tabWhatsThis_int(_self_ : Binding::QTabWidget*, index : Int32) : Binding::CrystalString
    fun bg_QTabWidget_currentIndex_(_self_ : Binding::QTabWidget*) : Int32
    fun bg_QTabWidget_currentWidget_(_self_ : Binding::QTabWidget*) : Binding::QWidget*
    fun bg_QTabWidget_widget_int(_self_ : Binding::QTabWidget*, index : Int32) : Binding::QWidget*
    fun bg_QTabWidget_indexOf_QWidget_X(_self_ : Binding::QTabWidget*, widget : QWidget*) : Int32
    fun bg_QTabWidget_count_(_self_ : Binding::QTabWidget*) : Int32
    fun bg_QTabWidget_tabPosition_(_self_ : Binding::QTabWidget*) : TabWidget::TabPosition
    fun bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(_self_ : Binding::QTabWidget*, unnamed_arg_0 : TabWidget::TabPosition) : Void
    fun bg_QTabWidget_tabsClosable_(_self_ : Binding::QTabWidget*) : Bool
    fun bg_QTabWidget_setTabsClosable_bool(_self_ : Binding::QTabWidget*, closeable : Bool) : Void
    fun bg_QTabWidget_isMovable_(_self_ : Binding::QTabWidget*) : Bool
    fun bg_QTabWidget_setMovable_bool(_self_ : Binding::QTabWidget*, movable : Bool) : Void
    fun bg_QTabWidget_tabShape_(_self_ : Binding::QTabWidget*) : TabWidget::TabShape
    fun bg_QTabWidget_setTabShape_QTabWidget__TabShape(_self_ : Binding::QTabWidget*, s : TabWidget::TabShape) : Void
    fun bg_QTabWidget_sizeHint_(_self_ : Binding::QTabWidget*) : QSize*
    fun bg_QTabWidget_minimumSizeHint_(_self_ : Binding::QTabWidget*) : QSize*
    fun bg_QTabWidget_heightForWidth_int(_self_ : Binding::QTabWidget*, width : Int32) : Int32
    fun bg_QTabWidget_hasHeightForWidth_(_self_ : Binding::QTabWidget*) : Bool
    fun bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(_self_ : Binding::QTabWidget*, w : QWidget*, corner : Corner) : Void
    fun bg_QTabWidget_cornerWidget_Qt__Corner(_self_ : Binding::QTabWidget*, corner : Corner) : Binding::QWidget*
    fun bg_QTabWidget_elideMode_(_self_ : Binding::QTabWidget*) : TextElideMode
    fun bg_QTabWidget_setElideMode_Qt__TextElideMode(_self_ : Binding::QTabWidget*, unnamed_arg_0 : TextElideMode) : Void
    fun bg_QTabWidget_iconSize_(_self_ : Binding::QTabWidget*) : QSize*
    fun bg_QTabWidget_setIconSize_const_QSize_R(_self_ : Binding::QTabWidget*, size : QSize*) : Void
    fun bg_QTabWidget_usesScrollButtons_(_self_ : Binding::QTabWidget*) : Bool
    fun bg_QTabWidget_setUsesScrollButtons_bool(_self_ : Binding::QTabWidget*, use_buttons : Bool) : Void
    fun bg_QTabWidget_documentMode_(_self_ : Binding::QTabWidget*) : Bool
    fun bg_QTabWidget_setDocumentMode_bool(_self_ : Binding::QTabWidget*, set : Bool) : Void
    fun bg_QTabWidget_tabBarAutoHide_(_self_ : Binding::QTabWidget*) : Bool
    fun bg_QTabWidget_setTabBarAutoHide_bool(_self_ : Binding::QTabWidget*, enabled : Bool) : Void
    fun bg_QTabWidget_clear_(_self_ : Binding::QTabWidget*) : Void
    fun bg_QTabWidget_tabBar_(_self_ : Binding::QTabWidget*) : Binding::QTabBar*
    fun bg_QTabWidget_setCurrentIndex_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_setCurrentWidget_QWidget_X(_self_ : Binding::QTabWidget*, widget : QWidget*) : Void
    fun bg_QTabWidget_currentChanged_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_currentChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabWidget_tabCloseRequested_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabCloseRequested_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabWidget_tabBarClicked_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabBarClicked_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabWidget_tabBarDoubleClicked_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabBarDoubleClicked_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTabWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTabWidget_tabInserted_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabRemoved_int(_self_ : Binding::QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_showEvent_QShowEvent_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTabWidget_resizeEvent_QResizeEvent_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QTabWidget_keyPressEvent_QKeyEvent_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QTabWidget_paintEvent_QPaintEvent_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QTabWidget_setTabBar_QTabBar_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : QTabBar*) : Void
    fun bg_QTabWidget_changeEvent_QEvent_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QTabWidget_event_QEvent_X(_self_ : Binding::QTabWidget*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(_self_ : Binding::QTabWidget*, option : QStyleOptionTabWidgetFrame*) : Void
    fun bg_QTabWidget_DESTROY_(_self_ : Binding::QTabWidget*) : Void
    fun bg_QLayoutItem_CONSTRUCT_() : Binding::QLayoutItem*
    fun bg_QLayoutItem_CONSTRUCT_Qt__Alignment(alignment : Alignment) : Binding::QLayoutItem*
    fun bg_QLayoutItem_sizeHint_(_self_ : Binding::QLayoutItem*) : QSize*
    fun bg_QLayoutItem_minimumSize_(_self_ : Binding::QLayoutItem*) : QSize*
    fun bg_QLayoutItem_maximumSize_(_self_ : Binding::QLayoutItem*) : QSize*
    fun bg_QLayoutItem_expandingDirections_(_self_ : Binding::QLayoutItem*) : Orientations
    fun bg_QLayoutItem_setGeometry_const_QRect_R(_self_ : Binding::QLayoutItem*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayoutItem_geometry_(_self_ : Binding::QLayoutItem*) : Binding::QRect*
    fun bg_QLayoutItem_isEmpty_(_self_ : Binding::QLayoutItem*) : Bool
    fun bg_QLayoutItem_hasHeightForWidth_(_self_ : Binding::QLayoutItem*) : Bool
    fun bg_QLayoutItem_heightForWidth_int(_self_ : Binding::QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_int(_self_ : Binding::QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_(_self_ : Binding::QLayoutItem*) : Void
    fun bg_QLayoutItem_widget_(_self_ : Binding::QLayoutItem*) : Binding::QWidget*
    fun bg_QLayoutItem_layout_(_self_ : Binding::QLayoutItem*) : Binding::QLayout*
    fun bg_QLayoutItem_spacerItem_(_self_ : Binding::QLayoutItem*) : QSpacerItem*
    fun bg_QLayoutItem_alignment_(_self_ : Binding::QLayoutItem*) : Alignment
    fun bg_QLayoutItem_setAlignment_Qt__Alignment(_self_ : Binding::QLayoutItem*, a : Alignment) : Void
    fun bg_QLayoutItem_controlTypes_(_self_ : Binding::QLayoutItem*) : SizePolicy::ControlTypes
    fun bg_QLayoutItem_DESTROY_(_self_ : Binding::QLayoutItem*) : Void
    fun bg_QLayout_metaObject_(_self_ : Binding::QLayout*) : QMetaObject*
    fun bg_QLayout_qt_metacast_const_char_X(_self_ : Binding::QLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLayout_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QLayout*
    fun bg_QLayout_CONSTRUCT_() : Binding::QLayout*
    fun bg_QLayout_margin_(_self_ : Binding::QLayout*) : Int32
    fun bg_QLayout_spacing_(_self_ : Binding::QLayout*) : Int32
    fun bg_QLayout_setMargin_int(_self_ : Binding::QLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QLayout_setSpacing_int(_self_ : Binding::QLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QLayout_setContentsMargins_int_int_int_int(_self_ : Binding::QLayout*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QLayout_setContentsMargins_const_QMargins_R(_self_ : Binding::QLayout*, margins : QMargins*) : Void
    fun bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(_self_ : Binding::QLayout*, left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
    fun bg_QLayout_contentsMargins_(_self_ : Binding::QLayout*) : QMargins*
    fun bg_QLayout_contentsRect_(_self_ : Binding::QLayout*) : Binding::QRect*
    fun bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(_self_ : Binding::QLayout*, w : QWidget*, alignment : Alignment) : Bool
    fun bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(_self_ : Binding::QLayout*, l : QLayout*, alignment : Alignment) : Bool
    fun bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(_self_ : Binding::QLayout*, unnamed_arg_0 : Layout::SizeConstraint) : Void
    fun bg_QLayout_sizeConstraint_(_self_ : Binding::QLayout*) : Layout::SizeConstraint
    fun bg_QLayout_setMenuBar_QWidget_X(_self_ : Binding::QLayout*, w : QWidget*) : Void
    fun bg_QLayout_menuBar_(_self_ : Binding::QLayout*) : Binding::QWidget*
    fun bg_QLayout_parentWidget_(_self_ : Binding::QLayout*) : Binding::QWidget*
    fun bg_QLayout_invalidate_(_self_ : Binding::QLayout*) : Void
    fun bg_QLayout_geometry_(_self_ : Binding::QLayout*) : Binding::QRect*
    fun bg_QLayout_activate_(_self_ : Binding::QLayout*) : Bool
    fun bg_QLayout_update_(_self_ : Binding::QLayout*) : Void
    fun bg_QLayout_addWidget_QWidget_X(_self_ : Binding::QLayout*, w : QWidget*) : Void
    fun bg_QLayout_addItem_QLayoutItem_X(_self_ : Binding::QLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_removeWidget_QWidget_X(_self_ : Binding::QLayout*, w : QWidget*) : Void
    fun bg_QLayout_removeItem_QLayoutItem_X(_self_ : Binding::QLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_expandingDirections_(_self_ : Binding::QLayout*) : Orientations
    fun bg_QLayout_minimumSize_(_self_ : Binding::QLayout*) : QSize*
    fun bg_QLayout_maximumSize_(_self_ : Binding::QLayout*) : QSize*
    fun bg_QLayout_setGeometry_const_QRect_R(_self_ : Binding::QLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayout_itemAt_int(_self_ : Binding::QLayout*, index : Int32) : Binding::QLayoutItem*
    fun bg_QLayout_takeAt_int(_self_ : Binding::QLayout*, index : Int32) : Binding::QLayoutItem*
    fun bg_QLayout_indexOf_QWidget_X(_self_ : Binding::QLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_count_(_self_ : Binding::QLayout*) : Int32
    fun bg_QLayout_isEmpty_(_self_ : Binding::QLayout*) : Bool
    fun bg_QLayout_controlTypes_(_self_ : Binding::QLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_replaceWidget_QWidget_X_QWidget_X(_self_ : Binding::QLayout*, from : QWidget*, to : QWidget*) : Binding::QLayoutItem*
    fun bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(_self_ : Binding::QLayout*, from : QWidget*, to : QWidget*, options : FindChildOptions) : Binding::QLayoutItem*
    fun bg_QLayout_totalHeightForWidth_int(_self_ : Binding::QLayout*, w : Int32) : Int32
    fun bg_QLayout_totalMinimumSize_(_self_ : Binding::QLayout*) : QSize*
    fun bg_QLayout_totalMaximumSize_(_self_ : Binding::QLayout*) : QSize*
    fun bg_QLayout_totalSizeHint_(_self_ : Binding::QLayout*) : QSize*
    fun bg_QLayout_layout_(_self_ : Binding::QLayout*) : Binding::QLayout*
    fun bg_QLayout_setEnabled_bool(_self_ : Binding::QLayout*, unnamed_arg_0 : Bool) : Void
    fun bg_QLayout_isEnabled_(_self_ : Binding::QLayout*) : Bool
    fun bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(w : QWidget*, s : QSize*) : QSize*
    fun bg_QLayout_widgetEvent_QEvent_X(_self_ : Binding::QLayout*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLayout_childEvent_QChildEvent_X(_self_ : Binding::QLayout*, e : QChildEvent*) : Void
    fun bg_QLayout_addChildLayout_QLayout_X(_self_ : Binding::QLayout*, l : QLayout*) : Void
    fun bg_QLayout_addChildWidget_QWidget_X(_self_ : Binding::QLayout*, w : QWidget*) : Void
    fun bg_QLayout_adoptLayout_QLayout_X(_self_ : Binding::QLayout*, layout : QLayout*) : Bool
    fun bg_QLayout_alignmentRect_const_QRect_R(_self_ : Binding::QLayout*, unnamed_arg_0 : QRect*) : Binding::QRect*
    fun bg_QLayout_CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(d : QLayoutPrivate*, unnamed_arg_1 : QLayout*, unnamed_arg_2 : QWidget*) : Binding::QLayout*
    fun bg_QLayout_DESTROY_(_self_ : Binding::QLayout*) : Void
    fun bg_QLayout_AS_QLayoutItem_(_self_ : Binding::QLayout*) : Binding::QLayoutItem*
    fun bg_QBoxLayout_metaObject_(_self_ : Binding::QBoxLayout*) : QMetaObject*
    fun bg_QBoxLayout_qt_metacast_const_char_X(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QBoxLayout_CONSTRUCT_QBoxLayout__Direction_QWidget_X(unnamed_arg_0 : BoxLayout::Direction, parent : QWidget*) : Binding::QBoxLayout*
    fun bg_QBoxLayout_direction_(_self_ : Binding::QBoxLayout*) : BoxLayout::Direction
    fun bg_QBoxLayout_setDirection_QBoxLayout__Direction(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : BoxLayout::Direction) : Void
    fun bg_QBoxLayout_addSpacing_int(_self_ : Binding::QBoxLayout*, size : Int32) : Void
    fun bg_QBoxLayout_addStretch_int(_self_ : Binding::QBoxLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_addSpacerItem_QSpacerItem_X(_self_ : Binding::QBoxLayout*, spacer_item : QSpacerItem*) : Void
    fun bg_QBoxLayout_addWidget_QWidget_X_int(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : QWidget*, stretch : Int32) : Void
    fun bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : QWidget*, stretch : Int32, alignment : Alignment) : Void
    fun bg_QBoxLayout_addLayout_QLayout_X_int(_self_ : Binding::QBoxLayout*, layout : QLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_addStrut_int(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QBoxLayout_addItem_QLayoutItem_X(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_insertSpacing_int_int(_self_ : Binding::QBoxLayout*, index : Int32, size : Int32) : Void
    fun bg_QBoxLayout_insertStretch_int_int(_self_ : Binding::QBoxLayout*, index : Int32, stretch : Int32) : Void
    fun bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(_self_ : Binding::QBoxLayout*, index : Int32, spacer_item : QSpacerItem*) : Void
    fun bg_QBoxLayout_insertWidget_int_QWidget_X_int(_self_ : Binding::QBoxLayout*, index : Int32, widget : QWidget*, stretch : Int32) : Void
    fun bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(_self_ : Binding::QBoxLayout*, index : Int32, widget : QWidget*, stretch : Int32, alignment : Alignment) : Void
    fun bg_QBoxLayout_insertLayout_int_QLayout_X_int(_self_ : Binding::QBoxLayout*, index : Int32, layout : QLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_insertItem_int_QLayoutItem_X(_self_ : Binding::QBoxLayout*, index : Int32, unnamed_arg_1 : QLayoutItem*) : Void
    fun bg_QBoxLayout_spacing_(_self_ : Binding::QBoxLayout*) : Int32
    fun bg_QBoxLayout_setSpacing_int(_self_ : Binding::QBoxLayout*, spacing : Int32) : Void
    fun bg_QBoxLayout_setStretchFactor_QWidget_X_int(_self_ : Binding::QBoxLayout*, w : QWidget*, stretch : Int32) : Bool
    fun bg_QBoxLayout_setStretchFactor_QLayout_X_int(_self_ : Binding::QBoxLayout*, l : QLayout*, stretch : Int32) : Bool
    fun bg_QBoxLayout_setStretch_int_int(_self_ : Binding::QBoxLayout*, index : Int32, stretch : Int32) : Void
    fun bg_QBoxLayout_stretch_int(_self_ : Binding::QBoxLayout*, index : Int32) : Int32
    fun bg_QBoxLayout_sizeHint_(_self_ : Binding::QBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_(_self_ : Binding::QBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_(_self_ : Binding::QBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_(_self_ : Binding::QBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_int(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_int(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_(_self_ : Binding::QBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_(_self_ : Binding::QBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_int(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : Int32) : Binding::QLayoutItem*
    fun bg_QBoxLayout_takeAt_int(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : Int32) : Binding::QLayoutItem*
    fun bg_QBoxLayout_count_(_self_ : Binding::QBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_const_QRect_R(_self_ : Binding::QBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QBoxLayout_DESTROY_(_self_ : Binding::QBoxLayout*) : Void
    fun bg_QHBoxLayout_metaObject_(_self_ : Binding::QHBoxLayout*) : QMetaObject*
    fun bg_QHBoxLayout_qt_metacast_const_char_X(_self_ : Binding::QHBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QHBoxLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QHBoxLayout_CONSTRUCT_() : Binding::QHBoxLayout*
    fun bg_QHBoxLayout_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QHBoxLayout*
    fun bg_QHBoxLayout_DESTROY_(_self_ : Binding::QHBoxLayout*) : Void
    fun bg_QVBoxLayout_metaObject_(_self_ : Binding::QVBoxLayout*) : QMetaObject*
    fun bg_QVBoxLayout_qt_metacast_const_char_X(_self_ : Binding::QVBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QVBoxLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QVBoxLayout_CONSTRUCT_() : Binding::QVBoxLayout*
    fun bg_QVBoxLayout_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QVBoxLayout*
    fun bg_QVBoxLayout_DESTROY_(_self_ : Binding::QVBoxLayout*) : Void
    fun bg_QPalette_CONSTRUCT_() : Binding::QPalette*
    fun bg_QPalette_CONSTRUCT_const_QColor_R(button : QColor*) : Binding::QPalette*
    fun bg_QPalette_CONSTRUCT_Qt__GlobalColor(button : GlobalColor) : Binding::QPalette*
    fun bg_QPalette_CONSTRUCT_const_QColor_R_const_QColor_R(button : QColor*, window : QColor*) : Binding::QPalette*
    fun bg_QPalette_CONSTRUCT_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(window_text : QBrush*, button : QBrush*, light : QBrush*, dark : QBrush*, mid : QBrush*, text : QBrush*, bright_text : QBrush*, base : QBrush*, window : QBrush*) : Binding::QPalette*
    fun bg_QPalette_CONSTRUCT_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R(window_text : QColor*, window : QColor*, light : QColor*, dark : QColor*, mid : QColor*, text : QColor*, base : QColor*) : Binding::QPalette*
    fun bg_QPalette_swap_QPalette_R(_self_ : Binding::QPalette*, other : QPalette*) : Void
    fun bg_QPalette_currentColorGroup_(_self_ : Binding::QPalette*) : Palette::ColorGroup
    fun bg_QPalette_setCurrentColorGroup_QPalette__ColorGroup(_self_ : Binding::QPalette*, cg : Palette::ColorGroup) : Void
    fun bg_QPalette_color_QPalette__ColorGroup_QPalette__ColorRole(_self_ : Binding::QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole) : Binding::QColor*
    fun bg_QPalette_brush_QPalette__ColorGroup_QPalette__ColorRole(_self_ : Binding::QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole) : Binding::QBrush*
    fun bg_QPalette_setColor_QPalette__ColorGroup_QPalette__ColorRole_const_QColor_R(_self_ : Binding::QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole, color : QColor*) : Void
    fun bg_QPalette_setColor_QPalette__ColorRole_const_QColor_R(_self_ : Binding::QPalette*, cr : Palette::ColorRole, color : QColor*) : Void
    fun bg_QPalette_setBrush_QPalette__ColorRole_const_QBrush_R(_self_ : Binding::QPalette*, cr : Palette::ColorRole, brush : QBrush*) : Void
    fun bg_QPalette_isBrushSet_QPalette__ColorGroup_QPalette__ColorRole(_self_ : Binding::QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole) : Bool
    fun bg_QPalette_setBrush_QPalette__ColorGroup_QPalette__ColorRole_const_QBrush_R(_self_ : Binding::QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole, brush : QBrush*) : Void
    fun bg_QPalette_setColorGroup_QPalette__ColorGroup_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(_self_ : Binding::QPalette*, cr : Palette::ColorGroup, window_text : QBrush*, button : QBrush*, light : QBrush*, dark : QBrush*, mid : QBrush*, text : QBrush*, bright_text : QBrush*, base : QBrush*, window : QBrush*) : Void
    fun bg_QPalette_isEqual_QPalette__ColorGroup_QPalette__ColorGroup(_self_ : Binding::QPalette*, cr1 : Palette::ColorGroup, cr2 : Palette::ColorGroup) : Bool
    fun bg_QPalette_color_QPalette__ColorRole(_self_ : Binding::QPalette*, cr : Palette::ColorRole) : Binding::QColor*
    fun bg_QPalette_brush_QPalette__ColorRole(_self_ : Binding::QPalette*, cr : Palette::ColorRole) : Binding::QBrush*
    fun bg_QPalette_foreground_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_windowText_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_button_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_light_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_dark_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_mid_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_text_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_base_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_alternateBase_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_toolTipBase_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_toolTipText_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_background_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_window_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_midlight_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_brightText_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_buttonText_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_shadow_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_highlight_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_highlightedText_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_link_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_linkVisited_(_self_ : Binding::QPalette*) : Binding::QBrush*
    fun bg_QPalette_isCopyOf_const_QPalette_R(_self_ : Binding::QPalette*, p : QPalette*) : Bool
    fun bg_QPalette_cacheKey_(_self_ : Binding::QPalette*) : Int64
    fun bg_QPalette_resolve_const_QPalette_R(_self_ : Binding::QPalette*, unnamed_arg_0 : QPalette*) : Binding::QPalette*
    fun bg_QPalette_resolve_(_self_ : Binding::QPalette*) : UInt32
    fun bg_QPalette_resolve_uint(_self_ : Binding::QPalette*, mask : UInt32) : Void
    fun bg_QPalette_DESTROY_(_self_ : Binding::QPalette*) : Void
    fun bg_QRect_CONSTRUCT_() : Binding::QRect*
    fun bg_QRect_CONSTRUCT_const_QPoint_R_const_QPoint_R(topleft : QPoint, bottomright : QPoint) : Binding::QRect*
    fun bg_QRect_CONSTRUCT_const_QPoint_R_const_QSize_R(topleft : QPoint, size : QSize*) : Binding::QRect*
    fun bg_QRect_CONSTRUCT_int_int_int_int(left : Int32, top : Int32, width : Int32, height : Int32) : Binding::QRect*
    fun bg_QRect_isNull_(_self_ : Binding::QRect*) : Bool
    fun bg_QRect_isEmpty_(_self_ : Binding::QRect*) : Bool
    fun bg_QRect_isValid_(_self_ : Binding::QRect*) : Bool
    fun bg_QRect_left_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_top_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_right_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_bottom_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_normalized_(_self_ : Binding::QRect*) : Binding::QRect*
    fun bg_QRect_x_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_y_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_setLeft_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_setTop_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_setRight_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_setBottom_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_setX_int(_self_ : Binding::QRect*, x : Int32) : Void
    fun bg_QRect_setY_int(_self_ : Binding::QRect*, y : Int32) : Void
    fun bg_QRect_setTopLeft_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_setBottomRight_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_setTopRight_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_setBottomLeft_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_topLeft_(_self_ : Binding::QRect*) : Binding::QPoint
    fun bg_QRect_bottomRight_(_self_ : Binding::QRect*) : Binding::QPoint
    fun bg_QRect_topRight_(_self_ : Binding::QRect*) : Binding::QPoint
    fun bg_QRect_bottomLeft_(_self_ : Binding::QRect*) : Binding::QPoint
    fun bg_QRect_center_(_self_ : Binding::QRect*) : Binding::QPoint
    fun bg_QRect_moveLeft_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_moveTop_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_moveRight_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_moveBottom_int(_self_ : Binding::QRect*, pos : Int32) : Void
    fun bg_QRect_moveTopLeft_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_moveBottomRight_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_moveTopRight_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_moveBottomLeft_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_moveCenter_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_translate_int_int(_self_ : Binding::QRect*, dx : Int32, dy : Int32) : Void
    fun bg_QRect_translate_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_translated_int_int(_self_ : Binding::QRect*, dx : Int32, dy : Int32) : Binding::QRect*
    fun bg_QRect_translated_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Binding::QRect*
    fun bg_QRect_transposed_(_self_ : Binding::QRect*) : Binding::QRect*
    fun bg_QRect_moveTo_int_int(_self_ : Binding::QRect*, x : Int32, t : Int32) : Void
    fun bg_QRect_moveTo_const_QPoint_R(_self_ : Binding::QRect*, p : QPoint) : Void
    fun bg_QRect_setRect_int_int_int_int(_self_ : Binding::QRect*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QRect_getRect_int_X_int_X_int_X_int_X(_self_ : Binding::QRect*, x : Int32*, y : Int32*, w : Int32*, h : Int32*) : Void
    fun bg_QRect_setCoords_int_int_int_int(_self_ : Binding::QRect*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QRect_getCoords_int_X_int_X_int_X_int_X(_self_ : Binding::QRect*, x1 : Int32*, y1 : Int32*, x2 : Int32*, y2 : Int32*) : Void
    fun bg_QRect_adjust_int_int_int_int(_self_ : Binding::QRect*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QRect_adjusted_int_int_int_int(_self_ : Binding::QRect*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Binding::QRect*
    fun bg_QRect_size_(_self_ : Binding::QRect*) : QSize*
    fun bg_QRect_width_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_height_(_self_ : Binding::QRect*) : Int32
    fun bg_QRect_setWidth_int(_self_ : Binding::QRect*, w : Int32) : Void
    fun bg_QRect_setHeight_int(_self_ : Binding::QRect*, h : Int32) : Void
    fun bg_QRect_setSize_const_QSize_R(_self_ : Binding::QRect*, s : QSize*) : Void
    fun bg_QRect_contains_const_QRect_R_bool(_self_ : Binding::QRect*, r : QRect*, proper : Bool) : Bool
    fun bg_QRect_contains_const_QPoint_R_bool(_self_ : Binding::QRect*, p : QPoint, proper : Bool) : Bool
    fun bg_QRect_contains_int_int(_self_ : Binding::QRect*, x : Int32, y : Int32) : Bool
    fun bg_QRect_contains_int_int_bool(_self_ : Binding::QRect*, x : Int32, y : Int32, proper : Bool) : Bool
    fun bg_QRect_united_const_QRect_R(_self_ : Binding::QRect*, other : QRect*) : Binding::QRect*
    fun bg_QRect_intersected_const_QRect_R(_self_ : Binding::QRect*, other : QRect*) : Binding::QRect*
    fun bg_QRect_intersects_const_QRect_R(_self_ : Binding::QRect*, r : QRect*) : Bool
    fun bg_QRect_marginsAdded_const_QMargins_R(_self_ : Binding::QRect*, margins : QMargins*) : Binding::QRect*
    fun bg_QRect_marginsRemoved_const_QMargins_R(_self_ : Binding::QRect*, margins : QMargins*) : Binding::QRect*
    fun bg_QRect_DESTROY_(_self_ : Binding::QRect*) : Void
    fun bg_QRectF_CONSTRUCT_() : Binding::QRectF*
    fun bg_QRectF_CONSTRUCT_const_QPointF_R_const_QSizeF_R(topleft : QPointF, size : QSizeF*) : Binding::QRectF*
    fun bg_QRectF_CONSTRUCT_const_QPointF_R_const_QPointF_R(topleft : QPointF, bottom_right : QPointF) : Binding::QRectF*
    fun bg_QRectF_CONSTRUCT_qreal_qreal_qreal_qreal(left : Float64, top : Float64, width : Float64, height : Float64) : Binding::QRectF*
    fun bg_QRectF_CONSTRUCT_const_QRect_R(rect : QRect*) : Binding::QRectF*
    fun bg_QRectF_isNull_(_self_ : Binding::QRectF*) : Bool
    fun bg_QRectF_isEmpty_(_self_ : Binding::QRectF*) : Bool
    fun bg_QRectF_isValid_(_self_ : Binding::QRectF*) : Bool
    fun bg_QRectF_normalized_(_self_ : Binding::QRectF*) : Binding::QRectF*
    fun bg_QRectF_left_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_top_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_right_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_bottom_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_x_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_y_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_setLeft_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_setTop_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_setRight_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_setBottom_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_setX_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_setY_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_topLeft_(_self_ : Binding::QRectF*) : Binding::QPointF
    fun bg_QRectF_bottomRight_(_self_ : Binding::QRectF*) : Binding::QPointF
    fun bg_QRectF_topRight_(_self_ : Binding::QRectF*) : Binding::QPointF
    fun bg_QRectF_bottomLeft_(_self_ : Binding::QRectF*) : Binding::QPointF
    fun bg_QRectF_center_(_self_ : Binding::QRectF*) : Binding::QPointF
    fun bg_QRectF_setTopLeft_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_setBottomRight_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_setTopRight_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_setBottomLeft_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveLeft_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveTop_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveRight_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveBottom_qreal(_self_ : Binding::QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveTopLeft_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveBottomRight_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveTopRight_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveBottomLeft_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveCenter_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_translate_qreal_qreal(_self_ : Binding::QRectF*, dx : Float64, dy : Float64) : Void
    fun bg_QRectF_translate_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_translated_qreal_qreal(_self_ : Binding::QRectF*, dx : Float64, dy : Float64) : Binding::QRectF*
    fun bg_QRectF_translated_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Binding::QRectF*
    fun bg_QRectF_transposed_(_self_ : Binding::QRectF*) : Binding::QRectF*
    fun bg_QRectF_moveTo_qreal_qreal(_self_ : Binding::QRectF*, x : Float64, y : Float64) : Void
    fun bg_QRectF_moveTo_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Void
    fun bg_QRectF_setRect_qreal_qreal_qreal_qreal(_self_ : Binding::QRectF*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QRectF_getRect_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QRectF*, x : Float64*, y : Float64*, w : Float64*, h : Float64*) : Void
    fun bg_QRectF_setCoords_qreal_qreal_qreal_qreal(_self_ : Binding::QRectF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
    fun bg_QRectF_getCoords_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QRectF*, x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
    fun bg_QRectF_adjust_qreal_qreal_qreal_qreal(_self_ : Binding::QRectF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
    fun bg_QRectF_adjusted_qreal_qreal_qreal_qreal(_self_ : Binding::QRectF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Binding::QRectF*
    fun bg_QRectF_size_(_self_ : Binding::QRectF*) : QSizeF*
    fun bg_QRectF_width_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_height_(_self_ : Binding::QRectF*) : Float64
    fun bg_QRectF_setWidth_qreal(_self_ : Binding::QRectF*, w : Float64) : Void
    fun bg_QRectF_setHeight_qreal(_self_ : Binding::QRectF*, h : Float64) : Void
    fun bg_QRectF_setSize_const_QSizeF_R(_self_ : Binding::QRectF*, s : QSizeF*) : Void
    fun bg_QRectF_contains_const_QRectF_R(_self_ : Binding::QRectF*, r : QRectF*) : Bool
    fun bg_QRectF_contains_const_QPointF_R(_self_ : Binding::QRectF*, p : QPointF) : Bool
    fun bg_QRectF_contains_qreal_qreal(_self_ : Binding::QRectF*, x : Float64, y : Float64) : Bool
    fun bg_QRectF_united_const_QRectF_R(_self_ : Binding::QRectF*, other : QRectF*) : Binding::QRectF*
    fun bg_QRectF_intersected_const_QRectF_R(_self_ : Binding::QRectF*, other : QRectF*) : Binding::QRectF*
    fun bg_QRectF_intersects_const_QRectF_R(_self_ : Binding::QRectF*, r : QRectF*) : Bool
    fun bg_QRectF_marginsAdded_const_QMarginsF_R(_self_ : Binding::QRectF*, margins : QMarginsF*) : Binding::QRectF*
    fun bg_QRectF_marginsRemoved_const_QMarginsF_R(_self_ : Binding::QRectF*, margins : QMarginsF*) : Binding::QRectF*
    fun bg_QRectF_toRect_(_self_ : Binding::QRectF*) : Binding::QRect*
    fun bg_QRectF_toAlignedRect_(_self_ : Binding::QRectF*) : Binding::QRect*
    fun bg_QRectF_DESTROY_(_self_ : Binding::QRectF*) : Void
    fun bg_QKeySequence_CONSTRUCT_() : Binding::QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(key : CrystalString, format : KeySequence::SequenceFormat) : Binding::QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_int_int_int_int(k1 : Int32, k2 : Int32, k3 : Int32, k4 : Int32) : Binding::QKeySequence*
    fun bg_QKeySequence_CONSTRUCT_QKeySequence__StandardKey(key : KeySequence::StandardKey) : Binding::QKeySequence*
    fun bg_QKeySequence_count_(_self_ : Binding::QKeySequence*) : Int32
    fun bg_QKeySequence_isEmpty_(_self_ : Binding::QKeySequence*) : Bool
    fun bg_QKeySequence_toString_QKeySequence__SequenceFormat(_self_ : Binding::QKeySequence*, format : KeySequence::SequenceFormat) : Binding::CrystalString
    fun bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(str : CrystalString, format : KeySequence::SequenceFormat) : Binding::QKeySequence*
    fun bg_QKeySequence_listFromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(str : CrystalString, format : KeySequence::SequenceFormat) : Void*
    fun bg_QKeySequence_listToString_STATIC_const_QList_QKeySequence__R_QKeySequence__SequenceFormat(list : Void*, format : KeySequence::SequenceFormat) : Binding::CrystalString
    fun bg_QKeySequence_matches_const_QKeySequence_R(_self_ : Binding::QKeySequence*, seq : QKeySequence*) : KeySequence::SequenceMatch
    fun bg_QKeySequence_mnemonic_STATIC_const_QString_R(text : CrystalString) : Binding::QKeySequence*
    fun bg_QKeySequence_keyBindings_STATIC_QKeySequence__StandardKey(key : KeySequence::StandardKey) : Void*
    fun bg_QKeySequence_swap_QKeySequence_R(_self_ : Binding::QKeySequence*, other : QKeySequence*) : Void
    fun bg_QKeySequence_isDetached_(_self_ : Binding::QKeySequence*) : Bool
    fun bg_QKeySequence_DESTROY_(_self_ : Binding::QKeySequence*) : Void
    fun bg_QLineEdit_metaObject_(_self_ : Binding::QLineEdit*) : QMetaObject*
    fun bg_QLineEdit_qt_metacast_const_char_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QLineEdit*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QLineEdit_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QLineEdit*
    fun bg_QLineEdit_CONSTRUCT_const_QString_R_QWidget_X(unnamed_arg_0 : CrystalString, parent : QWidget*) : Binding::QLineEdit*
    fun bg_QLineEdit_text_(_self_ : Binding::QLineEdit*) : Binding::CrystalString
    fun bg_QLineEdit_displayText_(_self_ : Binding::QLineEdit*) : Binding::CrystalString
    fun bg_QLineEdit_placeholderText_(_self_ : Binding::QLineEdit*) : Binding::CrystalString
    fun bg_QLineEdit_setPlaceholderText_const_QString_R(_self_ : Binding::QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_maxLength_(_self_ : Binding::QLineEdit*) : Int32
    fun bg_QLineEdit_setMaxLength_int(_self_ : Binding::QLineEdit*, unnamed_arg_0 : Int32) : Void
    fun bg_QLineEdit_setFrame_bool(_self_ : Binding::QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_hasFrame_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_setClearButtonEnabled_bool(_self_ : Binding::QLineEdit*, enable : Bool) : Void
    fun bg_QLineEdit_isClearButtonEnabled_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_echoMode_(_self_ : Binding::QLineEdit*) : LineEdit::EchoMode
    fun bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(_self_ : Binding::QLineEdit*, unnamed_arg_0 : LineEdit::EchoMode) : Void
    fun bg_QLineEdit_isReadOnly_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_setReadOnly_bool(_self_ : Binding::QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_setValidator_const_QValidator_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QValidator*) : Void
    fun bg_QLineEdit_validator_(_self_ : Binding::QLineEdit*) : QValidator*
    fun bg_QLineEdit_setCompleter_QCompleter_X(_self_ : Binding::QLineEdit*, completer : QCompleter*) : Void
    fun bg_QLineEdit_completer_(_self_ : Binding::QLineEdit*) : QCompleter*
    fun bg_QLineEdit_sizeHint_(_self_ : Binding::QLineEdit*) : QSize*
    fun bg_QLineEdit_minimumSizeHint_(_self_ : Binding::QLineEdit*) : QSize*
    fun bg_QLineEdit_cursorPosition_(_self_ : Binding::QLineEdit*) : Int32
    fun bg_QLineEdit_setCursorPosition_int(_self_ : Binding::QLineEdit*, unnamed_arg_0 : Int32) : Void
    fun bg_QLineEdit_cursorPositionAt_const_QPoint_R(_self_ : Binding::QLineEdit*, pos : QPoint) : Int32
    fun bg_QLineEdit_setAlignment_Qt__Alignment(_self_ : Binding::QLineEdit*, flag : Alignment) : Void
    fun bg_QLineEdit_alignment_(_self_ : Binding::QLineEdit*) : Alignment
    fun bg_QLineEdit_cursorForward_bool_int(_self_ : Binding::QLineEdit*, mark : Bool, steps : Int32) : Void
    fun bg_QLineEdit_cursorBackward_bool_int(_self_ : Binding::QLineEdit*, mark : Bool, steps : Int32) : Void
    fun bg_QLineEdit_cursorWordForward_bool(_self_ : Binding::QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_cursorWordBackward_bool(_self_ : Binding::QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_backspace_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_del_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_home_bool(_self_ : Binding::QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_end_bool(_self_ : Binding::QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_isModified_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_setModified_bool(_self_ : Binding::QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_setSelection_int_int(_self_ : Binding::QLineEdit*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLineEdit_hasSelectedText_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_selectedText_(_self_ : Binding::QLineEdit*) : Binding::CrystalString
    fun bg_QLineEdit_selectionStart_(_self_ : Binding::QLineEdit*) : Int32
    fun bg_QLineEdit_isUndoAvailable_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_isRedoAvailable_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_setDragEnabled_bool(_self_ : Binding::QLineEdit*, b : Bool) : Void
    fun bg_QLineEdit_dragEnabled_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(_self_ : Binding::QLineEdit*, style : CursorMoveStyle) : Void
    fun bg_QLineEdit_cursorMoveStyle_(_self_ : Binding::QLineEdit*) : CursorMoveStyle
    fun bg_QLineEdit_inputMask_(_self_ : Binding::QLineEdit*) : Binding::CrystalString
    fun bg_QLineEdit_setInputMask_const_QString_R(_self_ : Binding::QLineEdit*, input_mask : CrystalString) : Void
    fun bg_QLineEdit_hasAcceptableInput_(_self_ : Binding::QLineEdit*) : Bool
    fun bg_QLineEdit_setTextMargins_int_int_int_int(_self_ : Binding::QLineEdit*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QLineEdit_setTextMargins_const_QMargins_R(_self_ : Binding::QLineEdit*, margins : QMargins*) : Void
    fun bg_QLineEdit_getTextMargins_int_X_int_X_int_X_int_X(_self_ : Binding::QLineEdit*, left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
    fun bg_QLineEdit_textMargins_(_self_ : Binding::QLineEdit*) : QMargins*
    fun bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(_self_ : Binding::QLineEdit*, action : QAction*, position : LineEdit::ActionPosition) : Void
    fun bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(_self_ : Binding::QLineEdit*, icon : QIcon*, position : LineEdit::ActionPosition) : Binding::QAction*
    fun bg_QLineEdit_setText_const_QString_R(_self_ : Binding::QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_clear_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_selectAll_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_undo_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_redo_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_cut_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_copy_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_paste_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_deselect_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_insert_const_QString_R(_self_ : Binding::QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_createStandardContextMenu_(_self_ : Binding::QLineEdit*) : Binding::QMenu*
    fun bg_QLineEdit_textChanged_const_QString_R(_self_ : Binding::QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_textChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QLineEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLineEdit_textEdited_const_QString_R(_self_ : Binding::QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_textEdited_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QLineEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLineEdit_cursorPositionChanged_int_int(_self_ : Binding::QLineEdit*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLineEdit_cursorPositionChanged_CONNECT_CrystalProc_void__int__int_(_self_ : Binding::QLineEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLineEdit_returnPressed_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_returnPressed_CONNECT_CrystalProc_void_(_self_ : Binding::QLineEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLineEdit_editingFinished_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_editingFinished_CONNECT_CrystalProc_void_(_self_ : Binding::QLineEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLineEdit_selectionChanged_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QLineEdit_selectionChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QLineEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QLineEdit_mousePressEvent_QMouseEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_keyPressEvent_QKeyEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QLineEdit_focusInEvent_QFocusEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_focusOutEvent_QFocusEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_paintEvent_QPaintEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(_self_ : Binding::QLineEdit*, e : QDragMoveEvent*) : Void
    fun bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(_self_ : Binding::QLineEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QLineEdit_dropEvent_QDropEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QLineEdit_changeEvent_QEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(_self_ : Binding::QLineEdit*, option : QStyleOptionFrame*) : Void
    fun bg_QLineEdit_event_QEvent_X(_self_ : Binding::QLineEdit*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QLineEdit_cursorRect_(_self_ : Binding::QLineEdit*) : Binding::QRect*
    fun bg_QLineEdit_DESTROY_(_self_ : Binding::QLineEdit*) : Void
    fun bg_QTextEdit_metaObject_(_self_ : Binding::QTextEdit*) : QMetaObject*
    fun bg_QTextEdit_qt_metacast_const_char_X(_self_ : Binding::QTextEdit*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QTextEdit*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTextEdit_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QTextEdit*
    fun bg_QTextEdit_CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : Binding::QTextEdit*
    fun bg_QTextEdit_setDocument_QTextDocument_X(_self_ : Binding::QTextEdit*, document : QTextDocument*) : Void
    fun bg_QTextEdit_document_(_self_ : Binding::QTextEdit*) : Binding::QTextDocument*
    fun bg_QTextEdit_setPlaceholderText_const_QString_R(_self_ : Binding::QTextEdit*, placeholder_text : CrystalString) : Void
    fun bg_QTextEdit_placeholderText_(_self_ : Binding::QTextEdit*) : Binding::CrystalString
    fun bg_QTextEdit_setTextCursor_const_QTextCursor_R(_self_ : Binding::QTextEdit*, cursor : QTextCursor*) : Void
    fun bg_QTextEdit_textCursor_(_self_ : Binding::QTextEdit*) : Binding::QTextCursor*
    fun bg_QTextEdit_isReadOnly_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_setReadOnly_bool(_self_ : Binding::QTextEdit*, ro : Bool) : Void
    fun bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : Binding::QTextEdit*, flags : TextInteractionFlags) : Void
    fun bg_QTextEdit_textInteractionFlags_(_self_ : Binding::QTextEdit*) : TextInteractionFlags
    fun bg_QTextEdit_fontPointSize_(_self_ : Binding::QTextEdit*) : Float64
    fun bg_QTextEdit_fontFamily_(_self_ : Binding::QTextEdit*) : Binding::CrystalString
    fun bg_QTextEdit_fontWeight_(_self_ : Binding::QTextEdit*) : Int32
    fun bg_QTextEdit_fontUnderline_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_fontItalic_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_textColor_(_self_ : Binding::QTextEdit*) : Binding::QColor*
    fun bg_QTextEdit_textBackgroundColor_(_self_ : Binding::QTextEdit*) : Binding::QColor*
    fun bg_QTextEdit_currentFont_(_self_ : Binding::QTextEdit*) : Binding::QFont*
    fun bg_QTextEdit_alignment_(_self_ : Binding::QTextEdit*) : Alignment
    fun bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(_self_ : Binding::QTextEdit*, modifier : QTextCharFormat*) : Void
    fun bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(_self_ : Binding::QTextEdit*, format : QTextCharFormat*) : Void
    fun bg_QTextEdit_currentCharFormat_(_self_ : Binding::QTextEdit*) : Binding::QTextCharFormat*
    fun bg_QTextEdit_autoFormatting_(_self_ : Binding::QTextEdit*) : TextEdit::AutoFormatting
    fun bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(_self_ : Binding::QTextEdit*, features : TextEdit::AutoFormatting) : Void
    fun bg_QTextEdit_tabChangesFocus_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_setTabChangesFocus_bool(_self_ : Binding::QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setDocumentTitle_const_QString_R(_self_ : Binding::QTextEdit*, title : CrystalString) : Void
    fun bg_QTextEdit_documentTitle_(_self_ : Binding::QTextEdit*) : Binding::CrystalString
    fun bg_QTextEdit_isUndoRedoEnabled_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_setUndoRedoEnabled_bool(_self_ : Binding::QTextEdit*, enable : Bool) : Void
    fun bg_QTextEdit_lineWrapMode_(_self_ : Binding::QTextEdit*) : TextEdit::LineWrapMode
    fun bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(_self_ : Binding::QTextEdit*, mode : TextEdit::LineWrapMode) : Void
    fun bg_QTextEdit_lineWrapColumnOrWidth_(_self_ : Binding::QTextEdit*) : Int32
    fun bg_QTextEdit_setLineWrapColumnOrWidth_int(_self_ : Binding::QTextEdit*, w : Int32) : Void
    fun bg_QTextEdit_wordWrapMode_(_self_ : Binding::QTextEdit*) : TextOption::WrapMode
    fun bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(_self_ : Binding::QTextEdit*, policy : TextOption::WrapMode) : Void
    fun bg_QTextEdit_find_const_QString_R(_self_ : Binding::QTextEdit*, exp : CrystalString) : Bool
    fun bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(_self_ : Binding::QTextEdit*, exp : CrystalString, options : TextDocument::FindFlags) : Bool
    fun bg_QTextEdit_find_const_QRegExp_R(_self_ : Binding::QTextEdit*, exp : QRegExp*) : Bool
    fun bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(_self_ : Binding::QTextEdit*, exp : QRegExp*, options : TextDocument::FindFlags) : Bool
    fun bg_QTextEdit_toPlainText_(_self_ : Binding::QTextEdit*) : Binding::CrystalString
    fun bg_QTextEdit_toHtml_(_self_ : Binding::QTextEdit*) : Binding::CrystalString
    fun bg_QTextEdit_ensureCursorVisible_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_createStandardContextMenu_(_self_ : Binding::QTextEdit*) : Binding::QMenu*
    fun bg_QTextEdit_createStandardContextMenu_const_QPoint_R(_self_ : Binding::QTextEdit*, position : QPoint) : Binding::QMenu*
    fun bg_QTextEdit_cursorForPosition_const_QPoint_R(_self_ : Binding::QTextEdit*, pos : QPoint) : Binding::QTextCursor*
    fun bg_QTextEdit_cursorRect_const_QTextCursor_R(_self_ : Binding::QTextEdit*, cursor : QTextCursor*) : Binding::QRect*
    fun bg_QTextEdit_cursorRect_(_self_ : Binding::QTextEdit*) : Binding::QRect*
    fun bg_QTextEdit_anchorAt_const_QPoint_R(_self_ : Binding::QTextEdit*, pos : QPoint) : Binding::CrystalString
    fun bg_QTextEdit_overwriteMode_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_setOverwriteMode_bool(_self_ : Binding::QTextEdit*, overwrite : Bool) : Void
    fun bg_QTextEdit_tabStopWidth_(_self_ : Binding::QTextEdit*) : Int32
    fun bg_QTextEdit_setTabStopWidth_int(_self_ : Binding::QTextEdit*, width : Int32) : Void
    fun bg_QTextEdit_cursorWidth_(_self_ : Binding::QTextEdit*) : Int32
    fun bg_QTextEdit_setCursorWidth_int(_self_ : Binding::QTextEdit*, width : Int32) : Void
    fun bg_QTextEdit_acceptRichText_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_setAcceptRichText_bool(_self_ : Binding::QTextEdit*, accept : Bool) : Void
    fun bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(_self_ : Binding::QTextEdit*, operation : TextCursor::MoveOperation, mode : TextCursor::MoveMode) : Void
    fun bg_QTextEdit_canPaste_(_self_ : Binding::QTextEdit*) : Bool
    fun bg_QTextEdit_print_QPagedPaintDevice_X(_self_ : Binding::QTextEdit*, printer : QPagedPaintDevice*) : Void
    fun bg_QTextEdit_setFontPointSize_qreal(_self_ : Binding::QTextEdit*, s : Float64) : Void
    fun bg_QTextEdit_setFontFamily_const_QString_R(_self_ : Binding::QTextEdit*, font_family : CrystalString) : Void
    fun bg_QTextEdit_setFontWeight_int(_self_ : Binding::QTextEdit*, w : Int32) : Void
    fun bg_QTextEdit_setFontUnderline_bool(_self_ : Binding::QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setFontItalic_bool(_self_ : Binding::QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setTextColor_const_QColor_R(_self_ : Binding::QTextEdit*, c : QColor*) : Void
    fun bg_QTextEdit_setTextBackgroundColor_const_QColor_R(_self_ : Binding::QTextEdit*, c : QColor*) : Void
    fun bg_QTextEdit_setCurrentFont_const_QFont_R(_self_ : Binding::QTextEdit*, f : QFont*) : Void
    fun bg_QTextEdit_setAlignment_Qt__Alignment(_self_ : Binding::QTextEdit*, a : Alignment) : Void
    fun bg_QTextEdit_setPlainText_const_QString_R(_self_ : Binding::QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_setHtml_const_QString_R(_self_ : Binding::QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_setText_const_QString_R(_self_ : Binding::QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_cut_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_copy_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_paste_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_undo_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_redo_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_clear_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_selectAll_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_insertPlainText_const_QString_R(_self_ : Binding::QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_insertHtml_const_QString_R(_self_ : Binding::QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_append_const_QString_R(_self_ : Binding::QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_scrollToAnchor_const_QString_R(_self_ : Binding::QTextEdit*, name : CrystalString) : Void
    fun bg_QTextEdit_zoomIn_int(_self_ : Binding::QTextEdit*, range : Int32) : Void
    fun bg_QTextEdit_zoomOut_int(_self_ : Binding::QTextEdit*, range : Int32) : Void
    fun bg_QTextEdit_textChanged_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_textChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QTextEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextEdit_undoAvailable_bool(_self_ : Binding::QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_undoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QTextEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextEdit_redoAvailable_bool(_self_ : Binding::QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_redoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QTextEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(_self_ : Binding::QTextEdit*, format : QTextCharFormat*) : Void
    fun bg_QTextEdit_currentCharFormatChanged_CONNECT_CrystalProc_void__const_QTextCharFormatR_(_self_ : Binding::QTextEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextEdit_copyAvailable_bool(_self_ : Binding::QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_copyAvailable_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QTextEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextEdit_selectionChanged_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_selectionChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QTextEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextEdit_cursorPositionChanged_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QTextEdit_cursorPositionChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QTextEdit*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextEdit_event_QEvent_X(_self_ : Binding::QTextEdit*, e : QEvent*) : Bool
    fun bg_QTextEdit_timerEvent_QTimerEvent_X(_self_ : Binding::QTextEdit*, e : QTimerEvent*) : Void
    fun bg_QTextEdit_keyPressEvent_QKeyEvent_X(_self_ : Binding::QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_resizeEvent_QResizeEvent_X(_self_ : Binding::QTextEdit*, e : QResizeEvent*) : Void
    fun bg_QTextEdit_paintEvent_QPaintEvent_X(_self_ : Binding::QTextEdit*, e : QPaintEvent*) : Void
    fun bg_QTextEdit_mousePressEvent_QMouseEvent_X(_self_ : Binding::QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(_self_ : Binding::QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_focusNextPrevChild_bool(_self_ : Binding::QTextEdit*, next_ : Bool) : Bool
    fun bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QTextEdit*, e : QContextMenuEvent*) : Void
    fun bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(_self_ : Binding::QTextEdit*, e : QDragEnterEvent*) : Void
    fun bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(_self_ : Binding::QTextEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(_self_ : Binding::QTextEdit*, e : QDragMoveEvent*) : Void
    fun bg_QTextEdit_dropEvent_QDropEvent_X(_self_ : Binding::QTextEdit*, e : QDropEvent*) : Void
    fun bg_QTextEdit_focusInEvent_QFocusEvent_X(_self_ : Binding::QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_focusOutEvent_QFocusEvent_X(_self_ : Binding::QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_showEvent_QShowEvent_X(_self_ : Binding::QTextEdit*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTextEdit_changeEvent_QEvent_X(_self_ : Binding::QTextEdit*, e : QEvent*) : Void
    fun bg_QTextEdit_wheelEvent_QWheelEvent_X(_self_ : Binding::QTextEdit*, e : QWheelEvent*) : Void
    fun bg_QTextEdit_createMimeDataFromSelection_(_self_ : Binding::QTextEdit*) : Binding::QMimeData*
    fun bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(_self_ : Binding::QTextEdit*, source : QMimeData*) : Bool
    fun bg_QTextEdit_insertFromMimeData_const_QMimeData_X(_self_ : Binding::QTextEdit*, source : QMimeData*) : Void
    fun bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(_self_ : Binding::QTextEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QTextEdit_CONSTRUCT_QTextEditPrivate_R_QWidget_X(dd : QTextEditPrivate*, parent : QWidget*) : Binding::QTextEdit*
    fun bg_QTextEdit_scrollContentsBy_int_int(_self_ : Binding::QTextEdit*, dx : Int32, dy : Int32) : Void
    fun bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(_self_ : Binding::QTextEdit*, cursor : QTextCursor*) : Void
    fun bg_QTextEdit_zoomInF_float(_self_ : Binding::QTextEdit*, range : Float32) : Void
    fun bg_QTextEdit_DESTROY_(_self_ : Binding::QTextEdit*) : Void
    fun bg_QFileDialog_metaObject_(_self_ : Binding::QFileDialog*) : QMetaObject*
    fun bg_QFileDialog_qt_metacast_const_char_X(_self_ : Binding::QFileDialog*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QFileDialog*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QFileDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : Binding::QFileDialog*
    fun bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, directory : CrystalString, filter : CrystalString) : Binding::QFileDialog*
    fun bg_QFileDialog_setDirectory_const_QString_R(_self_ : Binding::QFileDialog*, directory : CrystalString) : Void
    fun bg_QFileDialog_setDirectory_const_QDir_R(_self_ : Binding::QFileDialog*, directory : QDir*) : Void
    fun bg_QFileDialog_directory_(_self_ : Binding::QFileDialog*) : Binding::QDir*
    fun bg_QFileDialog_setDirectoryUrl_const_QUrl_R(_self_ : Binding::QFileDialog*, directory : QUrl*) : Void
    fun bg_QFileDialog_directoryUrl_(_self_ : Binding::QFileDialog*) : Binding::QUrl*
    fun bg_QFileDialog_selectFile_const_QString_R(_self_ : Binding::QFileDialog*, filename : CrystalString) : Void
    fun bg_QFileDialog_selectedFiles_(_self_ : Binding::QFileDialog*) : Void*
    fun bg_QFileDialog_selectUrl_const_QUrl_R(_self_ : Binding::QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_selectedUrls_(_self_ : Binding::QFileDialog*) : Void*
    fun bg_QFileDialog_setNameFilterDetailsVisible_bool(_self_ : Binding::QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_isNameFilterDetailsVisible_(_self_ : Binding::QFileDialog*) : Bool
    fun bg_QFileDialog_setNameFilter_const_QString_R(_self_ : Binding::QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_setNameFilters_const_QStringList_R(_self_ : Binding::QFileDialog*, filters : Void*) : Void
    fun bg_QFileDialog_nameFilters_(_self_ : Binding::QFileDialog*) : Void*
    fun bg_QFileDialog_selectNameFilter_const_QString_R(_self_ : Binding::QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_selectedMimeTypeFilter_(_self_ : Binding::QFileDialog*) : Binding::CrystalString
    fun bg_QFileDialog_selectedNameFilter_(_self_ : Binding::QFileDialog*) : Binding::CrystalString
    fun bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(_self_ : Binding::QFileDialog*, filters : Void*) : Void
    fun bg_QFileDialog_mimeTypeFilters_(_self_ : Binding::QFileDialog*) : Void*
    fun bg_QFileDialog_selectMimeTypeFilter_const_QString_R(_self_ : Binding::QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_filter_(_self_ : Binding::QFileDialog*) : Dir::Filters
    fun bg_QFileDialog_setFilter_QDir__Filters(_self_ : Binding::QFileDialog*, filters : Dir::Filters) : Void
    fun bg_QFileDialog_setViewMode_QFileDialog__ViewMode(_self_ : Binding::QFileDialog*, mode : FileDialog::ViewMode) : Void
    fun bg_QFileDialog_viewMode_(_self_ : Binding::QFileDialog*) : FileDialog::ViewMode
    fun bg_QFileDialog_setFileMode_QFileDialog__FileMode(_self_ : Binding::QFileDialog*, mode : FileDialog::FileMode) : Void
    fun bg_QFileDialog_fileMode_(_self_ : Binding::QFileDialog*) : FileDialog::FileMode
    fun bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(_self_ : Binding::QFileDialog*, mode : FileDialog::AcceptMode) : Void
    fun bg_QFileDialog_acceptMode_(_self_ : Binding::QFileDialog*) : FileDialog::AcceptMode
    fun bg_QFileDialog_setReadOnly_bool(_self_ : Binding::QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_isReadOnly_(_self_ : Binding::QFileDialog*) : Bool
    fun bg_QFileDialog_setResolveSymlinks_bool(_self_ : Binding::QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_resolveSymlinks_(_self_ : Binding::QFileDialog*) : Bool
    fun bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(_self_ : Binding::QFileDialog*, urls : Void*) : Void
    fun bg_QFileDialog_sidebarUrls_(_self_ : Binding::QFileDialog*) : Void*
    fun bg_QFileDialog_saveState_(_self_ : Binding::QFileDialog*) : QByteArray*
    fun bg_QFileDialog_restoreState_const_QByteArray_R(_self_ : Binding::QFileDialog*, state : QByteArray*) : Bool
    fun bg_QFileDialog_setConfirmOverwrite_bool(_self_ : Binding::QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_confirmOverwrite_(_self_ : Binding::QFileDialog*) : Bool
    fun bg_QFileDialog_setDefaultSuffix_const_QString_R(_self_ : Binding::QFileDialog*, suffix : CrystalString) : Void
    fun bg_QFileDialog_defaultSuffix_(_self_ : Binding::QFileDialog*) : Binding::CrystalString
    fun bg_QFileDialog_setHistory_const_QStringList_R(_self_ : Binding::QFileDialog*, paths : Void*) : Void
    fun bg_QFileDialog_history_(_self_ : Binding::QFileDialog*) : Void*
    fun bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(_self_ : Binding::QFileDialog*, delegate : QAbstractItemDelegate*) : Void
    fun bg_QFileDialog_itemDelegate_(_self_ : Binding::QFileDialog*) : QAbstractItemDelegate*
    fun bg_QFileDialog_setIconProvider_QFileIconProvider_X(_self_ : Binding::QFileDialog*, provider : QFileIconProvider*) : Void
    fun bg_QFileDialog_iconProvider_(_self_ : Binding::QFileDialog*) : QFileIconProvider*
    fun bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(_self_ : Binding::QFileDialog*, label : FileDialog::DialogLabel, text : CrystalString) : Void
    fun bg_QFileDialog_labelText_QFileDialog__DialogLabel(_self_ : Binding::QFileDialog*, label : FileDialog::DialogLabel) : Binding::CrystalString
    fun bg_QFileDialog_setSupportedSchemes_const_QStringList_R(_self_ : Binding::QFileDialog*, schemes : Void*) : Void
    fun bg_QFileDialog_supportedSchemes_(_self_ : Binding::QFileDialog*) : Void*
    fun bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(_self_ : Binding::QFileDialog*, model : QAbstractProxyModel*) : Void
    fun bg_QFileDialog_proxyModel_(_self_ : Binding::QFileDialog*) : QAbstractProxyModel*
    fun bg_QFileDialog_setOption_QFileDialog__Option_bool(_self_ : Binding::QFileDialog*, option : FileDialog::Option, on : Bool) : Void
    fun bg_QFileDialog_testOption_QFileDialog__Option(_self_ : Binding::QFileDialog*, option : FileDialog::Option) : Bool
    fun bg_QFileDialog_setOptions_QFileDialog__Options(_self_ : Binding::QFileDialog*, options : FileDialog::Options) : Void
    fun bg_QFileDialog_options_(_self_ : Binding::QFileDialog*) : FileDialog::Options
    fun bg_QFileDialog_open_QObject_X_const_char_X(_self_ : Binding::QFileDialog*, receiver : QObject*, member : UInt8*) : Void
    fun bg_QFileDialog_setVisible_bool(_self_ : Binding::QFileDialog*, visible : Bool) : Void
    fun bg_QFileDialog_fileSelected_const_QString_R(_self_ : Binding::QFileDialog*, file : CrystalString) : Void
    fun bg_QFileDialog_fileSelected_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_filesSelected_const_QStringList_R(_self_ : Binding::QFileDialog*, files : Void*) : Void
    fun bg_QFileDialog_filesSelected_CONNECT_CrystalProc_void__const_QStringListX_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_currentChanged_const_QString_R(_self_ : Binding::QFileDialog*, path : CrystalString) : Void
    fun bg_QFileDialog_currentChanged_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_directoryEntered_const_QString_R(_self_ : Binding::QFileDialog*, directory : CrystalString) : Void
    fun bg_QFileDialog_directoryEntered_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_urlSelected_const_QUrl_R(_self_ : Binding::QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_urlSelected_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_urlsSelected_const_QList_QUrl__R(_self_ : Binding::QFileDialog*, urls : Void*) : Void
    fun bg_QFileDialog_urlsSelected_CONNECT_CrystalProc_void__const_QList_QUrl_X_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_currentUrlChanged_const_QUrl_R(_self_ : Binding::QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_currentUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_directoryUrlEntered_const_QUrl_R(_self_ : Binding::QFileDialog*, directory : QUrl*) : Void
    fun bg_QFileDialog_directoryUrlEntered_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_filterSelected_const_QString_R(_self_ : Binding::QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_filterSelected_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QFileDialog*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : Binding::QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : Binding::QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : Binding::QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : Binding::QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : Binding::QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : Binding::QUrl*
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : Binding::CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(parent : QWidget*, caption : CrystalString, dir : CrystalString, options : FileDialog::Options) : Binding::CrystalString
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : Binding::QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : Binding::QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(parent : QWidget*, caption : CrystalString, dir : QUrl*, options : FileDialog::Options) : Binding::QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, options : FileDialog::Options, supported_schemes : Void*) : Binding::QUrl*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : Void*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : Void*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : Void*
    fun bg_QFileDialog_CONSTRUCT_const_QFileDialogArgs_R(args : QFileDialogArgs*) : Binding::QFileDialog*
    fun bg_QFileDialog_done_int(_self_ : Binding::QFileDialog*, result : Int32) : Void
    fun bg_QFileDialog_accept_(_self_ : Binding::QFileDialog*) : Void
    fun bg_QFileDialog_changeEvent_QEvent_X(_self_ : Binding::QFileDialog*, e : QEvent*) : Void
    fun bg_QFileDialog_DESTROY_(_self_ : Binding::QFileDialog*) : Void
    fun bg_QTextOption_CONSTRUCT_() : Binding::QTextOption*
    fun bg_QTextOption_CONSTRUCT_Qt__Alignment(alignment : Alignment) : Binding::QTextOption*
    fun bg_QTextOption_setAlignment_Qt__Alignment(_self_ : Binding::QTextOption*, alignment : Alignment) : Void
    fun bg_QTextOption_alignment_(_self_ : Binding::QTextOption*) : Alignment
    fun bg_QTextOption_setTextDirection_Qt__LayoutDirection(_self_ : Binding::QTextOption*, a_direction : LayoutDirection) : Void
    fun bg_QTextOption_textDirection_(_self_ : Binding::QTextOption*) : LayoutDirection
    fun bg_QTextOption_setWrapMode_QTextOption__WrapMode(_self_ : Binding::QTextOption*, wrap : TextOption::WrapMode) : Void
    fun bg_QTextOption_wrapMode_(_self_ : Binding::QTextOption*) : TextOption::WrapMode
    fun bg_QTextOption_setFlags_QTextOption__Flags(_self_ : Binding::QTextOption*, flags : TextOption::Flags) : Void
    fun bg_QTextOption_flags_(_self_ : Binding::QTextOption*) : TextOption::Flags
    fun bg_QTextOption_setTabStop_qreal(_self_ : Binding::QTextOption*, tab_stop : Float64) : Void
    fun bg_QTextOption_tabStop_(_self_ : Binding::QTextOption*) : Float64
    fun bg_QTextOption_setTabArray_const_QList_qreal__R(_self_ : Binding::QTextOption*, tab_stops : Void*) : Void
    fun bg_QTextOption_tabArray_(_self_ : Binding::QTextOption*) : Void*
    fun bg_QTextOption_setUseDesignMetrics_bool(_self_ : Binding::QTextOption*, b : Bool) : Void
    fun bg_QTextOption_useDesignMetrics_(_self_ : Binding::QTextOption*) : Bool
    fun bg_QTextOption_DESTROY_(_self_ : Binding::QTextOption*) : Void
    fun bg_QTextDocument_metaObject_(_self_ : Binding::QTextDocument*) : QMetaObject*
    fun bg_QTextDocument_qt_metacast_const_char_X(_self_ : Binding::QTextDocument*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QTextDocument*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QTextDocument_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QTextDocument*
    fun bg_QTextDocument_CONSTRUCT_const_QString_R_QObject_X(text : CrystalString, parent : QObject*) : Binding::QTextDocument*
    fun bg_QTextDocument_clone_QObject_X(_self_ : Binding::QTextDocument*, parent : QObject*) : Binding::QTextDocument*
    fun bg_QTextDocument_isEmpty_(_self_ : Binding::QTextDocument*) : Bool
    fun bg_QTextDocument_clear_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextDocument_setUndoRedoEnabled_bool(_self_ : Binding::QTextDocument*, enable : Bool) : Void
    fun bg_QTextDocument_isUndoRedoEnabled_(_self_ : Binding::QTextDocument*) : Bool
    fun bg_QTextDocument_isUndoAvailable_(_self_ : Binding::QTextDocument*) : Bool
    fun bg_QTextDocument_isRedoAvailable_(_self_ : Binding::QTextDocument*) : Bool
    fun bg_QTextDocument_availableUndoSteps_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_availableRedoSteps_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_revision_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(_self_ : Binding::QTextDocument*, layout : QAbstractTextDocumentLayout*) : Void
    fun bg_QTextDocument_documentLayout_(_self_ : Binding::QTextDocument*) : QAbstractTextDocumentLayout*
    fun bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(_self_ : Binding::QTextDocument*, info : TextDocument::MetaInformation, unnamed_arg_1 : CrystalString) : Void
    fun bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(_self_ : Binding::QTextDocument*, info : TextDocument::MetaInformation) : Binding::CrystalString
    fun bg_QTextDocument_toHtml_(_self_ : Binding::QTextDocument*) : Binding::CrystalString
    fun bg_QTextDocument_toHtml_const_QByteArray_R(_self_ : Binding::QTextDocument*, encoding : QByteArray*) : Binding::CrystalString
    fun bg_QTextDocument_setHtml_const_QString_R(_self_ : Binding::QTextDocument*, html : CrystalString) : Void
    fun bg_QTextDocument_toRawText_(_self_ : Binding::QTextDocument*) : Binding::CrystalString
    fun bg_QTextDocument_toPlainText_(_self_ : Binding::QTextDocument*) : Binding::CrystalString
    fun bg_QTextDocument_setPlainText_const_QString_R(_self_ : Binding::QTextDocument*, text : CrystalString) : Void
    fun bg_QTextDocument_characterAt_int(_self_ : Binding::QTextDocument*, pos : Int32) : QChar*
    fun bg_QTextDocument_find_const_QString_R_int(_self_ : Binding::QTextDocument*, sub_string : CrystalString, from : Int32) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(_self_ : Binding::QTextDocument*, sub_string : CrystalString, from : Int32, options : TextDocument::FindFlags) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(_self_ : Binding::QTextDocument*, sub_string : CrystalString, cursor : QTextCursor*) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : Binding::QTextDocument*, sub_string : CrystalString, cursor : QTextCursor*, options : TextDocument::FindFlags) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_int(_self_ : Binding::QTextDocument*, expr : QRegExp*, from : Int32) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(_self_ : Binding::QTextDocument*, expr : QRegExp*, from : Int32, options : TextDocument::FindFlags) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(_self_ : Binding::QTextDocument*, expr : QRegExp*, cursor : QTextCursor*) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : Binding::QTextDocument*, expr : QRegExp*, cursor : QTextCursor*, options : TextDocument::FindFlags) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_int(_self_ : Binding::QTextDocument*, expr : QRegularExpression*, from : Int32) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(_self_ : Binding::QTextDocument*, expr : QRegularExpression*, from : Int32, options : TextDocument::FindFlags) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(_self_ : Binding::QTextDocument*, expr : QRegularExpression*, cursor : QTextCursor*) : Binding::QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : Binding::QTextDocument*, expr : QRegularExpression*, cursor : QTextCursor*, options : TextDocument::FindFlags) : Binding::QTextCursor*
    fun bg_QTextDocument_frameAt_int(_self_ : Binding::QTextDocument*, pos : Int32) : QTextFrame*
    fun bg_QTextDocument_rootFrame_(_self_ : Binding::QTextDocument*) : QTextFrame*
    fun bg_QTextDocument_object_int(_self_ : Binding::QTextDocument*, object_index : Int32) : QTextObject*
    fun bg_QTextDocument_objectForFormat_const_QTextFormat_R(_self_ : Binding::QTextDocument*, unnamed_arg_0 : QTextFormat*) : QTextObject*
    fun bg_QTextDocument_findBlock_int(_self_ : Binding::QTextDocument*, pos : Int32) : QTextBlock*
    fun bg_QTextDocument_findBlockByNumber_int(_self_ : Binding::QTextDocument*, block_number : Int32) : QTextBlock*
    fun bg_QTextDocument_findBlockByLineNumber_int(_self_ : Binding::QTextDocument*, block_number : Int32) : QTextBlock*
    fun bg_QTextDocument_begin_(_self_ : Binding::QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_end_(_self_ : Binding::QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_firstBlock_(_self_ : Binding::QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_lastBlock_(_self_ : Binding::QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_setPageSize_const_QSizeF_R(_self_ : Binding::QTextDocument*, size : QSizeF*) : Void
    fun bg_QTextDocument_pageSize_(_self_ : Binding::QTextDocument*) : QSizeF*
    fun bg_QTextDocument_setDefaultFont_const_QFont_R(_self_ : Binding::QTextDocument*, font : QFont*) : Void
    fun bg_QTextDocument_defaultFont_(_self_ : Binding::QTextDocument*) : Binding::QFont*
    fun bg_QTextDocument_pageCount_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_isModified_(_self_ : Binding::QTextDocument*) : Bool
    fun bg_QTextDocument_print_QPagedPaintDevice_X(_self_ : Binding::QTextDocument*, printer : QPagedPaintDevice*) : Void
    fun bg_QTextDocument_allFormats_(_self_ : Binding::QTextDocument*) : Void*
    fun bg_QTextDocument_markContentsDirty_int_int(_self_ : Binding::QTextDocument*, from : Int32, length : Int32) : Void
    fun bg_QTextDocument_setUseDesignMetrics_bool(_self_ : Binding::QTextDocument*, b : Bool) : Void
    fun bg_QTextDocument_useDesignMetrics_(_self_ : Binding::QTextDocument*) : Bool
    fun bg_QTextDocument_drawContents_QPainter_X(_self_ : Binding::QTextDocument*, painter : QPainter*) : Void
    fun bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(_self_ : Binding::QTextDocument*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QTextDocument_setTextWidth_qreal(_self_ : Binding::QTextDocument*, width : Float64) : Void
    fun bg_QTextDocument_textWidth_(_self_ : Binding::QTextDocument*) : Float64
    fun bg_QTextDocument_idealWidth_(_self_ : Binding::QTextDocument*) : Float64
    fun bg_QTextDocument_indentWidth_(_self_ : Binding::QTextDocument*) : Float64
    fun bg_QTextDocument_setIndentWidth_qreal(_self_ : Binding::QTextDocument*, width : Float64) : Void
    fun bg_QTextDocument_documentMargin_(_self_ : Binding::QTextDocument*) : Float64
    fun bg_QTextDocument_setDocumentMargin_qreal(_self_ : Binding::QTextDocument*, margin : Float64) : Void
    fun bg_QTextDocument_adjustSize_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextDocument_size_(_self_ : Binding::QTextDocument*) : QSizeF*
    fun bg_QTextDocument_blockCount_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_lineCount_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_characterCount_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_setDefaultStyleSheet_const_QString_R(_self_ : Binding::QTextDocument*, sheet : CrystalString) : Void
    fun bg_QTextDocument_defaultStyleSheet_(_self_ : Binding::QTextDocument*) : Binding::CrystalString
    fun bg_QTextDocument_undo_QTextCursor_X(_self_ : Binding::QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_redo_QTextCursor_X(_self_ : Binding::QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(_self_ : Binding::QTextDocument*, history_to_clear : TextDocument::Stacks) : Void
    fun bg_QTextDocument_maximumBlockCount_(_self_ : Binding::QTextDocument*) : Int32
    fun bg_QTextDocument_setMaximumBlockCount_int(_self_ : Binding::QTextDocument*, maximum : Int32) : Void
    fun bg_QTextDocument_defaultTextOption_(_self_ : Binding::QTextDocument*) : Binding::QTextOption*
    fun bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(_self_ : Binding::QTextDocument*, option : QTextOption*) : Void
    fun bg_QTextDocument_baseUrl_(_self_ : Binding::QTextDocument*) : Binding::QUrl*
    fun bg_QTextDocument_setBaseUrl_const_QUrl_R(_self_ : Binding::QTextDocument*, url : QUrl*) : Void
    fun bg_QTextDocument_defaultCursorMoveStyle_(_self_ : Binding::QTextDocument*) : CursorMoveStyle
    fun bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(_self_ : Binding::QTextDocument*, style : CursorMoveStyle) : Void
    fun bg_QTextDocument_contentsChange_int_int_int(_self_ : Binding::QTextDocument*, from : Int32, chars_removed : Int32, chars_added : Int32) : Void
    fun bg_QTextDocument_contentsChange_CONNECT_CrystalProc_void__int__int__int_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_contentsChanged_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextDocument_contentsChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_undoAvailable_bool(_self_ : Binding::QTextDocument*, unnamed_arg_0 : Bool) : Void
    fun bg_QTextDocument_undoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_redoAvailable_bool(_self_ : Binding::QTextDocument*, unnamed_arg_0 : Bool) : Void
    fun bg_QTextDocument_redoAvailable_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_undoCommandAdded_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextDocument_undoCommandAdded_CONNECT_CrystalProc_void_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_modificationChanged_bool(_self_ : Binding::QTextDocument*, m : Bool) : Void
    fun bg_QTextDocument_modificationChanged_CONNECT_CrystalProc_void__bool_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(_self_ : Binding::QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_cursorPositionChanged_CONNECT_CrystalProc_void__const_QTextCursorR_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_blockCountChanged_int(_self_ : Binding::QTextDocument*, new_block_count : Int32) : Void
    fun bg_QTextDocument_blockCountChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_baseUrlChanged_const_QUrl_R(_self_ : Binding::QTextDocument*, url : QUrl*) : Void
    fun bg_QTextDocument_baseUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_documentLayoutChanged_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextDocument_documentLayoutChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QTextDocument*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QTextDocument_undo_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextDocument_redo_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(_self_ : Binding::QTextDocument*, unnamed_arg_0 : QAbstractUndoItem*) : Void
    fun bg_QTextDocument_setModified_bool(_self_ : Binding::QTextDocument*, m : Bool) : Void
    fun bg_QTextDocument_createObject_const_QTextFormat_R(_self_ : Binding::QTextDocument*, f : QTextFormat*) : QTextObject*
    fun bg_QTextDocument_CONSTRUCT_QTextDocumentPrivate_R_QObject_X(dd : QTextDocumentPrivate*, parent : QObject*) : Binding::QTextDocument*
    fun bg_QTextDocument_docHandle_(_self_ : Binding::QTextDocument*) : QTextDocumentPrivate*
    fun bg_QTextDocument_DESTROY_(_self_ : Binding::QTextDocument*) : Void
    fun bg_QTextCursor_CONSTRUCT_() : Binding::QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextDocument_X(document : QTextDocument*) : Binding::QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextDocumentPrivate_X_int(p : QTextDocumentPrivate*, pos : Int32) : Binding::QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextCursorPrivate_X(d : QTextCursorPrivate*) : Binding::QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_QTextFrame_X(frame : QTextFrame*) : Binding::QTextCursor*
    fun bg_QTextCursor_CONSTRUCT_const_QTextBlock_R(block : QTextBlock*) : Binding::QTextCursor*
    fun bg_QTextCursor_swap_QTextCursor_R(_self_ : Binding::QTextCursor*, other : QTextCursor*) : Void
    fun bg_QTextCursor_isNull_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(_self_ : Binding::QTextCursor*, pos : Int32, mode : TextCursor::MoveMode) : Void
    fun bg_QTextCursor_position_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_positionInBlock_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_anchor_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_insertText_const_QString_R(_self_ : Binding::QTextCursor*, text : CrystalString) : Void
    fun bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(_self_ : Binding::QTextCursor*, text : CrystalString, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(_self_ : Binding::QTextCursor*, op : TextCursor::MoveOperation, unnamed_arg_1 : TextCursor::MoveMode, n : Int32) : Bool
    fun bg_QTextCursor_visualNavigation_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_setVisualNavigation_bool(_self_ : Binding::QTextCursor*, b : Bool) : Void
    fun bg_QTextCursor_setVerticalMovementX_int(_self_ : Binding::QTextCursor*, x : Int32) : Void
    fun bg_QTextCursor_verticalMovementX_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_setKeepPositionOnInsert_bool(_self_ : Binding::QTextCursor*, b : Bool) : Void
    fun bg_QTextCursor_keepPositionOnInsert_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_deleteChar_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_deletePreviousChar_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_select_QTextCursor__SelectionType(_self_ : Binding::QTextCursor*, selection : TextCursor::SelectionType) : Void
    fun bg_QTextCursor_hasSelection_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_hasComplexSelection_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_removeSelectedText_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_clearSelection_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_selectionStart_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_selectionEnd_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_selectedText_(_self_ : Binding::QTextCursor*) : Binding::CrystalString
    fun bg_QTextCursor_selection_(_self_ : Binding::QTextCursor*) : QTextDocumentFragment*
    fun bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(_self_ : Binding::QTextCursor*, first_row : Int32*, num_rows : Int32*, first_column : Int32*, num_columns : Int32*) : Void
    fun bg_QTextCursor_block_(_self_ : Binding::QTextCursor*) : QTextBlock*
    fun bg_QTextCursor_charFormat_(_self_ : Binding::QTextCursor*) : Binding::QTextCharFormat*
    fun bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(_self_ : Binding::QTextCursor*, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(_self_ : Binding::QTextCursor*, modifier : QTextCharFormat*) : Void
    fun bg_QTextCursor_blockFormat_(_self_ : Binding::QTextCursor*) : Binding::QTextBlockFormat*
    fun bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(_self_ : Binding::QTextCursor*, format : QTextBlockFormat*) : Void
    fun bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(_self_ : Binding::QTextCursor*, modifier : QTextBlockFormat*) : Void
    fun bg_QTextCursor_blockCharFormat_(_self_ : Binding::QTextCursor*) : Binding::QTextCharFormat*
    fun bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(_self_ : Binding::QTextCursor*, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(_self_ : Binding::QTextCursor*, modifier : QTextCharFormat*) : Void
    fun bg_QTextCursor_atBlockStart_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_atBlockEnd_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_atStart_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_atEnd_(_self_ : Binding::QTextCursor*) : Bool
    fun bg_QTextCursor_insertBlock_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(_self_ : Binding::QTextCursor*, format : QTextBlockFormat*) : Void
    fun bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(_self_ : Binding::QTextCursor*, format : QTextBlockFormat*, char_format : QTextCharFormat*) : Void
    fun bg_QTextCursor_insertList_const_QTextListFormat_R(_self_ : Binding::QTextCursor*, format : QTextListFormat*) : QTextList*
    fun bg_QTextCursor_insertList_QTextListFormat__Style(_self_ : Binding::QTextCursor*, style : TextListFormat::Style) : QTextList*
    fun bg_QTextCursor_createList_const_QTextListFormat_R(_self_ : Binding::QTextCursor*, format : QTextListFormat*) : QTextList*
    fun bg_QTextCursor_createList_QTextListFormat__Style(_self_ : Binding::QTextCursor*, style : TextListFormat::Style) : QTextList*
    fun bg_QTextCursor_currentList_(_self_ : Binding::QTextCursor*) : QTextList*
    fun bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(_self_ : Binding::QTextCursor*, rows : Int32, cols : Int32, format : QTextTableFormat*) : QTextTable*
    fun bg_QTextCursor_insertTable_int_int(_self_ : Binding::QTextCursor*, rows : Int32, cols : Int32) : QTextTable*
    fun bg_QTextCursor_currentTable_(_self_ : Binding::QTextCursor*) : QTextTable*
    fun bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(_self_ : Binding::QTextCursor*, format : QTextFrameFormat*) : QTextFrame*
    fun bg_QTextCursor_currentFrame_(_self_ : Binding::QTextCursor*) : QTextFrame*
    fun bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(_self_ : Binding::QTextCursor*, fragment : QTextDocumentFragment*) : Void
    fun bg_QTextCursor_insertHtml_const_QString_R(_self_ : Binding::QTextCursor*, html : CrystalString) : Void
    fun bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(_self_ : Binding::QTextCursor*, format : QTextImageFormat*, alignment : TextFrameFormat::Position) : Void
    fun bg_QTextCursor_insertImage_const_QTextImageFormat_R(_self_ : Binding::QTextCursor*, format : QTextImageFormat*) : Void
    fun bg_QTextCursor_insertImage_const_QString_R(_self_ : Binding::QTextCursor*, name : CrystalString) : Void
    fun bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(_self_ : Binding::QTextCursor*, image : QImage*, name : CrystalString) : Void
    fun bg_QTextCursor_beginEditBlock_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_joinPreviousEditBlock_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_endEditBlock_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QTextCursor_isCopyOf_const_QTextCursor_R(_self_ : Binding::QTextCursor*, other : QTextCursor*) : Bool
    fun bg_QTextCursor_blockNumber_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_columnNumber_(_self_ : Binding::QTextCursor*) : Int32
    fun bg_QTextCursor_document_(_self_ : Binding::QTextCursor*) : Binding::QTextDocument*
    fun bg_QTextCursor_DESTROY_(_self_ : Binding::QTextCursor*) : Void
    fun bg_QDir_CONSTRUCT_const_QString_R(path : CrystalString) : Binding::QDir*
    fun bg_QDir_CONSTRUCT_const_QString_R_const_QString_R(path : CrystalString, name_filter : CrystalString) : Binding::QDir*
    fun bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(path : CrystalString, name_filter : CrystalString, sort : Dir::SortFlags) : Binding::QDir*
    fun bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(path : CrystalString, name_filter : CrystalString, sort : Dir::SortFlags, filter : Dir::Filters) : Binding::QDir*
    fun bg_QDir_swap_QDir_R(_self_ : Binding::QDir*, other : QDir*) : Void
    fun bg_QDir_setPath_const_QString_R(_self_ : Binding::QDir*, path : CrystalString) : Void
    fun bg_QDir_path_(_self_ : Binding::QDir*) : Binding::CrystalString
    fun bg_QDir_absolutePath_(_self_ : Binding::QDir*) : Binding::CrystalString
    fun bg_QDir_canonicalPath_(_self_ : Binding::QDir*) : Binding::CrystalString
    fun bg_QDir_addResourceSearchPath_STATIC_const_QString_R(path : CrystalString) : Void
    fun bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(prefix : CrystalString, search_paths : Void*) : Void
    fun bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(prefix : CrystalString, path : CrystalString) : Void
    fun bg_QDir_searchPaths_STATIC_const_QString_R(prefix : CrystalString) : Void*
    fun bg_QDir_dirName_(_self_ : Binding::QDir*) : Binding::CrystalString
    fun bg_QDir_filePath_const_QString_R(_self_ : Binding::QDir*, file_name : CrystalString) : Binding::CrystalString
    fun bg_QDir_absoluteFilePath_const_QString_R(_self_ : Binding::QDir*, file_name : CrystalString) : Binding::CrystalString
    fun bg_QDir_relativeFilePath_const_QString_R(_self_ : Binding::QDir*, file_name : CrystalString) : Binding::CrystalString
    fun bg_QDir_toNativeSeparators_STATIC_const_QString_R(path_name : CrystalString) : Binding::CrystalString
    fun bg_QDir_fromNativeSeparators_STATIC_const_QString_R(path_name : CrystalString) : Binding::CrystalString
    fun bg_QDir_cd_const_QString_R(_self_ : Binding::QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_cdUp_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_nameFilters_(_self_ : Binding::QDir*) : Void*
    fun bg_QDir_setNameFilters_const_QStringList_R(_self_ : Binding::QDir*, name_filters : Void*) : Void
    fun bg_QDir_filter_(_self_ : Binding::QDir*) : Dir::Filters
    fun bg_QDir_setFilter_QDir__Filters(_self_ : Binding::QDir*, filter : Dir::Filters) : Void
    fun bg_QDir_sorting_(_self_ : Binding::QDir*) : Dir::SortFlags
    fun bg_QDir_setSorting_QDir__SortFlags(_self_ : Binding::QDir*, sort : Dir::SortFlags) : Void
    fun bg_QDir_count_(_self_ : Binding::QDir*) : UInt32
    fun bg_QDir_isEmpty_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_isEmpty_QDir__Filters(_self_ : Binding::QDir*, filters : Dir::Filters) : Bool
    fun bg_QDir_nameFiltersFromString_STATIC_const_QString_R(name_filter : CrystalString) : Void*
    fun bg_QDir_entryList_(_self_ : Binding::QDir*) : Void*
    fun bg_QDir_entryList_QDir__Filters(_self_ : Binding::QDir*, filters : Dir::Filters) : Void*
    fun bg_QDir_entryList_QDir__Filters_QDir__SortFlags(_self_ : Binding::QDir*, filters : Dir::Filters, sort : Dir::SortFlags) : Void*
    fun bg_QDir_entryList_const_QStringList_R(_self_ : Binding::QDir*, name_filters : Void*) : Void*
    fun bg_QDir_entryList_const_QStringList_R_QDir__Filters(_self_ : Binding::QDir*, name_filters : Void*, filters : Dir::Filters) : Void*
    fun bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(_self_ : Binding::QDir*, name_filters : Void*, filters : Dir::Filters, sort : Dir::SortFlags) : Void*
    fun bg_QDir_entryInfoList_(_self_ : Binding::QDir*) : QFileInfoList*
    fun bg_QDir_entryInfoList_QDir__Filters(_self_ : Binding::QDir*, filters : Dir::Filters) : QFileInfoList*
    fun bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(_self_ : Binding::QDir*, filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R(_self_ : Binding::QDir*, name_filters : Void*) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(_self_ : Binding::QDir*, name_filters : Void*, filters : Dir::Filters) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(_self_ : Binding::QDir*, name_filters : Void*, filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
    fun bg_QDir_mkdir_const_QString_R(_self_ : Binding::QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_rmdir_const_QString_R(_self_ : Binding::QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_mkpath_const_QString_R(_self_ : Binding::QDir*, dir_path : CrystalString) : Bool
    fun bg_QDir_rmpath_const_QString_R(_self_ : Binding::QDir*, dir_path : CrystalString) : Bool
    fun bg_QDir_removeRecursively_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_isReadable_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_exists_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_isRoot_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_isRelativePath_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_isAbsolutePath_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_isRelative_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_isAbsolute_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_makeAbsolute_(_self_ : Binding::QDir*) : Bool
    fun bg_QDir_remove_const_QString_R(_self_ : Binding::QDir*, file_name : CrystalString) : Bool
    fun bg_QDir_rename_const_QString_R_const_QString_R(_self_ : Binding::QDir*, old_name : CrystalString, new_name : CrystalString) : Bool
    fun bg_QDir_exists_const_QString_R(_self_ : Binding::QDir*, name : CrystalString) : Bool
    fun bg_QDir_drives_STATIC_() : QFileInfoList*
    fun bg_QDir_listSeparator_STATIC_() : QChar*
    fun bg_QDir_separator_STATIC_() : QChar*
    fun bg_QDir_setCurrent_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_current_STATIC_() : Binding::QDir*
    fun bg_QDir_currentPath_STATIC_() : Binding::CrystalString
    fun bg_QDir_home_STATIC_() : Binding::QDir*
    fun bg_QDir_homePath_STATIC_() : Binding::CrystalString
    fun bg_QDir_root_STATIC_() : Binding::QDir*
    fun bg_QDir_rootPath_STATIC_() : Binding::CrystalString
    fun bg_QDir_temp_STATIC_() : Binding::QDir*
    fun bg_QDir_tempPath_STATIC_() : Binding::CrystalString
    fun bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(filters : Void*, file_name : CrystalString) : Bool
    fun bg_QDir_match_STATIC_const_QString_R_const_QString_R(filter : CrystalString, file_name : CrystalString) : Bool
    fun bg_QDir_cleanPath_STATIC_const_QString_R(path : CrystalString) : Binding::CrystalString
    fun bg_QDir_refresh_(_self_ : Binding::QDir*) : Void
    fun bg_QDir_CONSTRUCT_QDirPrivate_R(d : QDirPrivate*) : Binding::QDir*
    fun bg_QDir_DESTROY_(_self_ : Binding::QDir*) : Void
    fun bg_QGraphicsItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_scene_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsScene*
    fun bg_QGraphicsItem_parentItem_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_topLevelItem_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_parentObject_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsObject*
    fun bg_QGraphicsItem_parentWidget_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsWidget*
    fun bg_QGraphicsItem_topLevelWidget_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsWidget*
    fun bg_QGraphicsItem_window_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsWidget*
    fun bg_QGraphicsItem_panel_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_setParentItem_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, parent : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_childItems_(_self_ : Binding::QGraphicsItem*) : Void*
    fun bg_QGraphicsItem_isWidget_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isWindow_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isPanel_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_toGraphicsObject_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsObject*
    fun bg_QGraphicsItem_group_(_self_ : Binding::QGraphicsItem*) : QGraphicsItemGroup*
    fun bg_QGraphicsItem_setGroup_QGraphicsItemGroup_X(_self_ : Binding::QGraphicsItem*, group : QGraphicsItemGroup*) : Void
    fun bg_QGraphicsItem_flags_(_self_ : Binding::QGraphicsItem*) : GraphicsItem::GraphicsItemFlags
    fun bg_QGraphicsItem_setFlag_QGraphicsItem__GraphicsItemFlag_bool(_self_ : Binding::QGraphicsItem*, flag : GraphicsItem::GraphicsItemFlag, enabled : Bool) : Void
    fun bg_QGraphicsItem_setFlags_QGraphicsItem__GraphicsItemFlags(_self_ : Binding::QGraphicsItem*, flags : GraphicsItem::GraphicsItemFlags) : Void
    fun bg_QGraphicsItem_cacheMode_(_self_ : Binding::QGraphicsItem*) : GraphicsItem::CacheMode
    fun bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode(_self_ : Binding::QGraphicsItem*, mode : GraphicsItem::CacheMode) : Void
    fun bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode_const_QSize_R(_self_ : Binding::QGraphicsItem*, mode : GraphicsItem::CacheMode, cache_size : QSize*) : Void
    fun bg_QGraphicsItem_panelModality_(_self_ : Binding::QGraphicsItem*) : GraphicsItem::PanelModality
    fun bg_QGraphicsItem_setPanelModality_QGraphicsItem__PanelModality(_self_ : Binding::QGraphicsItem*, panel_modality : GraphicsItem::PanelModality) : Void
    fun bg_QGraphicsItem_isBlockedByModalPanel_QGraphicsItem_XX(_self_ : Binding::QGraphicsItem*, blocking_panel : QGraphicsItem**) : Bool
    fun bg_QGraphicsItem_toolTip_(_self_ : Binding::QGraphicsItem*) : Binding::CrystalString
    fun bg_QGraphicsItem_setToolTip_const_QString_R(_self_ : Binding::QGraphicsItem*, tool_tip : CrystalString) : Void
    fun bg_QGraphicsItem_cursor_(_self_ : Binding::QGraphicsItem*) : QCursor*
    fun bg_QGraphicsItem_setCursor_const_QCursor_R(_self_ : Binding::QGraphicsItem*, cursor : QCursor*) : Void
    fun bg_QGraphicsItem_hasCursor_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_unsetCursor_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_isVisible_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isVisibleTo_const_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, parent : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setVisible_bool(_self_ : Binding::QGraphicsItem*, visible : Bool) : Void
    fun bg_QGraphicsItem_hide_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_show_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_isEnabled_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setEnabled_bool(_self_ : Binding::QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_isSelected_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setSelected_bool(_self_ : Binding::QGraphicsItem*, selected : Bool) : Void
    fun bg_QGraphicsItem_acceptDrops_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setAcceptDrops_bool(_self_ : Binding::QGraphicsItem*, on : Bool) : Void
    fun bg_QGraphicsItem_opacity_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_effectiveOpacity_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setOpacity_qreal(_self_ : Binding::QGraphicsItem*, opacity : Float64) : Void
    fun bg_QGraphicsItem_graphicsEffect_(_self_ : Binding::QGraphicsItem*) : QGraphicsEffect*
    fun bg_QGraphicsItem_setGraphicsEffect_QGraphicsEffect_X(_self_ : Binding::QGraphicsItem*, effect : QGraphicsEffect*) : Void
    fun bg_QGraphicsItem_acceptedMouseButtons_(_self_ : Binding::QGraphicsItem*) : MouseButtons
    fun bg_QGraphicsItem_setAcceptedMouseButtons_Qt__MouseButtons(_self_ : Binding::QGraphicsItem*, buttons : MouseButtons) : Void
    fun bg_QGraphicsItem_acceptHoverEvents_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setAcceptHoverEvents_bool(_self_ : Binding::QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_acceptTouchEvents_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setAcceptTouchEvents_bool(_self_ : Binding::QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_filtersChildEvents_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setFiltersChildEvents_bool(_self_ : Binding::QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_handlesChildEvents_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setHandlesChildEvents_bool(_self_ : Binding::QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_isActive_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setActive_bool(_self_ : Binding::QGraphicsItem*, active : Bool) : Void
    fun bg_QGraphicsItem_hasFocus_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setFocus_Qt__FocusReason(_self_ : Binding::QGraphicsItem*, focus_reason : FocusReason) : Void
    fun bg_QGraphicsItem_clearFocus_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_focusProxy_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_setFocusProxy_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_focusItem_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_focusScopeItem_(_self_ : Binding::QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_grabMouse_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_ungrabMouse_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_grabKeyboard_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_ungrabKeyboard_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_pos_(_self_ : Binding::QGraphicsItem*) : Binding::QPointF
    fun bg_QGraphicsItem_x_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setX_qreal(_self_ : Binding::QGraphicsItem*, x : Float64) : Void
    fun bg_QGraphicsItem_y_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setY_qreal(_self_ : Binding::QGraphicsItem*, y : Float64) : Void
    fun bg_QGraphicsItem_scenePos_(_self_ : Binding::QGraphicsItem*) : Binding::QPointF
    fun bg_QGraphicsItem_setPos_const_QPointF_R(_self_ : Binding::QGraphicsItem*, pos : QPointF) : Void
    fun bg_QGraphicsItem_setPos_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64) : Void
    fun bg_QGraphicsItem_moveBy_qreal_qreal(_self_ : Binding::QGraphicsItem*, dx : Float64, dy : Float64) : Void
    fun bg_QGraphicsItem_ensureVisible_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_ensureVisible_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : Void
    fun bg_QGraphicsItem_ensureVisible_const_QRectF_R_int(_self_ : Binding::QGraphicsItem*, rect : QRectF*, xmargin : Int32) : Void
    fun bg_QGraphicsItem_ensureVisible_const_QRectF_R_int_int(_self_ : Binding::QGraphicsItem*, rect : QRectF*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsItem_ensureVisible_qreal_qreal_qreal_qreal_int_int(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsItem_matrix_(_self_ : Binding::QGraphicsItem*) : QMatrix*
    fun bg_QGraphicsItem_sceneMatrix_(_self_ : Binding::QGraphicsItem*) : QMatrix*
    fun bg_QGraphicsItem_setMatrix_const_QMatrix_R_bool(_self_ : Binding::QGraphicsItem*, matrix : QMatrix*, combine : Bool) : Void
    fun bg_QGraphicsItem_resetMatrix_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_transform_(_self_ : Binding::QGraphicsItem*) : QTransform*
    fun bg_QGraphicsItem_sceneTransform_(_self_ : Binding::QGraphicsItem*) : QTransform*
    fun bg_QGraphicsItem_deviceTransform_const_QTransform_R(_self_ : Binding::QGraphicsItem*, viewport_transform : QTransform*) : QTransform*
    fun bg_QGraphicsItem_itemTransform_const_QGraphicsItem_X_bool_X(_self_ : Binding::QGraphicsItem*, other : QGraphicsItem*, ok : Bool*) : QTransform*
    fun bg_QGraphicsItem_setTransform_const_QTransform_R_bool(_self_ : Binding::QGraphicsItem*, matrix : QTransform*, combine : Bool) : Void
    fun bg_QGraphicsItem_resetTransform_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_setRotation_qreal(_self_ : Binding::QGraphicsItem*, angle : Float64) : Void
    fun bg_QGraphicsItem_rotation_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setScale_qreal(_self_ : Binding::QGraphicsItem*, scale : Float64) : Void
    fun bg_QGraphicsItem_scale_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_transformations_(_self_ : Binding::QGraphicsItem*) : Void*
    fun bg_QGraphicsItem_setTransformations_const_QList_QGraphicsTransform_X__R(_self_ : Binding::QGraphicsItem*, transformations : Void*) : Void
    fun bg_QGraphicsItem_transformOriginPoint_(_self_ : Binding::QGraphicsItem*) : Binding::QPointF
    fun bg_QGraphicsItem_setTransformOriginPoint_const_QPointF_R(_self_ : Binding::QGraphicsItem*, origin : QPointF) : Void
    fun bg_QGraphicsItem_setTransformOriginPoint_qreal_qreal(_self_ : Binding::QGraphicsItem*, ax : Float64, ay : Float64) : Void
    fun bg_QGraphicsItem_advance_int(_self_ : Binding::QGraphicsItem*, phase : Int32) : Void
    fun bg_QGraphicsItem_zValue_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setZValue_qreal(_self_ : Binding::QGraphicsItem*, z : Float64) : Void
    fun bg_QGraphicsItem_stackBefore_const_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, sibling : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_boundingRect_(_self_ : Binding::QGraphicsItem*) : Binding::QRectF*
    fun bg_QGraphicsItem_childrenBoundingRect_(_self_ : Binding::QGraphicsItem*) : Binding::QRectF*
    fun bg_QGraphicsItem_sceneBoundingRect_(_self_ : Binding::QGraphicsItem*) : Binding::QRectF*
    fun bg_QGraphicsItem_shape_(_self_ : Binding::QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_isClipped_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_clipPath_(_self_ : Binding::QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsItem*, point : QPointF) : Bool
    fun bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsItem*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsItem*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidingItems_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsItem*, mode : ItemSelectionMode) : Void*
    fun bg_QGraphicsItem_isObscured_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isObscured_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : Bool
    fun bg_QGraphicsItem_isObscured_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Bool
    fun bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_opaqueArea_(_self_ : Binding::QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_boundingRegion_const_QTransform_R(_self_ : Binding::QGraphicsItem*, item_to_device_transform : QTransform*) : QRegion*
    fun bg_QGraphicsItem_boundingRegionGranularity_(_self_ : Binding::QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setBoundingRegionGranularity_qreal(_self_ : Binding::QGraphicsItem*, granularity : Float64) : Void
    fun bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsItem_update_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_update_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : Void
    fun bg_QGraphicsItem_update_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, width : Float64, height : Float64) : Void
    fun bg_QGraphicsItem_scroll_qreal_qreal(_self_ : Binding::QGraphicsItem*, dx : Float64, dy : Float64) : Void
    fun bg_QGraphicsItem_scroll_qreal_qreal_const_QRectF_R(_self_ : Binding::QGraphicsItem*, dx : Float64, dy : Float64, rect : QRectF*) : Void
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPointF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, point : QPointF) : Binding::QPointF
    fun bg_QGraphicsItem_mapToParent_const_QPointF_R(_self_ : Binding::QGraphicsItem*, point : QPointF) : Binding::QPointF
    fun bg_QGraphicsItem_mapToScene_const_QPointF_R(_self_ : Binding::QGraphicsItem*, point : QPointF) : Binding::QPointF
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToParent_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToScene_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectToParent_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectToScene_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : Binding::QRectF*
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPolygonF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToParent_const_QPolygonF_R(_self_ : Binding::QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToScene_const_QPolygonF_R(_self_ : Binding::QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPainterPath_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapToParent_const_QPainterPath_R(_self_ : Binding::QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapToScene_const_QPainterPath_R(_self_ : Binding::QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPointF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, point : QPointF) : Binding::QPointF
    fun bg_QGraphicsItem_mapFromParent_const_QPointF_R(_self_ : Binding::QGraphicsItem*, point : QPointF) : Binding::QPointF
    fun bg_QGraphicsItem_mapFromScene_const_QPointF_R(_self_ : Binding::QGraphicsItem*, point : QPointF) : Binding::QPointF
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromParent_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromScene_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectFromParent_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectFromScene_const_QRectF_R(_self_ : Binding::QGraphicsItem*, rect : QRectF*) : Binding::QRectF*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPolygonF_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromParent_const_QPolygonF_R(_self_ : Binding::QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromScene_const_QPolygonF_R(_self_ : Binding::QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPainterPath_R(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapFromParent_const_QPainterPath_R(_self_ : Binding::QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapFromScene_const_QPainterPath_R(_self_ : Binding::QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64) : Binding::QPointF
    fun bg_QGraphicsItem_mapToParent_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64) : Binding::QPointF
    fun bg_QGraphicsItem_mapToScene_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64) : Binding::QPointF
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapToParent_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapToScene_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectToParent_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectToScene_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QRectF*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64) : Binding::QPointF
    fun bg_QGraphicsItem_mapFromParent_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64) : Binding::QPointF
    fun bg_QGraphicsItem_mapFromScene_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64) : Binding::QPointF
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapFromParent_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapFromScene_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectFromParent_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QRectF*
    fun bg_QGraphicsItem_mapRectFromScene_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QRectF*
    fun bg_QGraphicsItem_isAncestorOf_const_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, child : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_commonAncestorItem_const_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, other : QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_isUnderMouse_(_self_ : Binding::QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_inputMethodHints_(_self_ : Binding::QGraphicsItem*) : InputMethodHints
    fun bg_QGraphicsItem_setInputMethodHints_Qt__InputMethodHints(_self_ : Binding::QGraphicsItem*, hints : InputMethodHints) : Void
    fun bg_QGraphicsItem_type_(_self_ : Binding::QGraphicsItem*) : Int32
    fun bg_QGraphicsItem_installSceneEventFilter_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, filter_item : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_removeSceneEventFilter_QGraphicsItem_X(_self_ : Binding::QGraphicsItem*, filter_item : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_updateMicroFocus_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(_self_ : Binding::QGraphicsItem*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_QEvent_X(_self_ : Binding::QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_QFocusEvent_X(_self_ : Binding::QGraphicsItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(_self_ : Binding::QGraphicsItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(_self_ : Binding::QGraphicsItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QGraphicsItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(_self_ : Binding::QGraphicsItem*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(_self_ : Binding::QGraphicsItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsItem_CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd : QGraphicsItemPrivate*, parent : QGraphicsItem*) : Binding::QGraphicsItem*
    fun bg_QGraphicsItem_addToIndex_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_removeFromIndex_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_prepareGeometryChange_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsItem_DESTROY_(_self_ : Binding::QGraphicsItem*) : Void
    fun bg_QGraphicsScene_metaObject_(_self_ : Binding::QGraphicsScene*) : QMetaObject*
    fun bg_QGraphicsScene_qt_metacast_const_char_X(_self_ : Binding::QGraphicsScene*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGraphicsScene*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsScene_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsScene_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QGraphicsScene*
    fun bg_QGraphicsScene_CONSTRUCT_const_QRectF_R_QObject_X(scene_rect : QRectF*, parent : QObject*) : Binding::QGraphicsScene*
    fun bg_QGraphicsScene_CONSTRUCT_qreal_qreal_qreal_qreal_QObject_X(x : Float64, y : Float64, width : Float64, height : Float64, parent : QObject*) : Binding::QGraphicsScene*
    fun bg_QGraphicsScene_sceneRect_(_self_ : Binding::QGraphicsScene*) : Binding::QRectF*
    fun bg_QGraphicsScene_width_(_self_ : Binding::QGraphicsScene*) : Float64
    fun bg_QGraphicsScene_height_(_self_ : Binding::QGraphicsScene*) : Float64
    fun bg_QGraphicsScene_setSceneRect_const_QRectF_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_setSceneRect_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsScene_render_QPainter_X(_self_ : Binding::QGraphicsScene*, painter : QPainter*) : Void
    fun bg_QGraphicsScene_render_QPainter_X_const_QRectF_R(_self_ : Binding::QGraphicsScene*, painter : QPainter*, target : QRectF*) : Void
    fun bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R(_self_ : Binding::QGraphicsScene*, painter : QPainter*, target : QRectF*, source : QRectF*) : Void
    fun bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R_Qt__AspectRatioMode(_self_ : Binding::QGraphicsScene*, painter : QPainter*, target : QRectF*, source : QRectF*, aspect_ratio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsScene_itemIndexMethod_(_self_ : Binding::QGraphicsScene*) : GraphicsScene::ItemIndexMethod
    fun bg_QGraphicsScene_setItemIndexMethod_QGraphicsScene__ItemIndexMethod(_self_ : Binding::QGraphicsScene*, method : GraphicsScene::ItemIndexMethod) : Void
    fun bg_QGraphicsScene_isSortCacheEnabled_(_self_ : Binding::QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_setSortCacheEnabled_bool(_self_ : Binding::QGraphicsScene*, enabled : Bool) : Void
    fun bg_QGraphicsScene_bspTreeDepth_(_self_ : Binding::QGraphicsScene*) : Int32
    fun bg_QGraphicsScene_setBspTreeDepth_int(_self_ : Binding::QGraphicsScene*, depth : Int32) : Void
    fun bg_QGraphicsScene_itemsBoundingRect_(_self_ : Binding::QGraphicsScene*) : Binding::QRectF*
    fun bg_QGraphicsScene_items_Qt__SortOrder(_self_ : Binding::QGraphicsScene*, order : SortOrder) : Void*
    fun bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : Binding::QGraphicsScene*, pos : QPointF, mode : ItemSelectionMode, order : SortOrder) : Void*
    fun bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : Binding::QGraphicsScene*, pos : QPointF, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Void*
    fun bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : Binding::QGraphicsScene*, rect : QRectF*, mode : ItemSelectionMode, order : SortOrder) : Void*
    fun bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Void*
    fun bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : Binding::QGraphicsScene*, polygon : QPolygonF*, mode : ItemSelectionMode, order : SortOrder) : Void*
    fun bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : Binding::QGraphicsScene*, polygon : QPolygonF*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Void*
    fun bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode, order : SortOrder) : Void*
    fun bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Void*
    fun bg_QGraphicsScene_collidingItems_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsScene*, item : QGraphicsItem*, mode : ItemSelectionMode) : Void*
    fun bg_QGraphicsScene_itemAt_const_QPointF_R_const_QTransform_R(_self_ : Binding::QGraphicsScene*, pos : QPointF, device_transform : QTransform*) : Binding::QGraphicsItem*
    fun bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder) : Void*
    fun bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Void*
    fun bg_QGraphicsScene_itemAt_qreal_qreal_const_QTransform_R(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, device_transform : QTransform*) : Binding::QGraphicsItem*
    fun bg_QGraphicsScene_selectedItems_(_self_ : Binding::QGraphicsScene*) : Void*
    fun bg_QGraphicsScene_selectionArea_(_self_ : Binding::QGraphicsScene*) : QPainterPath*
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_const_QTransform_R(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, device_transform : QTransform*) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode_const_QTransform_R(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode, device_transform : QTransform*) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode_const_QTransform_R(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode, device_transform : QTransform*) : Void
    fun bg_QGraphicsScene_createItemGroup_const_QList_QGraphicsItem_X__R(_self_ : Binding::QGraphicsScene*, items : Void*) : QGraphicsItemGroup*
    fun bg_QGraphicsScene_destroyItemGroup_QGraphicsItemGroup_X(_self_ : Binding::QGraphicsScene*, group : QGraphicsItemGroup*) : Void
    fun bg_QGraphicsScene_addItem_QGraphicsItem_X(_self_ : Binding::QGraphicsScene*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsScene_addEllipse_const_QRectF_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*, pen : QPen*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R_const_QBrush_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*, pen : QPen*, brush : QBrush*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addLine_const_QLineF_R(_self_ : Binding::QGraphicsScene*, line : QLineF*) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addLine_const_QLineF_R_const_QPen_R(_self_ : Binding::QGraphicsScene*, line : QLineF*, pen : QPen*) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addPath_const_QPainterPath_R(_self_ : Binding::QGraphicsScene*, path : QPainterPath*) : Binding::QGraphicsPathItem*
    fun bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, pen : QPen*) : Binding::QGraphicsPathItem*
    fun bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R_const_QBrush_R(_self_ : Binding::QGraphicsScene*, path : QPainterPath*, pen : QPen*, brush : QBrush*) : Binding::QGraphicsPathItem*
    fun bg_QGraphicsScene_addPixmap_const_QPixmap_R(_self_ : Binding::QGraphicsScene*, pixmap : QPixmap*) : Binding::QGraphicsPixmapItem*
    fun bg_QGraphicsScene_addPolygon_const_QPolygonF_R(_self_ : Binding::QGraphicsScene*, polygon : QPolygonF*) : Binding::QGraphicsPolygonItem*
    fun bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R(_self_ : Binding::QGraphicsScene*, polygon : QPolygonF*, pen : QPen*) : Binding::QGraphicsPolygonItem*
    fun bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R_const_QBrush_R(_self_ : Binding::QGraphicsScene*, polygon : QPolygonF*, pen : QPen*, brush : QBrush*) : Binding::QGraphicsPolygonItem*
    fun bg_QGraphicsScene_addRect_const_QRectF_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*, pen : QPen*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R_const_QBrush_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*, pen : QPen*, brush : QBrush*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsScene_addText_const_QString_R(_self_ : Binding::QGraphicsScene*, text : CrystalString) : Binding::QGraphicsTextItem*
    fun bg_QGraphicsScene_addText_const_QString_R_const_QFont_R(_self_ : Binding::QGraphicsScene*, text : CrystalString, font : QFont*) : Binding::QGraphicsTextItem*
    fun bg_QGraphicsScene_addSimpleText_const_QString_R(_self_ : Binding::QGraphicsScene*, text : CrystalString) : Binding::QGraphicsSimpleTextItem*
    fun bg_QGraphicsScene_addSimpleText_const_QString_R_const_QFont_R(_self_ : Binding::QGraphicsScene*, text : CrystalString, font : QFont*) : Binding::QGraphicsSimpleTextItem*
    fun bg_QGraphicsScene_addWidget_QWidget_X(_self_ : Binding::QGraphicsScene*, widget : QWidget*) : QGraphicsProxyWidget*
    fun bg_QGraphicsScene_addWidget_QWidget_X_Qt__WindowFlags(_self_ : Binding::QGraphicsScene*, widget : QWidget*, w_flags : WindowFlags) : QGraphicsProxyWidget*
    fun bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*, brush : QBrush*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsScene*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal_const_QPen_R(_self_ : Binding::QGraphicsScene*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64, pen : QPen*) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*, brush : QBrush*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsScene_removeItem_QGraphicsItem_X(_self_ : Binding::QGraphicsScene*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsScene_focusItem_(_self_ : Binding::QGraphicsScene*) : Binding::QGraphicsItem*
    fun bg_QGraphicsScene_setFocusItem_QGraphicsItem_X_Qt__FocusReason(_self_ : Binding::QGraphicsScene*, item : QGraphicsItem*, focus_reason : FocusReason) : Void
    fun bg_QGraphicsScene_hasFocus_(_self_ : Binding::QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_setFocus_Qt__FocusReason(_self_ : Binding::QGraphicsScene*, focus_reason : FocusReason) : Void
    fun bg_QGraphicsScene_clearFocus_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsScene_setStickyFocus_bool(_self_ : Binding::QGraphicsScene*, enabled : Bool) : Void
    fun bg_QGraphicsScene_stickyFocus_(_self_ : Binding::QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_mouseGrabberItem_(_self_ : Binding::QGraphicsScene*) : Binding::QGraphicsItem*
    fun bg_QGraphicsScene_backgroundBrush_(_self_ : Binding::QGraphicsScene*) : Binding::QBrush*
    fun bg_QGraphicsScene_setBackgroundBrush_const_QBrush_R(_self_ : Binding::QGraphicsScene*, brush : QBrush*) : Void
    fun bg_QGraphicsScene_foregroundBrush_(_self_ : Binding::QGraphicsScene*) : Binding::QBrush*
    fun bg_QGraphicsScene_setForegroundBrush_const_QBrush_R(_self_ : Binding::QGraphicsScene*, brush : QBrush*) : Void
    fun bg_QGraphicsScene_views_(_self_ : Binding::QGraphicsScene*) : Void*
    fun bg_QGraphicsScene_update_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal_QGraphicsScene__SceneLayers(_self_ : Binding::QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, layers : GraphicsScene::SceneLayers) : Void
    fun bg_QGraphicsScene_style_(_self_ : Binding::QGraphicsScene*) : QStyle*
    fun bg_QGraphicsScene_setStyle_QStyle_X(_self_ : Binding::QGraphicsScene*, style : QStyle*) : Void
    fun bg_QGraphicsScene_font_(_self_ : Binding::QGraphicsScene*) : Binding::QFont*
    fun bg_QGraphicsScene_setFont_const_QFont_R(_self_ : Binding::QGraphicsScene*, font : QFont*) : Void
    fun bg_QGraphicsScene_palette_(_self_ : Binding::QGraphicsScene*) : Binding::QPalette*
    fun bg_QGraphicsScene_setPalette_const_QPalette_R(_self_ : Binding::QGraphicsScene*, palette : QPalette*) : Void
    fun bg_QGraphicsScene_isActive_(_self_ : Binding::QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_activePanel_(_self_ : Binding::QGraphicsScene*) : Binding::QGraphicsItem*
    fun bg_QGraphicsScene_setActivePanel_QGraphicsItem_X(_self_ : Binding::QGraphicsScene*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsScene_activeWindow_(_self_ : Binding::QGraphicsScene*) : Binding::QGraphicsWidget*
    fun bg_QGraphicsScene_setActiveWindow_QGraphicsWidget_X(_self_ : Binding::QGraphicsScene*, widget : QGraphicsWidget*) : Void
    fun bg_QGraphicsScene_sendEvent_QGraphicsItem_X_QEvent_X(_self_ : Binding::QGraphicsScene*, item : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_minimumRenderSize_(_self_ : Binding::QGraphicsScene*) : Float64
    fun bg_QGraphicsScene_setMinimumRenderSize_qreal(_self_ : Binding::QGraphicsScene*, min_size : Float64) : Void
    fun bg_QGraphicsScene_update_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsScene_update_const_QRectF_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_invalidate_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsScene_invalidate_const_QRectF_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_invalidate_const_QRectF_R_QGraphicsScene__SceneLayers(_self_ : Binding::QGraphicsScene*, rect : QRectF*, layers : GraphicsScene::SceneLayers) : Void
    fun bg_QGraphicsScene_advance_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsScene_clearSelection_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsScene_clear_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsScene_event_QEvent_X(_self_ : Binding::QGraphicsScene*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(_self_ : Binding::QGraphicsScene*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_focusInEvent_QFocusEvent_X(_self_ : Binding::QGraphicsScene*, event : QFocusEvent*) : Void
    fun bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(_self_ : Binding::QGraphicsScene*, event : QFocusEvent*) : Void
    fun bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneHelpEvent*) : Void
    fun bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(_self_ : Binding::QGraphicsScene*, event : QKeyEvent*) : Void
    fun bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QGraphicsScene*, event : QKeyEvent*) : Void
    fun bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(_self_ : Binding::QGraphicsScene*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(_self_ : Binding::QGraphicsScene*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(_self_ : Binding::QGraphicsScene*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(_self_ : Binding::QGraphicsScene*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsScene*, painter : QPainter*, num_items : Int32, items : QGraphicsItem**, options : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsScene_focusNextPrevChild_bool(_self_ : Binding::QGraphicsScene*, next_ : Bool) : Bool
    fun bg_QGraphicsScene_changed_const_QList_QRectF__R(_self_ : Binding::QGraphicsScene*, region : Void*) : Void
    fun bg_QGraphicsScene_changed_CONNECT_CrystalProc_void__const_QList_QRectF_X_(_self_ : Binding::QGraphicsScene*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsScene_sceneRectChanged_const_QRectF_R(_self_ : Binding::QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_sceneRectChanged_CONNECT_CrystalProc_void__const_QRectFR_(_self_ : Binding::QGraphicsScene*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsScene_selectionChanged_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsScene_selectionChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsScene*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsScene_focusItemChanged_QGraphicsItem_X_QGraphicsItem_X_Qt__FocusReason(_self_ : Binding::QGraphicsScene*, new_focus : QGraphicsItem*, old_focus : QGraphicsItem*, reason : FocusReason) : Void
    fun bg_QGraphicsScene_focusItemChanged_CONNECT_CrystalProc_void__QGraphicsItemX__QGraphicsItemX__Qt__FocusReason_(_self_ : Binding::QGraphicsScene*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsScene_DESTROY_(_self_ : Binding::QGraphicsScene*) : Void
    fun bg_QGraphicsView_metaObject_(_self_ : Binding::QGraphicsView*) : QMetaObject*
    fun bg_QGraphicsView_qt_metacast_const_char_X(_self_ : Binding::QGraphicsView*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGraphicsView*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsView_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsView_CONSTRUCT_QWidget_X(parent : QWidget*) : Binding::QGraphicsView*
    fun bg_QGraphicsView_CONSTRUCT_QGraphicsScene_X_QWidget_X(scene : QGraphicsScene*, parent : QWidget*) : Binding::QGraphicsView*
    fun bg_QGraphicsView_sizeHint_(_self_ : Binding::QGraphicsView*) : QSize*
    fun bg_QGraphicsView_renderHints_(_self_ : Binding::QGraphicsView*) : Painter::RenderHints
    fun bg_QGraphicsView_setRenderHint_QPainter__RenderHint_bool(_self_ : Binding::QGraphicsView*, hint : Painter::RenderHint, enabled : Bool) : Void
    fun bg_QGraphicsView_setRenderHints_QPainter__RenderHints(_self_ : Binding::QGraphicsView*, hints : Painter::RenderHints) : Void
    fun bg_QGraphicsView_alignment_(_self_ : Binding::QGraphicsView*) : Alignment
    fun bg_QGraphicsView_setAlignment_Qt__Alignment(_self_ : Binding::QGraphicsView*, alignment : Alignment) : Void
    fun bg_QGraphicsView_transformationAnchor_(_self_ : Binding::QGraphicsView*) : GraphicsView::ViewportAnchor
    fun bg_QGraphicsView_setTransformationAnchor_QGraphicsView__ViewportAnchor(_self_ : Binding::QGraphicsView*, anchor : GraphicsView::ViewportAnchor) : Void
    fun bg_QGraphicsView_resizeAnchor_(_self_ : Binding::QGraphicsView*) : GraphicsView::ViewportAnchor
    fun bg_QGraphicsView_setResizeAnchor_QGraphicsView__ViewportAnchor(_self_ : Binding::QGraphicsView*, anchor : GraphicsView::ViewportAnchor) : Void
    fun bg_QGraphicsView_viewportUpdateMode_(_self_ : Binding::QGraphicsView*) : GraphicsView::ViewportUpdateMode
    fun bg_QGraphicsView_setViewportUpdateMode_QGraphicsView__ViewportUpdateMode(_self_ : Binding::QGraphicsView*, mode : GraphicsView::ViewportUpdateMode) : Void
    fun bg_QGraphicsView_optimizationFlags_(_self_ : Binding::QGraphicsView*) : GraphicsView::OptimizationFlags
    fun bg_QGraphicsView_setOptimizationFlag_QGraphicsView__OptimizationFlag_bool(_self_ : Binding::QGraphicsView*, flag : GraphicsView::OptimizationFlag, enabled : Bool) : Void
    fun bg_QGraphicsView_setOptimizationFlags_QGraphicsView__OptimizationFlags(_self_ : Binding::QGraphicsView*, flags : GraphicsView::OptimizationFlags) : Void
    fun bg_QGraphicsView_dragMode_(_self_ : Binding::QGraphicsView*) : GraphicsView::DragMode
    fun bg_QGraphicsView_setDragMode_QGraphicsView__DragMode(_self_ : Binding::QGraphicsView*, mode : GraphicsView::DragMode) : Void
    fun bg_QGraphicsView_rubberBandSelectionMode_(_self_ : Binding::QGraphicsView*) : ItemSelectionMode
    fun bg_QGraphicsView_setRubberBandSelectionMode_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsView*, mode : ItemSelectionMode) : Void
    fun bg_QGraphicsView_rubberBandRect_(_self_ : Binding::QGraphicsView*) : Binding::QRect*
    fun bg_QGraphicsView_cacheMode_(_self_ : Binding::QGraphicsView*) : GraphicsView::CacheMode
    fun bg_QGraphicsView_setCacheMode_QGraphicsView__CacheMode(_self_ : Binding::QGraphicsView*, mode : GraphicsView::CacheMode) : Void
    fun bg_QGraphicsView_resetCachedContent_(_self_ : Binding::QGraphicsView*) : Void
    fun bg_QGraphicsView_isInteractive_(_self_ : Binding::QGraphicsView*) : Bool
    fun bg_QGraphicsView_setInteractive_bool(_self_ : Binding::QGraphicsView*, allowed : Bool) : Void
    fun bg_QGraphicsView_scene_(_self_ : Binding::QGraphicsView*) : Binding::QGraphicsScene*
    fun bg_QGraphicsView_setScene_QGraphicsScene_X(_self_ : Binding::QGraphicsView*, scene : QGraphicsScene*) : Void
    fun bg_QGraphicsView_sceneRect_(_self_ : Binding::QGraphicsView*) : Binding::QRectF*
    fun bg_QGraphicsView_setSceneRect_const_QRectF_R(_self_ : Binding::QGraphicsView*, rect : QRectF*) : Void
    fun bg_QGraphicsView_setSceneRect_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsView_matrix_(_self_ : Binding::QGraphicsView*) : QMatrix*
    fun bg_QGraphicsView_setMatrix_const_QMatrix_R_bool(_self_ : Binding::QGraphicsView*, matrix : QMatrix*, combine : Bool) : Void
    fun bg_QGraphicsView_resetMatrix_(_self_ : Binding::QGraphicsView*) : Void
    fun bg_QGraphicsView_transform_(_self_ : Binding::QGraphicsView*) : QTransform*
    fun bg_QGraphicsView_viewportTransform_(_self_ : Binding::QGraphicsView*) : QTransform*
    fun bg_QGraphicsView_isTransformed_(_self_ : Binding::QGraphicsView*) : Bool
    fun bg_QGraphicsView_setTransform_const_QTransform_R_bool(_self_ : Binding::QGraphicsView*, matrix : QTransform*, combine : Bool) : Void
    fun bg_QGraphicsView_resetTransform_(_self_ : Binding::QGraphicsView*) : Void
    fun bg_QGraphicsView_rotate_qreal(_self_ : Binding::QGraphicsView*, angle : Float64) : Void
    fun bg_QGraphicsView_scale_qreal_qreal(_self_ : Binding::QGraphicsView*, sx : Float64, sy : Float64) : Void
    fun bg_QGraphicsView_shear_qreal_qreal(_self_ : Binding::QGraphicsView*, sh : Float64, sv : Float64) : Void
    fun bg_QGraphicsView_translate_qreal_qreal(_self_ : Binding::QGraphicsView*, dx : Float64, dy : Float64) : Void
    fun bg_QGraphicsView_centerOn_const_QPointF_R(_self_ : Binding::QGraphicsView*, pos : QPointF) : Void
    fun bg_QGraphicsView_centerOn_qreal_qreal(_self_ : Binding::QGraphicsView*, x : Float64, y : Float64) : Void
    fun bg_QGraphicsView_centerOn_const_QGraphicsItem_X(_self_ : Binding::QGraphicsView*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsView_ensureVisible_const_QRectF_R_int_int(_self_ : Binding::QGraphicsView*, rect : QRectF*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsView_ensureVisible_qreal_qreal_qreal_qreal_int_int(_self_ : Binding::QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsView_ensureVisible_const_QGraphicsItem_X_int_int(_self_ : Binding::QGraphicsView*, item : QGraphicsItem*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsView_fitInView_const_QRectF_R_Qt__AspectRatioMode(_self_ : Binding::QGraphicsView*, rect : QRectF*, aspect_radio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_fitInView_qreal_qreal_qreal_qreal_Qt__AspectRatioMode(_self_ : Binding::QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64, aspect_radio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_fitInView_const_QGraphicsItem_X_Qt__AspectRatioMode(_self_ : Binding::QGraphicsView*, item : QGraphicsItem*, aspect_radio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_render_QPainter_X(_self_ : Binding::QGraphicsView*, painter : QPainter*) : Void
    fun bg_QGraphicsView_render_QPainter_X_const_QRectF_R(_self_ : Binding::QGraphicsView*, painter : QPainter*, target : QRectF*) : Void
    fun bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R(_self_ : Binding::QGraphicsView*, painter : QPainter*, target : QRectF*, source : QRect*) : Void
    fun bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R_Qt__AspectRatioMode(_self_ : Binding::QGraphicsView*, painter : QPainter*, target : QRectF*, source : QRect*, aspect_ratio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_items_(_self_ : Binding::QGraphicsView*) : Void*
    fun bg_QGraphicsView_items_const_QPoint_R(_self_ : Binding::QGraphicsView*, pos : QPoint) : Void*
    fun bg_QGraphicsView_items_int_int(_self_ : Binding::QGraphicsView*, x : Int32, y : Int32) : Void*
    fun bg_QGraphicsView_items_const_QRect_R_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsView*, rect : QRect*, mode : ItemSelectionMode) : Void*
    fun bg_QGraphicsView_items_int_int_int_int_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsView*, x : Int32, y : Int32, w : Int32, h : Int32, mode : ItemSelectionMode) : Void*
    fun bg_QGraphicsView_items_const_QPolygon_R_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsView*, polygon : QPolygon*, mode : ItemSelectionMode) : Void*
    fun bg_QGraphicsView_items_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : Binding::QGraphicsView*, path : QPainterPath*, mode : ItemSelectionMode) : Void*
    fun bg_QGraphicsView_itemAt_const_QPoint_R(_self_ : Binding::QGraphicsView*, pos : QPoint) : Binding::QGraphicsItem*
    fun bg_QGraphicsView_itemAt_int_int(_self_ : Binding::QGraphicsView*, x : Int32, y : Int32) : Binding::QGraphicsItem*
    fun bg_QGraphicsView_mapToScene_const_QPoint_R(_self_ : Binding::QGraphicsView*, point : QPoint) : Binding::QPointF
    fun bg_QGraphicsView_mapToScene_const_QRect_R(_self_ : Binding::QGraphicsView*, rect : QRect*) : QPolygonF*
    fun bg_QGraphicsView_mapToScene_const_QPolygon_R(_self_ : Binding::QGraphicsView*, polygon : QPolygon*) : QPolygonF*
    fun bg_QGraphicsView_mapToScene_const_QPainterPath_R(_self_ : Binding::QGraphicsView*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsView_mapFromScene_const_QPointF_R(_self_ : Binding::QGraphicsView*, point : QPointF) : Binding::QPoint
    fun bg_QGraphicsView_mapFromScene_const_QRectF_R(_self_ : Binding::QGraphicsView*, rect : QRectF*) : QPolygon*
    fun bg_QGraphicsView_mapFromScene_const_QPolygonF_R(_self_ : Binding::QGraphicsView*, polygon : QPolygonF*) : QPolygon*
    fun bg_QGraphicsView_mapFromScene_const_QPainterPath_R(_self_ : Binding::QGraphicsView*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsView_mapToScene_int_int(_self_ : Binding::QGraphicsView*, x : Int32, y : Int32) : Binding::QPointF
    fun bg_QGraphicsView_mapToScene_int_int_int_int(_self_ : Binding::QGraphicsView*, x : Int32, y : Int32, w : Int32, h : Int32) : QPolygonF*
    fun bg_QGraphicsView_mapFromScene_qreal_qreal(_self_ : Binding::QGraphicsView*, x : Float64, y : Float64) : Binding::QPoint
    fun bg_QGraphicsView_mapFromScene_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygon*
    fun bg_QGraphicsView_backgroundBrush_(_self_ : Binding::QGraphicsView*) : Binding::QBrush*
    fun bg_QGraphicsView_setBackgroundBrush_const_QBrush_R(_self_ : Binding::QGraphicsView*, brush : QBrush*) : Void
    fun bg_QGraphicsView_foregroundBrush_(_self_ : Binding::QGraphicsView*) : Binding::QBrush*
    fun bg_QGraphicsView_setForegroundBrush_const_QBrush_R(_self_ : Binding::QGraphicsView*, brush : QBrush*) : Void
    fun bg_QGraphicsView_updateScene_const_QList_QRectF__R(_self_ : Binding::QGraphicsView*, rects : Void*) : Void
    fun bg_QGraphicsView_invalidateScene_(_self_ : Binding::QGraphicsView*) : Void
    fun bg_QGraphicsView_invalidateScene_const_QRectF_R(_self_ : Binding::QGraphicsView*, rect : QRectF*) : Void
    fun bg_QGraphicsView_invalidateScene_const_QRectF_R_QGraphicsScene__SceneLayers(_self_ : Binding::QGraphicsView*, rect : QRectF*, layers : GraphicsScene::SceneLayers) : Void
    fun bg_QGraphicsView_updateSceneRect_const_QRectF_R(_self_ : Binding::QGraphicsView*, rect : QRectF*) : Void
    fun bg_QGraphicsView_rubberBandChanged_QRect_QPointF_QPointF(_self_ : Binding::QGraphicsView*, viewport_rect : QRect*, from_scene_point : QPointF, to_scene_point : QPointF) : Void
    fun bg_QGraphicsView_rubberBandChanged_CONNECT_CrystalProc_void__QRectR__QPointF__QPointF_(_self_ : Binding::QGraphicsView*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsView_setupViewport_QWidget_X(_self_ : Binding::QGraphicsView*, widget : QWidget*) : Void
    fun bg_QGraphicsView_CONSTRUCT_QGraphicsViewPrivate_R_QWidget_X(unnamed_arg_0 : QGraphicsViewPrivate*, parent : QWidget*) : Binding::QGraphicsView*
    fun bg_QGraphicsView_event_QEvent_X(_self_ : Binding::QGraphicsView*, event : QEvent*) : Bool
    fun bg_QGraphicsView_viewportEvent_QEvent_X(_self_ : Binding::QGraphicsView*, event : QEvent*) : Bool
    fun bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(_self_ : Binding::QGraphicsView*, event : QContextMenuEvent*) : Void
    fun bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(_self_ : Binding::QGraphicsView*, event : QDragEnterEvent*) : Void
    fun bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(_self_ : Binding::QGraphicsView*, event : QDragLeaveEvent*) : Void
    fun bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(_self_ : Binding::QGraphicsView*, event : QDragMoveEvent*) : Void
    fun bg_QGraphicsView_dropEvent_QDropEvent_X(_self_ : Binding::QGraphicsView*, event : QDropEvent*) : Void
    fun bg_QGraphicsView_focusInEvent_QFocusEvent_X(_self_ : Binding::QGraphicsView*, event : QFocusEvent*) : Void
    fun bg_QGraphicsView_focusNextPrevChild_bool(_self_ : Binding::QGraphicsView*, next_ : Bool) : Bool
    fun bg_QGraphicsView_focusOutEvent_QFocusEvent_X(_self_ : Binding::QGraphicsView*, event : QFocusEvent*) : Void
    fun bg_QGraphicsView_keyPressEvent_QKeyEvent_X(_self_ : Binding::QGraphicsView*, event : QKeyEvent*) : Void
    fun bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QGraphicsView*, event : QKeyEvent*) : Void
    fun bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(_self_ : Binding::QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mousePressEvent_QMouseEvent_X(_self_ : Binding::QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(_self_ : Binding::QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(_self_ : Binding::QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_wheelEvent_QWheelEvent_X(_self_ : Binding::QGraphicsView*, event : QWheelEvent*) : Void
    fun bg_QGraphicsView_paintEvent_QPaintEvent_X(_self_ : Binding::QGraphicsView*, event : QPaintEvent*) : Void
    fun bg_QGraphicsView_resizeEvent_QResizeEvent_X(_self_ : Binding::QGraphicsView*, event : QResizeEvent*) : Void
    fun bg_QGraphicsView_scrollContentsBy_int_int(_self_ : Binding::QGraphicsView*, dx : Int32, dy : Int32) : Void
    fun bg_QGraphicsView_showEvent_QShowEvent_X(_self_ : Binding::QGraphicsView*, event : QShowEvent*) : Void
    fun bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(_self_ : Binding::QGraphicsView*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(_self_ : Binding::QGraphicsView*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(_self_ : Binding::QGraphicsView*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(_self_ : Binding::QGraphicsView*, painter : QPainter*, num_items : Int32, items : QGraphicsItem**, options : QStyleOptionGraphicsItem*) : Void
    fun bg_QGraphicsView_DESTROY_(_self_ : Binding::QGraphicsView*) : Void
    fun bg_QGraphicsObject_metaObject_(_self_ : Binding::QGraphicsObject*) : QMetaObject*
    fun bg_QGraphicsObject_qt_metacast_const_char_X(_self_ : Binding::QGraphicsObject*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGraphicsObject*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsObject_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsObject_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsObject*
    fun bg_QGraphicsObject_grabGesture_Qt__GestureType(_self_ : Binding::QGraphicsObject*, type : GestureType) : Void
    fun bg_QGraphicsObject_grabGesture_Qt__GestureType_Qt__GestureFlags(_self_ : Binding::QGraphicsObject*, type : GestureType, flags : GestureFlags) : Void
    fun bg_QGraphicsObject_ungrabGesture_Qt__GestureType(_self_ : Binding::QGraphicsObject*, type : GestureType) : Void
    fun bg_QGraphicsObject_updateMicroFocus_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_parentChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_parentChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_opacityChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_opacityChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_visibleChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_visibleChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_enabledChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_enabledChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_xChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_xChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_yChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_yChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_zChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_zChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_rotationChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_rotationChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_scaleChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_scaleChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_childrenChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_childrenChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_widthChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_widthChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_heightChanged_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_heightChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsObject*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsObject_CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd : QGraphicsItemPrivate*, parent : QGraphicsItem*) : Binding::QGraphicsObject*
    fun bg_QGraphicsObject_event_QEvent_X(_self_ : Binding::QGraphicsObject*, ev : QEvent*) : Bool
    fun bg_QGraphicsObject_DESTROY_(_self_ : Binding::QGraphicsObject*) : Void
    fun bg_QGraphicsObject_AS_QGraphicsItem_(_self_ : Binding::QGraphicsObject*) : Binding::QGraphicsItem*
    fun bg_QGraphicsWidget_metaObject_(_self_ : Binding::QGraphicsWidget*) : QMetaObject*
    fun bg_QGraphicsWidget_qt_metacast_const_char_X(_self_ : Binding::QGraphicsWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGraphicsWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsWidget_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsWidget*
    fun bg_QGraphicsWidget_CONSTRUCT_QGraphicsItem_X_Qt__WindowFlags(parent : QGraphicsItem*, w_flags : WindowFlags) : Binding::QGraphicsWidget*
    fun bg_QGraphicsWidget_layout_(_self_ : Binding::QGraphicsWidget*) : QGraphicsLayout*
    fun bg_QGraphicsWidget_setLayout_QGraphicsLayout_X(_self_ : Binding::QGraphicsWidget*, layout : QGraphicsLayout*) : Void
    fun bg_QGraphicsWidget_adjustSize_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_layoutDirection_(_self_ : Binding::QGraphicsWidget*) : LayoutDirection
    fun bg_QGraphicsWidget_setLayoutDirection_Qt__LayoutDirection(_self_ : Binding::QGraphicsWidget*, direction : LayoutDirection) : Void
    fun bg_QGraphicsWidget_unsetLayoutDirection_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_style_(_self_ : Binding::QGraphicsWidget*) : QStyle*
    fun bg_QGraphicsWidget_setStyle_QStyle_X(_self_ : Binding::QGraphicsWidget*, style : QStyle*) : Void
    fun bg_QGraphicsWidget_font_(_self_ : Binding::QGraphicsWidget*) : Binding::QFont*
    fun bg_QGraphicsWidget_setFont_const_QFont_R(_self_ : Binding::QGraphicsWidget*, font : QFont*) : Void
    fun bg_QGraphicsWidget_palette_(_self_ : Binding::QGraphicsWidget*) : Binding::QPalette*
    fun bg_QGraphicsWidget_setPalette_const_QPalette_R(_self_ : Binding::QGraphicsWidget*, palette : QPalette*) : Void
    fun bg_QGraphicsWidget_autoFillBackground_(_self_ : Binding::QGraphicsWidget*) : Bool
    fun bg_QGraphicsWidget_setAutoFillBackground_bool(_self_ : Binding::QGraphicsWidget*, enabled : Bool) : Void
    fun bg_QGraphicsWidget_resize_const_QSizeF_R(_self_ : Binding::QGraphicsWidget*, size : QSizeF*) : Void
    fun bg_QGraphicsWidget_resize_qreal_qreal(_self_ : Binding::QGraphicsWidget*, w : Float64, h : Float64) : Void
    fun bg_QGraphicsWidget_size_(_self_ : Binding::QGraphicsWidget*) : QSizeF*
    fun bg_QGraphicsWidget_setGeometry_const_QRectF_R(_self_ : Binding::QGraphicsWidget*, rect : QRectF*) : Void
    fun bg_QGraphicsWidget_setGeometry_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsWidget*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsWidget_rect_(_self_ : Binding::QGraphicsWidget*) : Binding::QRectF*
    fun bg_QGraphicsWidget_setContentsMargins_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsWidget*, left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
    fun bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QGraphicsWidget*, left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
    fun bg_QGraphicsWidget_setWindowFrameMargins_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsWidget*, left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
    fun bg_QGraphicsWidget_getWindowFrameMargins_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QGraphicsWidget*, left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
    fun bg_QGraphicsWidget_unsetWindowFrameMargins_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_windowFrameGeometry_(_self_ : Binding::QGraphicsWidget*) : Binding::QRectF*
    fun bg_QGraphicsWidget_windowFrameRect_(_self_ : Binding::QGraphicsWidget*) : Binding::QRectF*
    fun bg_QGraphicsWidget_windowFlags_(_self_ : Binding::QGraphicsWidget*) : WindowFlags
    fun bg_QGraphicsWidget_windowType_(_self_ : Binding::QGraphicsWidget*) : WindowType
    fun bg_QGraphicsWidget_setWindowFlags_Qt__WindowFlags(_self_ : Binding::QGraphicsWidget*, w_flags : WindowFlags) : Void
    fun bg_QGraphicsWidget_isActiveWindow_(_self_ : Binding::QGraphicsWidget*) : Bool
    fun bg_QGraphicsWidget_setWindowTitle_const_QString_R(_self_ : Binding::QGraphicsWidget*, title : CrystalString) : Void
    fun bg_QGraphicsWidget_windowTitle_(_self_ : Binding::QGraphicsWidget*) : Binding::CrystalString
    fun bg_QGraphicsWidget_focusPolicy_(_self_ : Binding::QGraphicsWidget*) : FocusPolicy
    fun bg_QGraphicsWidget_setFocusPolicy_Qt__FocusPolicy(_self_ : Binding::QGraphicsWidget*, policy : FocusPolicy) : Void
    fun bg_QGraphicsWidget_setTabOrder_STATIC_QGraphicsWidget_X_QGraphicsWidget_X(first : QGraphicsWidget*, second : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_focusWidget_(_self_ : Binding::QGraphicsWidget*) : Binding::QGraphicsWidget*
    fun bg_QGraphicsWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(_self_ : Binding::QGraphicsWidget*, sequence : QKeySequence*, context : ShortcutContext) : Int32
    fun bg_QGraphicsWidget_releaseShortcut_int(_self_ : Binding::QGraphicsWidget*, id : Int32) : Void
    fun bg_QGraphicsWidget_setShortcutEnabled_int_bool(_self_ : Binding::QGraphicsWidget*, id : Int32, enabled : Bool) : Void
    fun bg_QGraphicsWidget_setShortcutAutoRepeat_int_bool(_self_ : Binding::QGraphicsWidget*, id : Int32, enabled : Bool) : Void
    fun bg_QGraphicsWidget_addAction_QAction_X(_self_ : Binding::QGraphicsWidget*, action : QAction*) : Void
    fun bg_QGraphicsWidget_addActions_QList_QAction_X_(_self_ : Binding::QGraphicsWidget*, actions : Void*) : Void
    fun bg_QGraphicsWidget_insertActions_QAction_X_QList_QAction_X_(_self_ : Binding::QGraphicsWidget*, before : QAction*, actions : Void*) : Void
    fun bg_QGraphicsWidget_insertAction_QAction_X_QAction_X(_self_ : Binding::QGraphicsWidget*, before : QAction*, action : QAction*) : Void
    fun bg_QGraphicsWidget_removeAction_QAction_X(_self_ : Binding::QGraphicsWidget*, action : QAction*) : Void
    fun bg_QGraphicsWidget_actions_(_self_ : Binding::QGraphicsWidget*) : Void*
    fun bg_QGraphicsWidget_setAttribute_Qt__WidgetAttribute_bool(_self_ : Binding::QGraphicsWidget*, attribute : WidgetAttribute, on : Bool) : Void
    fun bg_QGraphicsWidget_testAttribute_Qt__WidgetAttribute(_self_ : Binding::QGraphicsWidget*, attribute : WidgetAttribute) : Bool
    fun bg_QGraphicsWidget_type_(_self_ : Binding::QGraphicsWidget*) : Int32
    fun bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsWidget*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsWidget*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsWidget_boundingRect_(_self_ : Binding::QGraphicsWidget*) : Binding::QRectF*
    fun bg_QGraphicsWidget_shape_(_self_ : Binding::QGraphicsWidget*) : QPainterPath*
    fun bg_QGraphicsWidget_geometryChanged_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_geometryChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsWidget_layoutChanged_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_layoutChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QGraphicsWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsWidget_close_(_self_ : Binding::QGraphicsWidget*) : Bool
    fun bg_QGraphicsWidget_initStyleOption_QStyleOption_X(_self_ : Binding::QGraphicsWidget*, option : QStyleOption*) : Void
    fun bg_QGraphicsWidget_sizeHint_Qt__SizeHint(_self_ : Binding::QGraphicsWidget*, which : SizeHint) : QSizeF*
    fun bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(_self_ : Binding::QGraphicsWidget*, which : SizeHint, constraint : QSizeF*) : QSizeF*
    fun bg_QGraphicsWidget_updateGeometry_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_sceneEvent_QEvent_X(_self_ : Binding::QGraphicsWidget*, event : QEvent*) : Bool
    fun bg_QGraphicsWidget_windowFrameEvent_QEvent_X(_self_ : Binding::QGraphicsWidget*, e : QEvent*) : Bool
    fun bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(_self_ : Binding::QGraphicsWidget*, pos : QPointF) : WindowFrameSection
    fun bg_QGraphicsWidget_event_QEvent_X(_self_ : Binding::QGraphicsWidget*, event : QEvent*) : Bool
    fun bg_QGraphicsWidget_changeEvent_QEvent_X(_self_ : Binding::QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_closeEvent_QCloseEvent_X(_self_ : Binding::QGraphicsWidget*, event : QCloseEvent*) : Void
    fun bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(_self_ : Binding::QGraphicsWidget*, event : QFocusEvent*) : Void
    fun bg_QGraphicsWidget_focusNextPrevChild_bool(_self_ : Binding::QGraphicsWidget*, next_ : Bool) : Bool
    fun bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(_self_ : Binding::QGraphicsWidget*, event : QFocusEvent*) : Void
    fun bg_QGraphicsWidget_hideEvent_QHideEvent_X(_self_ : Binding::QGraphicsWidget*, event : QHideEvent*) : Void
    fun bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(_self_ : Binding::QGraphicsWidget*, event : QGraphicsSceneMoveEvent*) : Void
    fun bg_QGraphicsWidget_polishEvent_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(_self_ : Binding::QGraphicsWidget*, event : QGraphicsSceneResizeEvent*) : Void
    fun bg_QGraphicsWidget_showEvent_QShowEvent_X(_self_ : Binding::QGraphicsWidget*, event : QShowEvent*) : Void
    fun bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsWidget*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsWidget*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsWidget_grabMouseEvent_QEvent_X(_self_ : Binding::QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(_self_ : Binding::QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(_self_ : Binding::QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(_self_ : Binding::QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X(unnamed_arg_0 : QGraphicsWidgetPrivate*, parent : QGraphicsItem*) : Binding::QGraphicsWidget*
    fun bg_QGraphicsWidget_CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X_Qt__WindowFlags(unnamed_arg_0 : QGraphicsWidgetPrivate*, parent : QGraphicsItem*, w_flags : WindowFlags) : Binding::QGraphicsWidget*
    fun bg_QGraphicsWidget_DESTROY_(_self_ : Binding::QGraphicsWidget*) : Void
    fun bg_QGraphicsTextItem_metaObject_(_self_ : Binding::QGraphicsTextItem*) : QMetaObject*
    fun bg_QGraphicsTextItem_qt_metacast_const_char_X(_self_ : Binding::QGraphicsTextItem*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGraphicsTextItem*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsTextItem_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsTextItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsTextItem*
    fun bg_QGraphicsTextItem_CONSTRUCT_const_QString_R_QGraphicsItem_X(text : CrystalString, parent : QGraphicsItem*) : Binding::QGraphicsTextItem*
    fun bg_QGraphicsTextItem_toHtml_(_self_ : Binding::QGraphicsTextItem*) : Binding::CrystalString
    fun bg_QGraphicsTextItem_setHtml_const_QString_R(_self_ : Binding::QGraphicsTextItem*, html : CrystalString) : Void
    fun bg_QGraphicsTextItem_toPlainText_(_self_ : Binding::QGraphicsTextItem*) : Binding::CrystalString
    fun bg_QGraphicsTextItem_setPlainText_const_QString_R(_self_ : Binding::QGraphicsTextItem*, text : CrystalString) : Void
    fun bg_QGraphicsTextItem_font_(_self_ : Binding::QGraphicsTextItem*) : Binding::QFont*
    fun bg_QGraphicsTextItem_setFont_const_QFont_R(_self_ : Binding::QGraphicsTextItem*, font : QFont*) : Void
    fun bg_QGraphicsTextItem_setDefaultTextColor_const_QColor_R(_self_ : Binding::QGraphicsTextItem*, c : QColor*) : Void
    fun bg_QGraphicsTextItem_defaultTextColor_(_self_ : Binding::QGraphicsTextItem*) : Binding::QColor*
    fun bg_QGraphicsTextItem_boundingRect_(_self_ : Binding::QGraphicsTextItem*) : Binding::QRectF*
    fun bg_QGraphicsTextItem_shape_(_self_ : Binding::QGraphicsTextItem*) : QPainterPath*
    fun bg_QGraphicsTextItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsTextItem*, point : QPointF) : Bool
    fun bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsTextItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsTextItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsTextItem_opaqueArea_(_self_ : Binding::QGraphicsTextItem*) : QPainterPath*
    fun bg_QGraphicsTextItem_type_(_self_ : Binding::QGraphicsTextItem*) : Int32
    fun bg_QGraphicsTextItem_setTextWidth_qreal(_self_ : Binding::QGraphicsTextItem*, width : Float64) : Void
    fun bg_QGraphicsTextItem_textWidth_(_self_ : Binding::QGraphicsTextItem*) : Float64
    fun bg_QGraphicsTextItem_adjustSize_(_self_ : Binding::QGraphicsTextItem*) : Void
    fun bg_QGraphicsTextItem_setDocument_QTextDocument_X(_self_ : Binding::QGraphicsTextItem*, document : QTextDocument*) : Void
    fun bg_QGraphicsTextItem_document_(_self_ : Binding::QGraphicsTextItem*) : Binding::QTextDocument*
    fun bg_QGraphicsTextItem_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : Binding::QGraphicsTextItem*, flags : TextInteractionFlags) : Void
    fun bg_QGraphicsTextItem_textInteractionFlags_(_self_ : Binding::QGraphicsTextItem*) : TextInteractionFlags
    fun bg_QGraphicsTextItem_setTabChangesFocus_bool(_self_ : Binding::QGraphicsTextItem*, b : Bool) : Void
    fun bg_QGraphicsTextItem_tabChangesFocus_(_self_ : Binding::QGraphicsTextItem*) : Bool
    fun bg_QGraphicsTextItem_setOpenExternalLinks_bool(_self_ : Binding::QGraphicsTextItem*, open : Bool) : Void
    fun bg_QGraphicsTextItem_openExternalLinks_(_self_ : Binding::QGraphicsTextItem*) : Bool
    fun bg_QGraphicsTextItem_setTextCursor_const_QTextCursor_R(_self_ : Binding::QGraphicsTextItem*, cursor : QTextCursor*) : Void
    fun bg_QGraphicsTextItem_textCursor_(_self_ : Binding::QGraphicsTextItem*) : Binding::QTextCursor*
    fun bg_QGraphicsTextItem_linkActivated_const_QString_R(_self_ : Binding::QGraphicsTextItem*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QGraphicsTextItem_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QGraphicsTextItem*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsTextItem_linkHovered_const_QString_R(_self_ : Binding::QGraphicsTextItem*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QGraphicsTextItem_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(_self_ : Binding::QGraphicsTextItem*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QGraphicsTextItem_sceneEvent_QEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QEvent*) : Bool
    fun bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : Binding::QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsTextItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsTextItem_DESTROY_(_self_ : Binding::QGraphicsTextItem*) : Void
    fun bg_QGraphicsTransform_metaObject_(_self_ : Binding::QGraphicsTransform*) : QMetaObject*
    fun bg_QGraphicsTransform_qt_metacast_const_char_X(_self_ : Binding::QGraphicsTransform*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGraphicsTransform*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsTransform_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGraphicsTransform_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QGraphicsTransform*
    fun bg_QGraphicsTransform_applyTo_QMatrix4x4_X(_self_ : Binding::QGraphicsTransform*, matrix : QMatrix4x4*) : Void
    fun bg_QGraphicsTransform_update_(_self_ : Binding::QGraphicsTransform*) : Void
    fun bg_QGraphicsTransform_CONSTRUCT_QGraphicsTransformPrivate_R_QObject_X(p : QGraphicsTransformPrivate*, parent : QObject*) : Binding::QGraphicsTransform*
    fun bg_QGraphicsTransform_DESTROY_(_self_ : Binding::QGraphicsTransform*) : Void
    fun bg_QAbstractGraphicsShapeItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QAbstractGraphicsShapeItem*
    fun bg_QAbstractGraphicsShapeItem_pen_(_self_ : Binding::QAbstractGraphicsShapeItem*) : QPen*
    fun bg_QAbstractGraphicsShapeItem_setPen_const_QPen_R(_self_ : Binding::QAbstractGraphicsShapeItem*, pen : QPen*) : Void
    fun bg_QAbstractGraphicsShapeItem_brush_(_self_ : Binding::QAbstractGraphicsShapeItem*) : Binding::QBrush*
    fun bg_QAbstractGraphicsShapeItem_setBrush_const_QBrush_R(_self_ : Binding::QAbstractGraphicsShapeItem*, brush : QBrush*) : Void
    fun bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QAbstractGraphicsShapeItem*, item : QGraphicsItem*) : Bool
    fun bg_QAbstractGraphicsShapeItem_opaqueArea_(_self_ : Binding::QAbstractGraphicsShapeItem*) : QPainterPath*
    fun bg_QAbstractGraphicsShapeItem_CONSTRUCT_QAbstractGraphicsShapeItemPrivate_R_QGraphicsItem_X(dd : QAbstractGraphicsShapeItemPrivate*, parent : QGraphicsItem*) : Binding::QAbstractGraphicsShapeItem*
    fun bg_QAbstractGraphicsShapeItem_DESTROY_(_self_ : Binding::QAbstractGraphicsShapeItem*) : Void
    fun bg_QGraphicsEllipseItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsEllipseItem_CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect : QRectF*, parent : QGraphicsItem*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsEllipseItem_CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x : Float64, y : Float64, w : Float64, h : Float64, parent : QGraphicsItem*) : Binding::QGraphicsEllipseItem*
    fun bg_QGraphicsEllipseItem_rect_(_self_ : Binding::QGraphicsEllipseItem*) : Binding::QRectF*
    fun bg_QGraphicsEllipseItem_setRect_const_QRectF_R(_self_ : Binding::QGraphicsEllipseItem*, rect : QRectF*) : Void
    fun bg_QGraphicsEllipseItem_setRect_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsEllipseItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsEllipseItem_startAngle_(_self_ : Binding::QGraphicsEllipseItem*) : Int32
    fun bg_QGraphicsEllipseItem_setStartAngle_int(_self_ : Binding::QGraphicsEllipseItem*, angle : Int32) : Void
    fun bg_QGraphicsEllipseItem_spanAngle_(_self_ : Binding::QGraphicsEllipseItem*) : Int32
    fun bg_QGraphicsEllipseItem_setSpanAngle_int(_self_ : Binding::QGraphicsEllipseItem*, angle : Int32) : Void
    fun bg_QGraphicsEllipseItem_boundingRect_(_self_ : Binding::QGraphicsEllipseItem*) : Binding::QRectF*
    fun bg_QGraphicsEllipseItem_shape_(_self_ : Binding::QGraphicsEllipseItem*) : QPainterPath*
    fun bg_QGraphicsEllipseItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsEllipseItem*, point : QPointF) : Bool
    fun bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsEllipseItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsEllipseItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsEllipseItem_opaqueArea_(_self_ : Binding::QGraphicsEllipseItem*) : QPainterPath*
    fun bg_QGraphicsEllipseItem_type_(_self_ : Binding::QGraphicsEllipseItem*) : Int32
    fun bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsEllipseItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsEllipseItem_DESTROY_(_self_ : Binding::QGraphicsEllipseItem*) : Void
    fun bg_QGraphicsPathItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsPathItem*
    fun bg_QGraphicsPathItem_CONSTRUCT_const_QPainterPath_R_QGraphicsItem_X(path : QPainterPath*, parent : QGraphicsItem*) : Binding::QGraphicsPathItem*
    fun bg_QGraphicsPathItem_path_(_self_ : Binding::QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_setPath_const_QPainterPath_R(_self_ : Binding::QGraphicsPathItem*, path : QPainterPath*) : Void
    fun bg_QGraphicsPathItem_boundingRect_(_self_ : Binding::QGraphicsPathItem*) : Binding::QRectF*
    fun bg_QGraphicsPathItem_shape_(_self_ : Binding::QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsPathItem*, point : QPointF) : Bool
    fun bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsPathItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsPathItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPathItem_opaqueArea_(_self_ : Binding::QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_type_(_self_ : Binding::QGraphicsPathItem*) : Int32
    fun bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsPathItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPathItem_DESTROY_(_self_ : Binding::QGraphicsPathItem*) : Void
    fun bg_QGraphicsPolygonItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsPolygonItem*
    fun bg_QGraphicsPolygonItem_CONSTRUCT_const_QPolygonF_R_QGraphicsItem_X(polygon : QPolygonF*, parent : QGraphicsItem*) : Binding::QGraphicsPolygonItem*
    fun bg_QGraphicsPolygonItem_polygon_(_self_ : Binding::QGraphicsPolygonItem*) : QPolygonF*
    fun bg_QGraphicsPolygonItem_setPolygon_const_QPolygonF_R(_self_ : Binding::QGraphicsPolygonItem*, polygon : QPolygonF*) : Void
    fun bg_QGraphicsPolygonItem_fillRule_(_self_ : Binding::QGraphicsPolygonItem*) : FillRule
    fun bg_QGraphicsPolygonItem_setFillRule_Qt__FillRule(_self_ : Binding::QGraphicsPolygonItem*, rule : FillRule) : Void
    fun bg_QGraphicsPolygonItem_boundingRect_(_self_ : Binding::QGraphicsPolygonItem*) : Binding::QRectF*
    fun bg_QGraphicsPolygonItem_shape_(_self_ : Binding::QGraphicsPolygonItem*) : QPainterPath*
    fun bg_QGraphicsPolygonItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsPolygonItem*, point : QPointF) : Bool
    fun bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsPolygonItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsPolygonItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPolygonItem_opaqueArea_(_self_ : Binding::QGraphicsPolygonItem*) : QPainterPath*
    fun bg_QGraphicsPolygonItem_type_(_self_ : Binding::QGraphicsPolygonItem*) : Int32
    fun bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsPolygonItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPolygonItem_DESTROY_(_self_ : Binding::QGraphicsPolygonItem*) : Void
    fun bg_QGraphicsRectItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsRectItem_CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect : QRectF*, parent : QGraphicsItem*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsRectItem_CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x : Float64, y : Float64, w : Float64, h : Float64, parent : QGraphicsItem*) : Binding::QGraphicsRectItem*
    fun bg_QGraphicsRectItem_rect_(_self_ : Binding::QGraphicsRectItem*) : Binding::QRectF*
    fun bg_QGraphicsRectItem_setRect_const_QRectF_R(_self_ : Binding::QGraphicsRectItem*, rect : QRectF*) : Void
    fun bg_QGraphicsRectItem_setRect_qreal_qreal_qreal_qreal(_self_ : Binding::QGraphicsRectItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsRectItem_boundingRect_(_self_ : Binding::QGraphicsRectItem*) : Binding::QRectF*
    fun bg_QGraphicsRectItem_shape_(_self_ : Binding::QGraphicsRectItem*) : QPainterPath*
    fun bg_QGraphicsRectItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsRectItem*, point : QPointF) : Bool
    fun bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsRectItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsRectItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsRectItem_opaqueArea_(_self_ : Binding::QGraphicsRectItem*) : QPainterPath*
    fun bg_QGraphicsRectItem_type_(_self_ : Binding::QGraphicsRectItem*) : Int32
    fun bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsRectItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsRectItem_DESTROY_(_self_ : Binding::QGraphicsRectItem*) : Void
    fun bg_QGraphicsSimpleTextItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsSimpleTextItem*
    fun bg_QGraphicsSimpleTextItem_CONSTRUCT_const_QString_R_QGraphicsItem_X(text : CrystalString, parent : QGraphicsItem*) : Binding::QGraphicsSimpleTextItem*
    fun bg_QGraphicsSimpleTextItem_setText_const_QString_R(_self_ : Binding::QGraphicsSimpleTextItem*, text : CrystalString) : Void
    fun bg_QGraphicsSimpleTextItem_text_(_self_ : Binding::QGraphicsSimpleTextItem*) : Binding::CrystalString
    fun bg_QGraphicsSimpleTextItem_setFont_const_QFont_R(_self_ : Binding::QGraphicsSimpleTextItem*, font : QFont*) : Void
    fun bg_QGraphicsSimpleTextItem_font_(_self_ : Binding::QGraphicsSimpleTextItem*) : Binding::QFont*
    fun bg_QGraphicsSimpleTextItem_boundingRect_(_self_ : Binding::QGraphicsSimpleTextItem*) : Binding::QRectF*
    fun bg_QGraphicsSimpleTextItem_shape_(_self_ : Binding::QGraphicsSimpleTextItem*) : QPainterPath*
    fun bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsSimpleTextItem*, point : QPointF) : Bool
    fun bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsSimpleTextItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsSimpleTextItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsSimpleTextItem_opaqueArea_(_self_ : Binding::QGraphicsSimpleTextItem*) : QPainterPath*
    fun bg_QGraphicsSimpleTextItem_type_(_self_ : Binding::QGraphicsSimpleTextItem*) : Int32
    fun bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsSimpleTextItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsSimpleTextItem_DESTROY_(_self_ : Binding::QGraphicsSimpleTextItem*) : Void
    fun bg_QGraphicsPixmapItem_CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : Binding::QGraphicsPixmapItem*
    fun bg_QGraphicsPixmapItem_CONSTRUCT_const_QPixmap_R_QGraphicsItem_X(pixmap : QPixmap*, parent : QGraphicsItem*) : Binding::QGraphicsPixmapItem*
    fun bg_QGraphicsPixmapItem_pixmap_(_self_ : Binding::QGraphicsPixmapItem*) : Binding::QPixmap*
    fun bg_QGraphicsPixmapItem_setPixmap_const_QPixmap_R(_self_ : Binding::QGraphicsPixmapItem*, pixmap : QPixmap*) : Void
    fun bg_QGraphicsPixmapItem_transformationMode_(_self_ : Binding::QGraphicsPixmapItem*) : TransformationMode
    fun bg_QGraphicsPixmapItem_setTransformationMode_Qt__TransformationMode(_self_ : Binding::QGraphicsPixmapItem*, mode : TransformationMode) : Void
    fun bg_QGraphicsPixmapItem_offset_(_self_ : Binding::QGraphicsPixmapItem*) : Binding::QPointF
    fun bg_QGraphicsPixmapItem_setOffset_const_QPointF_R(_self_ : Binding::QGraphicsPixmapItem*, offset : QPointF) : Void
    fun bg_QGraphicsPixmapItem_setOffset_qreal_qreal(_self_ : Binding::QGraphicsPixmapItem*, x : Float64, y : Float64) : Void
    fun bg_QGraphicsPixmapItem_boundingRect_(_self_ : Binding::QGraphicsPixmapItem*) : Binding::QRectF*
    fun bg_QGraphicsPixmapItem_shape_(_self_ : Binding::QGraphicsPixmapItem*) : QPainterPath*
    fun bg_QGraphicsPixmapItem_contains_const_QPointF_R(_self_ : Binding::QGraphicsPixmapItem*, point : QPointF) : Bool
    fun bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : Binding::QGraphicsPixmapItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(_self_ : Binding::QGraphicsPixmapItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPixmapItem_opaqueArea_(_self_ : Binding::QGraphicsPixmapItem*) : QPainterPath*
    fun bg_QGraphicsPixmapItem_type_(_self_ : Binding::QGraphicsPixmapItem*) : Int32
    fun bg_QGraphicsPixmapItem_shapeMode_(_self_ : Binding::QGraphicsPixmapItem*) : GraphicsPixmapItem::ShapeMode
    fun bg_QGraphicsPixmapItem_setShapeMode_QGraphicsPixmapItem__ShapeMode(_self_ : Binding::QGraphicsPixmapItem*, mode : GraphicsPixmapItem::ShapeMode) : Void
    fun bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(_self_ : Binding::QGraphicsPixmapItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPixmapItem_DESTROY_(_self_ : Binding::QGraphicsPixmapItem*) : Void
    fun bg_QBrush_CONSTRUCT_() : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_Qt__BrushStyle(bs : BrushStyle) : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_const_QColor_R_Qt__BrushStyle(color : QColor*, bs : BrushStyle) : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_Qt__GlobalColor_Qt__BrushStyle(color : GlobalColor, bs : BrushStyle) : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_const_QColor_R_const_QPixmap_R(color : QColor*, pixmap : QPixmap*) : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_Qt__GlobalColor_const_QPixmap_R(color : GlobalColor, pixmap : QPixmap*) : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_const_QPixmap_R(pixmap : QPixmap*) : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_const_QImage_R(image : QImage*) : Binding::QBrush*
    fun bg_QBrush_CONSTRUCT_const_QGradient_R(gradient : QGradient*) : Binding::QBrush*
    fun bg_QBrush_swap_QBrush_R(_self_ : Binding::QBrush*, other : QBrush*) : Void
    fun bg_QBrush_style_(_self_ : Binding::QBrush*) : BrushStyle
    fun bg_QBrush_setStyle_Qt__BrushStyle(_self_ : Binding::QBrush*, unnamed_arg_0 : BrushStyle) : Void
    fun bg_QBrush_matrix_(_self_ : Binding::QBrush*) : QMatrix*
    fun bg_QBrush_setMatrix_const_QMatrix_R(_self_ : Binding::QBrush*, mat : QMatrix*) : Void
    fun bg_QBrush_transform_(_self_ : Binding::QBrush*) : QTransform*
    fun bg_QBrush_setTransform_const_QTransform_R(_self_ : Binding::QBrush*, unnamed_arg_0 : QTransform*) : Void
    fun bg_QBrush_texture_(_self_ : Binding::QBrush*) : Binding::QPixmap*
    fun bg_QBrush_setTexture_const_QPixmap_R(_self_ : Binding::QBrush*, pixmap : QPixmap*) : Void
    fun bg_QBrush_textureImage_(_self_ : Binding::QBrush*) : Binding::QImage*
    fun bg_QBrush_setTextureImage_const_QImage_R(_self_ : Binding::QBrush*, image : QImage*) : Void
    fun bg_QBrush_color_(_self_ : Binding::QBrush*) : Binding::QColor*
    fun bg_QBrush_setColor_const_QColor_R(_self_ : Binding::QBrush*, color : QColor*) : Void
    fun bg_QBrush_setColor_Qt__GlobalColor(_self_ : Binding::QBrush*, color : GlobalColor) : Void
    fun bg_QBrush_gradient_(_self_ : Binding::QBrush*) : QGradient*
    fun bg_QBrush_isOpaque_(_self_ : Binding::QBrush*) : Bool
    fun bg_QBrush_isDetached_(_self_ : Binding::QBrush*) : Bool
    fun bg_QBrush_DESTROY_(_self_ : Binding::QBrush*) : Void
    fun bg_QColor_CONSTRUCT_() : Binding::QColor*
    fun bg_QColor_CONSTRUCT_Qt__GlobalColor(color : GlobalColor) : Binding::QColor*
    fun bg_QColor_CONSTRUCT_int_int_int_int(r : Int32, g : Int32, b : Int32, a : Int32) : Binding::QColor*
    fun bg_QColor_CONSTRUCT_QRgb(rgb : UInt32) : Binding::QColor*
    fun bg_QColor_CONSTRUCT_QRgba64(rgba64 : QRgba64*) : Binding::QColor*
    fun bg_QColor_CONSTRUCT_const_QString_R(name : CrystalString) : Binding::QColor*
    fun bg_QColor_CONSTRUCT_const_char_X(aname : UInt8*) : Binding::QColor*
    fun bg_QColor_CONSTRUCT_QLatin1String(name : QLatin1String*) : Binding::QColor*
    fun bg_QColor_CONSTRUCT_QColor__Spec(spec : Color::Spec) : Binding::QColor*
    fun bg_QColor_isValid_(_self_ : Binding::QColor*) : Bool
    fun bg_QColor_name_(_self_ : Binding::QColor*) : Binding::CrystalString
    fun bg_QColor_name_QColor__NameFormat(_self_ : Binding::QColor*, format : Color::NameFormat) : Binding::CrystalString
    fun bg_QColor_setNamedColor_const_QString_R(_self_ : Binding::QColor*, name : CrystalString) : Void
    fun bg_QColor_setNamedColor_QLatin1String(_self_ : Binding::QColor*, name : QLatin1String*) : Void
    fun bg_QColor_colorNames_STATIC_() : Void*
    fun bg_QColor_spec_(_self_ : Binding::QColor*) : Color::Spec
    fun bg_QColor_alpha_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_setAlpha_int(_self_ : Binding::QColor*, alpha : Int32) : Void
    fun bg_QColor_alphaF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_setAlphaF_qreal(_self_ : Binding::QColor*, alpha : Float64) : Void
    fun bg_QColor_red_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_green_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_blue_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_setRed_int(_self_ : Binding::QColor*, red : Int32) : Void
    fun bg_QColor_setGreen_int(_self_ : Binding::QColor*, green : Int32) : Void
    fun bg_QColor_setBlue_int(_self_ : Binding::QColor*, blue : Int32) : Void
    fun bg_QColor_redF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_greenF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_blueF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_setRedF_qreal(_self_ : Binding::QColor*, red : Float64) : Void
    fun bg_QColor_setGreenF_qreal(_self_ : Binding::QColor*, green : Float64) : Void
    fun bg_QColor_setBlueF_qreal(_self_ : Binding::QColor*, blue : Float64) : Void
    fun bg_QColor_getRgb_int_X_int_X_int_X_int_X(_self_ : Binding::QColor*, r : Int32*, g : Int32*, b : Int32*, a : Int32*) : Void
    fun bg_QColor_setRgb_int_int_int_int(_self_ : Binding::QColor*, r : Int32, g : Int32, b : Int32, a : Int32) : Void
    fun bg_QColor_getRgbF_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QColor*, r : Float64*, g : Float64*, b : Float64*, a : Float64*) : Void
    fun bg_QColor_setRgbF_qreal_qreal_qreal_qreal(_self_ : Binding::QColor*, r : Float64, g : Float64, b : Float64, a : Float64) : Void
    fun bg_QColor_rgba64_(_self_ : Binding::QColor*) : QRgba64*
    fun bg_QColor_setRgba64_QRgba64(_self_ : Binding::QColor*, rgba : QRgba64*) : Void
    fun bg_QColor_rgba_(_self_ : Binding::QColor*) : UInt32
    fun bg_QColor_setRgba_QRgb(_self_ : Binding::QColor*, rgba : UInt32) : Void
    fun bg_QColor_rgb_(_self_ : Binding::QColor*) : UInt32
    fun bg_QColor_setRgb_QRgb(_self_ : Binding::QColor*, rgb : UInt32) : Void
    fun bg_QColor_hue_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_saturation_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_hsvHue_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_hsvSaturation_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_value_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_hueF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_saturationF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_hsvHueF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_hsvSaturationF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_valueF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_getHsv_int_X_int_X_int_X_int_X(_self_ : Binding::QColor*, h : Int32*, s : Int32*, v : Int32*, a : Int32*) : Void
    fun bg_QColor_setHsv_int_int_int_int(_self_ : Binding::QColor*, h : Int32, s : Int32, v : Int32, a : Int32) : Void
    fun bg_QColor_getHsvF_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QColor*, h : Float64*, s : Float64*, v : Float64*, a : Float64*) : Void
    fun bg_QColor_setHsvF_qreal_qreal_qreal_qreal(_self_ : Binding::QColor*, h : Float64, s : Float64, v : Float64, a : Float64) : Void
    fun bg_QColor_cyan_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_magenta_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_yellow_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_black_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_cyanF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_magentaF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_yellowF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_blackF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_getCmyk_int_X_int_X_int_X_int_X_int_X(_self_ : Binding::QColor*, c : Int32*, m : Int32*, y : Int32*, k : Int32*, a : Int32*) : Void
    fun bg_QColor_setCmyk_int_int_int_int_int(_self_ : Binding::QColor*, c : Int32, m : Int32, y : Int32, k : Int32, a : Int32) : Void
    fun bg_QColor_getCmykF_qreal_X_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QColor*, c : Float64*, m : Float64*, y : Float64*, k : Float64*, a : Float64*) : Void
    fun bg_QColor_setCmykF_qreal_qreal_qreal_qreal_qreal(_self_ : Binding::QColor*, c : Float64, m : Float64, y : Float64, k : Float64, a : Float64) : Void
    fun bg_QColor_hslHue_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_hslSaturation_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_lightness_(_self_ : Binding::QColor*) : Int32
    fun bg_QColor_hslHueF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_hslSaturationF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_lightnessF_(_self_ : Binding::QColor*) : Float64
    fun bg_QColor_getHsl_int_X_int_X_int_X_int_X(_self_ : Binding::QColor*, h : Int32*, s : Int32*, l : Int32*, a : Int32*) : Void
    fun bg_QColor_setHsl_int_int_int_int(_self_ : Binding::QColor*, h : Int32, s : Int32, l : Int32, a : Int32) : Void
    fun bg_QColor_getHslF_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : Binding::QColor*, h : Float64*, s : Float64*, l : Float64*, a : Float64*) : Void
    fun bg_QColor_setHslF_qreal_qreal_qreal_qreal(_self_ : Binding::QColor*, h : Float64, s : Float64, l : Float64, a : Float64) : Void
    fun bg_QColor_toRgb_(_self_ : Binding::QColor*) : Binding::QColor*
    fun bg_QColor_toHsv_(_self_ : Binding::QColor*) : Binding::QColor*
    fun bg_QColor_toCmyk_(_self_ : Binding::QColor*) : Binding::QColor*
    fun bg_QColor_toHsl_(_self_ : Binding::QColor*) : Binding::QColor*
    fun bg_QColor_convertTo_QColor__Spec(_self_ : Binding::QColor*, color_spec : Color::Spec) : Binding::QColor*
    fun bg_QColor_fromRgb_STATIC_QRgb(rgb : UInt32) : Binding::QColor*
    fun bg_QColor_fromRgba_STATIC_QRgb(rgba : UInt32) : Binding::QColor*
    fun bg_QColor_fromRgb_STATIC_int_int_int_int(r : Int32, g : Int32, b : Int32, a : Int32) : Binding::QColor*
    fun bg_QColor_fromRgbF_STATIC_qreal_qreal_qreal_qreal(r : Float64, g : Float64, b : Float64, a : Float64) : Binding::QColor*
    fun bg_QColor_fromRgba64_STATIC_ushort_ushort_ushort_ushort(r : UInt16, g : UInt16, b : UInt16, a : UInt16) : Binding::QColor*
    fun bg_QColor_fromRgba64_STATIC_QRgba64(rgba : QRgba64*) : Binding::QColor*
    fun bg_QColor_fromHsv_STATIC_int_int_int_int(h : Int32, s : Int32, v : Int32, a : Int32) : Binding::QColor*
    fun bg_QColor_fromHsvF_STATIC_qreal_qreal_qreal_qreal(h : Float64, s : Float64, v : Float64, a : Float64) : Binding::QColor*
    fun bg_QColor_fromCmyk_STATIC_int_int_int_int_int(c : Int32, m : Int32, y : Int32, k : Int32, a : Int32) : Binding::QColor*
    fun bg_QColor_fromCmykF_STATIC_qreal_qreal_qreal_qreal_qreal(c : Float64, m : Float64, y : Float64, k : Float64, a : Float64) : Binding::QColor*
    fun bg_QColor_fromHsl_STATIC_int_int_int_int(h : Int32, s : Int32, l : Int32, a : Int32) : Binding::QColor*
    fun bg_QColor_fromHslF_STATIC_qreal_qreal_qreal_qreal(h : Float64, s : Float64, l : Float64, a : Float64) : Binding::QColor*
    fun bg_QColor_light_int(_self_ : Binding::QColor*, f : Int32) : Binding::QColor*
    fun bg_QColor_lighter_int(_self_ : Binding::QColor*, f : Int32) : Binding::QColor*
    fun bg_QColor_dark_int(_self_ : Binding::QColor*, f : Int32) : Binding::QColor*
    fun bg_QColor_darker_int(_self_ : Binding::QColor*, f : Int32) : Binding::QColor*
    fun bg_QColor_isValidColor_STATIC_const_QString_R(name : CrystalString) : Bool
    fun bg_QColor_isValidColor_STATIC_QLatin1String(unnamed_arg_0 : QLatin1String*) : Bool
    fun bg_QColor_DESTROY_(_self_ : Binding::QColor*) : Void
    fun bg_QEvent_CONSTRUCT_QEvent__Type(type : Event::Type) : Binding::QEvent*
    fun bg_QEvent_type_(_self_ : Binding::QEvent*) : Event::Type
    fun bg_QEvent_spontaneous_(_self_ : Binding::QEvent*) : Bool
    fun bg_QEvent_setAccepted_bool(_self_ : Binding::QEvent*, accepted : Bool) : Void
    fun bg_QEvent_isAccepted_(_self_ : Binding::QEvent*) : Bool
    fun bg_QEvent_accept_(_self_ : Binding::QEvent*) : Void
    fun bg_QEvent_ignore_(_self_ : Binding::QEvent*) : Void
    fun bg_QEvent_registerEventType_STATIC_int(hint : Int32) : Int32
    fun bg_QEvent_DESTROY_(_self_ : Binding::QEvent*) : Void
    fun bg_QTimerEvent_CONSTRUCT_int(timer_id : Int32) : Binding::QTimerEvent*
    fun bg_QTimerEvent_timerId_(_self_ : Binding::QTimerEvent*) : Int32
    fun bg_QTimerEvent_DESTROY_(_self_ : Binding::QTimerEvent*) : Void
    fun bg_QDynamicPropertyChangeEvent_CONSTRUCT_const_QByteArray_R(name : QByteArray*) : Binding::QDynamicPropertyChangeEvent*
    fun bg_QDynamicPropertyChangeEvent_propertyName_(_self_ : Binding::QDynamicPropertyChangeEvent*) : QByteArray*
    fun bg_QDynamicPropertyChangeEvent_DESTROY_(_self_ : Binding::QDynamicPropertyChangeEvent*) : Void
    fun bg_QDeferredDeleteEvent_CONSTRUCT_() : Binding::QDeferredDeleteEvent*
    fun bg_QDeferredDeleteEvent_loopLevel_(_self_ : Binding::QDeferredDeleteEvent*) : Int32
    fun bg_QDeferredDeleteEvent_DESTROY_(_self_ : Binding::QDeferredDeleteEvent*) : Void
    fun bg_QInputEvent_CONSTRUCT_QEvent__Type(type : Event::Type) : Binding::QInputEvent*
    fun bg_QInputEvent_CONSTRUCT_QEvent__Type_Qt__KeyboardModifiers(type : Event::Type, modifiers : KeyboardModifiers) : Binding::QInputEvent*
    fun bg_QInputEvent_modifiers_(_self_ : Binding::QInputEvent*) : KeyboardModifiers
    fun bg_QInputEvent_setModifiers_Qt__KeyboardModifiers(_self_ : Binding::QInputEvent*, amodifiers : KeyboardModifiers) : Void
    fun bg_QInputEvent_timestamp_(_self_ : Binding::QInputEvent*) : UInt32
    fun bg_QInputEvent_setTimestamp_ulong(_self_ : Binding::QInputEvent*, atimestamp : UInt32) : Void
    fun bg_QInputEvent_DESTROY_(_self_ : Binding::QInputEvent*) : Void
    fun bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type : Event::Type, local_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers) : Binding::QMouseEvent*
    fun bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type : Event::Type, local_pos : QPointF, screen_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers) : Binding::QMouseEvent*
    fun bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type : Event::Type, local_pos : QPointF, window_pos : QPointF, screen_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers) : Binding::QMouseEvent*
    fun bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers_Qt__MouseEventSource(type : Event::Type, local_pos : QPointF, window_pos : QPointF, screen_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers, source : MouseEventSource) : Binding::QMouseEvent*
    fun bg_QMouseEvent_pos_(_self_ : Binding::QMouseEvent*) : Binding::QPoint
    fun bg_QMouseEvent_globalPos_(_self_ : Binding::QMouseEvent*) : Binding::QPoint
    fun bg_QMouseEvent_x_(_self_ : Binding::QMouseEvent*) : Int32
    fun bg_QMouseEvent_y_(_self_ : Binding::QMouseEvent*) : Int32
    fun bg_QMouseEvent_globalX_(_self_ : Binding::QMouseEvent*) : Int32
    fun bg_QMouseEvent_globalY_(_self_ : Binding::QMouseEvent*) : Int32
    fun bg_QMouseEvent_localPos_(_self_ : Binding::QMouseEvent*) : Binding::QPointF
    fun bg_QMouseEvent_windowPos_(_self_ : Binding::QMouseEvent*) : Binding::QPointF
    fun bg_QMouseEvent_screenPos_(_self_ : Binding::QMouseEvent*) : Binding::QPointF
    fun bg_QMouseEvent_button_(_self_ : Binding::QMouseEvent*) : MouseButton
    fun bg_QMouseEvent_buttons_(_self_ : Binding::QMouseEvent*) : MouseButtons
    fun bg_QMouseEvent_setLocalPos_const_QPointF_R(_self_ : Binding::QMouseEvent*, local_position : QPointF) : Void
    fun bg_QMouseEvent_source_(_self_ : Binding::QMouseEvent*) : MouseEventSource
    fun bg_QMouseEvent_flags_(_self_ : Binding::QMouseEvent*) : MouseEventFlags
    fun bg_QMouseEvent_DESTROY_(_self_ : Binding::QMouseEvent*) : Void
    fun bg_QEnterEvent_CONSTRUCT_const_QPointF_R_const_QPointF_R_const_QPointF_R(local_pos : QPointF, window_pos : QPointF, screen_pos : QPointF) : Binding::QEnterEvent*
    fun bg_QEnterEvent_pos_(_self_ : Binding::QEnterEvent*) : Binding::QPoint
    fun bg_QEnterEvent_globalPos_(_self_ : Binding::QEnterEvent*) : Binding::QPoint
    fun bg_QEnterEvent_x_(_self_ : Binding::QEnterEvent*) : Int32
    fun bg_QEnterEvent_y_(_self_ : Binding::QEnterEvent*) : Int32
    fun bg_QEnterEvent_globalX_(_self_ : Binding::QEnterEvent*) : Int32
    fun bg_QEnterEvent_globalY_(_self_ : Binding::QEnterEvent*) : Int32
    fun bg_QEnterEvent_localPos_(_self_ : Binding::QEnterEvent*) : Binding::QPointF
    fun bg_QEnterEvent_windowPos_(_self_ : Binding::QEnterEvent*) : Binding::QPointF
    fun bg_QEnterEvent_screenPos_(_self_ : Binding::QEnterEvent*) : Binding::QPointF
    fun bg_QEnterEvent_DESTROY_(_self_ : Binding::QEnterEvent*) : Void
    fun bg_QFocusEvent_CONSTRUCT_QEvent__Type_Qt__FocusReason(type : Event::Type, reason : FocusReason) : Binding::QFocusEvent*
    fun bg_QFocusEvent_gotFocus_(_self_ : Binding::QFocusEvent*) : Bool
    fun bg_QFocusEvent_lostFocus_(_self_ : Binding::QFocusEvent*) : Bool
    fun bg_QFocusEvent_reason_(_self_ : Binding::QFocusEvent*) : FocusReason
    fun bg_QFocusEvent_DESTROY_(_self_ : Binding::QFocusEvent*) : Void
    fun bg_QPaintEvent_CONSTRUCT_const_QRegion_R(paint_region : QRegion*) : Binding::QPaintEvent*
    fun bg_QPaintEvent_CONSTRUCT_const_QRect_R(paint_rect : QRect*) : Binding::QPaintEvent*
    fun bg_QPaintEvent_rect_(_self_ : Binding::QPaintEvent*) : Binding::QRect*
    fun bg_QPaintEvent_region_(_self_ : Binding::QPaintEvent*) : QRegion*
    fun bg_QPaintEvent_DESTROY_(_self_ : Binding::QPaintEvent*) : Void
    fun bg_QMoveEvent_CONSTRUCT_const_QPoint_R_const_QPoint_R(pos : QPoint, old_pos : QPoint) : Binding::QMoveEvent*
    fun bg_QMoveEvent_pos_(_self_ : Binding::QMoveEvent*) : Binding::QPoint
    fun bg_QMoveEvent_oldPos_(_self_ : Binding::QMoveEvent*) : Binding::QPoint
    fun bg_QMoveEvent_DESTROY_(_self_ : Binding::QMoveEvent*) : Void
    fun bg_QExposeEvent_CONSTRUCT_const_QRegion_R(rgn : QRegion*) : Binding::QExposeEvent*
    fun bg_QExposeEvent_region_(_self_ : Binding::QExposeEvent*) : QRegion*
    fun bg_QExposeEvent_DESTROY_(_self_ : Binding::QExposeEvent*) : Void
    fun bg_QPlatformSurfaceEvent_CONSTRUCT_QPlatformSurfaceEvent__SurfaceEventType(surface_event_type : PlatformSurfaceEvent::SurfaceEventType) : Binding::QPlatformSurfaceEvent*
    fun bg_QPlatformSurfaceEvent_surfaceEventType_(_self_ : Binding::QPlatformSurfaceEvent*) : PlatformSurfaceEvent::SurfaceEventType
    fun bg_QPlatformSurfaceEvent_DESTROY_(_self_ : Binding::QPlatformSurfaceEvent*) : Void
    fun bg_QResizeEvent_CONSTRUCT_const_QSize_R_const_QSize_R(size : QSize*, old_size : QSize*) : Binding::QResizeEvent*
    fun bg_QResizeEvent_size_(_self_ : Binding::QResizeEvent*) : QSize*
    fun bg_QResizeEvent_oldSize_(_self_ : Binding::QResizeEvent*) : QSize*
    fun bg_QResizeEvent_DESTROY_(_self_ : Binding::QResizeEvent*) : Void
    fun bg_QCloseEvent_CONSTRUCT_() : Binding::QCloseEvent*
    fun bg_QCloseEvent_DESTROY_(_self_ : Binding::QCloseEvent*) : Void
    fun bg_QIconDragEvent_CONSTRUCT_() : Binding::QIconDragEvent*
    fun bg_QIconDragEvent_DESTROY_(_self_ : Binding::QIconDragEvent*) : Void
    fun bg_QShowEvent_CONSTRUCT_() : Binding::QShowEvent*
    fun bg_QShowEvent_DESTROY_(_self_ : Binding::QShowEvent*) : Void
    fun bg_QHideEvent_CONSTRUCT_() : Binding::QHideEvent*
    fun bg_QHideEvent_DESTROY_(_self_ : Binding::QHideEvent*) : Void
    fun bg_QInputMethodEvent_CONSTRUCT_() : Binding::QInputMethodEvent*
    fun bg_QInputMethodEvent_setCommitString_const_QString_R_int_int(_self_ : Binding::QInputMethodEvent*, commit_string : CrystalString, replace_from : Int32, replace_length : Int32) : Void
    fun bg_QInputMethodEvent_preeditString_(_self_ : Binding::QInputMethodEvent*) : Binding::CrystalString
    fun bg_QInputMethodEvent_commitString_(_self_ : Binding::QInputMethodEvent*) : Binding::CrystalString
    fun bg_QInputMethodEvent_replacementStart_(_self_ : Binding::QInputMethodEvent*) : Int32
    fun bg_QInputMethodEvent_replacementLength_(_self_ : Binding::QInputMethodEvent*) : Int32
    fun bg_QInputMethodEvent_DESTROY_(_self_ : Binding::QInputMethodEvent*) : Void
    fun bg_QInputMethodQueryEvent_CONSTRUCT_Qt__InputMethodQueries(queries : InputMethodQueries) : Binding::QInputMethodQueryEvent*
    fun bg_QInputMethodQueryEvent_queries_(_self_ : Binding::QInputMethodQueryEvent*) : InputMethodQueries
    fun bg_QInputMethodQueryEvent_DESTROY_(_self_ : Binding::QInputMethodQueryEvent*) : Void
    fun bg_QDrag_metaObject_(_self_ : Binding::QDrag*) : QMetaObject*
    fun bg_QDrag_qt_metacast_const_char_X(_self_ : Binding::QDrag*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QDrag*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDrag_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDrag_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDrag_CONSTRUCT_QObject_X(drag_source : QObject*) : Binding::QDrag*
    fun bg_QDrag_setMimeData_QMimeData_X(_self_ : Binding::QDrag*, data : QMimeData*) : Void
    fun bg_QDrag_mimeData_(_self_ : Binding::QDrag*) : Binding::QMimeData*
    fun bg_QDrag_setPixmap_const_QPixmap_R(_self_ : Binding::QDrag*, unnamed_arg_0 : QPixmap*) : Void
    fun bg_QDrag_pixmap_(_self_ : Binding::QDrag*) : Binding::QPixmap*
    fun bg_QDrag_setHotSpot_const_QPoint_R(_self_ : Binding::QDrag*, hotspot : QPoint) : Void
    fun bg_QDrag_hotSpot_(_self_ : Binding::QDrag*) : Binding::QPoint
    fun bg_QDrag_source_(_self_ : Binding::QDrag*) : Binding::QObject*
    fun bg_QDrag_target_(_self_ : Binding::QDrag*) : Binding::QObject*
    fun bg_QDrag_start_(_self_ : Binding::QDrag*) : DropAction
    fun bg_QDrag_start_Qt__DropActions(_self_ : Binding::QDrag*, supported_actions : DropActions) : DropAction
    fun bg_QDrag_exec_(_self_ : Binding::QDrag*) : DropAction
    fun bg_QDrag_exec_Qt__DropActions(_self_ : Binding::QDrag*, supported_actions : DropActions) : DropAction
    fun bg_QDrag_exec_Qt__DropActions_Qt__DropAction(_self_ : Binding::QDrag*, supported_actions : DropActions, default_action : DropAction) : DropAction
    fun bg_QDrag_setDragCursor_const_QPixmap_R_Qt__DropAction(_self_ : Binding::QDrag*, cursor : QPixmap*, action : DropAction) : Void
    fun bg_QDrag_dragCursor_Qt__DropAction(_self_ : Binding::QDrag*, action : DropAction) : Binding::QPixmap*
    fun bg_QDrag_supportedActions_(_self_ : Binding::QDrag*) : DropActions
    fun bg_QDrag_defaultAction_(_self_ : Binding::QDrag*) : DropAction
    fun bg_QDrag_cancel_STATIC_() : Void
    fun bg_QDrag_actionChanged_Qt__DropAction(_self_ : Binding::QDrag*, action : DropAction) : Void
    fun bg_QDrag_actionChanged_CONNECT_CrystalProc_void__Qt__DropAction_(_self_ : Binding::QDrag*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDrag_targetChanged_QObject_X(_self_ : Binding::QDrag*, new_target : QObject*) : Void
    fun bg_QDrag_targetChanged_CONNECT_CrystalProc_void__QObjectX_(_self_ : Binding::QDrag*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDrag_DESTROY_(_self_ : Binding::QDrag*) : Void
    fun bg_QDropEvent_CONSTRUCT_const_QPointF_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos : QPointF, actions : DropActions, data : QMimeData*, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type) : Binding::QDropEvent*
    fun bg_QDropEvent_pos_(_self_ : Binding::QDropEvent*) : Binding::QPoint
    fun bg_QDropEvent_posF_(_self_ : Binding::QDropEvent*) : Binding::QPointF
    fun bg_QDropEvent_mouseButtons_(_self_ : Binding::QDropEvent*) : MouseButtons
    fun bg_QDropEvent_keyboardModifiers_(_self_ : Binding::QDropEvent*) : KeyboardModifiers
    fun bg_QDropEvent_possibleActions_(_self_ : Binding::QDropEvent*) : DropActions
    fun bg_QDropEvent_proposedAction_(_self_ : Binding::QDropEvent*) : DropAction
    fun bg_QDropEvent_acceptProposedAction_(_self_ : Binding::QDropEvent*) : Void
    fun bg_QDropEvent_dropAction_(_self_ : Binding::QDropEvent*) : DropAction
    fun bg_QDropEvent_setDropAction_Qt__DropAction(_self_ : Binding::QDropEvent*, action : DropAction) : Void
    fun bg_QDropEvent_source_(_self_ : Binding::QDropEvent*) : Binding::QObject*
    fun bg_QDropEvent_mimeData_(_self_ : Binding::QDropEvent*) : Binding::QMimeData*
    fun bg_QDropEvent_DESTROY_(_self_ : Binding::QDropEvent*) : Void
    fun bg_QDragMoveEvent_CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos : QPoint, actions : DropActions, data : QMimeData*, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type) : Binding::QDragMoveEvent*
    fun bg_QDragMoveEvent_answerRect_(_self_ : Binding::QDragMoveEvent*) : Binding::QRect*
    fun bg_QDragMoveEvent_accept_(_self_ : Binding::QDragMoveEvent*) : Void
    fun bg_QDragMoveEvent_ignore_(_self_ : Binding::QDragMoveEvent*) : Void
    fun bg_QDragMoveEvent_accept_const_QRect_R(_self_ : Binding::QDragMoveEvent*, r : QRect*) : Void
    fun bg_QDragMoveEvent_ignore_const_QRect_R(_self_ : Binding::QDragMoveEvent*, r : QRect*) : Void
    fun bg_QDragMoveEvent_DESTROY_(_self_ : Binding::QDragMoveEvent*) : Void
    fun bg_QDragEnterEvent_CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers(pos : QPoint, actions : DropActions, data : QMimeData*, buttons : MouseButtons, modifiers : KeyboardModifiers) : Binding::QDragEnterEvent*
    fun bg_QDragEnterEvent_DESTROY_(_self_ : Binding::QDragEnterEvent*) : Void
    fun bg_QDragLeaveEvent_CONSTRUCT_() : Binding::QDragLeaveEvent*
    fun bg_QDragLeaveEvent_DESTROY_(_self_ : Binding::QDragLeaveEvent*) : Void
    fun bg_QHelpEvent_CONSTRUCT_QEvent__Type_const_QPoint_R_const_QPoint_R(type : Event::Type, pos : QPoint, global_pos : QPoint) : Binding::QHelpEvent*
    fun bg_QHelpEvent_x_(_self_ : Binding::QHelpEvent*) : Int32
    fun bg_QHelpEvent_y_(_self_ : Binding::QHelpEvent*) : Int32
    fun bg_QHelpEvent_globalX_(_self_ : Binding::QHelpEvent*) : Int32
    fun bg_QHelpEvent_globalY_(_self_ : Binding::QHelpEvent*) : Int32
    fun bg_QHelpEvent_pos_(_self_ : Binding::QHelpEvent*) : Binding::QPoint
    fun bg_QHelpEvent_globalPos_(_self_ : Binding::QHelpEvent*) : Binding::QPoint
    fun bg_QHelpEvent_DESTROY_(_self_ : Binding::QHelpEvent*) : Void
    fun bg_QStatusTipEvent_CONSTRUCT_const_QString_R(tip : CrystalString) : Binding::QStatusTipEvent*
    fun bg_QStatusTipEvent_tip_(_self_ : Binding::QStatusTipEvent*) : Binding::CrystalString
    fun bg_QStatusTipEvent_DESTROY_(_self_ : Binding::QStatusTipEvent*) : Void
    fun bg_QWhatsThisClickedEvent_CONSTRUCT_const_QString_R(href : CrystalString) : Binding::QWhatsThisClickedEvent*
    fun bg_QWhatsThisClickedEvent_href_(_self_ : Binding::QWhatsThisClickedEvent*) : Binding::CrystalString
    fun bg_QWhatsThisClickedEvent_DESTROY_(_self_ : Binding::QWhatsThisClickedEvent*) : Void
    fun bg_QActionEvent_CONSTRUCT_int_QAction_X_QAction_X(type : Int32, action : QAction*, before : QAction*) : Binding::QActionEvent*
    fun bg_QActionEvent_action_(_self_ : Binding::QActionEvent*) : Binding::QAction*
    fun bg_QActionEvent_before_(_self_ : Binding::QActionEvent*) : Binding::QAction*
    fun bg_QActionEvent_DESTROY_(_self_ : Binding::QActionEvent*) : Void
    fun bg_QFileOpenEvent_CONSTRUCT_const_QString_R(file : CrystalString) : Binding::QFileOpenEvent*
    fun bg_QFileOpenEvent_CONSTRUCT_const_QUrl_R(url : QUrl*) : Binding::QFileOpenEvent*
    fun bg_QFileOpenEvent_file_(_self_ : Binding::QFileOpenEvent*) : Binding::CrystalString
    fun bg_QFileOpenEvent_url_(_self_ : Binding::QFileOpenEvent*) : Binding::QUrl*
    fun bg_QFileOpenEvent_openFile_QFile_R_QIODevice__OpenMode(_self_ : Binding::QFileOpenEvent*, file : QFile*, flags : IODevice::OpenMode) : Bool
    fun bg_QFileOpenEvent_DESTROY_(_self_ : Binding::QFileOpenEvent*) : Void
    fun bg_QToolBarChangeEvent_CONSTRUCT_bool(t : Bool) : Binding::QToolBarChangeEvent*
    fun bg_QToolBarChangeEvent_toggle_(_self_ : Binding::QToolBarChangeEvent*) : Bool
    fun bg_QToolBarChangeEvent_DESTROY_(_self_ : Binding::QToolBarChangeEvent*) : Void
    fun bg_QShortcutEvent_CONSTRUCT_const_QKeySequence_R_int_bool(key : QKeySequence*, id : Int32, ambiguous : Bool) : Binding::QShortcutEvent*
    fun bg_QShortcutEvent_key_(_self_ : Binding::QShortcutEvent*) : Binding::QKeySequence*
    fun bg_QShortcutEvent_shortcutId_(_self_ : Binding::QShortcutEvent*) : Int32
    fun bg_QShortcutEvent_isAmbiguous_(_self_ : Binding::QShortcutEvent*) : Bool
    fun bg_QShortcutEvent_DESTROY_(_self_ : Binding::QShortcutEvent*) : Void
    fun bg_QScrollPrepareEvent_CONSTRUCT_const_QPointF_R(start_pos : QPointF) : Binding::QScrollPrepareEvent*
    fun bg_QScrollPrepareEvent_startPos_(_self_ : Binding::QScrollPrepareEvent*) : Binding::QPointF
    fun bg_QScrollPrepareEvent_viewportSize_(_self_ : Binding::QScrollPrepareEvent*) : QSizeF*
    fun bg_QScrollPrepareEvent_contentPosRange_(_self_ : Binding::QScrollPrepareEvent*) : Binding::QRectF*
    fun bg_QScrollPrepareEvent_contentPos_(_self_ : Binding::QScrollPrepareEvent*) : Binding::QPointF
    fun bg_QScrollPrepareEvent_setViewportSize_const_QSizeF_R(_self_ : Binding::QScrollPrepareEvent*, size : QSizeF*) : Void
    fun bg_QScrollPrepareEvent_setContentPosRange_const_QRectF_R(_self_ : Binding::QScrollPrepareEvent*, rect : QRectF*) : Void
    fun bg_QScrollPrepareEvent_setContentPos_const_QPointF_R(_self_ : Binding::QScrollPrepareEvent*, pos : QPointF) : Void
    fun bg_QScrollPrepareEvent_DESTROY_(_self_ : Binding::QScrollPrepareEvent*) : Void
    fun bg_QScrollEvent_CONSTRUCT_const_QPointF_R_const_QPointF_R_QScrollEvent__ScrollState(content_pos : QPointF, overshoot : QPointF, scroll_state : ScrollEvent::ScrollState) : Binding::QScrollEvent*
    fun bg_QScrollEvent_contentPos_(_self_ : Binding::QScrollEvent*) : Binding::QPointF
    fun bg_QScrollEvent_overshootDistance_(_self_ : Binding::QScrollEvent*) : Binding::QPointF
    fun bg_QScrollEvent_scrollState_(_self_ : Binding::QScrollEvent*) : ScrollEvent::ScrollState
    fun bg_QScrollEvent_DESTROY_(_self_ : Binding::QScrollEvent*) : Void
    fun bg_QScreenOrientationChangeEvent_CONSTRUCT_QScreen_X_Qt__ScreenOrientation(screen : QScreen*, orientation : ScreenOrientation) : Binding::QScreenOrientationChangeEvent*
    fun bg_QScreenOrientationChangeEvent_screen_(_self_ : Binding::QScreenOrientationChangeEvent*) : Binding::QScreen*
    fun bg_QScreenOrientationChangeEvent_orientation_(_self_ : Binding::QScreenOrientationChangeEvent*) : ScreenOrientation
    fun bg_QScreenOrientationChangeEvent_DESTROY_(_self_ : Binding::QScreenOrientationChangeEvent*) : Void
    fun bg_QApplicationStateChangeEvent_CONSTRUCT_Qt__ApplicationState(state : ApplicationState) : Binding::QApplicationStateChangeEvent*
    fun bg_QApplicationStateChangeEvent_applicationState_(_self_ : Binding::QApplicationStateChangeEvent*) : ApplicationState
    fun bg_QApplicationStateChangeEvent_DESTROY_(_self_ : Binding::QApplicationStateChangeEvent*) : Void
    fun bg_QGestureEvent_CONSTRUCT_const_QList_QGesture_X__R(gestures : Void*) : Binding::QGestureEvent*
    fun bg_QGestureEvent_gestures_(_self_ : Binding::QGestureEvent*) : Void*
    fun bg_QGestureEvent_gesture_Qt__GestureType(_self_ : Binding::QGestureEvent*, type : GestureType) : Binding::QGesture*
    fun bg_QGestureEvent_activeGestures_(_self_ : Binding::QGestureEvent*) : Void*
    fun bg_QGestureEvent_canceledGestures_(_self_ : Binding::QGestureEvent*) : Void*
    fun bg_QGestureEvent_setAccepted_QGesture_X_bool(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : QGesture*, unnamed_arg_1 : Bool) : Void
    fun bg_QGestureEvent_accept_QGesture_X(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : QGesture*) : Void
    fun bg_QGestureEvent_ignore_QGesture_X(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : QGesture*) : Void
    fun bg_QGestureEvent_isAccepted_QGesture_X(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : QGesture*) : Bool
    fun bg_QGestureEvent_setAccepted_Qt__GestureType_bool(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : GestureType, unnamed_arg_1 : Bool) : Void
    fun bg_QGestureEvent_accept_Qt__GestureType(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : GestureType) : Void
    fun bg_QGestureEvent_ignore_Qt__GestureType(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : GestureType) : Void
    fun bg_QGestureEvent_isAccepted_Qt__GestureType(_self_ : Binding::QGestureEvent*, unnamed_arg_0 : GestureType) : Bool
    fun bg_QGestureEvent_setWidget_QWidget_X(_self_ : Binding::QGestureEvent*, widget : QWidget*) : Void
    fun bg_QGestureEvent_widget_(_self_ : Binding::QGestureEvent*) : Binding::QWidget*
    fun bg_QGestureEvent_mapToGraphicsScene_const_QPointF_R(_self_ : Binding::QGestureEvent*, gesture_point : QPointF) : Binding::QPointF
    fun bg_QGestureEvent_DESTROY_(_self_ : Binding::QGestureEvent*) : Void
    fun bg_QGraphicsSceneEvent_CONSTRUCT_QEvent__Type(type : Event::Type) : Binding::QGraphicsSceneEvent*
    fun bg_QGraphicsSceneEvent_widget_(_self_ : Binding::QGraphicsSceneEvent*) : Binding::QWidget*
    fun bg_QGraphicsSceneEvent_setWidget_QWidget_X(_self_ : Binding::QGraphicsSceneEvent*, widget : QWidget*) : Void
    fun bg_QGraphicsSceneEvent_CONSTRUCT_QGraphicsSceneEventPrivate_R_QEvent__Type(dd : QGraphicsSceneEventPrivate*, type : Event::Type) : Binding::QGraphicsSceneEvent*
    fun bg_QGraphicsSceneEvent_d_func_(_self_ : Binding::QGraphicsSceneEvent*) : QGraphicsSceneEventPrivate*
    fun bg_QGraphicsSceneEvent_DESTROY_(_self_ : Binding::QGraphicsSceneEvent*) : Void
    fun bg_QIODevice_metaObject_(_self_ : Binding::QIODevice*) : QMetaObject*
    fun bg_QIODevice_qt_metacast_const_char_X(_self_ : Binding::QIODevice*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QIODevice*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QIODevice_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QIODevice_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QIODevice_CONSTRUCT_() : Binding::QIODevice*
    fun bg_QIODevice_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QIODevice*
    fun bg_QIODevice_openMode_(_self_ : Binding::QIODevice*) : IODevice::OpenMode
    fun bg_QIODevice_setTextModeEnabled_bool(_self_ : Binding::QIODevice*, enabled : Bool) : Void
    fun bg_QIODevice_isTextModeEnabled_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_isOpen_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_isReadable_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_isWritable_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_isSequential_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_readChannelCount_(_self_ : Binding::QIODevice*) : Int32
    fun bg_QIODevice_writeChannelCount_(_self_ : Binding::QIODevice*) : Int32
    fun bg_QIODevice_currentReadChannel_(_self_ : Binding::QIODevice*) : Int32
    fun bg_QIODevice_setCurrentReadChannel_int(_self_ : Binding::QIODevice*, channel : Int32) : Void
    fun bg_QIODevice_currentWriteChannel_(_self_ : Binding::QIODevice*) : Int32
    fun bg_QIODevice_setCurrentWriteChannel_int(_self_ : Binding::QIODevice*, channel : Int32) : Void
    fun bg_QIODevice_open_QIODevice__OpenMode(_self_ : Binding::QIODevice*, mode : IODevice::OpenMode) : Bool
    fun bg_QIODevice_close_(_self_ : Binding::QIODevice*) : Void
    fun bg_QIODevice_pos_(_self_ : Binding::QIODevice*) : Int64
    fun bg_QIODevice_size_(_self_ : Binding::QIODevice*) : Int64
    fun bg_QIODevice_seek_qint64(_self_ : Binding::QIODevice*, pos : Int64) : Bool
    fun bg_QIODevice_atEnd_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_reset_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_bytesAvailable_(_self_ : Binding::QIODevice*) : Int64
    fun bg_QIODevice_bytesToWrite_(_self_ : Binding::QIODevice*) : Int64
    fun bg_QIODevice_read_char_X_qint64(_self_ : Binding::QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_read_qint64(_self_ : Binding::QIODevice*, maxlen : Int64) : QByteArray*
    fun bg_QIODevice_readAll_(_self_ : Binding::QIODevice*) : QByteArray*
    fun bg_QIODevice_readLine_char_X_qint64(_self_ : Binding::QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_readLine_qint64(_self_ : Binding::QIODevice*, maxlen : Int64) : QByteArray*
    fun bg_QIODevice_canReadLine_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_startTransaction_(_self_ : Binding::QIODevice*) : Void
    fun bg_QIODevice_commitTransaction_(_self_ : Binding::QIODevice*) : Void
    fun bg_QIODevice_rollbackTransaction_(_self_ : Binding::QIODevice*) : Void
    fun bg_QIODevice_isTransactionStarted_(_self_ : Binding::QIODevice*) : Bool
    fun bg_QIODevice_write_const_char_X_qint64(_self_ : Binding::QIODevice*, data : UInt8*, len : Int64) : Int64
    fun bg_QIODevice_write_const_char_X(_self_ : Binding::QIODevice*, data : UInt8*) : Int64
    fun bg_QIODevice_write_const_QByteArray_R(_self_ : Binding::QIODevice*, data : QByteArray*) : Int64
    fun bg_QIODevice_peek_char_X_qint64(_self_ : Binding::QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_peek_qint64(_self_ : Binding::QIODevice*, maxlen : Int64) : QByteArray*
    fun bg_QIODevice_waitForReadyRead_int(_self_ : Binding::QIODevice*, msecs : Int32) : Bool
    fun bg_QIODevice_waitForBytesWritten_int(_self_ : Binding::QIODevice*, msecs : Int32) : Bool
    fun bg_QIODevice_ungetChar_char(_self_ : Binding::QIODevice*, c : UInt8) : Void
    fun bg_QIODevice_putChar_char(_self_ : Binding::QIODevice*, c : UInt8) : Bool
    fun bg_QIODevice_getChar_char_X(_self_ : Binding::QIODevice*, c : UInt8*) : Bool
    fun bg_QIODevice_errorString_(_self_ : Binding::QIODevice*) : Binding::CrystalString
    fun bg_QIODevice_readyRead_(_self_ : Binding::QIODevice*) : Void
    fun bg_QIODevice_readyRead_CONNECT_CrystalProc_void_(_self_ : Binding::QIODevice*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QIODevice_channelReadyRead_int(_self_ : Binding::QIODevice*, channel : Int32) : Void
    fun bg_QIODevice_channelReadyRead_CONNECT_CrystalProc_void__int_(_self_ : Binding::QIODevice*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QIODevice_bytesWritten_qint64(_self_ : Binding::QIODevice*, bytes : Int64) : Void
    fun bg_QIODevice_bytesWritten_CONNECT_CrystalProc_void__qint64_(_self_ : Binding::QIODevice*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QIODevice_channelBytesWritten_int_qint64(_self_ : Binding::QIODevice*, channel : Int32, bytes : Int64) : Void
    fun bg_QIODevice_channelBytesWritten_CONNECT_CrystalProc_void__int__qint64_(_self_ : Binding::QIODevice*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QIODevice_aboutToClose_(_self_ : Binding::QIODevice*) : Void
    fun bg_QIODevice_aboutToClose_CONNECT_CrystalProc_void_(_self_ : Binding::QIODevice*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QIODevice_readChannelFinished_(_self_ : Binding::QIODevice*) : Void
    fun bg_QIODevice_readChannelFinished_CONNECT_CrystalProc_void_(_self_ : Binding::QIODevice*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QIODevice_CONSTRUCT_QIODevicePrivate_R_QObject_X(dd : QIODevicePrivate*, parent : QObject*) : Binding::QIODevice*
    fun bg_QIODevice_readData_char_X_qint64(_self_ : Binding::QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_readLineData_char_X_qint64(_self_ : Binding::QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_writeData_const_char_X_qint64(_self_ : Binding::QIODevice*, data : UInt8*, len : Int64) : Int64
    fun bg_QIODevice_setOpenMode_QIODevice__OpenMode(_self_ : Binding::QIODevice*, open_mode : IODevice::OpenMode) : Void
    fun bg_QIODevice_setErrorString_const_QString_R(_self_ : Binding::QIODevice*, error_string : CrystalString) : Void
    fun bg_QIODevice_DESTROY_(_self_ : Binding::QIODevice*) : Void
    fun bg_QGesture_metaObject_(_self_ : Binding::QGesture*) : QMetaObject*
    fun bg_QGesture_qt_metacast_const_char_X(_self_ : Binding::QGesture*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QGesture*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGesture_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGesture_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QGesture_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QGesture*
    fun bg_QGesture_gestureType_(_self_ : Binding::QGesture*) : GestureType
    fun bg_QGesture_state_(_self_ : Binding::QGesture*) : GestureState
    fun bg_QGesture_hotSpot_(_self_ : Binding::QGesture*) : Binding::QPointF
    fun bg_QGesture_setHotSpot_const_QPointF_R(_self_ : Binding::QGesture*, value : QPointF) : Void
    fun bg_QGesture_hasHotSpot_(_self_ : Binding::QGesture*) : Bool
    fun bg_QGesture_unsetHotSpot_(_self_ : Binding::QGesture*) : Void
    fun bg_QGesture_setGestureCancelPolicy_QGesture__GestureCancelPolicy(_self_ : Binding::QGesture*, policy : Gesture::GestureCancelPolicy) : Void
    fun bg_QGesture_gestureCancelPolicy_(_self_ : Binding::QGesture*) : Gesture::GestureCancelPolicy
    fun bg_QGesture_CONSTRUCT_QGesturePrivate_R_QObject_X(dd : QGesturePrivate*, parent : QObject*) : Binding::QGesture*
    fun bg_QGesture_DESTROY_(_self_ : Binding::QGesture*) : Void
    fun bg_QPainter_CONSTRUCT_() : Binding::QPainter*
    fun bg_QPainter_CONSTRUCT_QPaintDevice_X(unnamed_arg_0 : QPaintDevice*) : Binding::QPainter*
    fun bg_QPainter_device_(_self_ : Binding::QPainter*) : Binding::QPaintDevice*
    fun bg_QPainter_begin_QPaintDevice_X(_self_ : Binding::QPainter*, unnamed_arg_0 : QPaintDevice*) : Bool
    fun bg_QPainter_end_(_self_ : Binding::QPainter*) : Bool
    fun bg_QPainter_isActive_(_self_ : Binding::QPainter*) : Bool
    fun bg_QPainter_initFrom_const_QPaintDevice_X(_self_ : Binding::QPainter*, device : QPaintDevice*) : Void
    fun bg_QPainter_setCompositionMode_QPainter__CompositionMode(_self_ : Binding::QPainter*, mode : Painter::CompositionMode) : Void
    fun bg_QPainter_compositionMode_(_self_ : Binding::QPainter*) : Painter::CompositionMode
    fun bg_QPainter_font_(_self_ : Binding::QPainter*) : Binding::QFont*
    fun bg_QPainter_setFont_const_QFont_R(_self_ : Binding::QPainter*, f : QFont*) : Void
    fun bg_QPainter_fontMetrics_(_self_ : Binding::QPainter*) : QFontMetrics*
    fun bg_QPainter_fontInfo_(_self_ : Binding::QPainter*) : QFontInfo*
    fun bg_QPainter_setPen_const_QColor_R(_self_ : Binding::QPainter*, color : QColor*) : Void
    fun bg_QPainter_setPen_const_QPen_R(_self_ : Binding::QPainter*, pen : QPen*) : Void
    fun bg_QPainter_setPen_Qt__PenStyle(_self_ : Binding::QPainter*, style : PenStyle) : Void
    fun bg_QPainter_pen_(_self_ : Binding::QPainter*) : QPen*
    fun bg_QPainter_setBrush_const_QBrush_R(_self_ : Binding::QPainter*, brush : QBrush*) : Void
    fun bg_QPainter_setBrush_Qt__BrushStyle(_self_ : Binding::QPainter*, style : BrushStyle) : Void
    fun bg_QPainter_brush_(_self_ : Binding::QPainter*) : Binding::QBrush*
    fun bg_QPainter_setBackgroundMode_Qt__BGMode(_self_ : Binding::QPainter*, mode : BgMode) : Void
    fun bg_QPainter_backgroundMode_(_self_ : Binding::QPainter*) : BgMode
    fun bg_QPainter_brushOrigin_(_self_ : Binding::QPainter*) : Binding::QPoint
    fun bg_QPainter_setBrushOrigin_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32) : Void
    fun bg_QPainter_setBrushOrigin_const_QPoint_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QPoint) : Void
    fun bg_QPainter_setBrushOrigin_const_QPointF_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QPointF) : Void
    fun bg_QPainter_setBackground_const_QBrush_R(_self_ : Binding::QPainter*, bg : QBrush*) : Void
    fun bg_QPainter_background_(_self_ : Binding::QPainter*) : Binding::QBrush*
    fun bg_QPainter_opacity_(_self_ : Binding::QPainter*) : Float64
    fun bg_QPainter_setOpacity_qreal(_self_ : Binding::QPainter*, opacity : Float64) : Void
    fun bg_QPainter_clipRegion_(_self_ : Binding::QPainter*) : QRegion*
    fun bg_QPainter_clipPath_(_self_ : Binding::QPainter*) : QPainterPath*
    fun bg_QPainter_setClipRect_const_QRectF_R_Qt__ClipOperation(_self_ : Binding::QPainter*, unnamed_arg_0 : QRectF*, op : ClipOperation) : Void
    fun bg_QPainter_setClipRect_const_QRect_R_Qt__ClipOperation(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, op : ClipOperation) : Void
    fun bg_QPainter_setClipRect_int_int_int_int_Qt__ClipOperation(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, op : ClipOperation) : Void
    fun bg_QPainter_setClipRegion_const_QRegion_R_Qt__ClipOperation(_self_ : Binding::QPainter*, unnamed_arg_0 : QRegion*, op : ClipOperation) : Void
    fun bg_QPainter_setClipPath_const_QPainterPath_R_Qt__ClipOperation(_self_ : Binding::QPainter*, path : QPainterPath*, op : ClipOperation) : Void
    fun bg_QPainter_setClipping_bool(_self_ : Binding::QPainter*, enable : Bool) : Void
    fun bg_QPainter_hasClipping_(_self_ : Binding::QPainter*) : Bool
    fun bg_QPainter_clipBoundingRect_(_self_ : Binding::QPainter*) : Binding::QRectF*
    fun bg_QPainter_save_(_self_ : Binding::QPainter*) : Void
    fun bg_QPainter_restore_(_self_ : Binding::QPainter*) : Void
    fun bg_QPainter_setMatrix_const_QMatrix_R_bool(_self_ : Binding::QPainter*, matrix : QMatrix*, combine : Bool) : Void
    fun bg_QPainter_matrix_(_self_ : Binding::QPainter*) : QMatrix*
    fun bg_QPainter_deviceMatrix_(_self_ : Binding::QPainter*) : QMatrix*
    fun bg_QPainter_resetMatrix_(_self_ : Binding::QPainter*) : Void
    fun bg_QPainter_setTransform_const_QTransform_R_bool(_self_ : Binding::QPainter*, transform : QTransform*, combine : Bool) : Void
    fun bg_QPainter_transform_(_self_ : Binding::QPainter*) : QTransform*
    fun bg_QPainter_deviceTransform_(_self_ : Binding::QPainter*) : QTransform*
    fun bg_QPainter_resetTransform_(_self_ : Binding::QPainter*) : Void
    fun bg_QPainter_setWorldMatrix_const_QMatrix_R_bool(_self_ : Binding::QPainter*, matrix : QMatrix*, combine : Bool) : Void
    fun bg_QPainter_worldMatrix_(_self_ : Binding::QPainter*) : QMatrix*
    fun bg_QPainter_setWorldTransform_const_QTransform_R_bool(_self_ : Binding::QPainter*, matrix : QTransform*, combine : Bool) : Void
    fun bg_QPainter_worldTransform_(_self_ : Binding::QPainter*) : QTransform*
    fun bg_QPainter_combinedMatrix_(_self_ : Binding::QPainter*) : QMatrix*
    fun bg_QPainter_combinedTransform_(_self_ : Binding::QPainter*) : QTransform*
    fun bg_QPainter_setMatrixEnabled_bool(_self_ : Binding::QPainter*, enabled : Bool) : Void
    fun bg_QPainter_matrixEnabled_(_self_ : Binding::QPainter*) : Bool
    fun bg_QPainter_setWorldMatrixEnabled_bool(_self_ : Binding::QPainter*, enabled : Bool) : Void
    fun bg_QPainter_worldMatrixEnabled_(_self_ : Binding::QPainter*) : Bool
    fun bg_QPainter_scale_qreal_qreal(_self_ : Binding::QPainter*, sx : Float64, sy : Float64) : Void
    fun bg_QPainter_shear_qreal_qreal(_self_ : Binding::QPainter*, sh : Float64, sv : Float64) : Void
    fun bg_QPainter_rotate_qreal(_self_ : Binding::QPainter*, a : Float64) : Void
    fun bg_QPainter_translate_const_QPointF_R(_self_ : Binding::QPainter*, offset : QPointF) : Void
    fun bg_QPainter_translate_const_QPoint_R(_self_ : Binding::QPainter*, offset : QPoint) : Void
    fun bg_QPainter_translate_qreal_qreal(_self_ : Binding::QPainter*, dx : Float64, dy : Float64) : Void
    fun bg_QPainter_window_(_self_ : Binding::QPainter*) : Binding::QRect*
    fun bg_QPainter_setWindow_const_QRect_R(_self_ : Binding::QPainter*, window : QRect*) : Void
    fun bg_QPainter_setWindow_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_viewport_(_self_ : Binding::QPainter*) : Binding::QRect*
    fun bg_QPainter_setViewport_const_QRect_R(_self_ : Binding::QPainter*, viewport : QRect*) : Void
    fun bg_QPainter_setViewport_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_setViewTransformEnabled_bool(_self_ : Binding::QPainter*, enable : Bool) : Void
    fun bg_QPainter_viewTransformEnabled_(_self_ : Binding::QPainter*) : Bool
    fun bg_QPainter_strokePath_const_QPainterPath_R_const_QPen_R(_self_ : Binding::QPainter*, path : QPainterPath*, pen : QPen*) : Void
    fun bg_QPainter_fillPath_const_QPainterPath_R_const_QBrush_R(_self_ : Binding::QPainter*, path : QPainterPath*, brush : QBrush*) : Void
    fun bg_QPainter_drawPath_const_QPainterPath_R(_self_ : Binding::QPainter*, path : QPainterPath*) : Void
    fun bg_QPainter_drawPoint_const_QPointF_R(_self_ : Binding::QPainter*, pt : QPointF) : Void
    fun bg_QPainter_drawPoint_const_QPoint_R(_self_ : Binding::QPainter*, p : QPoint) : Void
    fun bg_QPainter_drawPoint_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32) : Void
    fun bg_QPainter_drawPoints_const_QPolygonF_R(_self_ : Binding::QPainter*, points : QPolygonF*) : Void
    fun bg_QPainter_drawPoints_const_QPolygon_R(_self_ : Binding::QPainter*, points : QPolygon*) : Void
    fun bg_QPainter_drawLine_const_QLineF_R(_self_ : Binding::QPainter*, line : QLineF*) : Void
    fun bg_QPainter_drawLine_const_QLine_R(_self_ : Binding::QPainter*, line : QLine*) : Void
    fun bg_QPainter_drawLine_int_int_int_int(_self_ : Binding::QPainter*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QPainter_drawLine_const_QPoint_R_const_QPoint_R(_self_ : Binding::QPainter*, p1 : QPoint, p2 : QPoint) : Void
    fun bg_QPainter_drawLine_const_QPointF_R_const_QPointF_R(_self_ : Binding::QPainter*, p1 : QPointF, p2 : QPointF) : Void
    fun bg_QPainter_drawLines_const_QLineF_X_int(_self_ : Binding::QPainter*, lines : QLineF*, line_count : Int32) : Void
    fun bg_QPainter_drawLines_const_QVector_QLineF__R(_self_ : Binding::QPainter*, lines : Void*) : Void
    fun bg_QPainter_drawLines_const_QVector_QPointF__R(_self_ : Binding::QPainter*, point_pairs : Void*) : Void
    fun bg_QPainter_drawLines_const_QLine_X_int(_self_ : Binding::QPainter*, lines : QLine*, line_count : Int32) : Void
    fun bg_QPainter_drawLines_const_QVector_QLine__R(_self_ : Binding::QPainter*, lines : Void*) : Void
    fun bg_QPainter_drawLines_const_QVector_QPoint__R(_self_ : Binding::QPainter*, point_pairs : Void*) : Void
    fun bg_QPainter_drawRect_const_QRectF_R(_self_ : Binding::QPainter*, rect : QRectF*) : Void
    fun bg_QPainter_drawRect_int_int_int_int(_self_ : Binding::QPainter*, x1 : Int32, y1 : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_drawRect_const_QRect_R(_self_ : Binding::QPainter*, rect : QRect*) : Void
    fun bg_QPainter_drawRects_const_QRectF_X_int(_self_ : Binding::QPainter*, rects : QRectF*, rect_count : Int32) : Void
    fun bg_QPainter_drawRects_const_QVector_QRectF__R(_self_ : Binding::QPainter*, rectangles : Void*) : Void
    fun bg_QPainter_drawRects_const_QRect_X_int(_self_ : Binding::QPainter*, rects : QRect*, rect_count : Int32) : Void
    fun bg_QPainter_drawRects_const_QVector_QRect__R(_self_ : Binding::QPainter*, rectangles : Void*) : Void
    fun bg_QPainter_drawEllipse_const_QRectF_R(_self_ : Binding::QPainter*, r : QRectF*) : Void
    fun bg_QPainter_drawEllipse_const_QRect_R(_self_ : Binding::QPainter*, r : QRect*) : Void
    fun bg_QPainter_drawEllipse_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_drawEllipse_const_QPointF_R_qreal_qreal(_self_ : Binding::QPainter*, center : QPointF, rx : Float64, ry : Float64) : Void
    fun bg_QPainter_drawEllipse_const_QPoint_R_int_int(_self_ : Binding::QPainter*, center : QPoint, rx : Int32, ry : Int32) : Void
    fun bg_QPainter_drawPolyline_const_QPolygonF_R(_self_ : Binding::QPainter*, polyline : QPolygonF*) : Void
    fun bg_QPainter_drawPolyline_const_QPolygon_R(_self_ : Binding::QPainter*, polygon : QPolygon*) : Void
    fun bg_QPainter_drawPolygon_const_QPolygonF_R_Qt__FillRule(_self_ : Binding::QPainter*, polygon : QPolygonF*, fill_rule : FillRule) : Void
    fun bg_QPainter_drawPolygon_const_QPolygon_R_Qt__FillRule(_self_ : Binding::QPainter*, polygon : QPolygon*, fill_rule : FillRule) : Void
    fun bg_QPainter_drawConvexPolygon_const_QPolygonF_R(_self_ : Binding::QPainter*, polygon : QPolygonF*) : Void
    fun bg_QPainter_drawConvexPolygon_const_QPolygon_R(_self_ : Binding::QPainter*, polygon : QPolygon*) : Void
    fun bg_QPainter_drawArc_const_QRectF_R_int_int(_self_ : Binding::QPainter*, rect : QRectF*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawArc_const_QRect_R_int_int(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawArc_int_int_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawPie_const_QRectF_R_int_int(_self_ : Binding::QPainter*, rect : QRectF*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawPie_int_int_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawPie_const_QRect_R_int_int(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawChord_const_QRectF_R_int_int(_self_ : Binding::QPainter*, rect : QRectF*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawChord_int_int_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawChord_const_QRect_R_int_int(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawRoundedRect_const_QRectF_R_qreal_qreal_Qt__SizeMode(_self_ : Binding::QPainter*, rect : QRectF*, x_radius : Float64, y_radius : Float64, mode : SizeMode) : Void
    fun bg_QPainter_drawRoundedRect_int_int_int_int_qreal_qreal_Qt__SizeMode(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, x_radius : Float64, y_radius : Float64, mode : SizeMode) : Void
    fun bg_QPainter_drawRoundedRect_const_QRect_R_qreal_qreal_Qt__SizeMode(_self_ : Binding::QPainter*, rect : QRect*, x_radius : Float64, y_radius : Float64, mode : SizeMode) : Void
    fun bg_QPainter_drawRoundRect_const_QRectF_R_int_int(_self_ : Binding::QPainter*, r : QRectF*, xround : Int32, yround : Int32) : Void
    fun bg_QPainter_drawRoundRect_int_int_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : Int32, unnamed_arg_5 : Int32) : Void
    fun bg_QPainter_drawRoundRect_const_QRect_R_int_int(_self_ : Binding::QPainter*, r : QRect*, xround : Int32, yround : Int32) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R(_self_ : Binding::QPainter*, rect : QRectF*, pm : QPixmap*) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R_const_QPointF_R(_self_ : Binding::QPainter*, rect : QRectF*, pm : QPixmap*, offset : QPointF) : Void
    fun bg_QPainter_drawTiledPixmap_int_int_int_int_const_QPixmap_R_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : QPixmap*, sx : Int32, sy : Int32) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, unnamed_arg_1 : QPixmap*) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R_const_QPoint_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, unnamed_arg_1 : QPixmap*, unnamed_arg_2 : QPoint) : Void
    fun bg_QPainter_drawPicture_const_QPointF_R_const_QPicture_R(_self_ : Binding::QPainter*, p : QPointF, picture : QPicture*) : Void
    fun bg_QPainter_drawPicture_int_int_const_QPicture_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, picture : QPicture*) : Void
    fun bg_QPainter_drawPicture_const_QPoint_R_const_QPicture_R(_self_ : Binding::QPainter*, p : QPoint, picture : QPicture*) : Void
    fun bg_QPainter_drawPixmap_const_QRectF_R_const_QPixmap_R_const_QRectF_R(_self_ : Binding::QPainter*, target_rect : QRectF*, pixmap : QPixmap*, source_rect : QRectF*) : Void
    fun bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R_const_QRect_R(_self_ : Binding::QPainter*, target_rect : QRect*, pixmap : QPixmap*, source_rect : QRect*) : Void
    fun bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, pm : QPixmap*, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
    fun bg_QPainter_drawPixmap_int_int_const_QPixmap_R_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, pm : QPixmap*, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
    fun bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R_const_QRectF_R(_self_ : Binding::QPainter*, p : QPointF, pm : QPixmap*, sr : QRectF*) : Void
    fun bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R_const_QRect_R(_self_ : Binding::QPainter*, p : QPoint, pm : QPixmap*, sr : QRect*) : Void
    fun bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R(_self_ : Binding::QPainter*, p : QPointF, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R(_self_ : Binding::QPainter*, p : QPoint, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_int_int_const_QPixmap_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R(_self_ : Binding::QPainter*, r : QRect*, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, pm : QPixmap*) : Void
    fun bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R(_self_ : Binding::QPainter*, target_rect : QRectF*, image : QImage*, source_rect : QRectF*) : Void
    fun bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(_self_ : Binding::QPainter*, target_rect : QRectF*, image : QImage*, source_rect : QRectF*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R(_self_ : Binding::QPainter*, target_rect : QRect*, image : QImage*, source_rect : QRect*) : Void
    fun bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(_self_ : Binding::QPainter*, target_rect : QRect*, image : QImage*, source_rect : QRect*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R(_self_ : Binding::QPainter*, p : QPointF, image : QImage*, sr : QRectF*) : Void
    fun bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(_self_ : Binding::QPainter*, p : QPointF, image : QImage*, sr : QRectF*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R(_self_ : Binding::QPainter*, p : QPoint, image : QImage*, sr : QRect*) : Void
    fun bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(_self_ : Binding::QPainter*, p : QPoint, image : QImage*, sr : QRect*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QRectF_R_const_QImage_R(_self_ : Binding::QPainter*, r : QRectF*, image : QImage*) : Void
    fun bg_QPainter_drawImage_const_QRect_R_const_QImage_R(_self_ : Binding::QPainter*, r : QRect*, image : QImage*) : Void
    fun bg_QPainter_drawImage_const_QPointF_R_const_QImage_R(_self_ : Binding::QPainter*, p : QPointF, image : QImage*) : Void
    fun bg_QPainter_drawImage_const_QPoint_R_const_QImage_R(_self_ : Binding::QPainter*, p : QPoint, image : QImage*) : Void
    fun bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, image : QImage*, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
    fun bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int_Qt__ImageConversionFlags(_self_ : Binding::QPainter*, x : Int32, y : Int32, image : QImage*, sx : Int32, sy : Int32, sw : Int32, sh : Int32, flags : ImageConversionFlags) : Void
    fun bg_QPainter_setLayoutDirection_Qt__LayoutDirection(_self_ : Binding::QPainter*, direction : LayoutDirection) : Void
    fun bg_QPainter_layoutDirection_(_self_ : Binding::QPainter*) : LayoutDirection
    fun bg_QPainter_drawGlyphRun_const_QPointF_R_const_QGlyphRun_R(_self_ : Binding::QPainter*, position : QPointF, glyph_run : QGlyphRun*) : Void
    fun bg_QPainter_drawStaticText_const_QPointF_R_const_QStaticText_R(_self_ : Binding::QPainter*, top_left_position : QPointF, static_text : QStaticText*) : Void
    fun bg_QPainter_drawStaticText_const_QPoint_R_const_QStaticText_R(_self_ : Binding::QPainter*, top_left_position : QPoint, static_text : QStaticText*) : Void
    fun bg_QPainter_drawStaticText_int_int_const_QStaticText_R(_self_ : Binding::QPainter*, left : Int32, top : Int32, static_text : QStaticText*) : Void
    fun bg_QPainter_drawText_const_QPointF_R_const_QString_R(_self_ : Binding::QPainter*, p : QPointF, s : CrystalString) : Void
    fun bg_QPainter_drawText_const_QPoint_R_const_QString_R(_self_ : Binding::QPainter*, p : QPoint, s : CrystalString) : Void
    fun bg_QPainter_drawText_int_int_const_QString_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, s : CrystalString) : Void
    fun bg_QPainter_drawText_const_QPointF_R_const_QString_R_int_int(_self_ : Binding::QPainter*, p : QPointF, str : CrystalString, tf : Int32, justification_padding : Int32) : Void
    fun bg_QPainter_drawText_const_QRectF_R_int_const_QString_R_QRectF_X(_self_ : Binding::QPainter*, r : QRectF*, flags : Int32, text : CrystalString, br : QRectF*) : Void
    fun bg_QPainter_drawText_const_QRect_R_int_const_QString_R_QRect_X(_self_ : Binding::QPainter*, r : QRect*, flags : Int32, text : CrystalString, br : QRect*) : Void
    fun bg_QPainter_drawText_int_int_int_int_int_const_QString_R_QRect_X(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : CrystalString, br : QRect*) : Void
    fun bg_QPainter_drawText_const_QRectF_R_const_QString_R(_self_ : Binding::QPainter*, r : QRectF*, text : CrystalString) : Void
    fun bg_QPainter_drawText_const_QRectF_R_const_QString_R_const_QTextOption_R(_self_ : Binding::QPainter*, r : QRectF*, text : CrystalString, o : QTextOption*) : Void
    fun bg_QPainter_boundingRect_const_QRectF_R_int_const_QString_R(_self_ : Binding::QPainter*, rect : QRectF*, flags : Int32, text : CrystalString) : Binding::QRectF*
    fun bg_QPainter_boundingRect_const_QRect_R_int_const_QString_R(_self_ : Binding::QPainter*, rect : QRect*, flags : Int32, text : CrystalString) : Binding::QRect*
    fun bg_QPainter_boundingRect_int_int_int_int_int_const_QString_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : CrystalString) : Binding::QRect*
    fun bg_QPainter_boundingRect_const_QRectF_R_const_QString_R(_self_ : Binding::QPainter*, rect : QRectF*, text : CrystalString) : Binding::QRectF*
    fun bg_QPainter_boundingRect_const_QRectF_R_const_QString_R_const_QTextOption_R(_self_ : Binding::QPainter*, rect : QRectF*, text : CrystalString, o : QTextOption*) : Binding::QRectF*
    fun bg_QPainter_drawTextItem_const_QPointF_R_const_QTextItem_R(_self_ : Binding::QPainter*, p : QPointF, ti : QTextItem*) : Void
    fun bg_QPainter_drawTextItem_int_int_const_QTextItem_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, ti : QTextItem*) : Void
    fun bg_QPainter_drawTextItem_const_QPoint_R_const_QTextItem_R(_self_ : Binding::QPainter*, p : QPoint, ti : QTextItem*) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_const_QBrush_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRectF*, unnamed_arg_1 : QBrush*) : Void
    fun bg_QPainter_fillRect_int_int_int_int_const_QBrush_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : QBrush*) : Void
    fun bg_QPainter_fillRect_const_QRect_R_const_QBrush_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, unnamed_arg_1 : QBrush*) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_const_QColor_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRectF*, color : QColor*) : Void
    fun bg_QPainter_fillRect_int_int_int_int_const_QColor_R(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, color : QColor*) : Void
    fun bg_QPainter_fillRect_const_QRect_R_const_QColor_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*, color : QColor*) : Void
    fun bg_QPainter_fillRect_int_int_int_int_Qt__GlobalColor(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, c : GlobalColor) : Void
    fun bg_QPainter_fillRect_const_QRect_R_Qt__GlobalColor(_self_ : Binding::QPainter*, r : QRect*, c : GlobalColor) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_Qt__GlobalColor(_self_ : Binding::QPainter*, r : QRectF*, c : GlobalColor) : Void
    fun bg_QPainter_fillRect_int_int_int_int_Qt__BrushStyle(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, style : BrushStyle) : Void
    fun bg_QPainter_fillRect_const_QRect_R_Qt__BrushStyle(_self_ : Binding::QPainter*, r : QRect*, style : BrushStyle) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_Qt__BrushStyle(_self_ : Binding::QPainter*, r : QRectF*, style : BrushStyle) : Void
    fun bg_QPainter_eraseRect_const_QRectF_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRectF*) : Void
    fun bg_QPainter_eraseRect_int_int_int_int(_self_ : Binding::QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_eraseRect_const_QRect_R(_self_ : Binding::QPainter*, unnamed_arg_0 : QRect*) : Void
    fun bg_QPainter_setRenderHint_QPainter__RenderHint_bool(_self_ : Binding::QPainter*, hint : Painter::RenderHint, on : Bool) : Void
    fun bg_QPainter_setRenderHints_QPainter__RenderHints_bool(_self_ : Binding::QPainter*, hints : Painter::RenderHints, on : Bool) : Void
    fun bg_QPainter_renderHints_(_self_ : Binding::QPainter*) : Painter::RenderHints
    fun bg_QPainter_testRenderHint_QPainter__RenderHint(_self_ : Binding::QPainter*, hint : Painter::RenderHint) : Bool
    fun bg_QPainter_paintEngine_(_self_ : Binding::QPainter*) : QPaintEngine*
    fun bg_QPainter_setRedirected_STATIC_const_QPaintDevice_X_QPaintDevice_X(device : QPaintDevice*, replacement : QPaintDevice*) : Void
    fun bg_QPainter_setRedirected_STATIC_const_QPaintDevice_X_QPaintDevice_X_const_QPoint_R(device : QPaintDevice*, replacement : QPaintDevice*, offset : QPoint) : Void
    fun bg_QPainter_restoreRedirected_STATIC_const_QPaintDevice_X(device : QPaintDevice*) : Void
    fun bg_QPainter_beginNativePainting_(_self_ : Binding::QPainter*) : Void
    fun bg_QPainter_endNativePainting_(_self_ : Binding::QPainter*) : Void
    fun bg_QPainter_DESTROY_(_self_ : Binding::QPainter*) : Void
    fun bg_QLine_CONSTRUCT_() : Binding::QLine*
    fun bg_QLine_CONSTRUCT_const_QPoint_R_const_QPoint_R(pt1 : QPoint, pt2 : QPoint) : Binding::QLine*
    fun bg_QLine_CONSTRUCT_int_int_int_int(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Binding::QLine*
    fun bg_QLine_isNull_(_self_ : Binding::QLine*) : Bool
    fun bg_QLine_p1_(_self_ : Binding::QLine*) : Binding::QPoint
    fun bg_QLine_p2_(_self_ : Binding::QLine*) : Binding::QPoint
    fun bg_QLine_x1_(_self_ : Binding::QLine*) : Int32
    fun bg_QLine_y1_(_self_ : Binding::QLine*) : Int32
    fun bg_QLine_x2_(_self_ : Binding::QLine*) : Int32
    fun bg_QLine_y2_(_self_ : Binding::QLine*) : Int32
    fun bg_QLine_dx_(_self_ : Binding::QLine*) : Int32
    fun bg_QLine_dy_(_self_ : Binding::QLine*) : Int32
    fun bg_QLine_translate_const_QPoint_R(_self_ : Binding::QLine*, p : QPoint) : Void
    fun bg_QLine_translate_int_int(_self_ : Binding::QLine*, dx : Int32, dy : Int32) : Void
    fun bg_QLine_translated_const_QPoint_R(_self_ : Binding::QLine*, p : QPoint) : Binding::QLine*
    fun bg_QLine_translated_int_int(_self_ : Binding::QLine*, dx : Int32, dy : Int32) : Binding::QLine*
    fun bg_QLine_center_(_self_ : Binding::QLine*) : Binding::QPoint
    fun bg_QLine_setP1_const_QPoint_R(_self_ : Binding::QLine*, p1 : QPoint) : Void
    fun bg_QLine_setP2_const_QPoint_R(_self_ : Binding::QLine*, p2 : QPoint) : Void
    fun bg_QLine_setPoints_const_QPoint_R_const_QPoint_R(_self_ : Binding::QLine*, p1 : QPoint, p2 : QPoint) : Void
    fun bg_QLine_setLine_int_int_int_int(_self_ : Binding::QLine*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QLine_DESTROY_(_self_ : Binding::QLine*) : Void
    fun bg_QLineF_CONSTRUCT_() : Binding::QLineF*
    fun bg_QLineF_CONSTRUCT_const_QPointF_R_const_QPointF_R(pt1 : QPointF, pt2 : QPointF) : Binding::QLineF*
    fun bg_QLineF_CONSTRUCT_qreal_qreal_qreal_qreal(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Binding::QLineF*
    fun bg_QLineF_CONSTRUCT_const_QLine_R(line : QLine*) : Binding::QLineF*
    fun bg_QLineF_fromPolar_STATIC_qreal_qreal(length : Float64, angle : Float64) : Binding::QLineF*
    fun bg_QLineF_isNull_(_self_ : Binding::QLineF*) : Bool
    fun bg_QLineF_p1_(_self_ : Binding::QLineF*) : Binding::QPointF
    fun bg_QLineF_p2_(_self_ : Binding::QLineF*) : Binding::QPointF
    fun bg_QLineF_x1_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_y1_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_x2_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_y2_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_dx_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_dy_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_length_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_setLength_qreal(_self_ : Binding::QLineF*, len : Float64) : Void
    fun bg_QLineF_angle_(_self_ : Binding::QLineF*) : Float64
    fun bg_QLineF_setAngle_qreal(_self_ : Binding::QLineF*, angle : Float64) : Void
    fun bg_QLineF_angleTo_const_QLineF_R(_self_ : Binding::QLineF*, l : QLineF*) : Float64
    fun bg_QLineF_unitVector_(_self_ : Binding::QLineF*) : Binding::QLineF*
    fun bg_QLineF_normalVector_(_self_ : Binding::QLineF*) : Binding::QLineF*
    fun bg_QLineF_angle_const_QLineF_R(_self_ : Binding::QLineF*, l : QLineF*) : Float64
    fun bg_QLineF_pointAt_qreal(_self_ : Binding::QLineF*, t : Float64) : Binding::QPointF
    fun bg_QLineF_translate_const_QPointF_R(_self_ : Binding::QLineF*, p : QPointF) : Void
    fun bg_QLineF_translate_qreal_qreal(_self_ : Binding::QLineF*, dx : Float64, dy : Float64) : Void
    fun bg_QLineF_translated_const_QPointF_R(_self_ : Binding::QLineF*, p : QPointF) : Binding::QLineF*
    fun bg_QLineF_translated_qreal_qreal(_self_ : Binding::QLineF*, dx : Float64, dy : Float64) : Binding::QLineF*
    fun bg_QLineF_center_(_self_ : Binding::QLineF*) : Binding::QPointF
    fun bg_QLineF_setP1_const_QPointF_R(_self_ : Binding::QLineF*, p1 : QPointF) : Void
    fun bg_QLineF_setP2_const_QPointF_R(_self_ : Binding::QLineF*, p2 : QPointF) : Void
    fun bg_QLineF_setPoints_const_QPointF_R_const_QPointF_R(_self_ : Binding::QLineF*, p1 : QPointF, p2 : QPointF) : Void
    fun bg_QLineF_setLine_qreal_qreal_qreal_qreal(_self_ : Binding::QLineF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
    fun bg_QLineF_toLine_(_self_ : Binding::QLineF*) : Binding::QLine*
    fun bg_QLineF_DESTROY_(_self_ : Binding::QLineF*) : Void
    fun bg_QSystemTrayIcon_metaObject_(_self_ : Binding::QSystemTrayIcon*) : QMetaObject*
    fun bg_QSystemTrayIcon_qt_metacast_const_char_X(_self_ : Binding::QSystemTrayIcon*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QSystemTrayIcon*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSystemTrayIcon_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QSystemTrayIcon_CONSTRUCT_QObject_X(parent : QObject*) : Binding::QSystemTrayIcon*
    fun bg_QSystemTrayIcon_CONSTRUCT_const_QIcon_R_QObject_X(icon : QIcon*, parent : QObject*) : Binding::QSystemTrayIcon*
    fun bg_QSystemTrayIcon_setContextMenu_QMenu_X(_self_ : Binding::QSystemTrayIcon*, menu : QMenu*) : Void
    fun bg_QSystemTrayIcon_contextMenu_(_self_ : Binding::QSystemTrayIcon*) : Binding::QMenu*
    fun bg_QSystemTrayIcon_icon_(_self_ : Binding::QSystemTrayIcon*) : Binding::QIcon*
    fun bg_QSystemTrayIcon_setIcon_const_QIcon_R(_self_ : Binding::QSystemTrayIcon*, icon : QIcon*) : Void
    fun bg_QSystemTrayIcon_toolTip_(_self_ : Binding::QSystemTrayIcon*) : Binding::CrystalString
    fun bg_QSystemTrayIcon_setToolTip_const_QString_R(_self_ : Binding::QSystemTrayIcon*, tip : CrystalString) : Void
    fun bg_QSystemTrayIcon_isSystemTrayAvailable_STATIC_() : Bool
    fun bg_QSystemTrayIcon_supportsMessages_STATIC_() : Bool
    fun bg_QSystemTrayIcon_geometry_(_self_ : Binding::QSystemTrayIcon*) : Binding::QRect*
    fun bg_QSystemTrayIcon_isVisible_(_self_ : Binding::QSystemTrayIcon*) : Bool
    fun bg_QSystemTrayIcon_setVisible_bool(_self_ : Binding::QSystemTrayIcon*, visible : Bool) : Void
    fun bg_QSystemTrayIcon_show_(_self_ : Binding::QSystemTrayIcon*) : Void
    fun bg_QSystemTrayIcon_hide_(_self_ : Binding::QSystemTrayIcon*) : Void
    fun bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_const_QIcon_R_int(_self_ : Binding::QSystemTrayIcon*, title : CrystalString, msg : CrystalString, icon : QIcon*, msecs : Int32) : Void
    fun bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_QSystemTrayIcon__MessageIcon_int(_self_ : Binding::QSystemTrayIcon*, title : CrystalString, msg : CrystalString, icon : SystemTrayIcon::MessageIcon, msecs : Int32) : Void
    fun bg_QSystemTrayIcon_activated_QSystemTrayIcon__ActivationReason(_self_ : Binding::QSystemTrayIcon*, reason : SystemTrayIcon::ActivationReason) : Void
    fun bg_QSystemTrayIcon_activated_CONNECT_CrystalProc_void__QSystemTrayIcon__ActivationReason_(_self_ : Binding::QSystemTrayIcon*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QSystemTrayIcon_messageClicked_(_self_ : Binding::QSystemTrayIcon*) : Void
    fun bg_QSystemTrayIcon_messageClicked_CONNECT_CrystalProc_void_(_self_ : Binding::QSystemTrayIcon*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QSystemTrayIcon_event_QEvent_X(_self_ : Binding::QSystemTrayIcon*, event : QEvent*) : Bool
    fun bg_QSystemTrayIcon_DESTROY_(_self_ : Binding::QSystemTrayIcon*) : Void
    fun bg_QDesktopServices_openUrl_STATIC_const_QUrl_R(url : QUrl*) : Bool
    fun bg_QDesktopServices_setUrlHandler_STATIC_const_QString_R_QObject_X_const_char_X(scheme : CrystalString, receiver : QObject*, method : UInt8*) : Void
    fun bg_QDesktopServices_unsetUrlHandler_STATIC_const_QString_R(scheme : CrystalString) : Void
    fun bg_QDesktopServices_DESTROY_(_self_ : Binding::QDesktopServices*) : Void
    fun bg_QDesktopWidget_metaObject_(_self_ : Binding::QDesktopWidget*) : QMetaObject*
    fun bg_QDesktopWidget_qt_metacast_const_char_X(_self_ : Binding::QDesktopWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QDesktopWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDesktopWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QDesktopWidget_CONSTRUCT_() : Binding::QDesktopWidget*
    fun bg_QDesktopWidget_isVirtualDesktop_(_self_ : Binding::QDesktopWidget*) : Bool
    fun bg_QDesktopWidget_numScreens_(_self_ : Binding::QDesktopWidget*) : Int32
    fun bg_QDesktopWidget_screenCount_(_self_ : Binding::QDesktopWidget*) : Int32
    fun bg_QDesktopWidget_primaryScreen_(_self_ : Binding::QDesktopWidget*) : Int32
    fun bg_QDesktopWidget_screenNumber_const_QWidget_X(_self_ : Binding::QDesktopWidget*, widget : QWidget*) : Int32
    fun bg_QDesktopWidget_screenNumber_const_QPoint_R(_self_ : Binding::QDesktopWidget*, unnamed_arg_0 : QPoint) : Int32
    fun bg_QDesktopWidget_screen_int(_self_ : Binding::QDesktopWidget*, screen : Int32) : Binding::QWidget*
    fun bg_QDesktopWidget_screenGeometry_int(_self_ : Binding::QDesktopWidget*, screen : Int32) : Binding::QRect*
    fun bg_QDesktopWidget_screenGeometry_const_QWidget_X(_self_ : Binding::QDesktopWidget*, widget : QWidget*) : Binding::QRect*
    fun bg_QDesktopWidget_screenGeometry_const_QPoint_R(_self_ : Binding::QDesktopWidget*, point : QPoint) : Binding::QRect*
    fun bg_QDesktopWidget_availableGeometry_int(_self_ : Binding::QDesktopWidget*, screen : Int32) : Binding::QRect*
    fun bg_QDesktopWidget_availableGeometry_const_QWidget_X(_self_ : Binding::QDesktopWidget*, widget : QWidget*) : Binding::QRect*
    fun bg_QDesktopWidget_availableGeometry_const_QPoint_R(_self_ : Binding::QDesktopWidget*, point : QPoint) : Binding::QRect*
    fun bg_QDesktopWidget_resized_int(_self_ : Binding::QDesktopWidget*, unnamed_arg_0 : Int32) : Void
    fun bg_QDesktopWidget_resized_CONNECT_CrystalProc_void__int_(_self_ : Binding::QDesktopWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDesktopWidget_workAreaResized_int(_self_ : Binding::QDesktopWidget*, unnamed_arg_0 : Int32) : Void
    fun bg_QDesktopWidget_workAreaResized_CONNECT_CrystalProc_void__int_(_self_ : Binding::QDesktopWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDesktopWidget_screenCountChanged_int(_self_ : Binding::QDesktopWidget*, unnamed_arg_0 : Int32) : Void
    fun bg_QDesktopWidget_screenCountChanged_CONNECT_CrystalProc_void__int_(_self_ : Binding::QDesktopWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDesktopWidget_primaryScreenChanged_(_self_ : Binding::QDesktopWidget*) : Void
    fun bg_QDesktopWidget_primaryScreenChanged_CONNECT_CrystalProc_void_(_self_ : Binding::QDesktopWidget*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QDesktopWidget_resizeEvent_QResizeEvent_X(_self_ : Binding::QDesktopWidget*, e : QResizeEvent*) : Void
    fun bg_QDesktopWidget_DESTROY_(_self_ : Binding::QDesktopWidget*) : Void
    fun bg_QStandardPaths_writableLocation_STATIC_QStandardPaths__StandardLocation(type : StandardPaths::StandardLocation) : Binding::CrystalString
    fun bg_QStandardPaths_standardLocations_STATIC_QStandardPaths__StandardLocation(type : StandardPaths::StandardLocation) : Void*
    fun bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R(type : StandardPaths::StandardLocation, file_name : CrystalString) : Binding::CrystalString
    fun bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type : StandardPaths::StandardLocation, file_name : CrystalString, options : StandardPaths::LocateOptions) : Binding::CrystalString
    fun bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R(type : StandardPaths::StandardLocation, file_name : CrystalString) : Void*
    fun bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type : StandardPaths::StandardLocation, file_name : CrystalString, options : StandardPaths::LocateOptions) : Void*
    fun bg_QStandardPaths_displayName_STATIC_QStandardPaths__StandardLocation(type : StandardPaths::StandardLocation) : Binding::CrystalString
    fun bg_QStandardPaths_findExecutable_STATIC_const_QString_R(executable_name : CrystalString) : Binding::CrystalString
    fun bg_QStandardPaths_findExecutable_STATIC_const_QString_R_const_QStringList_R(executable_name : CrystalString, paths : Void*) : Binding::CrystalString
    fun bg_QStandardPaths_enableTestMode_STATIC_bool(test_mode : Bool) : Void
    fun bg_QStandardPaths_setTestModeEnabled_STATIC_bool(test_mode : Bool) : Void
    fun bg_QStandardPaths_isTestModeEnabled_STATIC_() : Bool
    fun bg_QMimeData_metaObject_(_self_ : Binding::QMimeData*) : QMetaObject*
    fun bg_QMimeData_qt_metacast_const_char_X(_self_ : Binding::QMimeData*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QMimeData*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMimeData_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMimeData_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QMimeData_CONSTRUCT_() : Binding::QMimeData*
    fun bg_QMimeData_urls_(_self_ : Binding::QMimeData*) : Void*
    fun bg_QMimeData_setUrls_const_QList_QUrl__R(_self_ : Binding::QMimeData*, urls : Void*) : Void
    fun bg_QMimeData_hasUrls_(_self_ : Binding::QMimeData*) : Bool
    fun bg_QMimeData_text_(_self_ : Binding::QMimeData*) : Binding::CrystalString
    fun bg_QMimeData_setText_const_QString_R(_self_ : Binding::QMimeData*, text : CrystalString) : Void
    fun bg_QMimeData_hasText_(_self_ : Binding::QMimeData*) : Bool
    fun bg_QMimeData_html_(_self_ : Binding::QMimeData*) : Binding::CrystalString
    fun bg_QMimeData_setHtml_const_QString_R(_self_ : Binding::QMimeData*, html : CrystalString) : Void
    fun bg_QMimeData_hasHtml_(_self_ : Binding::QMimeData*) : Bool
    fun bg_QMimeData_hasImage_(_self_ : Binding::QMimeData*) : Bool
    fun bg_QMimeData_hasColor_(_self_ : Binding::QMimeData*) : Bool
    fun bg_QMimeData_data_const_QString_R(_self_ : Binding::QMimeData*, mimetype : CrystalString) : QByteArray*
    fun bg_QMimeData_setData_const_QString_R_const_QByteArray_R(_self_ : Binding::QMimeData*, mimetype : CrystalString, data : QByteArray*) : Void
    fun bg_QMimeData_removeFormat_const_QString_R(_self_ : Binding::QMimeData*, mimetype : CrystalString) : Void
    fun bg_QMimeData_hasFormat_const_QString_R(_self_ : Binding::QMimeData*, mimetype : CrystalString) : Bool
    fun bg_QMimeData_formats_(_self_ : Binding::QMimeData*) : Void*
    fun bg_QMimeData_clear_(_self_ : Binding::QMimeData*) : Void
    fun bg_QMimeData_DESTROY_(_self_ : Binding::QMimeData*) : Void
    fun bg_QSizePolicy_CONSTRUCT_() : Binding::QSizePolicy*
    fun bg_QSizePolicy_CONSTRUCT_QSizePolicy__Policy_QSizePolicy__Policy_QSizePolicy__ControlType(horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy, type : SizePolicy::ControlType) : Binding::QSizePolicy*
    fun bg_QSizePolicy_horizontalPolicy_(_self_ : Binding::QSizePolicy*) : SizePolicy::Policy
    fun bg_QSizePolicy_verticalPolicy_(_self_ : Binding::QSizePolicy*) : SizePolicy::Policy
    fun bg_QSizePolicy_controlType_(_self_ : Binding::QSizePolicy*) : SizePolicy::ControlType
    fun bg_QSizePolicy_setHorizontalPolicy_QSizePolicy__Policy(_self_ : Binding::QSizePolicy*, d : SizePolicy::Policy) : Void
    fun bg_QSizePolicy_setVerticalPolicy_QSizePolicy__Policy(_self_ : Binding::QSizePolicy*, d : SizePolicy::Policy) : Void
    fun bg_QSizePolicy_setControlType_QSizePolicy__ControlType(_self_ : Binding::QSizePolicy*, type : SizePolicy::ControlType) : Void
    fun bg_QSizePolicy_expandingDirections_(_self_ : Binding::QSizePolicy*) : Orientations
    fun bg_QSizePolicy_setHeightForWidth_bool(_self_ : Binding::QSizePolicy*, b : Bool) : Void
    fun bg_QSizePolicy_hasHeightForWidth_(_self_ : Binding::QSizePolicy*) : Bool
    fun bg_QSizePolicy_setWidthForHeight_bool(_self_ : Binding::QSizePolicy*, b : Bool) : Void
    fun bg_QSizePolicy_hasWidthForHeight_(_self_ : Binding::QSizePolicy*) : Bool
    fun bg_QSizePolicy_horizontalStretch_(_self_ : Binding::QSizePolicy*) : Int32
    fun bg_QSizePolicy_verticalStretch_(_self_ : Binding::QSizePolicy*) : Int32
    fun bg_QSizePolicy_setHorizontalStretch_int(_self_ : Binding::QSizePolicy*, stretch_factor : Int32) : Void
    fun bg_QSizePolicy_setVerticalStretch_int(_self_ : Binding::QSizePolicy*, stretch_factor : Int32) : Void
    fun bg_QSizePolicy_retainSizeWhenHidden_(_self_ : Binding::QSizePolicy*) : Bool
    fun bg_QSizePolicy_setRetainSizeWhenHidden_bool(_self_ : Binding::QSizePolicy*, retain_size : Bool) : Void
    fun bg_QSizePolicy_transpose_(_self_ : Binding::QSizePolicy*) : Void
    fun bg_QSizePolicy_transposed_(_self_ : Binding::QSizePolicy*) : Binding::QSizePolicy*
    fun bg_QSizePolicy_DESTROY_(_self_ : Binding::QSizePolicy*) : Void
    fun bg_QUrl_CONSTRUCT_() : Binding::QUrl*
    fun bg_QUrl_CONSTRUCT_const_QString_R_QUrl__ParsingMode(url : CrystalString, mode : Url::ParsingMode) : Binding::QUrl*
    fun bg_QUrl_swap_QUrl_R(_self_ : Binding::QUrl*, other : QUrl*) : Void
    fun bg_QUrl_setUrl_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, url : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_url_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_url_QUrl__FormattingOptions(_self_ : Binding::QUrl*, options : Url::FormattingOptions) : Binding::CrystalString
    fun bg_QUrl_toString_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_toString_QUrl__FormattingOptions(_self_ : Binding::QUrl*, options : Url::FormattingOptions) : Binding::CrystalString
    fun bg_QUrl_toDisplayString_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_toDisplayString_QUrl__FormattingOptions(_self_ : Binding::QUrl*, options : Url::FormattingOptions) : Binding::CrystalString
    fun bg_QUrl_adjusted_QUrl__FormattingOptions(_self_ : Binding::QUrl*, options : Url::FormattingOptions) : Binding::QUrl*
    fun bg_QUrl_toEncoded_(_self_ : Binding::QUrl*) : QByteArray*
    fun bg_QUrl_toEncoded_QUrl__FormattingOptions(_self_ : Binding::QUrl*, options : Url::FormattingOptions) : QByteArray*
    fun bg_QUrl_fromEncoded_STATIC_const_QByteArray_R_QUrl__ParsingMode(url : QByteArray*, mode : Url::ParsingMode) : Binding::QUrl*
    fun bg_QUrl_fromUserInput_STATIC_const_QString_R(user_input : CrystalString) : Binding::QUrl*
    fun bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R(user_input : CrystalString, working_directory : CrystalString) : Binding::QUrl*
    fun bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R_QUrl__UserInputResolutionOptions(user_input : CrystalString, working_directory : CrystalString, options : Url::UserInputResolutionOptions) : Binding::QUrl*
    fun bg_QUrl_isValid_(_self_ : Binding::QUrl*) : Bool
    fun bg_QUrl_errorString_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_isEmpty_(_self_ : Binding::QUrl*) : Bool
    fun bg_QUrl_clear_(_self_ : Binding::QUrl*) : Void
    fun bg_QUrl_setScheme_const_QString_R(_self_ : Binding::QUrl*, scheme : CrystalString) : Void
    fun bg_QUrl_scheme_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_setAuthority_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, authority : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_authority_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_authority_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, options : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_setUserInfo_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, user_info : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_userInfo_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_userInfo_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, options : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_setUserName_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, user_name : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_userName_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_userName_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, options : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_setPassword_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, password : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_password_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_password_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, unnamed_arg_0 : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_setHost_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, host : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_host_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_host_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, unnamed_arg_0 : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_topLevelDomain_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_topLevelDomain_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, options : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_setPort_int(_self_ : Binding::QUrl*, port : Int32) : Void
    fun bg_QUrl_port_int(_self_ : Binding::QUrl*, default_port : Int32) : Int32
    fun bg_QUrl_setPath_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, path : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_path_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_path_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, options : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_fileName_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_fileName_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, options : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_hasQuery_(_self_ : Binding::QUrl*) : Bool
    fun bg_QUrl_setQuery_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, query : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_setQuery_const_QUrlQuery_R(_self_ : Binding::QUrl*, query : QUrlQuery*) : Void
    fun bg_QUrl_query_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_query_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, unnamed_arg_0 : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_hasFragment_(_self_ : Binding::QUrl*) : Bool
    fun bg_QUrl_fragment_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_fragment_QUrl__ComponentFormattingOptions(_self_ : Binding::QUrl*, options : Url::ComponentFormattingOptions) : Binding::CrystalString
    fun bg_QUrl_setFragment_const_QString_R_QUrl__ParsingMode(_self_ : Binding::QUrl*, fragment : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_resolved_const_QUrl_R(_self_ : Binding::QUrl*, relative : QUrl*) : Binding::QUrl*
    fun bg_QUrl_isRelative_(_self_ : Binding::QUrl*) : Bool
    fun bg_QUrl_isParentOf_const_QUrl_R(_self_ : Binding::QUrl*, url : QUrl*) : Bool
    fun bg_QUrl_isLocalFile_(_self_ : Binding::QUrl*) : Bool
    fun bg_QUrl_fromLocalFile_STATIC_const_QString_R(localfile : CrystalString) : Binding::QUrl*
    fun bg_QUrl_toLocalFile_(_self_ : Binding::QUrl*) : Binding::CrystalString
    fun bg_QUrl_detach_(_self_ : Binding::QUrl*) : Void
    fun bg_QUrl_isDetached_(_self_ : Binding::QUrl*) : Bool
    fun bg_QUrl_matches_const_QUrl_R_QUrl__FormattingOptions(_self_ : Binding::QUrl*, url : QUrl*, options : Url::FormattingOptions) : Bool
    fun bg_QUrl_fromPercentEncoding_STATIC_const_QByteArray_R(unnamed_arg_0 : QByteArray*) : Binding::CrystalString
    fun bg_QUrl_toPercentEncoding_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QByteArray*
    fun bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R(unnamed_arg_0 : CrystalString, exclude : QByteArray*) : QByteArray*
    fun bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R_const_QByteArray_R(unnamed_arg_0 : CrystalString, exclude : QByteArray*, include_ : QByteArray*) : QByteArray*
    fun bg_QUrl_fromAce_STATIC_const_QByteArray_R(unnamed_arg_0 : QByteArray*) : Binding::CrystalString
    fun bg_QUrl_toAce_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QByteArray*
    fun bg_QUrl_idnWhitelist_STATIC_() : Void*
    fun bg_QUrl_toStringList_STATIC_const_QList_QUrl__R(uris : Void*) : Void*
    fun bg_QUrl_toStringList_STATIC_const_QList_QUrl__R_QUrl__FormattingOptions(uris : Void*, options : Url::FormattingOptions) : Void*
    fun bg_QUrl_fromStringList_STATIC_const_QStringList_R_QUrl__ParsingMode(uris : Void*, mode : Url::ParsingMode) : Void*
    fun bg_QUrl_setIdnWhitelist_STATIC_const_QStringList_R(unnamed_arg_0 : Void*) : Void
    fun bg_QUrl_DESTROY_(_self_ : Binding::QUrl*) : Void
    fun bg_QScreen_metaObject_(_self_ : Binding::QScreen*) : QMetaObject*
    fun bg_QScreen_qt_metacast_const_char_X(_self_ : Binding::QScreen*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : Binding::QScreen*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QScreen_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QScreen_trUtf8_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : Binding::CrystalString
    fun bg_QScreen_handle_(_self_ : Binding::QScreen*) : QPlatformScreen*
    fun bg_QScreen_name_(_self_ : Binding::QScreen*) : Binding::CrystalString
    fun bg_QScreen_manufacturer_(_self_ : Binding::QScreen*) : Binding::CrystalString
    fun bg_QScreen_model_(_self_ : Binding::QScreen*) : Binding::CrystalString
    fun bg_QScreen_serialNumber_(_self_ : Binding::QScreen*) : Binding::CrystalString
    fun bg_QScreen_depth_(_self_ : Binding::QScreen*) : Int32
    fun bg_QScreen_size_(_self_ : Binding::QScreen*) : QSize*
    fun bg_QScreen_geometry_(_self_ : Binding::QScreen*) : Binding::QRect*
    fun bg_QScreen_physicalSize_(_self_ : Binding::QScreen*) : QSizeF*
    fun bg_QScreen_physicalDotsPerInchX_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_physicalDotsPerInchY_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_physicalDotsPerInch_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_logicalDotsPerInchX_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_logicalDotsPerInchY_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_logicalDotsPerInch_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_devicePixelRatio_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_availableSize_(_self_ : Binding::QScreen*) : QSize*
    fun bg_QScreen_availableGeometry_(_self_ : Binding::QScreen*) : Binding::QRect*
    fun bg_QScreen_virtualSiblings_(_self_ : Binding::QScreen*) : Void*
    fun bg_QScreen_virtualSize_(_self_ : Binding::QScreen*) : QSize*
    fun bg_QScreen_virtualGeometry_(_self_ : Binding::QScreen*) : Binding::QRect*
    fun bg_QScreen_availableVirtualSize_(_self_ : Binding::QScreen*) : QSize*
    fun bg_QScreen_availableVirtualGeometry_(_self_ : Binding::QScreen*) : Binding::QRect*
    fun bg_QScreen_primaryOrientation_(_self_ : Binding::QScreen*) : ScreenOrientation
    fun bg_QScreen_orientation_(_self_ : Binding::QScreen*) : ScreenOrientation
    fun bg_QScreen_nativeOrientation_(_self_ : Binding::QScreen*) : ScreenOrientation
    fun bg_QScreen_orientationUpdateMask_(_self_ : Binding::QScreen*) : ScreenOrientations
    fun bg_QScreen_setOrientationUpdateMask_Qt__ScreenOrientations(_self_ : Binding::QScreen*, mask : ScreenOrientations) : Void
    fun bg_QScreen_angleBetween_Qt__ScreenOrientation_Qt__ScreenOrientation(_self_ : Binding::QScreen*, a : ScreenOrientation, b : ScreenOrientation) : Int32
    fun bg_QScreen_transformBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(_self_ : Binding::QScreen*, a : ScreenOrientation, b : ScreenOrientation, target : QRect*) : QTransform*
    fun bg_QScreen_mapBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(_self_ : Binding::QScreen*, a : ScreenOrientation, b : ScreenOrientation, rect : QRect*) : Binding::QRect*
    fun bg_QScreen_isPortrait_Qt__ScreenOrientation(_self_ : Binding::QScreen*, orientation : ScreenOrientation) : Bool
    fun bg_QScreen_isLandscape_Qt__ScreenOrientation(_self_ : Binding::QScreen*, orientation : ScreenOrientation) : Bool
    fun bg_QScreen_refreshRate_(_self_ : Binding::QScreen*) : Float64
    fun bg_QScreen_geometryChanged_const_QRect_R(_self_ : Binding::QScreen*, geometry : QRect*) : Void
    fun bg_QScreen_geometryChanged_CONNECT_CrystalProc_void__const_QRectR_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_availableGeometryChanged_const_QRect_R(_self_ : Binding::QScreen*, geometry : QRect*) : Void
    fun bg_QScreen_availableGeometryChanged_CONNECT_CrystalProc_void__const_QRectR_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_physicalSizeChanged_const_QSizeF_R(_self_ : Binding::QScreen*, size : QSizeF*) : Void
    fun bg_QScreen_physicalSizeChanged_CONNECT_CrystalProc_void__const_QSizeFR_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_physicalDotsPerInchChanged_qreal(_self_ : Binding::QScreen*, dpi : Float64) : Void
    fun bg_QScreen_physicalDotsPerInchChanged_CONNECT_CrystalProc_void__qreal_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_logicalDotsPerInchChanged_qreal(_self_ : Binding::QScreen*, dpi : Float64) : Void
    fun bg_QScreen_logicalDotsPerInchChanged_CONNECT_CrystalProc_void__qreal_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_virtualGeometryChanged_const_QRect_R(_self_ : Binding::QScreen*, rect : QRect*) : Void
    fun bg_QScreen_virtualGeometryChanged_CONNECT_CrystalProc_void__const_QRectR_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_primaryOrientationChanged_Qt__ScreenOrientation(_self_ : Binding::QScreen*, orientation : ScreenOrientation) : Void
    fun bg_QScreen_primaryOrientationChanged_CONNECT_CrystalProc_void__Qt__ScreenOrientation_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_orientationChanged_Qt__ScreenOrientation(_self_ : Binding::QScreen*, orientation : ScreenOrientation) : Void
    fun bg_QScreen_orientationChanged_CONNECT_CrystalProc_void__Qt__ScreenOrientation_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_refreshRateChanged_qreal(_self_ : Binding::QScreen*, refresh_rate : Float64) : Void
    fun bg_QScreen_refreshRateChanged_CONNECT_CrystalProc_void__qreal_(_self_ : Binding::QScreen*, _proc_ : CrystalProc) : Binding::QMetaObjectConnection*
    fun bg_QScreen_DESTROY_(_self_ : Binding::QScreen*) : Void
    fun bg_QPixelFormat_CONSTRUCT_() : Binding::QPixelFormat*
    fun bg_QPixelFormat_CONSTRUCT_QPixelFormat__ColorModel_uchar_uchar_uchar_uchar_uchar_uchar_QPixelFormat__AlphaUsage_QPixelFormat__AlphaPosition_QPixelFormat__AlphaPremultiplied_QPixelFormat__TypeInterpretation_QPixelFormat__ByteOrder_uchar(color_model : PixelFormat::ColorModel, first_size : UInt8, second_size : UInt8, third_size : UInt8, fourth_size : UInt8, fifth_size : UInt8, alpha_size : UInt8, alpha_usage : PixelFormat::AlphaUsage, alpha_position : PixelFormat::AlphaPosition, premultiplied : PixelFormat::AlphaPremultiplied, type_interpretation : PixelFormat::TypeInterpretation, byte_order : PixelFormat::ByteOrder, sub_enum : UInt8) : Binding::QPixelFormat*
    fun bg_QPixelFormat_colorModel_(_self_ : Binding::QPixelFormat*) : PixelFormat::ColorModel
    fun bg_QPixelFormat_channelCount_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_redSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_greenSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_blueSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_cyanSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_magentaSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_yellowSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_blackSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_hueSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_saturationSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_lightnessSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_brightnessSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_alphaSize_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_bitsPerPixel_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_alphaUsage_(_self_ : Binding::QPixelFormat*) : PixelFormat::AlphaUsage
    fun bg_QPixelFormat_alphaPosition_(_self_ : Binding::QPixelFormat*) : PixelFormat::AlphaPosition
    fun bg_QPixelFormat_premultiplied_(_self_ : Binding::QPixelFormat*) : PixelFormat::AlphaPremultiplied
    fun bg_QPixelFormat_typeInterpretation_(_self_ : Binding::QPixelFormat*) : PixelFormat::TypeInterpretation
    fun bg_QPixelFormat_byteOrder_(_self_ : Binding::QPixelFormat*) : PixelFormat::ByteOrder
    fun bg_QPixelFormat_yuvLayout_(_self_ : Binding::QPixelFormat*) : PixelFormat::YUVLayout
    fun bg_QPixelFormat_subEnum_(_self_ : Binding::QPixelFormat*) : UInt8
    fun bg_QPixelFormat_DESTROY_(_self_ : Binding::QPixelFormat*) : Void
    fun bg_QTextFormat_CONSTRUCT_() : Binding::QTextFormat*
    fun bg_QTextFormat_CONSTRUCT_int(type : Int32) : Binding::QTextFormat*
    fun bg_QTextFormat_swap_QTextFormat_R(_self_ : Binding::QTextFormat*, other : QTextFormat*) : Void
    fun bg_QTextFormat_merge_const_QTextFormat_R(_self_ : Binding::QTextFormat*, other : QTextFormat*) : Void
    fun bg_QTextFormat_isValid_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_isEmpty_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_type_(_self_ : Binding::QTextFormat*) : Int32
    fun bg_QTextFormat_objectIndex_(_self_ : Binding::QTextFormat*) : Int32
    fun bg_QTextFormat_setObjectIndex_int(_self_ : Binding::QTextFormat*, object : Int32) : Void
    fun bg_QTextFormat_clearProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Void
    fun bg_QTextFormat_hasProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Bool
    fun bg_QTextFormat_boolProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Bool
    fun bg_QTextFormat_intProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Int32
    fun bg_QTextFormat_doubleProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Float64
    fun bg_QTextFormat_stringProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Binding::CrystalString
    fun bg_QTextFormat_colorProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Binding::QColor*
    fun bg_QTextFormat_penProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : QPen*
    fun bg_QTextFormat_brushProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Binding::QBrush*
    fun bg_QTextFormat_lengthProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Binding::QTextLength*
    fun bg_QTextFormat_lengthVectorProperty_int(_self_ : Binding::QTextFormat*, property_id : Int32) : Void*
    fun bg_QTextFormat_setProperty_int_const_QVector_QTextLength__R(_self_ : Binding::QTextFormat*, property_id : Int32, lengths : Void*) : Void
    fun bg_QTextFormat_propertyCount_(_self_ : Binding::QTextFormat*) : Int32
    fun bg_QTextFormat_setObjectType_int(_self_ : Binding::QTextFormat*, type : Int32) : Void
    fun bg_QTextFormat_objectType_(_self_ : Binding::QTextFormat*) : Int32
    fun bg_QTextFormat_isCharFormat_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_isBlockFormat_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_isListFormat_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_isFrameFormat_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_isImageFormat_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_isTableFormat_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_isTableCellFormat_(_self_ : Binding::QTextFormat*) : Bool
    fun bg_QTextFormat_toBlockFormat_(_self_ : Binding::QTextFormat*) : Binding::QTextBlockFormat*
    fun bg_QTextFormat_toCharFormat_(_self_ : Binding::QTextFormat*) : Binding::QTextCharFormat*
    fun bg_QTextFormat_toListFormat_(_self_ : Binding::QTextFormat*) : Binding::QTextListFormat*
    fun bg_QTextFormat_toTableFormat_(_self_ : Binding::QTextFormat*) : QTextTableFormat*
    fun bg_QTextFormat_toFrameFormat_(_self_ : Binding::QTextFormat*) : Binding::QTextFrameFormat*
    fun bg_QTextFormat_toImageFormat_(_self_ : Binding::QTextFormat*) : QTextImageFormat*
    fun bg_QTextFormat_toTableCellFormat_(_self_ : Binding::QTextFormat*) : QTextTableCellFormat*
    fun bg_QTextFormat_setLayoutDirection_Qt__LayoutDirection(_self_ : Binding::QTextFormat*, direction : LayoutDirection) : Void
    fun bg_QTextFormat_layoutDirection_(_self_ : Binding::QTextFormat*) : LayoutDirection
    fun bg_QTextFormat_setBackground_const_QBrush_R(_self_ : Binding::QTextFormat*, brush : QBrush*) : Void
    fun bg_QTextFormat_background_(_self_ : Binding::QTextFormat*) : Binding::QBrush*
    fun bg_QTextFormat_clearBackground_(_self_ : Binding::QTextFormat*) : Void
    fun bg_QTextFormat_setForeground_const_QBrush_R(_self_ : Binding::QTextFormat*, brush : QBrush*) : Void
    fun bg_QTextFormat_foreground_(_self_ : Binding::QTextFormat*) : Binding::QBrush*
    fun bg_QTextFormat_clearForeground_(_self_ : Binding::QTextFormat*) : Void
    fun bg_QTextFormat_DESTROY_(_self_ : Binding::QTextFormat*) : Void
    fun bg_QTextBlockFormat_CONSTRUCT_() : Binding::QTextBlockFormat*
    fun bg_QTextBlockFormat_isValid_(_self_ : Binding::QTextBlockFormat*) : Bool
    fun bg_QTextBlockFormat_setAlignment_Qt__Alignment(_self_ : Binding::QTextBlockFormat*, alignment : Alignment) : Void
    fun bg_QTextBlockFormat_alignment_(_self_ : Binding::QTextBlockFormat*) : Alignment
    fun bg_QTextBlockFormat_setTopMargin_qreal(_self_ : Binding::QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_topMargin_(_self_ : Binding::QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setBottomMargin_qreal(_self_ : Binding::QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_bottomMargin_(_self_ : Binding::QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setLeftMargin_qreal(_self_ : Binding::QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_leftMargin_(_self_ : Binding::QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setRightMargin_qreal(_self_ : Binding::QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_rightMargin_(_self_ : Binding::QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setTextIndent_qreal(_self_ : Binding::QTextBlockFormat*, aindent : Float64) : Void
    fun bg_QTextBlockFormat_textIndent_(_self_ : Binding::QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setIndent_int(_self_ : Binding::QTextBlockFormat*, indent : Int32) : Void
    fun bg_QTextBlockFormat_indent_(_self_ : Binding::QTextBlockFormat*) : Int32
    fun bg_QTextBlockFormat_setLineHeight_qreal_int(_self_ : Binding::QTextBlockFormat*, height : Float64, height_type : Int32) : Void
    fun bg_QTextBlockFormat_lineHeight_qreal_qreal(_self_ : Binding::QTextBlockFormat*, script_line_height : Float64, scaling : Float64) : Float64
    fun bg_QTextBlockFormat_lineHeight_(_self_ : Binding::QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_lineHeightType_(_self_ : Binding::QTextBlockFormat*) : Int32
    fun bg_QTextBlockFormat_setNonBreakableLines_bool(_self_ : Binding::QTextBlockFormat*, b : Bool) : Void
    fun bg_QTextBlockFormat_nonBreakableLines_(_self_ : Binding::QTextBlockFormat*) : Bool
    fun bg_QTextBlockFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(_self_ : Binding::QTextBlockFormat*, flags : TextFormat::PageBreakFlags) : Void
    fun bg_QTextBlockFormat_pageBreakPolicy_(_self_ : Binding::QTextBlockFormat*) : TextFormat::PageBreakFlags
    fun bg_QTextBlockFormat_CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : Binding::QTextBlockFormat*
    fun bg_QTextBlockFormat_DESTROY_(_self_ : Binding::QTextBlockFormat*) : Void
    fun bg_QTextCharFormat_CONSTRUCT_() : Binding::QTextCharFormat*
    fun bg_QTextCharFormat_isValid_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFont_const_QFont_R_QTextCharFormat__FontPropertiesInheritanceBehavior(_self_ : Binding::QTextCharFormat*, font : QFont*, behavior : TextCharFormat::FontPropertiesInheritanceBehavior) : Void
    fun bg_QTextCharFormat_setFont_const_QFont_R(_self_ : Binding::QTextCharFormat*, font : QFont*) : Void
    fun bg_QTextCharFormat_font_(_self_ : Binding::QTextCharFormat*) : Binding::QFont*
    fun bg_QTextCharFormat_setFontFamily_const_QString_R(_self_ : Binding::QTextCharFormat*, family : CrystalString) : Void
    fun bg_QTextCharFormat_fontFamily_(_self_ : Binding::QTextCharFormat*) : Binding::CrystalString
    fun bg_QTextCharFormat_setFontPointSize_qreal(_self_ : Binding::QTextCharFormat*, size : Float64) : Void
    fun bg_QTextCharFormat_fontPointSize_(_self_ : Binding::QTextCharFormat*) : Float64
    fun bg_QTextCharFormat_setFontWeight_int(_self_ : Binding::QTextCharFormat*, weight : Int32) : Void
    fun bg_QTextCharFormat_fontWeight_(_self_ : Binding::QTextCharFormat*) : Int32
    fun bg_QTextCharFormat_setFontItalic_bool(_self_ : Binding::QTextCharFormat*, italic : Bool) : Void
    fun bg_QTextCharFormat_fontItalic_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontCapitalization_QFont__Capitalization(_self_ : Binding::QTextCharFormat*, capitalization : Font::Capitalization) : Void
    fun bg_QTextCharFormat_fontCapitalization_(_self_ : Binding::QTextCharFormat*) : Font::Capitalization
    fun bg_QTextCharFormat_setFontLetterSpacingType_QFont__SpacingType(_self_ : Binding::QTextCharFormat*, letter_spacing_type : Font::SpacingType) : Void
    fun bg_QTextCharFormat_fontLetterSpacingType_(_self_ : Binding::QTextCharFormat*) : Font::SpacingType
    fun bg_QTextCharFormat_setFontLetterSpacing_qreal(_self_ : Binding::QTextCharFormat*, spacing : Float64) : Void
    fun bg_QTextCharFormat_fontLetterSpacing_(_self_ : Binding::QTextCharFormat*) : Float64
    fun bg_QTextCharFormat_setFontWordSpacing_qreal(_self_ : Binding::QTextCharFormat*, spacing : Float64) : Void
    fun bg_QTextCharFormat_fontWordSpacing_(_self_ : Binding::QTextCharFormat*) : Float64
    fun bg_QTextCharFormat_setFontUnderline_bool(_self_ : Binding::QTextCharFormat*, underline : Bool) : Void
    fun bg_QTextCharFormat_fontUnderline_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontOverline_bool(_self_ : Binding::QTextCharFormat*, overline : Bool) : Void
    fun bg_QTextCharFormat_fontOverline_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontStrikeOut_bool(_self_ : Binding::QTextCharFormat*, strike_out : Bool) : Void
    fun bg_QTextCharFormat_fontStrikeOut_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setUnderlineColor_const_QColor_R(_self_ : Binding::QTextCharFormat*, color : QColor*) : Void
    fun bg_QTextCharFormat_underlineColor_(_self_ : Binding::QTextCharFormat*) : Binding::QColor*
    fun bg_QTextCharFormat_setFontFixedPitch_bool(_self_ : Binding::QTextCharFormat*, fixed_pitch : Bool) : Void
    fun bg_QTextCharFormat_fontFixedPitch_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontStretch_int(_self_ : Binding::QTextCharFormat*, factor : Int32) : Void
    fun bg_QTextCharFormat_fontStretch_(_self_ : Binding::QTextCharFormat*) : Int32
    fun bg_QTextCharFormat_setFontStyleHint_QFont__StyleHint_QFont__StyleStrategy(_self_ : Binding::QTextCharFormat*, hint : Font::StyleHint, strategy : Font::StyleStrategy) : Void
    fun bg_QTextCharFormat_setFontStyleStrategy_QFont__StyleStrategy(_self_ : Binding::QTextCharFormat*, strategy : Font::StyleStrategy) : Void
    fun bg_QTextCharFormat_fontStyleHint_(_self_ : Binding::QTextCharFormat*) : Font::StyleHint
    fun bg_QTextCharFormat_fontStyleStrategy_(_self_ : Binding::QTextCharFormat*) : Font::StyleStrategy
    fun bg_QTextCharFormat_setFontHintingPreference_QFont__HintingPreference(_self_ : Binding::QTextCharFormat*, hinting_preference : Font::HintingPreference) : Void
    fun bg_QTextCharFormat_fontHintingPreference_(_self_ : Binding::QTextCharFormat*) : Font::HintingPreference
    fun bg_QTextCharFormat_setFontKerning_bool(_self_ : Binding::QTextCharFormat*, enable : Bool) : Void
    fun bg_QTextCharFormat_fontKerning_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setUnderlineStyle_QTextCharFormat__UnderlineStyle(_self_ : Binding::QTextCharFormat*, style : TextCharFormat::UnderlineStyle) : Void
    fun bg_QTextCharFormat_underlineStyle_(_self_ : Binding::QTextCharFormat*) : TextCharFormat::UnderlineStyle
    fun bg_QTextCharFormat_setVerticalAlignment_QTextCharFormat__VerticalAlignment(_self_ : Binding::QTextCharFormat*, alignment : TextCharFormat::VerticalAlignment) : Void
    fun bg_QTextCharFormat_verticalAlignment_(_self_ : Binding::QTextCharFormat*) : TextCharFormat::VerticalAlignment
    fun bg_QTextCharFormat_setTextOutline_const_QPen_R(_self_ : Binding::QTextCharFormat*, pen : QPen*) : Void
    fun bg_QTextCharFormat_textOutline_(_self_ : Binding::QTextCharFormat*) : QPen*
    fun bg_QTextCharFormat_setToolTip_const_QString_R(_self_ : Binding::QTextCharFormat*, tip : CrystalString) : Void
    fun bg_QTextCharFormat_toolTip_(_self_ : Binding::QTextCharFormat*) : Binding::CrystalString
    fun bg_QTextCharFormat_setAnchor_bool(_self_ : Binding::QTextCharFormat*, anchor : Bool) : Void
    fun bg_QTextCharFormat_isAnchor_(_self_ : Binding::QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setAnchorHref_const_QString_R(_self_ : Binding::QTextCharFormat*, value : CrystalString) : Void
    fun bg_QTextCharFormat_anchorHref_(_self_ : Binding::QTextCharFormat*) : Binding::CrystalString
    fun bg_QTextCharFormat_setAnchorName_const_QString_R(_self_ : Binding::QTextCharFormat*, name : CrystalString) : Void
    fun bg_QTextCharFormat_anchorName_(_self_ : Binding::QTextCharFormat*) : Binding::CrystalString
    fun bg_QTextCharFormat_setAnchorNames_const_QStringList_R(_self_ : Binding::QTextCharFormat*, names : Void*) : Void
    fun bg_QTextCharFormat_anchorNames_(_self_ : Binding::QTextCharFormat*) : Void*
    fun bg_QTextCharFormat_setTableCellRowSpan_int(_self_ : Binding::QTextCharFormat*, table_cell_row_span : Int32) : Void
    fun bg_QTextCharFormat_tableCellRowSpan_(_self_ : Binding::QTextCharFormat*) : Int32
    fun bg_QTextCharFormat_setTableCellColumnSpan_int(_self_ : Binding::QTextCharFormat*, table_cell_column_span : Int32) : Void
    fun bg_QTextCharFormat_tableCellColumnSpan_(_self_ : Binding::QTextCharFormat*) : Int32
    fun bg_QTextCharFormat_CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : Binding::QTextCharFormat*
    fun bg_QTextCharFormat_DESTROY_(_self_ : Binding::QTextCharFormat*) : Void
    fun bg_QTextFrameFormat_CONSTRUCT_() : Binding::QTextFrameFormat*
    fun bg_QTextFrameFormat_isValid_(_self_ : Binding::QTextFrameFormat*) : Bool
    fun bg_QTextFrameFormat_setPosition_QTextFrameFormat__Position(_self_ : Binding::QTextFrameFormat*, f : TextFrameFormat::Position) : Void
    fun bg_QTextFrameFormat_position_(_self_ : Binding::QTextFrameFormat*) : TextFrameFormat::Position
    fun bg_QTextFrameFormat_setBorder_qreal(_self_ : Binding::QTextFrameFormat*, border : Float64) : Void
    fun bg_QTextFrameFormat_border_(_self_ : Binding::QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setBorderBrush_const_QBrush_R(_self_ : Binding::QTextFrameFormat*, brush : QBrush*) : Void
    fun bg_QTextFrameFormat_borderBrush_(_self_ : Binding::QTextFrameFormat*) : Binding::QBrush*
    fun bg_QTextFrameFormat_setBorderStyle_QTextFrameFormat__BorderStyle(_self_ : Binding::QTextFrameFormat*, style : TextFrameFormat::BorderStyle) : Void
    fun bg_QTextFrameFormat_borderStyle_(_self_ : Binding::QTextFrameFormat*) : TextFrameFormat::BorderStyle
    fun bg_QTextFrameFormat_setMargin_qreal(_self_ : Binding::QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_margin_(_self_ : Binding::QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setTopMargin_qreal(_self_ : Binding::QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_topMargin_(_self_ : Binding::QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setBottomMargin_qreal(_self_ : Binding::QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_bottomMargin_(_self_ : Binding::QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setLeftMargin_qreal(_self_ : Binding::QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_leftMargin_(_self_ : Binding::QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setRightMargin_qreal(_self_ : Binding::QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_rightMargin_(_self_ : Binding::QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setPadding_qreal(_self_ : Binding::QTextFrameFormat*, padding : Float64) : Void
    fun bg_QTextFrameFormat_padding_(_self_ : Binding::QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setWidth_qreal(_self_ : Binding::QTextFrameFormat*, width : Float64) : Void
    fun bg_QTextFrameFormat_setWidth_const_QTextLength_R(_self_ : Binding::QTextFrameFormat*, length : QTextLength*) : Void
    fun bg_QTextFrameFormat_width_(_self_ : Binding::QTextFrameFormat*) : Binding::QTextLength*
    fun bg_QTextFrameFormat_setHeight_qreal(_self_ : Binding::QTextFrameFormat*, height : Float64) : Void
    fun bg_QTextFrameFormat_setHeight_const_QTextLength_R(_self_ : Binding::QTextFrameFormat*, height : QTextLength*) : Void
    fun bg_QTextFrameFormat_height_(_self_ : Binding::QTextFrameFormat*) : Binding::QTextLength*
    fun bg_QTextFrameFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(_self_ : Binding::QTextFrameFormat*, flags : TextFormat::PageBreakFlags) : Void
    fun bg_QTextFrameFormat_pageBreakPolicy_(_self_ : Binding::QTextFrameFormat*) : TextFormat::PageBreakFlags
    fun bg_QTextFrameFormat_CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : Binding::QTextFrameFormat*
    fun bg_QTextFrameFormat_DESTROY_(_self_ : Binding::QTextFrameFormat*) : Void
    fun bg_QTextListFormat_CONSTRUCT_() : Binding::QTextListFormat*
    fun bg_QTextListFormat_isValid_(_self_ : Binding::QTextListFormat*) : Bool
    fun bg_QTextListFormat_setStyle_QTextListFormat__Style(_self_ : Binding::QTextListFormat*, style : TextListFormat::Style) : Void
    fun bg_QTextListFormat_style_(_self_ : Binding::QTextListFormat*) : TextListFormat::Style
    fun bg_QTextListFormat_setIndent_int(_self_ : Binding::QTextListFormat*, indent : Int32) : Void
    fun bg_QTextListFormat_indent_(_self_ : Binding::QTextListFormat*) : Int32
    fun bg_QTextListFormat_setNumberPrefix_const_QString_R(_self_ : Binding::QTextListFormat*, number_prefix : CrystalString) : Void
    fun bg_QTextListFormat_numberPrefix_(_self_ : Binding::QTextListFormat*) : Binding::CrystalString
    fun bg_QTextListFormat_setNumberSuffix_const_QString_R(_self_ : Binding::QTextListFormat*, number_suffix : CrystalString) : Void
    fun bg_QTextListFormat_numberSuffix_(_self_ : Binding::QTextListFormat*) : Binding::CrystalString
    fun bg_QTextListFormat_CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : Binding::QTextListFormat*
    fun bg_QTextListFormat_DESTROY_(_self_ : Binding::QTextListFormat*) : Void
    fun bg_QTextLength_CONSTRUCT_() : Binding::QTextLength*
    fun bg_QTextLength_CONSTRUCT_QTextLength__Type_qreal(type : TextLength::Type, value : Float64) : Binding::QTextLength*
    fun bg_QTextLength_type_(_self_ : Binding::QTextLength*) : TextLength::Type
    fun bg_QTextLength_value_qreal(_self_ : Binding::QTextLength*, maximum_length : Float64) : Float64
    fun bg_QTextLength_rawValue_(_self_ : Binding::QTextLength*) : Float64
    fun bg_QTextLength_DESTROY_(_self_ : Binding::QTextLength*) : Void
    fun bg_QFont_CONSTRUCT_() : Binding::QFont*
    fun bg_QFont_CONSTRUCT_const_QString_R_int_int_bool(family : CrystalString, point_size : Int32, weight : Int32, italic : Bool) : Binding::QFont*
    fun bg_QFont_CONSTRUCT_const_QFont_R_QPaintDevice_X(unnamed_arg_0 : QFont*, pd : QPaintDevice*) : Binding::QFont*
    fun bg_QFont_swap_QFont_R(_self_ : Binding::QFont*, other : QFont*) : Void
    fun bg_QFont_family_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_setFamily_const_QString_R(_self_ : Binding::QFont*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QFont_styleName_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_setStyleName_const_QString_R(_self_ : Binding::QFont*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QFont_pointSize_(_self_ : Binding::QFont*) : Int32
    fun bg_QFont_setPointSize_int(_self_ : Binding::QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_pointSizeF_(_self_ : Binding::QFont*) : Float64
    fun bg_QFont_setPointSizeF_qreal(_self_ : Binding::QFont*, unnamed_arg_0 : Float64) : Void
    fun bg_QFont_pixelSize_(_self_ : Binding::QFont*) : Int32
    fun bg_QFont_setPixelSize_int(_self_ : Binding::QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_weight_(_self_ : Binding::QFont*) : Int32
    fun bg_QFont_setWeight_int(_self_ : Binding::QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_bold_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setBold_bool(_self_ : Binding::QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_setStyle_QFont__Style(_self_ : Binding::QFont*, style : Font::Style) : Void
    fun bg_QFont_style_(_self_ : Binding::QFont*) : Font::Style
    fun bg_QFont_italic_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setItalic_bool(_self_ : Binding::QFont*, b : Bool) : Void
    fun bg_QFont_underline_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setUnderline_bool(_self_ : Binding::QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_overline_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setOverline_bool(_self_ : Binding::QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_strikeOut_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setStrikeOut_bool(_self_ : Binding::QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_fixedPitch_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setFixedPitch_bool(_self_ : Binding::QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_kerning_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setKerning_bool(_self_ : Binding::QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_styleHint_(_self_ : Binding::QFont*) : Font::StyleHint
    fun bg_QFont_styleStrategy_(_self_ : Binding::QFont*) : Font::StyleStrategy
    fun bg_QFont_setStyleHint_QFont__StyleHint_QFont__StyleStrategy(_self_ : Binding::QFont*, unnamed_arg_0 : Font::StyleHint, unnamed_arg_1 : Font::StyleStrategy) : Void
    fun bg_QFont_setStyleStrategy_QFont__StyleStrategy(_self_ : Binding::QFont*, s : Font::StyleStrategy) : Void
    fun bg_QFont_stretch_(_self_ : Binding::QFont*) : Int32
    fun bg_QFont_setStretch_int(_self_ : Binding::QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_letterSpacing_(_self_ : Binding::QFont*) : Float64
    fun bg_QFont_letterSpacingType_(_self_ : Binding::QFont*) : Font::SpacingType
    fun bg_QFont_setLetterSpacing_QFont__SpacingType_qreal(_self_ : Binding::QFont*, type : Font::SpacingType, spacing : Float64) : Void
    fun bg_QFont_wordSpacing_(_self_ : Binding::QFont*) : Float64
    fun bg_QFont_setWordSpacing_qreal(_self_ : Binding::QFont*, spacing : Float64) : Void
    fun bg_QFont_setCapitalization_QFont__Capitalization(_self_ : Binding::QFont*, unnamed_arg_0 : Font::Capitalization) : Void
    fun bg_QFont_capitalization_(_self_ : Binding::QFont*) : Font::Capitalization
    fun bg_QFont_setHintingPreference_QFont__HintingPreference(_self_ : Binding::QFont*, hinting_preference : Font::HintingPreference) : Void
    fun bg_QFont_hintingPreference_(_self_ : Binding::QFont*) : Font::HintingPreference
    fun bg_QFont_rawMode_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_setRawMode_bool(_self_ : Binding::QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_exactMatch_(_self_ : Binding::QFont*) : Bool
    fun bg_QFont_isCopyOf_const_QFont_R(_self_ : Binding::QFont*, unnamed_arg_0 : QFont*) : Bool
    fun bg_QFont_setRawName_const_QString_R(_self_ : Binding::QFont*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QFont_rawName_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_key_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_toString_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_fromString_const_QString_R(_self_ : Binding::QFont*, unnamed_arg_0 : CrystalString) : Bool
    fun bg_QFont_substitute_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Binding::CrystalString
    fun bg_QFont_substitutes_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void*
    fun bg_QFont_substitutions_STATIC_() : Void*
    fun bg_QFont_insertSubstitution_STATIC_const_QString_R_const_QString_R(unnamed_arg_0 : CrystalString, unnamed_arg_1 : CrystalString) : Void
    fun bg_QFont_insertSubstitutions_STATIC_const_QString_R_const_QStringList_R(unnamed_arg_0 : CrystalString, unnamed_arg_1 : Void*) : Void
    fun bg_QFont_removeSubstitutions_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QFont_initialize_STATIC_() : Void
    fun bg_QFont_cleanup_STATIC_() : Void
    fun bg_QFont_cacheStatistics_STATIC_() : Void
    fun bg_QFont_defaultFamily_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_lastResortFamily_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_lastResortFont_(_self_ : Binding::QFont*) : Binding::CrystalString
    fun bg_QFont_resolve_const_QFont_R(_self_ : Binding::QFont*, unnamed_arg_0 : QFont*) : Binding::QFont*
    fun bg_QFont_resolve_(_self_ : Binding::QFont*) : UInt32
    fun bg_QFont_resolve_uint(_self_ : Binding::QFont*, mask : UInt32) : Void
    fun bg_QFont_DESTROY_(_self_ : Binding::QFont*) : Void
  end
  enum CheckState : UInt32
    Unchecked = 0
    PartiallyChecked = 1
    Checked = 2
  end
  enum ConnectionType : UInt32
    AutoConnection = 0
    DirectConnection = 1
    QueuedConnection = 2
    BlockingQueuedConnection = 3
    UniqueConnection = 128
  end
  enum TimerType : UInt32
    PreciseTimer = 0
    CoarseTimer = 1
    VeryCoarseTimer = 2
  end
  enum GestureType : UInt32
    TapGesture = 1
    TapAndHoldGesture = 2
    PanGesture = 3
    PinchGesture = 4
    SwipeGesture = 5
    CustomGesture = 256
    LastGestureType = 4294967295
  end
  @[Flags]
  enum GestureFlags : UInt32
    DontStartGestureOnChildren = 1
    ReceivePartialGestures = 2
    IgnoredGesturesPropagateToParent = 4
  end
  enum LayoutDirection : UInt32
    LeftToRight = 0
    RightToLeft = 1
    LayoutDirectionAuto = 2
  end
  enum FocusReason : UInt32
    MouseFocusReason = 0
    TabFocusReason = 1
    BacktabFocusReason = 2
    ActiveWindowFocusReason = 3
    PopupFocusReason = 4
    ShortcutFocusReason = 5
    MenuBarFocusReason = 6
    OtherFocusReason = 7
    NoFocusReason = 8
  end
  enum FocusPolicy : UInt32
    NoFocus = 0
    TabFocus = 1
    ClickFocus = 2
    StrongFocus = 11
    WheelFocus = 15
  end
  enum ContextMenuPolicy : UInt32
    NoContextMenu = 0
    DefaultContextMenu = 1
    ActionsContextMenu = 2
    CustomContextMenu = 3
    PreventContextMenu = 4
  end
  enum BrushStyle : UInt32
    NoBrush = 0
    SolidPattern = 1
    Dense1Pattern = 2
    Dense2Pattern = 3
    Dense3Pattern = 4
    Dense4Pattern = 5
    Dense5Pattern = 6
    Dense6Pattern = 7
    Dense7Pattern = 8
    HorPattern = 9
    VerPattern = 10
    CrossPattern = 11
    BDiagPattern = 12
    FDiagPattern = 13
    DiagCrossPattern = 14
    LinearGradientPattern = 15
    RadialGradientPattern = 16
    ConicalGradientPattern = 17
    TexturePattern = 24
  end
  enum ShortcutContext : UInt32
    WidgetShortcut = 0
    WindowShortcut = 1
    ApplicationShortcut = 2
    WidgetWithChildrenShortcut = 3
  end
  @[Flags]
  enum WindowFlags : UInt32
    Widget = 0
    Window = 1
    Dialog = 3
    Sheet = 5
    Drawer = 7
    Popup = 9
    Tool = 11
    ToolTip = 13
    SplashScreen = 15
    Desktop = 17
    SubWindow = 18
    ForeignWindow = 33
    CoverWindow = 65
    WindowTypeMask = 255
    MSWindowsFixedSizeDialogHint = 256
    MSWindowsOwnDC = 512
    BypassWindowManagerHint = 1024
    X11BypassWindowManagerHint = 1024
    FramelessWindowHint = 2048
    WindowTitleHint = 4096
    WindowSystemMenuHint = 8192
    WindowMinimizeButtonHint = 16384
    WindowMaximizeButtonHint = 32768
    WindowMinMaxButtonsHint = 49152
    WindowContextHelpButtonHint = 65536
    WindowShadeButtonHint = 131072
    WindowStaysOnTopHint = 262144
    WindowTransparentForInput = 524288
    WindowOverridesSystemGestures = 1048576
    WindowDoesNotAcceptFocus = 2097152
    MaximizeUsingFullscreenGeometryHint = 4194304
    CustomizeWindowHint = 33554432
    WindowStaysOnBottomHint = 67108864
    WindowCloseButtonHint = 134217728
    MacWindowToolBarButtonHint = 268435456
    BypassGraphicsProxyWidget = 536870912
    NoDropShadowWindowHint = 1073741824
    WindowFullscreenButtonHint = 2147483648
  end
  enum WindowModality : UInt32
    NonModal = 0
    WindowModal = 1
    ApplicationModal = 2
  end
  @[Flags]
  enum WindowStates : UInt32
    WindowNoState = 0
    WindowMinimized = 1
    WindowMaximized = 2
    WindowFullScreen = 4
    WindowActive = 8
  end
  enum WindowType : UInt32
    Widget = 0
    Window = 1
    Dialog = 3
    Sheet = 5
    Drawer = 7
    Popup = 9
    Tool = 11
    ToolTip = 13
    SplashScreen = 15
    Desktop = 17
    SubWindow = 18
    ForeignWindow = 33
    CoverWindow = 65
    WindowTypeMask = 255
    MSWindowsFixedSizeDialogHint = 256
    MSWindowsOwnDC = 512
    BypassWindowManagerHint = 1024
    X11BypassWindowManagerHint = 1024
    FramelessWindowHint = 2048
    WindowTitleHint = 4096
    WindowSystemMenuHint = 8192
    WindowMinimizeButtonHint = 16384
    WindowMaximizeButtonHint = 32768
    WindowMinMaxButtonsHint = 49152
    WindowContextHelpButtonHint = 65536
    WindowShadeButtonHint = 131072
    WindowStaysOnTopHint = 262144
    WindowTransparentForInput = 524288
    WindowOverridesSystemGestures = 1048576
    WindowDoesNotAcceptFocus = 2097152
    MaximizeUsingFullscreenGeometryHint = 4194304
    CustomizeWindowHint = 33554432
    WindowStaysOnBottomHint = 67108864
    WindowCloseButtonHint = 134217728
    MacWindowToolBarButtonHint = 268435456
    BypassGraphicsProxyWidget = 536870912
    NoDropShadowWindowHint = 1073741824
    WindowFullscreenButtonHint = 2147483648
  end
  enum InputMethodQuery : UInt32
    ImEnabled = 1
    ImCursorRectangle = 2
    ImMicroFocus = 2
    ImFont = 4
    ImCursorPosition = 8
    ImSurroundingText = 16
    ImCurrentSelection = 32
    ImMaximumTextLength = 64
    ImAnchorPosition = 128
    ImHints = 256
    ImPreferredLanguage = 512
    ImAbsolutePosition = 1024
    ImTextBeforeCursor = 2048
    ImTextAfterCursor = 4096
    ImEnterKeyType = 8192
    ImAnchorRectangle = 16384
    ImInputItemClipRectangle = 32768
    ImPlatformData = 2147483648
    ImQueryInput = 16570
    ImQueryAll = 4294967295
  end
  @[Flags]
  enum InputMethodHints : UInt32
    ImhNone = 0
    ImhHiddenText = 1
    ImhSensitiveData = 2
    ImhNoAutoUppercase = 4
    ImhPreferNumbers = 8
    ImhPreferUppercase = 16
    ImhPreferLowercase = 32
    ImhNoPredictiveText = 64
    ImhDate = 128
    ImhTime = 256
    ImhPreferLatin = 512
    ImhMultiLine = 1024
    ImhDigitsOnly = 65536
    ImhFormattedNumbersOnly = 131072
    ImhUppercaseOnly = 262144
    ImhLowercaseOnly = 524288
    ImhDialableCharactersOnly = 1048576
    ImhEmailCharactersOnly = 2097152
    ImhUrlCharactersOnly = 4194304
    ImhLatinOnly = 8388608
    ImhExclusiveInputMask = 4294901760
  end
  enum TextFormatEnum : UInt32
    PlainText = 0
    RichText = 1
    AutoText = 2
  end
  @[Flags]
  enum Alignment : UInt32
    AlignLeft = 1
    AlignLeading = 1
    AlignRight = 2
    AlignTrailing = 2
    AlignHCenter = 4
    AlignJustify = 8
    AlignAbsolute = 16
    AlignHorizontalMask = 31
    AlignTop = 32
    AlignBottom = 64
    AlignVCenter = 128
    AlignBaseline = 256
    AlignVerticalMask = 480
    AlignCenter = 132
  end
  @[Flags]
  enum TextInteractionFlags : UInt32
    NoTextInteraction = 0
    TextSelectableByMouse = 1
    TextSelectableByKeyboard = 2
    LinksAccessibleByMouse = 4
    LinksAccessibleByKeyboard = 8
    TextEditable = 16
    TextEditorInteraction = 19
    TextBrowserInteraction = 13
  end
  enum UIEffect : UInt32
    UIGeneral = 0
    UIAnimateMenu = 1
    UIFadeMenu = 2
    UIAnimateCombo = 3
    UIAnimateTooltip = 4
    UIFadeTooltip = 5
    UIAnimateToolBox = 6
  end
  enum ApplicationAttribute : UInt32
    AAImmediateWidgetCreation = 0
    AAMSWindowsUseDirect3DByDefault = 1
    AADontShowIconsInMenus = 2
    AANativeWindows = 3
    AADontCreateNativeWidgetSiblings = 4
    AAPluginApplication = 5
    AAMacPluginApplication = 5
    AADontUseNativeMenuBar = 6
    AAMacDontSwapCtrlAndMeta = 7
    AAUse96Dpi = 8
    AAX11InitThreads = 10
    AASynthesizeTouchForUnhandledMouseEvents = 11
    AASynthesizeMouseForUnhandledTouchEvents = 12
    AAUseHighDpiPixmaps = 13
    AAForceRasterWidgets = 14
    AAUseDesktopOpenGL = 15
    AAUseOpenGLES = 16
    AAUseSoftwareOpenGL = 17
    AAShareOpenGLContexts = 18
    AASetPalette = 19
    AAEnableHighDpiScaling = 20
    AADisableHighDpiScaling = 21
    AAUseStyleSheetPropagationInWidgetStyles = 22
    AADontUseNativeDialogs = 23
    AASynthesizeMouseForUnhandledTabletEvents = 24
    AACompressHighFrequencyEvents = 25
    AADontCheckOpenGLContextThreadAffinity = 26
    AADisableShaderDiskCache = 27
    AAAttributeCount = 28
  end
  enum ScrollBarPolicy : UInt32
    ScrollBarAsNeeded = 0
    ScrollBarAlwaysOff = 1
    ScrollBarAlwaysOn = 2
  end
  enum ItemSelectionMode : UInt32
    ContainsItemShape = 0
    IntersectsItemShape = 1
    ContainsItemBoundingRect = 2
    IntersectsItemBoundingRect = 3
  end
  enum SortOrder : UInt32
    AscendingOrder = 0
    DescendingOrder = 1
  end
  enum ItemSelectionOperation : UInt32
    ReplaceSelection = 0
    AddToSelection = 1
  end
  enum SizeHint : UInt32
    MinimumSize = 0
    PreferredSize = 1
    MaximumSize = 2
    MinimumDescent = 3
    NSizeHints = 4
  end
  enum WindowFrameSection : UInt32
    NoSection = 0
    LeftSection = 1
    TopLeftSection = 2
    TopSection = 3
    TopRightSection = 4
    RightSection = 5
    BottomRightSection = 6
    BottomSection = 7
    BottomLeftSection = 8
    TitleBarArea = 9
  end
  enum CursorMoveStyle : UInt32
    LogicalMoveStyle = 0
    VisualMoveStyle = 1
  end
  @[Flags]
  enum KeyboardModifiers : UInt32
    NoModifier = 0
    ShiftModifier = 33554432
    ControlModifier = 67108864
    AltModifier = 134217728
    MetaModifier = 268435456
    KeypadModifier = 536870912
    GroupSwitchModifier = 1073741824
    KeyboardModifierMask = 4261412864
  end
  @[Flags]
  enum MouseButtons : UInt32
    NoButton = 0
    LeftButton = 1
    RightButton = 2
    MidButton = 4
    MiddleButton = 4
    BackButton = 8
    XButton1 = 8
    ExtraButton1 = 8
    ForwardButton = 16
    XButton2 = 16
    ExtraButton2 = 16
    TaskButton = 32
    ExtraButton3 = 32
    ExtraButton4 = 64
    ExtraButton5 = 128
    ExtraButton6 = 256
    ExtraButton7 = 512
    ExtraButton8 = 1024
    ExtraButton9 = 2048
    ExtraButton10 = 4096
    ExtraButton11 = 8192
    ExtraButton12 = 16384
    ExtraButton13 = 32768
    ExtraButton14 = 65536
    ExtraButton15 = 131072
    ExtraButton16 = 262144
    ExtraButton17 = 524288
    ExtraButton18 = 1048576
    ExtraButton19 = 2097152
    ExtraButton20 = 4194304
    ExtraButton21 = 8388608
    ExtraButton22 = 16777216
    ExtraButton23 = 33554432
    ExtraButton24 = 67108864
    AllButtons = 134217727
    MaxMouseButton = 67108864
    MouseButtonMask = 4294967295
  end
  enum ApplicationState : UInt32
    ApplicationSuspended = 0
    ApplicationHidden = 1
    ApplicationInactive = 2
    ApplicationActive = 4
  end
  enum FillRule : UInt32
    OddEvenFill = 0
    WindingFill = 1
  end
  enum BgMode : UInt32
    TransparentMode = 0
    OpaqueMode = 1
  end
  enum SizeMode : UInt32
    AbsoluteSize = 0
    RelativeSize = 1
  end
  enum ClipOperation : UInt32
    NoClip = 0
    ReplaceClip = 1
    IntersectClip = 2
  end
  enum PenStyle : UInt32
    NoPen = 0
    SolidLine = 1
    DashLine = 2
    DotLine = 3
    DashDotLine = 4
    DashDotDotLine = 5
    CustomDashLine = 6
    MPenStyle = 15
  end
  @[Flags]
  enum ScreenOrientations : UInt32
    PrimaryOrientation = 0
    PortraitOrientation = 1
    LandscapeOrientation = 2
    InvertedPortraitOrientation = 4
    InvertedLandscapeOrientation = 8
  end
  enum ArrowType : UInt32
    NoArrow = 0
    UpArrow = 1
    DownArrow = 2
    LeftArrow = 3
    RightArrow = 4
  end
  enum WidgetAttribute : UInt32
    WADisabled = 0
    WAUnderMouse = 1
    WAMouseTracking = 2
    WAContentsPropagated = 3
    WAOpaquePaintEvent = 4
    WANoBackground = 4
    WAStaticContents = 5
    WALaidOut = 7
    WAPaintOnScreen = 8
    WANoSystemBackground = 9
    WAUpdatesDisabled = 10
    WAMapped = 11
    WAMacNoClickThrough = 12
    WAInputMethodEnabled = 14
    WAWStateVisible = 15
    WAWStateHidden = 16
    WAForceDisabled = 32
    WAKeyCompression = 33
    WAPendingMoveEvent = 34
    WAPendingResizeEvent = 35
    WASetPalette = 36
    WASetFont = 37
    WASetCursor = 38
    WANoChildEventsFromChildren = 39
    WAWindowModified = 41
    WAResized = 42
    WAMoved = 43
    WAPendingUpdate = 44
    WAInvalidSize = 45
    WAMacBrushedMetal = 46
    WAMacMetalStyle = 46
    WACustomWhatsThis = 47
    WALayoutOnEntireRect = 48
    WAOutsideWSRange = 49
    WAGrabbedShortcut = 50
    WATransparentForMouseEvents = 51
    WAPaintUnclipped = 52
    WASetWindowIcon = 53
    WANoMouseReplay = 54
    WADeleteOnClose = 55
    WARightToLeft = 56
    WASetLayoutDirection = 57
    WANoChildEventsForParent = 58
    WAForceUpdatesDisabled = 59
    WAWStateCreated = 60
    WAWStateCompressKeys = 61
    WAWStateInPaintEvent = 62
    WAWStateReparented = 63
    WAWStateConfigPending = 64
    WAWStatePolished = 66
    WAWStateDND = 67
    WAWStateOwnSizePolicy = 68
    WAWStateExplicitShowHide = 69
    WAShowModal = 70
    WAMouseNoMask = 71
    WAGroupLeader = 72
    WANoMousePropagation = 73
    WAHover = 74
    WAInputMethodTransparent = 75
    WAQuitOnClose = 76
    WAKeyboardFocusChange = 77
    WAAcceptDrops = 78
    WADropSiteRegistered = 79
    WAForceAcceptDrops = 79
    WAWindowPropagation = 80
    WANoX11EventCompression = 81
    WATintedBackground = 82
    WAX11OpenGLOverlay = 83
    WAAlwaysShowToolTips = 84
    WAMacOpaqueSizeGrip = 85
    WASetStyle = 86
    WASetLocale = 87
    WAMacShowFocusRect = 88
    WAMacNormalSize = 89
    WAMacSmallSize = 90
    WAMacMiniSize = 91
    WALayoutUsesWidgetRect = 92
    WAStyledBackground = 93
    WAMSWindowsUseDirect3D = 94
    WACanHostQMdiSubWindowTitleBar = 95
    WAMacAlwaysShowToolWindow = 96
    WAStyleSheet = 97
    WAShowWithoutActivating = 98
    WAX11BypassTransientForHint = 99
    WANativeWindow = 100
    WADontCreateNativeAncestors = 101
    WAMacVariableSize = 102
    WADontShowOnScreen = 103
    WAX11NetWmWindowTypeDesktop = 104
    WAX11NetWmWindowTypeDock = 105
    WAX11NetWmWindowTypeToolBar = 106
    WAX11NetWmWindowTypeMenu = 107
    WAX11NetWmWindowTypeUtility = 108
    WAX11NetWmWindowTypeSplash = 109
    WAX11NetWmWindowTypeDialog = 110
    WAX11NetWmWindowTypeDropDownMenu = 111
    WAX11NetWmWindowTypePopupMenu = 112
    WAX11NetWmWindowTypeToolTip = 113
    WAX11NetWmWindowTypeNotification = 114
    WAX11NetWmWindowTypeCombo = 115
    WAX11NetWmWindowTypeDND = 116
    WAMacFrameworkScaled = 117
    WASetWindowModality = 118
    WAWStateWindowOpacitySet = 119
    WATranslucentBackground = 120
    WAAcceptTouchEvents = 121
    WAWStateAcceptedTouchBeginEvent = 122
    WATouchPadAcceptSingleTouchEvents = 123
    WAX11DoNotAcceptFocus = 126
    WAMacNoShadow = 127
    WAAlwaysStackOnTop = 128
    WATabletTracking = 129
    WAAttributeCount = 130
  end
  @[Flags]
  enum ImageConversionFlags : UInt32
    ColorModeMask = 3
    AutoColor = 0
    ColorOnly = 3
    MonoOnly = 2
    AlphaDitherMask = 12
    ThresholdAlphaDither = 0
    OrderedAlphaDither = 4
    DiffuseAlphaDither = 8
    NoAlpha = 12
    DitherMask = 48
    DiffuseDither = 0
    OrderedDither = 16
    ThresholdDither = 32
    DitherModeMask = 192
    AutoDither = 0
    PreferDither = 64
    AvoidDither = 128
    NoOpaqueDetection = 256
    NoFormatConversion = 512
  end
  enum GlobalColor : UInt32
    Color0 = 0
    Color1 = 1
    Black = 2
    White = 3
    DarkGray = 4
    Gray = 5
    LightGray = 6
    Red = 7
    Green = 8
    Blue = 9
    Cyan = 10
    Magenta = 11
    Yellow = 12
    DarkRed = 13
    DarkGreen = 14
    DarkBlue = 15
    DarkCyan = 16
    DarkMagenta = 17
    DarkYellow = 18
    Transparent = 19
  end
  enum MaskMode : UInt32
    MaskInColor = 0
    MaskOutColor = 1
  end
  enum AspectRatioMode : UInt32
    IgnoreAspectRatio = 0
    KeepAspectRatio = 1
    KeepAspectRatioByExpanding = 2
  end
  enum TransformationMode : UInt32
    FastTransformation = 0
    SmoothTransformation = 1
  end
  enum Corner : UInt32
    TopLeftCorner = 0
    TopRightCorner = 1
    BottomLeftCorner = 2
    BottomRightCorner = 3
  end
  enum TextElideMode : UInt32
    ElideLeft = 0
    ElideRight = 1
    ElideMiddle = 2
    ElideNone = 3
  end
  enum ToolButtonStyle : UInt32
    ToolButtonIconOnly = 0
    ToolButtonTextOnly = 1
    ToolButtonTextBesideIcon = 2
    ToolButtonTextUnderIcon = 3
    ToolButtonFollowStyle = 4
  end
  enum ToolBarArea : UInt32
    LeftToolBarArea = 1
    RightToolBarArea = 2
    TopToolBarArea = 4
    BottomToolBarArea = 8
    ToolBarAreaMask = 15
    AllToolBarAreas = 15
    NoToolBarArea = 0
  end
  @[Flags]
  enum ToolBarAreas : UInt32
    LeftToolBarArea = 1
    RightToolBarArea = 2
    TopToolBarArea = 4
    BottomToolBarArea = 8
    ToolBarAreaMask = 15
    AllToolBarAreas = 15
    NoToolBarArea = 0
  end
  enum DockWidgetArea : UInt32
    LeftDockWidgetArea = 1
    RightDockWidgetArea = 2
    TopDockWidgetArea = 4
    BottomDockWidgetArea = 8
    DockWidgetAreaMask = 15
    AllDockWidgetAreas = 15
    NoDockWidgetArea = 0
  end
  @[Flags]
  enum DockWidgetAreas : UInt32
    LeftDockWidgetArea = 1
    RightDockWidgetArea = 2
    TopDockWidgetArea = 4
    BottomDockWidgetArea = 8
    DockWidgetAreaMask = 15
    AllDockWidgetAreas = 15
    NoDockWidgetArea = 0
  end
  enum Orientation : UInt32
    Horizontal = 1
    Vertical = 2
  end
  @[Flags]
  enum Orientations : UInt32
    Horizontal = 1
    Vertical = 2
  end
  enum TimeSpec : UInt32
    LocalTime = 0
    UTC = 1
    OffsetFromUTC = 2
    TimeZone = 3
  end
  @[Flags]
  enum FindChildOptions : UInt32
    FindDirectChildrenOnly = 0
    FindChildrenRecursively = 1
  end
  @[Flags]
  enum InputMethodQueries : UInt32
    ImEnabled = 1
    ImCursorRectangle = 2
    ImMicroFocus = 2
    ImFont = 4
    ImCursorPosition = 8
    ImSurroundingText = 16
    ImCurrentSelection = 32
    ImMaximumTextLength = 64
    ImAnchorPosition = 128
    ImHints = 256
    ImPreferredLanguage = 512
    ImAbsolutePosition = 1024
    ImTextBeforeCursor = 2048
    ImTextAfterCursor = 4096
    ImEnterKeyType = 8192
    ImAnchorRectangle = 16384
    ImInputItemClipRectangle = 32768
    ImPlatformData = 2147483648
    ImQueryInput = 16570
    ImQueryAll = 4294967295
  end
  @[Flags]
  enum DropActions : UInt32
    CopyAction = 1
    MoveAction = 2
    LinkAction = 4
    ActionMask = 255
    TargetMoveAction = 32770
    IgnoreAction = 0
  end
  enum DropAction : UInt32
    CopyAction = 1
    MoveAction = 2
    LinkAction = 4
    ActionMask = 255
    TargetMoveAction = 32770
    IgnoreAction = 0
  end
  enum ScreenOrientation : UInt32
    PrimaryOrientation = 0
    PortraitOrientation = 1
    LandscapeOrientation = 2
    InvertedPortraitOrientation = 4
    InvertedLandscapeOrientation = 8
  end
  enum GestureState : UInt32
    NoGesture = 0
    GestureStarted = 1
    GestureUpdated = 2
    GestureFinished = 3
    GestureCanceled = 4
  end
  enum MouseButton : UInt32
    NoButton = 0
    LeftButton = 1
    RightButton = 2
    MidButton = 4
    MiddleButton = 4
    BackButton = 8
    XButton1 = 8
    ExtraButton1 = 8
    ForwardButton = 16
    XButton2 = 16
    ExtraButton2 = 16
    TaskButton = 32
    ExtraButton3 = 32
    ExtraButton4 = 64
    ExtraButton5 = 128
    ExtraButton6 = 256
    ExtraButton7 = 512
    ExtraButton8 = 1024
    ExtraButton9 = 2048
    ExtraButton10 = 4096
    ExtraButton11 = 8192
    ExtraButton12 = 16384
    ExtraButton13 = 32768
    ExtraButton14 = 65536
    ExtraButton15 = 131072
    ExtraButton16 = 262144
    ExtraButton17 = 524288
    ExtraButton18 = 1048576
    ExtraButton19 = 2097152
    ExtraButton20 = 4194304
    ExtraButton21 = 8388608
    ExtraButton22 = 16777216
    ExtraButton23 = 33554432
    ExtraButton24 = 67108864
    AllButtons = 134217727
    MaxMouseButton = 67108864
    MouseButtonMask = 4294967295
  end
  enum MouseEventSource : UInt32
    MouseEventNotSynthesized = 0
    MouseEventSynthesizedBySystem = 1
    MouseEventSynthesizedByQt = 2
    MouseEventSynthesizedByApplication = 3
  end
  @[Flags]
  enum MouseEventFlags : UInt32
    MouseEventCreatedDoubleClick = 1
    MouseEventFlagMask = 255
  end
  enum MetaObjectCall : UInt32
    InvokeMetaMethod = 0
    ReadProperty = 1
    WriteProperty = 2
    ResetProperty = 3
    QueryPropertyDesignable = 4
    QueryPropertyScriptable = 5
    QueryPropertyStored = 6
    QueryPropertyEditable = 7
    QueryPropertyUser = 8
    CreateInstance = 9
    IndexOfMethod = 10
    RegisterPropertyMetaType = 11
    RegisterMethodArgumentMetaType = 12
  end
  class Object 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QObject_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QObject_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QObject_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Object)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQObject.new(
      bg_QObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    def object_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_objectName_(self))
    end
    def object_name=(name : String) : Void
      Binding.bg_QObject_setObjectName_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def widget_type?() : Bool
      Binding.bg_QObject_isWidgetType_(self)
    end
    def window_type?() : Bool
      Binding.bg_QObject_isWindowType_(self)
    end
    def signals_blocked() : Bool
      Binding.bg_QObject_signalsBlocked_(self)
    end
    def block_signals(b : Bool) : Bool
      Binding.bg_QObject_blockSignals_bool(self, b)
    end
    def thread() : QThread*
      Binding.bg_QObject_thread_(self)
    end
    def move_to_thread(thread : QThread*) : Void
      Binding.bg_QObject_moveToThread_QThread_X(self, thread)
    end
    def start_timer(interval : Int32, timer_type : TimerType = TimerType::CoarseTimer) : Int32
      Binding.bg_QObject_startTimer_int_Qt__TimerType(self, interval, timer_type)
    end
    def start_timer(time : Time::Span, timer_type : TimerType = TimerType::CoarseTimer) : Int32
      Binding.bg_QObject_startTimer_std__chrono__milliseconds_Qt__TimerType(self, Qt::Converter::TimeSpan.wrap(time), timer_type)
    end
    def kill_timer(id : Int32) : Void
      Binding.bg_QObject_killTimer_int(self, id)
    end
    def children() : Enumerable(Object)*
      QList_QObject_X.new(unwrap: Binding.bg_QObject_children_(self))
    end
    def parent=(parent : Object) : Void
      Binding.bg_QObject_setParent_QObject_X(self, parent)
    end
    def install_event_filter(filter_obj : Object) : Void
      Binding.bg_QObject_installEventFilter_QObject_X(self, filter_obj)
    end
    def remove_event_filter(obj : Object) : Void
      Binding.bg_QObject_removeEventFilter_QObject_X(self, obj)
    end
    def self.connect(sender : Object, signal : UInt8*, receiver : Object, member : UInt8*, unnamed_arg_4 : ConnectionType = ConnectionType::AutoConnection) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(sender, signal, receiver, member, unnamed_arg_4))
    end
    def self.connect(sender : Object, signal : QMetaMethod*, receiver : Object, method : QMetaMethod*, type : ConnectionType = ConnectionType::AutoConnection) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(sender, signal, receiver, method, type))
    end
    def connect(sender : Object, signal : UInt8*, member : UInt8*, type : ConnectionType = ConnectionType::AutoConnection) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(self, sender, signal, member, type))
    end
    def self.disconnect(sender : Object, signal : UInt8*, receiver : Object, member : UInt8*) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender, signal, receiver, member)
    end
    def self.disconnect(sender : Object, signal : QMetaMethod*, receiver : Object, member : QMetaMethod*) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender, signal, receiver, member)
    end
    def disconnect(signal : UInt8*? = nil, receiver : Object? = nil, member : UInt8*? = nil) : Bool
      Binding.bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(self, signal, receiver, member)
    end
    def disconnect(receiver : Object, member : UInt8*? = nil) : Bool
      Binding.bg_QObject_disconnect_const_QObject_X_const_char_X(self, receiver, member)
    end
    def self.disconnect(unnamed_arg_0 : SignalConnection) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(unnamed_arg_0)
    end
    def dump_object_tree() : Void
      Binding.bg_QObject_dumpObjectTree_(self)
    end
    def dump_object_info() : Void
      Binding.bg_QObject_dumpObjectInfo_(self)
    end
    def self.register_user_data() : UInt32
      Binding.bg_QObject_registerUserData_STATIC_()
    end
    def set_user_data(id : UInt32, data : QObjectUserData*) : Void
      Binding.bg_QObject_setUserData_uint_QObjectUserData_X(self, id, data)
    end
    def user_data(id : UInt32) : QObjectUserData*
      Binding.bg_QObject_userData_uint(self, id)
    end
    def destroyed(unnamed_arg_0 : Object? = nil) : Void
      Binding.bg_QObject_destroyed_QObject_X(self, unnamed_arg_0)
    end
    def on_destroyed(&block : Proc(Object?, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_destroyed_CONNECT_CrystalProc_void__QObjectX_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::QObject*){ block.call(Object.new(unwrap: unnamed_arg_0)) })))
    end
    def parent() : Object
      Object.new(unwrap: Binding.bg_QObject_parent_(self))
    end
    def inherits(classname : UInt8*) : Bool
      Binding.bg_QObject_inherits_const_char_X(self, classname)
    end
    def delete_later() : Void
      Binding.bg_QObject_deleteLater_(self)
    end
    protected def sender() : Object
      Object.new(unwrap: Binding.bg_QObject_sender_(self))
    end
    protected def sender_signal_index() : Int32
      Binding.bg_QObject_senderSignalIndex_(self)
    end
    protected def receivers(signal : UInt8*) : Int32
      Binding.bg_QObject_receivers_const_char_X(self, signal)
    end
    protected def is_signal_connected(signal : QMetaMethod*) : Bool
      Binding.bg_QObject_isSignalConnected_const_QMetaMethod_R(self, signal)
    end
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    protected def child_event(event : QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    protected def connect_notify(signal : QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    protected def disconnect_notify(signal : QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    protected def initialize(dd : QObjectPrivate*, parent : Object? = nil)
      unwrap = Binding.bg_QObject_CONSTRUCT_QObjectPrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Object)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQObject.new(
      bg_QObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class SignalConnection 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QMetaObject__Connection_CONSTRUCT_()
    @unwrap = unwrap
    
    end
  end
  abstract class AbstractEventDispatcher < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractEventDispatcher_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractEventDispatcher_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QAbstractEventDispatcher_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractEventDispatcher)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall process_events has_pending_events? register_socket_notifier unregister_socket_notifier register_timer unregister_timer unregister_timers registered_timers remaining_time wake_up interrupt flush starting_up closing_down event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractEventDispatcher.new(
      bg_QAbstractEventDispatcher_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("process_events") %} ->(flags : EventLoop::ProcessEventsFlags){ self.process_events(flags) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_hasPendingEvents_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_pending_events?") %} ->(){ self.has_pending_events?() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_socket_notifier") %} ->(notifier : Binding::QSocketNotifier*){ self.register_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_socket_notifier") %} ->(notifier : Binding::QSocketNotifier*){ self.unregister_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_timer") %} ->(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Binding::QObject*){ self.register_timer(timer_id, interval, timer_type, Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimer_int: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timer") %} ->(timer_id : Int32){ self.unregister_timer(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timers") %} ->(object : Binding::QObject*){ self.unregister_timers(Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("registered_timers") %} ->(object : Binding::QObject*){ BindgenHelper.wrap_container(QList_QAbstractEventDispatcher__TimerInfo, self.registered_timers(Object.new(unwrap: object))).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_remainingTime_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remaining_time") %} ->(timer_id : Int32){ self.remaining_time(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_wakeUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("wake_up") %} ->(){ self.wake_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_interrupt_: BindgenHelper.wrap_proc({% if forwarded.includes?("interrupt") %} ->(){ self.interrupt() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_flush_: BindgenHelper.wrap_proc({% if forwarded.includes?("flush") %} ->(){ self.flush() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_startingUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("starting_up") %} ->(){ self.starting_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_closingDown_: BindgenHelper.wrap_proc({% if forwarded.includes?("closing_down") %} ->(){ self.closing_down() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractEventDispatcher_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.instance(thread : QThread*? = nil) : AbstractEventDispatcher
      AbstractEventDispatcher.new(unwrap: Binding.bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(thread))
    end
    abstract def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
    abstract def has_pending_events?() : Bool
    abstract def register_socket_notifier(notifier : SocketNotifier) : Void
    abstract def unregister_socket_notifier(notifier : SocketNotifier) : Void
    def register_timer(interval : Int32, timer_type : TimerType, object : Object) : Int32
      Binding.bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(self, interval, timer_type, object)
    end
    abstract def register_timer(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Object) : Void
    abstract def unregister_timer(timer_id : Int32) : Bool
    abstract def unregister_timers(object : Object) : Bool
    abstract def registered_timers(object : Object) : Enumerable(Binding::EventDispatcherTimerInfo)
    abstract def remaining_time(timer_id : Int32) : Int32
    abstract def wake_up() : Void
    abstract def interrupt() : Void
    abstract def flush() : Void
    def starting_up() : Void
      Binding.bg_QAbstractEventDispatcher_startingUp_(self)
    end
    def closing_down() : Void
      Binding.bg_QAbstractEventDispatcher_closingDown_(self)
    end
    def install_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def remove_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def filter_native_event(event_type : QByteArray*, message : Void*, result : Int32*) : Bool
      Binding.bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    def about_to_block() : Void
      Binding.bg_QAbstractEventDispatcher_aboutToBlock_(self)
    end
    def on_about_to_block(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_aboutToBlock_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def awake() : Void
      Binding.bg_QAbstractEventDispatcher_awake_(self)
    end
    def on_awake(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_awake_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def initialize(unnamed_arg_0 : QAbstractEventDispatcherPrivate*, parent : Object)
      unwrap = Binding.bg_QAbstractEventDispatcher_CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractEventDispatcher)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall process_events has_pending_events? register_socket_notifier unregister_socket_notifier register_timer unregister_timer unregister_timers registered_timers remaining_time wake_up interrupt flush starting_up closing_down event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractEventDispatcher.new(
      bg_QAbstractEventDispatcher_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("process_events") %} ->(flags : EventLoop::ProcessEventsFlags){ self.process_events(flags) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_hasPendingEvents_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_pending_events?") %} ->(){ self.has_pending_events?() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_socket_notifier") %} ->(notifier : Binding::QSocketNotifier*){ self.register_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_socket_notifier") %} ->(notifier : Binding::QSocketNotifier*){ self.unregister_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_timer") %} ->(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Binding::QObject*){ self.register_timer(timer_id, interval, timer_type, Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimer_int: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timer") %} ->(timer_id : Int32){ self.unregister_timer(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timers") %} ->(object : Binding::QObject*){ self.unregister_timers(Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("registered_timers") %} ->(object : Binding::QObject*){ BindgenHelper.wrap_container(QList_QAbstractEventDispatcher__TimerInfo, self.registered_timers(Object.new(unwrap: object))).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_remainingTime_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remaining_time") %} ->(timer_id : Int32){ self.remaining_time(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_wakeUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("wake_up") %} ->(){ self.wake_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_interrupt_: BindgenHelper.wrap_proc({% if forwarded.includes?("interrupt") %} ->(){ self.interrupt() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_flush_: BindgenHelper.wrap_proc({% if forwarded.includes?("flush") %} ->(){ self.flush() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_startingUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("starting_up") %} ->(){ self.starting_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_closingDown_: BindgenHelper.wrap_proc({% if forwarded.includes?("closing_down") %} ->(){ self.closing_down() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractEventDispatcher_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class AbstractEventDispatcherImpl < AbstractEventDispatcher
    macro inherited
      {{ raise "You can't sub-class AbstractEventDispatcherImpl, inherit from AbstractEventDispatcher instead" }}
    end
    def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
      Binding.bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(self, flags)
    end
    def has_pending_events?() : Bool
      Binding.bg_QAbstractEventDispatcher_hasPendingEvents_(self)
    end
    def register_socket_notifier(notifier : SocketNotifier) : Void
      Binding.bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(self, notifier)
    end
    def unregister_socket_notifier(notifier : SocketNotifier) : Void
      Binding.bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(self, notifier)
    end
    def register_timer(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Object) : Void
      Binding.bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(self, timer_id, interval, timer_type, object)
    end
    def unregister_timer(timer_id : Int32) : Bool
      Binding.bg_QAbstractEventDispatcher_unregisterTimer_int(self, timer_id)
    end
    def unregister_timers(object : Object) : Bool
      Binding.bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(self, object)
    end
    def registered_timers(object : Object) : Enumerable(Binding::EventDispatcherTimerInfo)
      QList_QAbstractEventDispatcher__TimerInfo.new(unwrap: Binding.bg_QAbstractEventDispatcher_registeredTimers_QObject_X(self, object))
    end
    def remaining_time(timer_id : Int32) : Int32
      Binding.bg_QAbstractEventDispatcher_remainingTime_int(self, timer_id)
    end
    def wake_up() : Void
      Binding.bg_QAbstractEventDispatcher_wakeUp_(self)
    end
    def interrupt() : Void
      Binding.bg_QAbstractEventDispatcher_interrupt_(self)
    end
    def flush() : Void
      Binding.bg_QAbstractEventDispatcher_flush_(self)
    end
  end
  class SocketNotifier < Object
    enum Type : UInt32
      Read = 0
      Write = 1
      Exception = 2
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QSocketNotifier_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSocketNotifier_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSocketNotifier_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(socket : Int64, unnamed_arg_1 : SocketNotifier::Type, parent : Object? = nil)
      unwrap = Binding.bg_QSocketNotifier_CONSTRUCT_qintptr_QSocketNotifier__Type_QObject_X(socket, unnamed_arg_1, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SocketNotifier)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQSocketNotifier.new(
      bg_QSocketNotifier_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QSocketNotifier_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSocketNotifier_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QSocketNotifier_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def socket() : Int64
      Binding.bg_QSocketNotifier_socket_(self)
    end
    def type() : SocketNotifier::Type
      Binding.bg_QSocketNotifier_type_(self)
    end
    def enabled?() : Bool
      Binding.bg_QSocketNotifier_isEnabled_(self)
    end
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QSocketNotifier_setEnabled_bool(self, unnamed_arg_0)
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QSocketNotifier_event_QEvent_X(self, unnamed_arg_0)
    end
  end
  abstract class PaintDevice 
    enum PaintDeviceMetric : UInt32
      PdmWidth = 1
      PdmHeight = 2
      PdmWidthMM = 3
      PdmHeightMM = 4
      PdmNumColors = 5
      PdmDepth = 6
      PdmDpiX = 7
      PdmDpiY = 8
      PdmPhysicalDpiX = 9
      PdmPhysicalDpiY = 10
      PdmDevicePixelRatio = 11
      PdmDevicePixelRatioScaled = 12
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def dev_type() : Int32
      Binding.bg_QPaintDevice_devType_(self)
    end
    def painting_active() : Bool
      Binding.bg_QPaintDevice_paintingActive_(self)
    end
    abstract def paint_engine() : QPaintEngine*
    def width() : Int32
      Binding.bg_QPaintDevice_width_(self)
    end
    def height() : Int32
      Binding.bg_QPaintDevice_height_(self)
    end
    def width_mm() : Int32
      Binding.bg_QPaintDevice_widthMM_(self)
    end
    def height_mm() : Int32
      Binding.bg_QPaintDevice_heightMM_(self)
    end
    def logical_dpi_x() : Int32
      Binding.bg_QPaintDevice_logicalDpiX_(self)
    end
    def logical_dpi_y() : Int32
      Binding.bg_QPaintDevice_logicalDpiY_(self)
    end
    def physical_dpi_x() : Int32
      Binding.bg_QPaintDevice_physicalDpiX_(self)
    end
    def physical_dpi_y() : Int32
      Binding.bg_QPaintDevice_physicalDpiY_(self)
    end
    def device_pixel_ratio() : Int32
      Binding.bg_QPaintDevice_devicePixelRatio_(self)
    end
    def device_pixel_ratio_f() : Float64
      Binding.bg_QPaintDevice_devicePixelRatioF_(self)
    end
    def color_count() : Int32
      Binding.bg_QPaintDevice_colorCount_(self)
    end
    def depth() : Int32
      Binding.bg_QPaintDevice_depth_(self)
    end
    def self.device_pixel_ratio_f_scale() : Float64
      Binding.bg_QPaintDevice_devicePixelRatioFScale_STATIC_()
    end
    protected def initialize()
      unwrap = Binding.bg_QPaintDevice_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PaintDevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPaintDevice.new(
      bg_QPaintDevice_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QPaintDevice_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(metric : PaintDevice::PaintDeviceMetric){ self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_QPaintDevice_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def metric(metric : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric(self, metric)
    end
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QPaintDevice_initPainter_QPainter_X(self, painter)
    end
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QPaintDevice_sharedPainter_(self))
    end
  end
  class PaintDeviceImpl < PaintDevice
    macro inherited
      {{ raise "You can't sub-class PaintDeviceImpl, inherit from PaintDevice instead" }}
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QPaintDevice_paintEngine_(self)
    end
  end
  class Widget < Object
    @[Flags]
    enum RenderFlags : UInt32
      DrawWindowBackground = 1
      DrawChildren = 2
      IgnoreMask = 4
    end
    def initialize(@unwrap : Void*)
    end
    def as_paint_device() : PaintDeviceImpl
      PaintDeviceImpl.new(unwrap: Binding.bg_QWidget_AS_QPaintDevice_(self))
    end
    def meta_object() : QMetaObject*
      Binding.bg_QWidget_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QWidget_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget?, f : WindowFlags)
      unwrap = Binding.bg_QWidget_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    def create_win_id() : Void
      Binding.bg_QWidget_createWinId_(self)
    end
    def style() : QStyle*
      Binding.bg_QWidget_style_(self)
    end
    def style=(unnamed_arg_0 : QStyle*) : Void
      Binding.bg_QWidget_setStyle_QStyle_X(self, unnamed_arg_0)
    end
    def top_level?() : Bool
      Binding.bg_QWidget_isTopLevel_(self)
    end
    def window?() : Bool
      Binding.bg_QWidget_isWindow_(self)
    end
    def modal?() : Bool
      Binding.bg_QWidget_isModal_(self)
    end
    def window_modality() : WindowModality
      Binding.bg_QWidget_windowModality_(self)
    end
    def window_modality=(window_modality : WindowModality) : Void
      Binding.bg_QWidget_setWindowModality_Qt__WindowModality(self, window_modality)
    end
    def enabled?() : Bool
      Binding.bg_QWidget_isEnabled_(self)
    end
    def is_enabled_to(unnamed_arg_0 : Widget) : Bool
      Binding.bg_QWidget_isEnabledTo_const_QWidget_X(self, unnamed_arg_0)
    end
    def enabled_to_tlw?() : Bool
      Binding.bg_QWidget_isEnabledToTLW_(self)
    end
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setEnabled_bool(self, unnamed_arg_0)
    end
    def disabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setDisabled_bool(self, unnamed_arg_0)
    end
    def window_modified=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setWindowModified_bool(self, unnamed_arg_0)
    end
    def frame_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_frameGeometry_(self))
    end
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_geometry_(self))
    end
    def normal_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_normalGeometry_(self))
    end
    def x() : Int32
      Binding.bg_QWidget_x_(self)
    end
    def y() : Int32
      Binding.bg_QWidget_y_(self)
    end
    def pos() : Point
      Point.new(unwrap: Binding.bg_QWidget_pos_(self))
    end
    def frame_size() : QSize*
      Binding.bg_QWidget_frameSize_(self)
    end
    def size() : QSize*
      Binding.bg_QWidget_size_(self)
    end
    def width() : Int32
      Binding.bg_QWidget_width_(self)
    end
    def height() : Int32
      Binding.bg_QWidget_height_(self)
    end
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_rect_(self))
    end
    def children_rect() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_childrenRect_(self))
    end
    def children_region() : QRegion*
      Binding.bg_QWidget_childrenRegion_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QWidget_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QWidget_maximumSize_(self)
    end
    def minimum_width() : Int32
      Binding.bg_QWidget_minimumWidth_(self)
    end
    def minimum_height() : Int32
      Binding.bg_QWidget_minimumHeight_(self)
    end
    def maximum_width() : Int32
      Binding.bg_QWidget_maximumWidth_(self)
    end
    def maximum_height() : Int32
      Binding.bg_QWidget_maximumHeight_(self)
    end
    def minimum_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setMinimumSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_minimum_size(minw : Int32, minh : Int32) : Void
      Binding.bg_QWidget_setMinimumSize_int_int(self, minw, minh)
    end
    def maximum_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setMaximumSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_maximum_size(maxw : Int32, maxh : Int32) : Void
      Binding.bg_QWidget_setMaximumSize_int_int(self, maxw, maxh)
    end
    def minimum_width=(minw : Int32) : Void
      Binding.bg_QWidget_setMinimumWidth_int(self, minw)
    end
    def minimum_height=(minh : Int32) : Void
      Binding.bg_QWidget_setMinimumHeight_int(self, minh)
    end
    def maximum_width=(maxw : Int32) : Void
      Binding.bg_QWidget_setMaximumWidth_int(self, maxw)
    end
    def maximum_height=(maxh : Int32) : Void
      Binding.bg_QWidget_setMaximumHeight_int(self, maxh)
    end
    def size_increment() : QSize*
      Binding.bg_QWidget_sizeIncrement_(self)
    end
    def size_increment=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setSizeIncrement_const_QSize_R(self, unnamed_arg_0)
    end
    def set_size_increment(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setSizeIncrement_int_int(self, w, h)
    end
    def base_size() : QSize*
      Binding.bg_QWidget_baseSize_(self)
    end
    def base_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setBaseSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_base_size(basew : Int32, baseh : Int32) : Void
      Binding.bg_QWidget_setBaseSize_int_int(self, basew, baseh)
    end
    def fixed_size=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_setFixedSize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_fixed_size(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setFixedSize_int_int(self, w, h)
    end
    def fixed_width=(w : Int32) : Void
      Binding.bg_QWidget_setFixedWidth_int(self, w)
    end
    def fixed_height=(h : Int32) : Void
      Binding.bg_QWidget_setFixedHeight_int(self, h)
    end
    def map_to_global(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapToGlobal_const_QPoint_R(self, unnamed_arg_0))
    end
    def map_from_global(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapFromGlobal_const_QPoint_R(self, unnamed_arg_0))
    end
    def map_to_parent(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapToParent_const_QPoint_R(self, unnamed_arg_0))
    end
    def map_from_parent(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapFromParent_const_QPoint_R(self, unnamed_arg_0))
    end
    def map_to(unnamed_arg_0 : Widget, unnamed_arg_1 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1))
    end
    def map_from(unnamed_arg_0 : Widget, unnamed_arg_1 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1))
    end
    def window() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_window_(self))
    end
    def native_parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_nativeParentWidget_(self))
    end
    def top_level_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_topLevelWidget_(self))
    end
    def palette() : Palette
      Palette.new(unwrap: Binding.bg_QWidget_palette_(self))
    end
    def palette=(unnamed_arg_0 : Palette) : Void
      Binding.bg_QWidget_setPalette_const_QPalette_R(self, unnamed_arg_0)
    end
    def background_role=(unnamed_arg_0 : Palette::ColorRole) : Void
      Binding.bg_QWidget_setBackgroundRole_QPalette__ColorRole(self, unnamed_arg_0)
    end
    def background_role() : Palette::ColorRole
      Binding.bg_QWidget_backgroundRole_(self)
    end
    def foreground_role=(unnamed_arg_0 : Palette::ColorRole) : Void
      Binding.bg_QWidget_setForegroundRole_QPalette__ColorRole(self, unnamed_arg_0)
    end
    def foreground_role() : Palette::ColorRole
      Binding.bg_QWidget_foregroundRole_(self)
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QWidget_font_(self))
    end
    def font=(unnamed_arg_0 : Font) : Void
      Binding.bg_QWidget_setFont_const_QFont_R(self, unnamed_arg_0)
    end
    def font_metrics() : QFontMetrics*
      Binding.bg_QWidget_fontMetrics_(self)
    end
    def font_info() : QFontInfo*
      Binding.bg_QWidget_fontInfo_(self)
    end
    def cursor() : QCursor*
      Binding.bg_QWidget_cursor_(self)
    end
    def cursor=(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QWidget_setCursor_const_QCursor_R(self, unnamed_arg_0)
    end
    def unset_cursor() : Void
      Binding.bg_QWidget_unsetCursor_(self)
    end
    def mouse_tracking=(enable : Bool) : Void
      Binding.bg_QWidget_setMouseTracking_bool(self, enable)
    end
    def has_mouse_tracking?() : Bool
      Binding.bg_QWidget_hasMouseTracking_(self)
    end
    def under_mouse() : Bool
      Binding.bg_QWidget_underMouse_(self)
    end
    def tablet_tracking=(enable : Bool) : Void
      Binding.bg_QWidget_setTabletTracking_bool(self, enable)
    end
    def has_tablet_tracking?() : Bool
      Binding.bg_QWidget_hasTabletTracking_(self)
    end
    def mask=(unnamed_arg_0 : QBitmap*) : Void
      Binding.bg_QWidget_setMask_const_QBitmap_R(self, unnamed_arg_0)
    end
    def mask=(unnamed_arg_0 : QRegion*) : Void
      Binding.bg_QWidget_setMask_const_QRegion_R(self, unnamed_arg_0)
    end
    def mask() : QRegion*
      Binding.bg_QWidget_mask_(self)
    end
    def clear_mask() : Void
      Binding.bg_QWidget_clearMask_(self)
    end
    def render(target : PaintDevice) : Void
      Binding.bg_QWidget_render_QPaintDevice_X(self, target)
    end
    def render(target : PaintDevice, target_offset : Point) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R(self, target, target_offset)
    end
    def render(target : PaintDevice, target_offset : Point, source_region : QRegion*) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(self, target, target_offset, source_region)
    end
    def render(target : PaintDevice, target_offset : Point, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(self, target, target_offset, source_region, render_flags)
    end
    def render(painter : Painter) : Void
      Binding.bg_QWidget_render_QPainter_X(self, painter)
    end
    def render(painter : Painter, target_offset : Point) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R(self, painter, target_offset)
    end
    def render(painter : Painter, target_offset : Point, source_region : QRegion*) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(self, painter, target_offset, source_region)
    end
    def render(painter : Painter, target_offset : Point, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(self, painter, target_offset, source_region, render_flags)
    end
    def grab() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QWidget_grab_(self))
    end
    def grab(rectangle : Rect) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QWidget_grab_const_QRect_R(self, rectangle))
    end
    def graphics_effect() : QGraphicsEffect*
      Binding.bg_QWidget_graphicsEffect_(self)
    end
    def graphics_effect=(effect : QGraphicsEffect*) : Void
      Binding.bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(self, effect)
    end
    def grab_gesture(type : GestureType) : Void
      Binding.bg_QWidget_grabGesture_Qt__GestureType(self, type)
    end
    def grab_gesture(type : GestureType, flags : GestureFlags) : Void
      Binding.bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(self, type, flags)
    end
    def ungrab_gesture(type : GestureType) : Void
      Binding.bg_QWidget_ungrabGesture_Qt__GestureType(self, type)
    end
    def window_title=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowTitle_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def style_sheet=(style_sheet : String) : Void
      Binding.bg_QWidget_setStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(style_sheet))
    end
    def style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_styleSheet_(self))
    end
    def window_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowTitle_(self))
    end
    def window_icon=(icon : Icon) : Void
      Binding.bg_QWidget_setWindowIcon_const_QIcon_R(self, icon)
    end
    def window_icon() : Icon
      Icon.new(unwrap: Binding.bg_QWidget_windowIcon_(self))
    end
    def window_icon_text=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowIconText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def window_icon_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowIconText_(self))
    end
    def window_role=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowRole_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def window_role() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowRole_(self))
    end
    def window_file_path=(file_path : String) : Void
      Binding.bg_QWidget_setWindowFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_path))
    end
    def window_file_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowFilePath_(self))
    end
    def window_opacity=(level : Float64) : Void
      Binding.bg_QWidget_setWindowOpacity_qreal(self, level)
    end
    def window_opacity() : Float64
      Binding.bg_QWidget_windowOpacity_(self)
    end
    def window_modified?() : Bool
      Binding.bg_QWidget_isWindowModified_(self)
    end
    def tool_tip=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_toolTip_(self))
    end
    def tool_tip_duration=(msec : Int32) : Void
      Binding.bg_QWidget_setToolTipDuration_int(self, msec)
    end
    def tool_tip_duration() : Int32
      Binding.bg_QWidget_toolTipDuration_(self)
    end
    def status_tip=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setStatusTip_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def status_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_statusTip_(self))
    end
    def whats_this=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWhatsThis_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def whats_this() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_whatsThis_(self))
    end
    def accessible_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_accessibleName_(self))
    end
    def accessible_name=(name : String) : Void
      Binding.bg_QWidget_setAccessibleName_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def accessible_description() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_accessibleDescription_(self))
    end
    def accessible_description=(description : String) : Void
      Binding.bg_QWidget_setAccessibleDescription_const_QString_R(self, Qt::Converter::QString.wrap(description))
    end
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QWidget_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    def layout_direction() : LayoutDirection
      Binding.bg_QWidget_layoutDirection_(self)
    end
    def unset_layout_direction() : Void
      Binding.bg_QWidget_unsetLayoutDirection_(self)
    end
    def locale=(locale : QLocale*) : Void
      Binding.bg_QWidget_setLocale_const_QLocale_R(self, locale)
    end
    def locale() : QLocale*
      Binding.bg_QWidget_locale_(self)
    end
    def unset_locale() : Void
      Binding.bg_QWidget_unsetLocale_(self)
    end
    def right_to_left?() : Bool
      Binding.bg_QWidget_isRightToLeft_(self)
    end
    def left_to_right?() : Bool
      Binding.bg_QWidget_isLeftToRight_(self)
    end
    def set_focus() : Void
      Binding.bg_QWidget_setFocus_(self)
    end
    def active_window?() : Bool
      Binding.bg_QWidget_isActiveWindow_(self)
    end
    def activate_window() : Void
      Binding.bg_QWidget_activateWindow_(self)
    end
    def clear_focus() : Void
      Binding.bg_QWidget_clearFocus_(self)
    end
    def focus=(reason : FocusReason) : Void
      Binding.bg_QWidget_setFocus_Qt__FocusReason(self, reason)
    end
    def focus_policy() : FocusPolicy
      Binding.bg_QWidget_focusPolicy_(self)
    end
    def focus_policy=(policy : FocusPolicy) : Void
      Binding.bg_QWidget_setFocusPolicy_Qt__FocusPolicy(self, policy)
    end
    def has_focus?() : Bool
      Binding.bg_QWidget_hasFocus_(self)
    end
    def self.set_tab_order(unnamed_arg_0 : Widget, unnamed_arg_1 : Widget) : Void
      Binding.bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(unnamed_arg_0, unnamed_arg_1)
    end
    def focus_proxy=(unnamed_arg_0 : Widget) : Void
      Binding.bg_QWidget_setFocusProxy_QWidget_X(self, unnamed_arg_0)
    end
    def focus_proxy() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_focusProxy_(self))
    end
    def context_menu_policy() : ContextMenuPolicy
      Binding.bg_QWidget_contextMenuPolicy_(self)
    end
    def context_menu_policy=(policy : ContextMenuPolicy) : Void
      Binding.bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(self, policy)
    end
    def grab_mouse() : Void
      Binding.bg_QWidget_grabMouse_(self)
    end
    def grab_mouse(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QWidget_grabMouse_const_QCursor_R(self, unnamed_arg_0)
    end
    def release_mouse() : Void
      Binding.bg_QWidget_releaseMouse_(self)
    end
    def grab_keyboard() : Void
      Binding.bg_QWidget_grabKeyboard_(self)
    end
    def release_keyboard() : Void
      Binding.bg_QWidget_releaseKeyboard_(self)
    end
    def grab_shortcut(key : KeySequence, context : ShortcutContext = ShortcutContext::WindowShortcut) : Int32
      Binding.bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(self, key, context)
    end
    def release_shortcut(id : Int32) : Void
      Binding.bg_QWidget_releaseShortcut_int(self, id)
    end
    def set_shortcut_enabled(id : Int32, enable : Bool = true) : Void
      Binding.bg_QWidget_setShortcutEnabled_int_bool(self, id, enable)
    end
    def set_shortcut_auto_repeat(id : Int32, enable : Bool = true) : Void
      Binding.bg_QWidget_setShortcutAutoRepeat_int_bool(self, id, enable)
    end
    def self.mouse_grabber() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_mouseGrabber_STATIC_())
    end
    def self.keyboard_grabber() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_keyboardGrabber_STATIC_())
    end
    def updates_enabled() : Bool
      Binding.bg_QWidget_updatesEnabled_(self)
    end
    def updates_enabled=(enable : Bool) : Void
      Binding.bg_QWidget_setUpdatesEnabled_bool(self, enable)
    end
    def graphics_proxy_widget() : QGraphicsProxyWidget*
      Binding.bg_QWidget_graphicsProxyWidget_(self)
    end
    def update() : Void
      Binding.bg_QWidget_update_(self)
    end
    def repaint() : Void
      Binding.bg_QWidget_repaint_(self)
    end
    def update(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_update_int_int_int_int(self, x, y, w, h)
    end
    def update(unnamed_arg_0 : Rect) : Void
      Binding.bg_QWidget_update_const_QRect_R(self, unnamed_arg_0)
    end
    def update(unnamed_arg_0 : QRegion*) : Void
      Binding.bg_QWidget_update_const_QRegion_R(self, unnamed_arg_0)
    end
    def repaint(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_repaint_int_int_int_int(self, x, y, w, h)
    end
    def repaint(unnamed_arg_0 : Rect) : Void
      Binding.bg_QWidget_repaint_const_QRect_R(self, unnamed_arg_0)
    end
    def repaint(unnamed_arg_0 : QRegion*) : Void
      Binding.bg_QWidget_repaint_const_QRegion_R(self, unnamed_arg_0)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    def hidden=(hidden : Bool) : Void
      Binding.bg_QWidget_setHidden_bool(self, hidden)
    end
    def show() : Void
      Binding.bg_QWidget_show_(self)
    end
    def hide() : Void
      Binding.bg_QWidget_hide_(self)
    end
    def show_minimized() : Void
      Binding.bg_QWidget_showMinimized_(self)
    end
    def show_maximized() : Void
      Binding.bg_QWidget_showMaximized_(self)
    end
    def show_full_screen() : Void
      Binding.bg_QWidget_showFullScreen_(self)
    end
    def show_normal() : Void
      Binding.bg_QWidget_showNormal_(self)
    end
    def close() : Bool
      Binding.bg_QWidget_close_(self)
    end
    def raise() : Void
      Binding.bg_QWidget_raise_(self)
    end
    def lower() : Void
      Binding.bg_QWidget_lower_(self)
    end
    def stack_under(unnamed_arg_0 : Widget) : Void
      Binding.bg_QWidget_stackUnder_QWidget_X(self, unnamed_arg_0)
    end
    def move(x : Int32, y : Int32) : Void
      Binding.bg_QWidget_move_int_int(self, x, y)
    end
    def move(unnamed_arg_0 : Point) : Void
      Binding.bg_QWidget_move_const_QPoint_R(self, unnamed_arg_0)
    end
    def resize(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_resize_int_int(self, w, h)
    end
    def resize(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QWidget_resize_const_QSize_R(self, unnamed_arg_0)
    end
    def set_geometry(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setGeometry_int_int_int_int(self, x, y, w, h)
    end
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QWidget_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    def save_geometry() : QByteArray*
      Binding.bg_QWidget_saveGeometry_(self)
    end
    def restore_geometry(geometry : QByteArray*) : Bool
      Binding.bg_QWidget_restoreGeometry_const_QByteArray_R(self, geometry)
    end
    def adjust_size() : Void
      Binding.bg_QWidget_adjustSize_(self)
    end
    def visible?() : Bool
      Binding.bg_QWidget_isVisible_(self)
    end
    def is_visible_to(unnamed_arg_0 : Widget) : Bool
      Binding.bg_QWidget_isVisibleTo_const_QWidget_X(self, unnamed_arg_0)
    end
    def hidden?() : Bool
      Binding.bg_QWidget_isHidden_(self)
    end
    def minimized?() : Bool
      Binding.bg_QWidget_isMinimized_(self)
    end
    def maximized?() : Bool
      Binding.bg_QWidget_isMaximized_(self)
    end
    def full_screen?() : Bool
      Binding.bg_QWidget_isFullScreen_(self)
    end
    def window_state() : WindowStates
      Binding.bg_QWidget_windowState_(self)
    end
    def window_state=(state : WindowStates) : Void
      Binding.bg_QWidget_setWindowState_Qt__WindowStates(self, state)
    end
    def override_window_state(state : WindowStates) : Void
      Binding.bg_QWidget_overrideWindowState_Qt__WindowStates(self, state)
    end
    def size_hint() : QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    def size_policy() : SizePolicy
      SizePolicy.new(unwrap: Binding.bg_QWidget_sizePolicy_(self))
    end
    def size_policy=(unnamed_arg_0 : SizePolicy) : Void
      Binding.bg_QWidget_setSizePolicy_QSizePolicy(self, unnamed_arg_0)
    end
    def set_size_policy(horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy) : Void
      Binding.bg_QWidget_setSizePolicy_QSizePolicy__Policy_QSizePolicy__Policy(self, horizontal, vertical)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    def visible_region() : QRegion*
      Binding.bg_QWidget_visibleRegion_(self)
    end
    def set_contents_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QWidget_setContentsMargins_int_int_int_int(self, left, top, right, bottom)
    end
    def contents_margins=(margins : QMargins*) : Void
      Binding.bg_QWidget_setContentsMargins_const_QMargins_R(self, margins)
    end
    def get_contents_margins(left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
      Binding.bg_QWidget_getContentsMargins_int_X_int_X_int_X_int_X(self, left, top, right, bottom)
    end
    def contents_margins() : QMargins*
      Binding.bg_QWidget_contentsMargins_(self)
    end
    def contents_rect() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_contentsRect_(self))
    end
    def layout() : Layout
      Layout.new(unwrap: Binding.bg_QWidget_layout_(self))
    end
    def layout=(unnamed_arg_0 : Layout) : Void
      Binding.bg_QWidget_setLayout_QLayout_X(self, unnamed_arg_0)
    end
    def update_geometry() : Void
      Binding.bg_QWidget_updateGeometry_(self)
    end
    def parent=(parent : Widget) : Void
      Binding.bg_QWidget_setParent_QWidget_X(self, parent)
    end
    def set_parent(parent : Widget, f : WindowFlags) : Void
      Binding.bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(self, parent, f)
    end
    def scroll(dx : Int32, dy : Int32) : Void
      Binding.bg_QWidget_scroll_int_int(self, dx, dy)
    end
    def scroll(dx : Int32, dy : Int32, unnamed_arg_2 : Rect) : Void
      Binding.bg_QWidget_scroll_int_int_const_QRect_R(self, dx, dy, unnamed_arg_2)
    end
    def focus_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_focusWidget_(self))
    end
    def next_in_focus_chain() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_nextInFocusChain_(self))
    end
    def previous_in_focus_chain() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_previousInFocusChain_(self))
    end
    def accept_drops() : Bool
      Binding.bg_QWidget_acceptDrops_(self)
    end
    def accept_drops=(on : Bool) : Void
      Binding.bg_QWidget_setAcceptDrops_bool(self, on)
    end
    def add_action(action : Action) : Void
      Binding.bg_QWidget_addAction_QAction_X(self, action)
    end
    def add_actions(actions : Enumerable(Action)) : Void
      Binding.bg_QWidget_addActions_QList_QAction_X_(self, BindgenHelper.wrap_container(QList_QAction_X, actions).to_unsafe)
    end
    def insert_actions(before : Action, actions : Enumerable(Action)) : Void
      Binding.bg_QWidget_insertActions_QAction_X_QList_QAction_X_(self, before, BindgenHelper.wrap_container(QList_QAction_X, actions).to_unsafe)
    end
    def insert_action(before : Action, action : Action) : Void
      Binding.bg_QWidget_insertAction_QAction_X_QAction_X(self, before, action)
    end
    def remove_action(action : Action) : Void
      Binding.bg_QWidget_removeAction_QAction_X(self, action)
    end
    def actions() : Enumerable(Action)
      QList_QAction_X.new(unwrap: Binding.bg_QWidget_actions_(self))
    end
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_parentWidget_(self))
    end
    def window_flags=(type : WindowFlags) : Void
      Binding.bg_QWidget_setWindowFlags_Qt__WindowFlags(self, type)
    end
    def window_flags() : WindowFlags
      Binding.bg_QWidget_windowFlags_(self)
    end
    def set_window_flag(unnamed_arg_0 : WindowType, on : Bool = true) : Void
      Binding.bg_QWidget_setWindowFlag_Qt__WindowType_bool(self, unnamed_arg_0, on)
    end
    def override_window_flags(type : WindowFlags) : Void
      Binding.bg_QWidget_overrideWindowFlags_Qt__WindowFlags(self, type)
    end
    def window_type() : WindowType
      Binding.bg_QWidget_windowType_(self)
    end
    def child_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_childAt_int_int(self, x, y))
    end
    def child_at(p : Point) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_childAt_const_QPoint_R(self, p))
    end
    def set_attribute(unnamed_arg_0 : WidgetAttribute, on : Bool = true) : Void
      Binding.bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(self, unnamed_arg_0, on)
    end
    def test_attribute(unnamed_arg_0 : WidgetAttribute) : Bool
      Binding.bg_QWidget_testAttribute_Qt__WidgetAttribute(self, unnamed_arg_0)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    def ensure_polished() : Void
      Binding.bg_QWidget_ensurePolished_(self)
    end
    def is_ancestor_of(child : Widget) : Bool
      Binding.bg_QWidget_isAncestorOf_const_QWidget_X(self, child)
    end
    def auto_fill_background() : Bool
      Binding.bg_QWidget_autoFillBackground_(self)
    end
    def auto_fill_background=(enabled : Bool) : Void
      Binding.bg_QWidget_setAutoFillBackground_bool(self, enabled)
    end
    def backing_store() : QBackingStore*
      Binding.bg_QWidget_backingStore_(self)
    end
    def window_handle() : QWindow*
      Binding.bg_QWidget_windowHandle_(self)
    end
    def self.create_window_container(window : QWindow*, parent : Widget? = nil) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(window, parent))
    end
    def self.create_window_container(window : QWindow*, parent : Widget?, flags : WindowFlags) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(window, parent, flags))
    end
    def window_title_changed(title : String) : Void
      Binding.bg_QWidget_windowTitleChanged_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def on_window_title_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_windowTitleChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(title : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(title)) })))
    end
    def window_icon_changed(icon : Icon) : Void
      Binding.bg_QWidget_windowIconChanged_const_QIcon_R(self, icon)
    end
    def on_window_icon_changed(&block : Proc(Icon, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_windowIconChanged_CONNECT_CrystalProc_void__const_QIconR_(self, BindgenHelper.wrap_proc(->(icon : Binding::QIcon*){ block.call(Icon.new(unwrap: icon)) })))
    end
    def window_icon_text_changed(icon_text : String) : Void
      Binding.bg_QWidget_windowIconTextChanged_const_QString_R(self, Qt::Converter::QString.wrap(icon_text))
    end
    def on_window_icon_text_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_windowIconTextChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(icon_text : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(icon_text)) })))
    end
    def custom_context_menu_requested(pos : Point) : Void
      Binding.bg_QWidget_customContextMenuRequested_const_QPoint_R(self, pos)
    end
    def on_custom_context_menu_requested(&block : Proc(Point, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_customContextMenuRequested_CONNECT_CrystalProc_void__const_QPoint_(self, BindgenHelper.wrap_proc(->(pos : Binding::QPoint){ block.call(Point.new(unwrap: pos)) })))
    end
    protected def event(event : Event) : Bool
      Binding.bg_QWidget_event_QEvent_X(self, event)
    end
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    protected def wheel_event(event : QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    protected def key_press_event(event : QKeyEvent*) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    protected def key_release_event(event : QKeyEvent*) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QWidget_paintEvent_QPaintEvent_X(self, event)
    end
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    protected def context_menu_event(event : QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    protected def tablet_event(event : QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    protected def native_event(event_type : QByteArray*, message : Void*, result : Int32*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    def input_method_hints() : InputMethodHints
      Binding.bg_QWidget_inputMethodHints_(self)
    end
    def input_method_hints=(hints : InputMethodHints) : Void
      Binding.bg_QWidget_setInputMethodHints_Qt__InputMethodHints(self, hints)
    end
    protected def update_micro_focus() : Void
      Binding.bg_QWidget_updateMicroFocus_(self)
    end
    protected def destroy(destroy_window : Bool = true, destroy_sub_windows : Bool = true) : Void
      Binding.bg_QWidget_destroy_bool_bool(self, destroy_window, destroy_sub_windows)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    protected def focus_next_child() : Bool
      Binding.bg_QWidget_focusNextChild_(self)
    end
    protected def focus_previous_child() : Bool
      Binding.bg_QWidget_focusPreviousChild_(self)
    end
    protected def initialize(d : QWidgetPrivate*, parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QWidget_CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(d, parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  abstract class AbstractButton < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractButton_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractButton_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def text=(text : String) : Void
      Binding.bg_QAbstractButton_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_text_(self))
    end
    def icon=(icon : Icon) : Void
      Binding.bg_QAbstractButton_setIcon_const_QIcon_R(self, icon)
    end
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QAbstractButton_icon_(self))
    end
    def icon_size() : QSize*
      Binding.bg_QAbstractButton_iconSize_(self)
    end
    def shortcut=(key : KeySequence) : Void
      Binding.bg_QAbstractButton_setShortcut_const_QKeySequence_R(self, key)
    end
    def shortcut() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QAbstractButton_shortcut_(self))
    end
    def checkable=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setCheckable_bool(self, unnamed_arg_0)
    end
    def checkable?() : Bool
      Binding.bg_QAbstractButton_isCheckable_(self)
    end
    def checked?() : Bool
      Binding.bg_QAbstractButton_isChecked_(self)
    end
    def down=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setDown_bool(self, unnamed_arg_0)
    end
    def down?() : Bool
      Binding.bg_QAbstractButton_isDown_(self)
    end
    def auto_repeat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setAutoRepeat_bool(self, unnamed_arg_0)
    end
    def auto_repeat() : Bool
      Binding.bg_QAbstractButton_autoRepeat_(self)
    end
    def auto_repeat_delay=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractButton_setAutoRepeatDelay_int(self, unnamed_arg_0)
    end
    def auto_repeat_delay() : Int32
      Binding.bg_QAbstractButton_autoRepeatDelay_(self)
    end
    def auto_repeat_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractButton_setAutoRepeatInterval_int(self, unnamed_arg_0)
    end
    def auto_repeat_interval() : Int32
      Binding.bg_QAbstractButton_autoRepeatInterval_(self)
    end
    def auto_exclusive=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setAutoExclusive_bool(self, unnamed_arg_0)
    end
    def auto_exclusive() : Bool
      Binding.bg_QAbstractButton_autoExclusive_(self)
    end
    def group() : ButtonGroup
      ButtonGroup.new(unwrap: Binding.bg_QAbstractButton_group_(self))
    end
    def icon_size=(size : QSize*) : Void
      Binding.bg_QAbstractButton_setIconSize_const_QSize_R(self, size)
    end
    def animate_click(msec : Int32 = 100) : Void
      Binding.bg_QAbstractButton_animateClick_int(self, msec)
    end
    def click() : Void
      Binding.bg_QAbstractButton_click_(self)
    end
    def toggle() : Void
      Binding.bg_QAbstractButton_toggle_(self)
    end
    def checked=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setChecked_bool(self, unnamed_arg_0)
    end
    def pressed() : Void
      Binding.bg_QAbstractButton_pressed_(self)
    end
    def on_pressed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_pressed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def released() : Void
      Binding.bg_QAbstractButton_released_(self)
    end
    def on_released(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_released_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def clicked(checked : Bool = false) : Void
      Binding.bg_QAbstractButton_clicked_bool(self, checked)
    end
    def on_clicked(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_clicked_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(checked : Bool){ block.call(checked) })))
    end
    def toggled(checked : Bool) : Void
      Binding.bg_QAbstractButton_toggled_bool(self, checked)
    end
    def on_toggled(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_toggled_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(checked : Bool){ block.call(checked) })))
    end
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QAbstractButton_paintEvent_QPaintEvent_X(self, e)
    end
    protected def hit_button(pos : Point) : Bool
      Binding.bg_QAbstractButton_hitButton_const_QPoint_R(self, pos)
    end
    protected def check_state_set() : Void
      Binding.bg_QAbstractButton_checkStateSet_(self)
    end
    protected def next_check_state() : Void
      Binding.bg_QAbstractButton_nextCheckState_(self)
    end
    protected def event(e : Event) : Bool
      Binding.bg_QAbstractButton_event_QEvent_X(self, e)
    end
    protected def key_press_event(e : QKeyEvent*) : Void
      Binding.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(self, e)
    end
    protected def key_release_event(e : QKeyEvent*) : Void
      Binding.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_move_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusInEvent_QFocusEvent_X(self, e)
    end
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(self, e)
    end
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractButton_changeEvent_QEvent_X(self, e)
    end
    protected def timer_event(e : TimerEvent) : Void
      Binding.bg_QAbstractButton_timerEvent_QTimerEvent_X(self, e)
    end
    protected def initialize(dd : QAbstractButtonPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractButton_CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class AbstractButtonImpl < AbstractButton
    macro inherited
      {{ raise "You can't sub-class AbstractButtonImpl, inherit from AbstractButton instead" }}
    end
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QAbstractButton_paintEvent_QPaintEvent_X(self, e)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QPaintDevice_paintEngine_(self)
    end
  end
  class ToolButton < AbstractButton
    enum ToolButtonPopupMode : UInt32
      DelayedPopup = 0
      MenuButtonPopup = 1
      InstantPopup = 2
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QToolButton_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QToolButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolButton_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QToolButton_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ToolButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event mouse_press_event mouse_release_event paint_event action_event enter_event leave_event timer_event change_event hit_button next_check_state check_state_set key_press_event key_release_event mouse_move_event focus_in_event focus_out_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQToolButton.new(
      bg_QToolButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QToolButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QToolButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QToolButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QToolButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QToolButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QToolButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QToolButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QToolButton_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QToolButton_minimumSizeHint_(self)
    end
    def tool_button_style() : ToolButtonStyle
      Binding.bg_QToolButton_toolButtonStyle_(self)
    end
    def arrow_type() : ArrowType
      Binding.bg_QToolButton_arrowType_(self)
    end
    def arrow_type=(type : ArrowType) : Void
      Binding.bg_QToolButton_setArrowType_Qt__ArrowType(self, type)
    end
    def menu=(menu : Menu) : Void
      Binding.bg_QToolButton_setMenu_QMenu_X(self, menu)
    end
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QToolButton_menu_(self))
    end
    def popup_mode=(mode : ToolButton::ToolButtonPopupMode) : Void
      Binding.bg_QToolButton_setPopupMode_QToolButton__ToolButtonPopupMode(self, mode)
    end
    def popup_mode() : ToolButton::ToolButtonPopupMode
      Binding.bg_QToolButton_popupMode_(self)
    end
    def default_action() : Action
      Action.new(unwrap: Binding.bg_QToolButton_defaultAction_(self))
    end
    def auto_raise=(enable : Bool) : Void
      Binding.bg_QToolButton_setAutoRaise_bool(self, enable)
    end
    def auto_raise() : Bool
      Binding.bg_QToolButton_autoRaise_(self)
    end
    def show_menu() : Void
      Binding.bg_QToolButton_showMenu_(self)
    end
    def tool_button_style=(style : ToolButtonStyle) : Void
      Binding.bg_QToolButton_setToolButtonStyle_Qt__ToolButtonStyle(self, style)
    end
    def default_action=(unnamed_arg_0 : Action) : Void
      Binding.bg_QToolButton_setDefaultAction_QAction_X(self, unnamed_arg_0)
    end
    def triggered(unnamed_arg_0 : Action) : Void
      Binding.bg_QToolButton_triggered_QAction_X(self, unnamed_arg_0)
    end
    def on_triggered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolButton_triggered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::QAction*){ block.call(Action.new(unwrap: unnamed_arg_0)) })))
    end
    protected def event(e : Event) : Bool
      Binding.bg_QToolButton_event_QEvent_X(self, e)
    end
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QToolButton_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QToolButton_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QToolButton_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def action_event(unnamed_arg_0 : ActionEvent) : Void
      Binding.bg_QToolButton_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    protected def enter_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QToolButton_enterEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def leave_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QToolButton_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QToolButton_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QToolButton_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def hit_button(pos : Point) : Bool
      Binding.bg_QToolButton_hitButton_const_QPoint_R(self, pos)
    end
    protected def next_check_state() : Void
      Binding.bg_QToolButton_nextCheckState_(self)
    end
    protected def init_style_option(option : QStyleOptionToolButton*) : Void
      Binding.bg_QToolButton_initStyleOption_QStyleOptionToolButton_X(self, option)
    end
  end
  class ToolBar < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QToolBar_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QToolBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolBar_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(title : String, parent : Widget? = nil)
      unwrap = Binding.bg_QToolBar_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ToolBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall action_event change_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQToolBar.new(
      bg_QToolBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QToolBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QToolBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QToolBar_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ToolBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall action_event change_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQToolBar.new(
      bg_QToolBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QToolBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QToolBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def movable=(movable : Bool) : Void
      Binding.bg_QToolBar_setMovable_bool(self, movable)
    end
    def movable?() : Bool
      Binding.bg_QToolBar_isMovable_(self)
    end
    def allowed_areas=(areas : ToolBarAreas) : Void
      Binding.bg_QToolBar_setAllowedAreas_Qt__ToolBarAreas(self, areas)
    end
    def allowed_areas() : ToolBarAreas
      Binding.bg_QToolBar_allowedAreas_(self)
    end
    def is_area_allowed(area : ToolBarArea) : Bool
      Binding.bg_QToolBar_isAreaAllowed_Qt__ToolBarArea(self, area)
    end
    def orientation=(orientation : Orientation) : Void
      Binding.bg_QToolBar_setOrientation_Qt__Orientation(self, orientation)
    end
    def orientation() : Orientation
      Binding.bg_QToolBar_orientation_(self)
    end
    def clear() : Void
      Binding.bg_QToolBar_clear_(self)
    end
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_action(icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_action(icon : Icon, text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(self, icon, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QToolBar_addSeparator_(self))
    end
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QToolBar_insertSeparator_QAction_X(self, before))
    end
    def add_widget(widget : Widget) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addWidget_QWidget_X(self, widget))
    end
    def insert_widget(before : Action, widget : Widget) : Action
      Action.new(unwrap: Binding.bg_QToolBar_insertWidget_QAction_X_QWidget_X(self, before, widget))
    end
    def action_geometry(action : Action) : Rect
      Rect.new(unwrap: Binding.bg_QToolBar_actionGeometry_QAction_X(self, action))
    end
    def action_at(p : Point) : Action
      Action.new(unwrap: Binding.bg_QToolBar_actionAt_const_QPoint_R(self, p))
    end
    def action_at(x : Int32, y : Int32) : Action
      Action.new(unwrap: Binding.bg_QToolBar_actionAt_int_int(self, x, y))
    end
    def toggle_view_action() : Action
      Action.new(unwrap: Binding.bg_QToolBar_toggleViewAction_(self))
    end
    def icon_size() : QSize*
      Binding.bg_QToolBar_iconSize_(self)
    end
    def tool_button_style() : ToolButtonStyle
      Binding.bg_QToolBar_toolButtonStyle_(self)
    end
    def widget_for_action(action : Action) : Widget
      Widget.new(unwrap: Binding.bg_QToolBar_widgetForAction_QAction_X(self, action))
    end
    def floatable?() : Bool
      Binding.bg_QToolBar_isFloatable_(self)
    end
    def floatable=(floatable : Bool) : Void
      Binding.bg_QToolBar_setFloatable_bool(self, floatable)
    end
    def floating?() : Bool
      Binding.bg_QToolBar_isFloating_(self)
    end
    def icon_size=(icon_size : QSize*) : Void
      Binding.bg_QToolBar_setIconSize_const_QSize_R(self, icon_size)
    end
    def tool_button_style=(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QToolBar_setToolButtonStyle_Qt__ToolButtonStyle(self, tool_button_style)
    end
    def action_triggered(action : Action) : Void
      Binding.bg_QToolBar_actionTriggered_QAction_X(self, action)
    end
    def on_action_triggered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_actionTriggered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : Binding::QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    def movable_changed(movable : Bool) : Void
      Binding.bg_QToolBar_movableChanged_bool(self, movable)
    end
    def on_movable_changed(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_movableChanged_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(movable : Bool){ block.call(movable) })))
    end
    def allowed_areas_changed(allowed_areas : ToolBarAreas) : Void
      Binding.bg_QToolBar_allowedAreasChanged_Qt__ToolBarAreas(self, allowed_areas)
    end
    def on_allowed_areas_changed(&block : Proc(ToolBarAreas, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_allowedAreasChanged_CONNECT_CrystalProc_void__Qt__ToolBarAreas_(self, BindgenHelper.wrap_proc(->(allowed_areas : ToolBarAreas){ block.call(allowed_areas) })))
    end
    def orientation_changed(orientation : Orientation) : Void
      Binding.bg_QToolBar_orientationChanged_Qt__Orientation(self, orientation)
    end
    def on_orientation_changed(&block : Proc(Orientation, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_orientationChanged_CONNECT_CrystalProc_void__Qt__Orientation_(self, BindgenHelper.wrap_proc(->(orientation : Orientation){ block.call(orientation) })))
    end
    def icon_size_changed(icon_size : QSize*) : Void
      Binding.bg_QToolBar_iconSizeChanged_const_QSize_R(self, icon_size)
    end
    def on_icon_size_changed(&block : Proc(QSize*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_iconSizeChanged_CONNECT_CrystalProc_void__const_QSizeR_(self, BindgenHelper.wrap_proc(->(icon_size : QSize*){ block.call(icon_size) })))
    end
    def tool_button_style_changed(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QToolBar_toolButtonStyleChanged_Qt__ToolButtonStyle(self, tool_button_style)
    end
    def on_tool_button_style_changed(&block : Proc(ToolButtonStyle, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_toolButtonStyleChanged_CONNECT_CrystalProc_void__Qt__ToolButtonStyle_(self, BindgenHelper.wrap_proc(->(tool_button_style : ToolButtonStyle){ block.call(tool_button_style) })))
    end
    def top_level_changed(top_level : Bool) : Void
      Binding.bg_QToolBar_topLevelChanged_bool(self, top_level)
    end
    def on_top_level_changed(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_topLevelChanged_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(top_level : Bool){ block.call(top_level) })))
    end
    def visibility_changed(visible : Bool) : Void
      Binding.bg_QToolBar_visibilityChanged_bool(self, visible)
    end
    def on_visibility_changed(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_visibilityChanged_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(visible : Bool){ block.call(visible) })))
    end
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QToolBar_actionEvent_QActionEvent_X(self, event)
    end
    protected def change_event(event : Event) : Void
      Binding.bg_QToolBar_changeEvent_QEvent_X(self, event)
    end
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QToolBar_paintEvent_QPaintEvent_X(self, event)
    end
    protected def event(event : Event) : Bool
      Binding.bg_QToolBar_event_QEvent_X(self, event)
    end
    protected def init_style_option(option : QStyleOptionToolBar*) : Void
      Binding.bg_QToolBar_initStyleOption_QStyleOptionToolBar_X(self, option)
    end
  end
  class Frame < Widget
    enum Shape : UInt32
      NoFrame = 0
      Box = 1
      Panel = 2
      WinPanel = 3
      HLine = 4
      VLine = 5
      StyledPanel = 6
    end
    enum Shadow : UInt32
      Plain = 16
      Raised = 32
      Sunken = 48
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QFrame_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QFrame_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget?, f : WindowFlags)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def frame_style() : Int32
      Binding.bg_QFrame_frameStyle_(self)
    end
    def frame_style=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setFrameStyle_int(self, unnamed_arg_0)
    end
    def frame_width() : Int32
      Binding.bg_QFrame_frameWidth_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QFrame_sizeHint_(self)
    end
    def frame_shape() : Frame::Shape
      Binding.bg_QFrame_frameShape_(self)
    end
    def frame_shape=(unnamed_arg_0 : Frame::Shape) : Void
      Binding.bg_QFrame_setFrameShape_QFrame__Shape(self, unnamed_arg_0)
    end
    def frame_shadow() : Frame::Shadow
      Binding.bg_QFrame_frameShadow_(self)
    end
    def frame_shadow=(unnamed_arg_0 : Frame::Shadow) : Void
      Binding.bg_QFrame_setFrameShadow_QFrame__Shadow(self, unnamed_arg_0)
    end
    def line_width() : Int32
      Binding.bg_QFrame_lineWidth_(self)
    end
    def line_width=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setLineWidth_int(self, unnamed_arg_0)
    end
    def mid_line_width() : Int32
      Binding.bg_QFrame_midLineWidth_(self)
    end
    def mid_line_width=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setMidLineWidth_int(self, unnamed_arg_0)
    end
    def frame_rect() : Rect
      Rect.new(unwrap: Binding.bg_QFrame_frameRect_(self))
    end
    def frame_rect=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QFrame_setFrameRect_const_QRect_R(self, unnamed_arg_0)
    end
    protected def event(e : Event) : Bool
      Binding.bg_QFrame_event_QEvent_X(self, e)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QFrame_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QFrame_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def draw_frame(unnamed_arg_0 : Painter) : Void
      Binding.bg_QFrame_drawFrame_QPainter_X(self, unnamed_arg_0)
    end
    protected def initialize(dd : QFramePrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(dd : QFramePrivate*, parent : Widget?, f : WindowFlags)
      unwrap = Binding.bg_QFrame_CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(dd, parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFrame_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def init_style_option(option : QStyleOptionFrame*) : Void
      Binding.bg_QFrame_initStyleOption_QStyleOptionFrame_X(self, option)
    end
  end
  class ProgressBar < Widget
    enum Direction : UInt32
      TopToBottom = 0
      BottomToTop = 1
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QProgressBar_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QProgressBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QProgressBar_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ProgressBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall text size_hint minimum_size_hint event paint_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQProgressBar.new(
      bg_QProgressBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QProgressBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QProgressBar_text_: BindgenHelper.wrap_proc({% if forwarded.includes?("text") %} ->(){ Qt::Converter::QString.wrap(self.text()) } {% else %} nil {% end %}),
      bg_QProgressBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QProgressBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QProgressBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QProgressBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QProgressBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def minimum() : Int32
      Binding.bg_QProgressBar_minimum_(self)
    end
    def maximum() : Int32
      Binding.bg_QProgressBar_maximum_(self)
    end
    def value() : Int32
      Binding.bg_QProgressBar_value_(self)
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_text_(self))
    end
    def text_visible=(visible : Bool) : Void
      Binding.bg_QProgressBar_setTextVisible_bool(self, visible)
    end
    def text_visible?() : Bool
      Binding.bg_QProgressBar_isTextVisible_(self)
    end
    def alignment() : Alignment
      Binding.bg_QProgressBar_alignment_(self)
    end
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QProgressBar_setAlignment_Qt__Alignment(self, alignment)
    end
    def size_hint() : QSize*
      Binding.bg_QProgressBar_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QProgressBar_minimumSizeHint_(self)
    end
    def orientation() : Orientation
      Binding.bg_QProgressBar_orientation_(self)
    end
    def inverted_appearance=(invert : Bool) : Void
      Binding.bg_QProgressBar_setInvertedAppearance_bool(self, invert)
    end
    def inverted_appearance() : Bool
      Binding.bg_QProgressBar_invertedAppearance_(self)
    end
    def text_direction=(text_direction : ProgressBar::Direction) : Void
      Binding.bg_QProgressBar_setTextDirection_QProgressBar__Direction(self, text_direction)
    end
    def text_direction() : ProgressBar::Direction
      Binding.bg_QProgressBar_textDirection_(self)
    end
    def format=(format : String) : Void
      Binding.bg_QProgressBar_setFormat_const_QString_R(self, Qt::Converter::QString.wrap(format))
    end
    def reset_format() : Void
      Binding.bg_QProgressBar_resetFormat_(self)
    end
    def format() : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_format_(self))
    end
    def reset() : Void
      Binding.bg_QProgressBar_reset_(self)
    end
    def set_range(minimum : Int32, maximum : Int32) : Void
      Binding.bg_QProgressBar_setRange_int_int(self, minimum, maximum)
    end
    def minimum=(minimum : Int32) : Void
      Binding.bg_QProgressBar_setMinimum_int(self, minimum)
    end
    def maximum=(maximum : Int32) : Void
      Binding.bg_QProgressBar_setMaximum_int(self, maximum)
    end
    def value=(value : Int32) : Void
      Binding.bg_QProgressBar_setValue_int(self, value)
    end
    def orientation=(unnamed_arg_0 : Orientation) : Void
      Binding.bg_QProgressBar_setOrientation_Qt__Orientation(self, unnamed_arg_0)
    end
    def value_changed(value : Int32) : Void
      Binding.bg_QProgressBar_valueChanged_int(self, value)
    end
    def on_value_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QProgressBar_valueChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(value : Int32){ block.call(value) })))
    end
    protected def event(e : Event) : Bool
      Binding.bg_QProgressBar_event_QEvent_X(self, e)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QProgressBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionProgressBar*) : Void
      Binding.bg_QProgressBar_initStyleOption_QStyleOptionProgressBar_X(self, option)
    end
  end
  class AbstractSlider < Widget
    enum SliderAction : UInt32
      SliderNoAction = 0
      SliderSingleStepAdd = 1
      SliderSingleStepSub = 2
      SliderPageStepAdd = 3
      SliderPageStepSub = 4
      SliderToMinimum = 5
      SliderToMaximum = 6
      SliderMove = 7
    end
    enum SliderChange : UInt32
      SliderRangeChange = 0
      SliderOrientationChange = 1
      SliderStepsChange = 2
      SliderValueChange = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractSlider_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractSlider_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSlider_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractSlider_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSlider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event slider_change key_press_event timer_event wheel_event change_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractSlider.new(
      bg_QAbstractSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} ->(change : AbstractSlider::SliderChange){ self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractSlider_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def orientation() : Orientation
      Binding.bg_QAbstractSlider_orientation_(self)
    end
    def minimum=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setMinimum_int(self, unnamed_arg_0)
    end
    def minimum() : Int32
      Binding.bg_QAbstractSlider_minimum_(self)
    end
    def maximum=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setMaximum_int(self, unnamed_arg_0)
    end
    def maximum() : Int32
      Binding.bg_QAbstractSlider_maximum_(self)
    end
    def single_step=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setSingleStep_int(self, unnamed_arg_0)
    end
    def single_step() : Int32
      Binding.bg_QAbstractSlider_singleStep_(self)
    end
    def page_step=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setPageStep_int(self, unnamed_arg_0)
    end
    def page_step() : Int32
      Binding.bg_QAbstractSlider_pageStep_(self)
    end
    def tracking=(enable : Bool) : Void
      Binding.bg_QAbstractSlider_setTracking_bool(self, enable)
    end
    def has_tracking?() : Bool
      Binding.bg_QAbstractSlider_hasTracking_(self)
    end
    def slider_down=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSlider_setSliderDown_bool(self, unnamed_arg_0)
    end
    def slider_down?() : Bool
      Binding.bg_QAbstractSlider_isSliderDown_(self)
    end
    def slider_position=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setSliderPosition_int(self, unnamed_arg_0)
    end
    def slider_position() : Int32
      Binding.bg_QAbstractSlider_sliderPosition_(self)
    end
    def inverted_appearance=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSlider_setInvertedAppearance_bool(self, unnamed_arg_0)
    end
    def inverted_appearance() : Bool
      Binding.bg_QAbstractSlider_invertedAppearance_(self)
    end
    def inverted_controls=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSlider_setInvertedControls_bool(self, unnamed_arg_0)
    end
    def inverted_controls() : Bool
      Binding.bg_QAbstractSlider_invertedControls_(self)
    end
    def value() : Int32
      Binding.bg_QAbstractSlider_value_(self)
    end
    def trigger_action(action : AbstractSlider::SliderAction) : Void
      Binding.bg_QAbstractSlider_triggerAction_QAbstractSlider__SliderAction(self, action)
    end
    def value=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setValue_int(self, unnamed_arg_0)
    end
    def orientation=(unnamed_arg_0 : Orientation) : Void
      Binding.bg_QAbstractSlider_setOrientation_Qt__Orientation(self, unnamed_arg_0)
    end
    def set_range(min : Int32, max : Int32) : Void
      Binding.bg_QAbstractSlider_setRange_int_int(self, min, max)
    end
    def value_changed(value : Int32) : Void
      Binding.bg_QAbstractSlider_valueChanged_int(self, value)
    end
    def on_value_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_valueChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(value : Int32){ block.call(value) })))
    end
    def slider_pressed() : Void
      Binding.bg_QAbstractSlider_sliderPressed_(self)
    end
    def on_slider_pressed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_sliderPressed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def slider_moved(position : Int32) : Void
      Binding.bg_QAbstractSlider_sliderMoved_int(self, position)
    end
    def on_slider_moved(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_sliderMoved_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(position : Int32){ block.call(position) })))
    end
    def slider_released() : Void
      Binding.bg_QAbstractSlider_sliderReleased_(self)
    end
    def on_slider_released(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_sliderReleased_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def range_changed(min : Int32, max : Int32) : Void
      Binding.bg_QAbstractSlider_rangeChanged_int_int(self, min, max)
    end
    def on_range_changed(&block : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_rangeChanged_CONNECT_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(->(min : Int32, max : Int32){ block.call(min, max) })))
    end
    def action_triggered(action : Int32) : Void
      Binding.bg_QAbstractSlider_actionTriggered_int(self, action)
    end
    def on_action_triggered(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_actionTriggered_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(action : Int32){ block.call(action) })))
    end
    protected def event(e : Event) : Bool
      Binding.bg_QAbstractSlider_event_QEvent_X(self, e)
    end
    protected def set_repeat_action(action : AbstractSlider::SliderAction, threshold_time : Int32 = 500, repeat_time : Int32 = 50) : Void
      Binding.bg_QAbstractSlider_setRepeatAction_QAbstractSlider__SliderAction_int_int(self, action, threshold_time, repeat_time)
    end
    protected def repeat_action() : AbstractSlider::SliderAction
      Binding.bg_QAbstractSlider_repeatAction_(self)
    end
    protected def slider_change(change : AbstractSlider::SliderChange) : Void
      Binding.bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(self, change)
    end
    protected def key_press_event(ev : QKeyEvent*) : Void
      Binding.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(self, ev)
    end
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QAbstractSlider_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    protected def wheel_event(e : QWheelEvent*) : Void
      Binding.bg_QAbstractSlider_wheelEvent_QWheelEvent_X(self, e)
    end
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractSlider_changeEvent_QEvent_X(self, e)
    end
    protected def initialize(dd : QAbstractSliderPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractSlider_CONSTRUCT_QAbstractSliderPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSlider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event slider_change key_press_event timer_event wheel_event change_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractSlider.new(
      bg_QAbstractSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} ->(change : AbstractSlider::SliderChange){ self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractSlider_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class Dial < AbstractSlider
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QDial_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDial_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDial_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDial_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QDial_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dial)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event resize_event paint_event mouse_press_event mouse_release_event mouse_move_event slider_change key_press_event timer_event wheel_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDial.new(
      bg_QDial_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDial_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDial_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDial_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDial_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDial_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(re : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: re)) } {% else %} nil {% end %}),
      bg_QDial_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(pe : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: pe)) } {% else %} nil {% end %}),
      bg_QDial_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(me : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: me)) } {% else %} nil {% end %}),
      bg_QDial_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(me : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: me)) } {% else %} nil {% end %}),
      bg_QDial_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(me : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: me)) } {% else %} nil {% end %}),
      bg_QDial_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} ->(change : AbstractSlider::SliderChange){ self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDial_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def wrapping() : Bool
      Binding.bg_QDial_wrapping_(self)
    end
    def notch_size() : Int32
      Binding.bg_QDial_notchSize_(self)
    end
    def notch_target=(target : Float64) : Void
      Binding.bg_QDial_setNotchTarget_double(self, target)
    end
    def notch_target() : Float64
      Binding.bg_QDial_notchTarget_(self)
    end
    def notches_visible() : Bool
      Binding.bg_QDial_notchesVisible_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QDial_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QDial_minimumSizeHint_(self)
    end
    def notches_visible=(visible : Bool) : Void
      Binding.bg_QDial_setNotchesVisible_bool(self, visible)
    end
    def wrapping=(on : Bool) : Void
      Binding.bg_QDial_setWrapping_bool(self, on)
    end
    protected def event(e : Event) : Bool
      Binding.bg_QDial_event_QEvent_X(self, e)
    end
    protected def resize_event(re : ResizeEvent) : Void
      Binding.bg_QDial_resizeEvent_QResizeEvent_X(self, re)
    end
    protected def paint_event(pe : PaintEvent) : Void
      Binding.bg_QDial_paintEvent_QPaintEvent_X(self, pe)
    end
    protected def mouse_press_event(me : MouseEvent) : Void
      Binding.bg_QDial_mousePressEvent_QMouseEvent_X(self, me)
    end
    protected def mouse_release_event(me : MouseEvent) : Void
      Binding.bg_QDial_mouseReleaseEvent_QMouseEvent_X(self, me)
    end
    protected def mouse_move_event(me : MouseEvent) : Void
      Binding.bg_QDial_mouseMoveEvent_QMouseEvent_X(self, me)
    end
    protected def slider_change(change : AbstractSlider::SliderChange) : Void
      Binding.bg_QDial_sliderChange_QAbstractSlider__SliderChange(self, change)
    end
    protected def init_style_option(option : QStyleOptionSlider*) : Void
      Binding.bg_QDial_initStyleOption_QStyleOptionSlider_X(self, option)
    end
  end
  class ScrollBar < AbstractSlider
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QScrollBar_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QScrollBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollBar_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QScrollBar_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event wheel_event paint_event mouse_press_event mouse_release_event mouse_move_event hide_event slider_change context_menu_event key_press_event timer_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollBar.new(
      bg_QScrollBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QScrollBar_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} ->(change : AbstractSlider::SliderChange){ self.slider_change(change) } {% else %} nil {% end %}),
      bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(unnamed_arg_0 : Orientation, parent : Widget? = nil)
      unwrap = Binding.bg_QScrollBar_CONSTRUCT_Qt__Orientation_QWidget_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event wheel_event paint_event mouse_press_event mouse_release_event mouse_move_event hide_event slider_change context_menu_event key_press_event timer_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollBar.new(
      bg_QScrollBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QScrollBar_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} ->(change : AbstractSlider::SliderChange){ self.slider_change(change) } {% else %} nil {% end %}),
      bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QScrollBar_sizeHint_(self)
    end
    def event(event : Event) : Bool
      Binding.bg_QScrollBar_event_QEvent_X(self, event)
    end
    protected def wheel_event(unnamed_arg_0 : QWheelEvent*) : Void
      Binding.bg_QScrollBar_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QScrollBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QScrollBar_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QScrollBar_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def hide_event(unnamed_arg_0 : HideEvent) : Void
      Binding.bg_QScrollBar_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    protected def slider_change(change : AbstractSlider::SliderChange) : Void
      Binding.bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange(self, change)
    end
    protected def context_menu_event(unnamed_arg_0 : QContextMenuEvent*) : Void
      Binding.bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionSlider*) : Void
      Binding.bg_QScrollBar_initStyleOption_QStyleOptionSlider_X(self, option)
    end
  end
  class Slider < AbstractSlider
    enum TickPosition : UInt32
      NoTicks = 0
      TicksAbove = 1
      TicksLeft = 1
      TicksBelow = 2
      TicksRight = 2
      TicksBothSides = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QSlider_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSlider_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSlider_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSlider_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QSlider_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Slider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event mouse_press_event mouse_release_event mouse_move_event slider_change key_press_event timer_event wheel_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQSlider.new(
      bg_QSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSlider_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QSlider_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QSlider_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(ev : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} ->(change : AbstractSlider::SliderChange){ self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QSlider_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(orientation : Orientation, parent : Widget? = nil)
      unwrap = Binding.bg_QSlider_CONSTRUCT_Qt__Orientation_QWidget_X(orientation, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Slider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event mouse_press_event mouse_release_event mouse_move_event slider_change key_press_event timer_event wheel_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQSlider.new(
      bg_QSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSlider_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QSlider_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QSlider_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(ev : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} ->(change : AbstractSlider::SliderChange){ self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QSlider_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QSlider_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QSlider_minimumSizeHint_(self)
    end
    def tick_position=(position : Slider::TickPosition) : Void
      Binding.bg_QSlider_setTickPosition_QSlider__TickPosition(self, position)
    end
    def tick_position() : Slider::TickPosition
      Binding.bg_QSlider_tickPosition_(self)
    end
    def tick_interval=(ti : Int32) : Void
      Binding.bg_QSlider_setTickInterval_int(self, ti)
    end
    def tick_interval() : Int32
      Binding.bg_QSlider_tickInterval_(self)
    end
    def event(event : Event) : Bool
      Binding.bg_QSlider_event_QEvent_X(self, event)
    end
    protected def paint_event(ev : PaintEvent) : Void
      Binding.bg_QSlider_paintEvent_QPaintEvent_X(self, ev)
    end
    protected def mouse_press_event(ev : MouseEvent) : Void
      Binding.bg_QSlider_mousePressEvent_QMouseEvent_X(self, ev)
    end
    protected def mouse_release_event(ev : MouseEvent) : Void
      Binding.bg_QSlider_mouseReleaseEvent_QMouseEvent_X(self, ev)
    end
    protected def mouse_move_event(ev : MouseEvent) : Void
      Binding.bg_QSlider_mouseMoveEvent_QMouseEvent_X(self, ev)
    end
    protected def init_style_option(option : QStyleOptionSlider*) : Void
      Binding.bg_QSlider_initStyleOption_QStyleOptionSlider_X(self, option)
    end
  end
  class AbstractScrollArea < Frame
    enum SizeAdjustPolicy : UInt32
      AdjustIgnored = 0
      AdjustToContentsOnFirstShow = 1
      AdjustToContents = 2
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractScrollArea_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractScrollArea_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractScrollArea_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def vertical_scroll_bar_policy() : ScrollBarPolicy
      Binding.bg_QAbstractScrollArea_verticalScrollBarPolicy_(self)
    end
    def vertical_scroll_bar_policy=(unnamed_arg_0 : ScrollBarPolicy) : Void
      Binding.bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(self, unnamed_arg_0)
    end
    def vertical_scroll_bar() : ScrollBar
      ScrollBar.new(unwrap: Binding.bg_QAbstractScrollArea_verticalScrollBar_(self))
    end
    def vertical_scroll_bar=(scrollbar : ScrollBar) : Void
      Binding.bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(self, scrollbar)
    end
    def horizontal_scroll_bar_policy() : ScrollBarPolicy
      Binding.bg_QAbstractScrollArea_horizontalScrollBarPolicy_(self)
    end
    def horizontal_scroll_bar_policy=(unnamed_arg_0 : ScrollBarPolicy) : Void
      Binding.bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(self, unnamed_arg_0)
    end
    def horizontal_scroll_bar() : ScrollBar
      ScrollBar.new(unwrap: Binding.bg_QAbstractScrollArea_horizontalScrollBar_(self))
    end
    def horizontal_scroll_bar=(scrollbar : ScrollBar) : Void
      Binding.bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(self, scrollbar)
    end
    def corner_widget() : Widget
      Widget.new(unwrap: Binding.bg_QAbstractScrollArea_cornerWidget_(self))
    end
    def corner_widget=(widget : Widget) : Void
      Binding.bg_QAbstractScrollArea_setCornerWidget_QWidget_X(self, widget)
    end
    def add_scroll_bar_widget(widget : Widget, alignment : Alignment) : Void
      Binding.bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(self, widget, alignment)
    end
    def scroll_bar_widgets(alignment : Alignment) : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(self, alignment))
    end
    def viewport() : Widget
      Widget.new(unwrap: Binding.bg_QAbstractScrollArea_viewport_(self))
    end
    def viewport=(widget : Widget) : Void
      Binding.bg_QAbstractScrollArea_setViewport_QWidget_X(self, widget)
    end
    def maximum_viewport_size() : QSize*
      Binding.bg_QAbstractScrollArea_maximumViewportSize_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QAbstractScrollArea_minimumSizeHint_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QAbstractScrollArea_sizeHint_(self)
    end
    def setup_viewport(viewport : Widget) : Void
      Binding.bg_QAbstractScrollArea_setupViewport_QWidget_X(self, viewport)
    end
    def size_adjust_policy() : AbstractScrollArea::SizeAdjustPolicy
      Binding.bg_QAbstractScrollArea_sizeAdjustPolicy_(self)
    end
    def size_adjust_policy=(policy : AbstractScrollArea::SizeAdjustPolicy) : Void
      Binding.bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(self, policy)
    end
    protected def initialize(dd : QAbstractScrollAreaPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractScrollArea_CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def set_viewport_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(self, left, top, right, bottom)
    end
    protected def viewport_margins=(margins : QMargins*) : Void
      Binding.bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(self, margins)
    end
    protected def viewport_margins() : QMargins*
      Binding.bg_QAbstractScrollArea_viewportMargins_(self)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAbstractScrollArea_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def viewport_event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAbstractScrollArea_viewportEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def wheel_event(unnamed_arg_0 : QWheelEvent*) : Void
      Binding.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    protected def context_menu_event(unnamed_arg_0 : QContextMenuEvent*) : Void
      Binding.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
      Binding.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(self, unnamed_arg_0)
    end
    protected def drag_move_event(unnamed_arg_0 : DragMoveEvent) : Void
      Binding.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(self, unnamed_arg_0)
    end
    protected def drag_leave_event(unnamed_arg_0 : DragLeaveEvent) : Void
      Binding.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(self, unnamed_arg_0)
    end
    protected def drop_event(unnamed_arg_0 : DropEvent) : Void
      Binding.bg_QAbstractScrollArea_dropEvent_QDropEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QAbstractScrollArea_scrollContentsBy_int_int(self, dx, dy)
    end
    protected def viewport_size_hint() : QSize*
      Binding.bg_QAbstractScrollArea_viewportSizeHint_(self)
    end
  end
  class ScrollArea < AbstractScrollArea
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QScrollArea_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QScrollArea_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QScrollArea_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter input_method_event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QScrollArea_widget_(self))
    end
    def widget=(widget : Widget) : Void
      Binding.bg_QScrollArea_setWidget_QWidget_X(self, widget)
    end
    def take_widget() : Widget
      Widget.new(unwrap: Binding.bg_QScrollArea_takeWidget_(self))
    end
    def widget_resizable() : Bool
      Binding.bg_QScrollArea_widgetResizable_(self)
    end
    def widget_resizable=(resizable : Bool) : Void
      Binding.bg_QScrollArea_setWidgetResizable_bool(self, resizable)
    end
    def size_hint() : QSize*
      Binding.bg_QScrollArea_sizeHint_(self)
    end
    def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QScrollArea_focusNextPrevChild_bool(self, next_)
    end
    def alignment() : Alignment
      Binding.bg_QScrollArea_alignment_(self)
    end
    def alignment=(unnamed_arg_0 : Alignment) : Void
      Binding.bg_QScrollArea_setAlignment_Qt__Alignment(self, unnamed_arg_0)
    end
    def ensure_visible(x : Int32, y : Int32, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QScrollArea_ensureVisible_int_int_int_int(self, x, y, xmargin, ymargin)
    end
    def ensure_widget_visible(child_widget : Widget, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(self, child_widget, xmargin, ymargin)
    end
    protected def initialize(dd : QScrollAreaPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QScrollArea_CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event change_event dev_type visible= height_for_width has_height_for_width? paint_engine key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter input_method_event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(unnamed_arg_0 : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(unnamed_arg_0 : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QScrollArea_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QScrollArea_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QScrollArea_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QScrollArea_scrollContentsBy_int_int(self, dx, dy)
    end
    protected def viewport_size_hint() : QSize*
      Binding.bg_QScrollArea_viewportSizeHint_(self)
    end
  end
  class AbstractSpinBox < Widget
    enum ButtonSymbols : UInt32
      UpDownArrows = 0
      PlusMinus = 1
      NoButtons = 2
    end
    enum CorrectionMode : UInt32
      CorrectToPreviousValue = 0
      CorrectToNearestValue = 1
    end
    @[Flags]
    enum StepEnabled : UInt32
      StepNone = 0
      StepUpEnabled = 1
      StepDownEnabled = 2
    end
    enum StepEnabledFlag : UInt32
      StepNone = 0
      StepUpEnabled = 1
      StepDownEnabled = 2
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAbstractSpinBox_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractSpinBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractSpinBox_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event enter_event leave_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractSpinBox.new(
      bg_QAbstractSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} ->(steps : Int32){ self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} ->(){ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractSpinBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def button_symbols() : AbstractSpinBox::ButtonSymbols
      Binding.bg_QAbstractSpinBox_buttonSymbols_(self)
    end
    def button_symbols=(bs : AbstractSpinBox::ButtonSymbols) : Void
      Binding.bg_QAbstractSpinBox_setButtonSymbols_QAbstractSpinBox__ButtonSymbols(self, bs)
    end
    def correction_mode=(cm : AbstractSpinBox::CorrectionMode) : Void
      Binding.bg_QAbstractSpinBox_setCorrectionMode_QAbstractSpinBox__CorrectionMode(self, cm)
    end
    def correction_mode() : AbstractSpinBox::CorrectionMode
      Binding.bg_QAbstractSpinBox_correctionMode_(self)
    end
    def has_acceptable_input?() : Bool
      Binding.bg_QAbstractSpinBox_hasAcceptableInput_(self)
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_text_(self))
    end
    def special_value_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_specialValueText_(self))
    end
    def special_value_text=(txt : String) : Void
      Binding.bg_QAbstractSpinBox_setSpecialValueText_const_QString_R(self, Qt::Converter::QString.wrap(txt))
    end
    def wrapping() : Bool
      Binding.bg_QAbstractSpinBox_wrapping_(self)
    end
    def wrapping=(w : Bool) : Void
      Binding.bg_QAbstractSpinBox_setWrapping_bool(self, w)
    end
    def read_only=(r : Bool) : Void
      Binding.bg_QAbstractSpinBox_setReadOnly_bool(self, r)
    end
    def read_only?() : Bool
      Binding.bg_QAbstractSpinBox_isReadOnly_(self)
    end
    def keyboard_tracking=(kt : Bool) : Void
      Binding.bg_QAbstractSpinBox_setKeyboardTracking_bool(self, kt)
    end
    def keyboard_tracking() : Bool
      Binding.bg_QAbstractSpinBox_keyboardTracking_(self)
    end
    def alignment=(flag : Alignment) : Void
      Binding.bg_QAbstractSpinBox_setAlignment_Qt__Alignment(self, flag)
    end
    def alignment() : Alignment
      Binding.bg_QAbstractSpinBox_alignment_(self)
    end
    def frame=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSpinBox_setFrame_bool(self, unnamed_arg_0)
    end
    def has_frame?() : Bool
      Binding.bg_QAbstractSpinBox_hasFrame_(self)
    end
    def accelerated=(on : Bool) : Void
      Binding.bg_QAbstractSpinBox_setAccelerated_bool(self, on)
    end
    def accelerated?() : Bool
      Binding.bg_QAbstractSpinBox_isAccelerated_(self)
    end
    def group_separator_shown=(shown : Bool) : Void
      Binding.bg_QAbstractSpinBox_setGroupSeparatorShown_bool(self, shown)
    end
    def group_separator_shown?() : Bool
      Binding.bg_QAbstractSpinBox_isGroupSeparatorShown_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QAbstractSpinBox_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QAbstractSpinBox_minimumSizeHint_(self)
    end
    def interpret_text() : Void
      Binding.bg_QAbstractSpinBox_interpretText_(self)
    end
    def event(event : Event) : Bool
      Binding.bg_QAbstractSpinBox_event_QEvent_X(self, event)
    end
    def step_by(steps : Int32) : Void
      Binding.bg_QAbstractSpinBox_stepBy_int(self, steps)
    end
    def step_up() : Void
      Binding.bg_QAbstractSpinBox_stepUp_(self)
    end
    def step_down() : Void
      Binding.bg_QAbstractSpinBox_stepDown_(self)
    end
    def select_all() : Void
      Binding.bg_QAbstractSpinBox_selectAll_(self)
    end
    def clear() : Void
      Binding.bg_QAbstractSpinBox_clear_(self)
    end
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(self, event)
    end
    protected def key_press_event(event : QKeyEvent*) : Void
      Binding.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(self, event)
    end
    protected def key_release_event(event : QKeyEvent*) : Void
      Binding.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    protected def wheel_event(event : QWheelEvent*) : Void
      Binding.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def context_menu_event(event : QContextMenuEvent*) : Void
      Binding.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    protected def change_event(event : Event) : Void
      Binding.bg_QAbstractSpinBox_changeEvent_QEvent_X(self, event)
    end
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(self, event)
    end
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(self, event)
    end
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(self, event)
    end
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(self, event)
    end
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QAbstractSpinBox_showEvent_QShowEvent_X(self, event)
    end
    protected def init_style_option(option : QStyleOptionSpinBox*) : Void
      Binding.bg_QAbstractSpinBox_initStyleOption_QStyleOptionSpinBox_X(self, option)
    end
    protected def line_edit() : LineEdit
      LineEdit.new(unwrap: Binding.bg_QAbstractSpinBox_lineEdit_(self))
    end
    protected def line_edit=(edit : LineEdit) : Void
      Binding.bg_QAbstractSpinBox_setLineEdit_QLineEdit_X(self, edit)
    end
    protected def step_enabled() : AbstractSpinBox::StepEnabled
      Binding.bg_QAbstractSpinBox_stepEnabled_(self)
    end
    def editing_finished() : Void
      Binding.bg_QAbstractSpinBox_editingFinished_(self)
    end
    def on_editing_finished(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSpinBox_editingFinished_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def initialize(dd : QAbstractSpinBoxPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QAbstractSpinBox_CONSTRUCT_QAbstractSpinBoxPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event enter_event leave_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractSpinBox.new(
      bg_QAbstractSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} ->(steps : Int32){ self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} ->(){ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractSpinBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class SpinBox < AbstractSpinBox
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QSpinBox_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSpinBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QSpinBox_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event value_from_text text_from_value size_hint minimum_size_hint step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event enter_event leave_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQSpinBox.new(
      bg_QSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QSpinBox_valueFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("value_from_text") %} ->(text : Binding::CrystalString){ self.value_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QSpinBox_textFromValue_int: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_value") %} ->(val : Int32){ Qt::Converter::QString.wrap(self.text_from_value(val)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} ->(steps : Int32){ self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} ->(){ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QSpinBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def value() : Int32
      Binding.bg_QSpinBox_value_(self)
    end
    def prefix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_prefix_(self))
    end
    def prefix=(prefix : String) : Void
      Binding.bg_QSpinBox_setPrefix_const_QString_R(self, Qt::Converter::QString.wrap(prefix))
    end
    def suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_suffix_(self))
    end
    def suffix=(suffix : String) : Void
      Binding.bg_QSpinBox_setSuffix_const_QString_R(self, Qt::Converter::QString.wrap(suffix))
    end
    def clean_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_cleanText_(self))
    end
    def single_step() : Int32
      Binding.bg_QSpinBox_singleStep_(self)
    end
    def single_step=(val : Int32) : Void
      Binding.bg_QSpinBox_setSingleStep_int(self, val)
    end
    def minimum() : Int32
      Binding.bg_QSpinBox_minimum_(self)
    end
    def minimum=(min : Int32) : Void
      Binding.bg_QSpinBox_setMinimum_int(self, min)
    end
    def maximum() : Int32
      Binding.bg_QSpinBox_maximum_(self)
    end
    def maximum=(max : Int32) : Void
      Binding.bg_QSpinBox_setMaximum_int(self, max)
    end
    def set_range(min : Int32, max : Int32) : Void
      Binding.bg_QSpinBox_setRange_int_int(self, min, max)
    end
    def display_integer_base() : Int32
      Binding.bg_QSpinBox_displayIntegerBase_(self)
    end
    def display_integer_base=(base : Int32) : Void
      Binding.bg_QSpinBox_setDisplayIntegerBase_int(self, base)
    end
    protected def event(event : Event) : Bool
      Binding.bg_QSpinBox_event_QEvent_X(self, event)
    end
    protected def value_from_text(text : String) : Int32
      Binding.bg_QSpinBox_valueFromText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    protected def text_from_value(val : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_textFromValue_int(self, val))
    end
    def value=(val : Int32) : Void
      Binding.bg_QSpinBox_setValue_int(self, val)
    end
    def value_changed(unnamed_arg_0 : Int32) : Void
      Binding.bg_QSpinBox_valueChanged_int(self, unnamed_arg_0)
    end
    def on_value_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSpinBox_valueChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    def value_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QSpinBox_valueChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_value_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSpinBox_valueChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
  end
  class DoubleSpinBox < AbstractSpinBox
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QDoubleSpinBox_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDoubleSpinBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QDoubleSpinBox_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DoubleSpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall value_from_text text_from_value size_hint minimum_size_hint event step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event enter_event leave_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDoubleSpinBox.new(
      bg_QDoubleSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_valueFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("value_from_text") %} ->(text : Binding::CrystalString){ self.value_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_textFromValue_double: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_value") %} ->(val : Float64){ Qt::Converter::QString.wrap(self.text_from_value(val)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} ->(steps : Int32){ self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} ->(){ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDoubleSpinBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def value() : Float64
      Binding.bg_QDoubleSpinBox_value_(self)
    end
    def prefix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_prefix_(self))
    end
    def prefix=(prefix : String) : Void
      Binding.bg_QDoubleSpinBox_setPrefix_const_QString_R(self, Qt::Converter::QString.wrap(prefix))
    end
    def suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_suffix_(self))
    end
    def suffix=(suffix : String) : Void
      Binding.bg_QDoubleSpinBox_setSuffix_const_QString_R(self, Qt::Converter::QString.wrap(suffix))
    end
    def clean_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_cleanText_(self))
    end
    def single_step() : Float64
      Binding.bg_QDoubleSpinBox_singleStep_(self)
    end
    def single_step=(val : Float64) : Void
      Binding.bg_QDoubleSpinBox_setSingleStep_double(self, val)
    end
    def minimum() : Float64
      Binding.bg_QDoubleSpinBox_minimum_(self)
    end
    def minimum=(min : Float64) : Void
      Binding.bg_QDoubleSpinBox_setMinimum_double(self, min)
    end
    def maximum() : Float64
      Binding.bg_QDoubleSpinBox_maximum_(self)
    end
    def maximum=(max : Float64) : Void
      Binding.bg_QDoubleSpinBox_setMaximum_double(self, max)
    end
    def set_range(min : Float64, max : Float64) : Void
      Binding.bg_QDoubleSpinBox_setRange_double_double(self, min, max)
    end
    def decimals() : Int32
      Binding.bg_QDoubleSpinBox_decimals_(self)
    end
    def decimals=(prec : Int32) : Void
      Binding.bg_QDoubleSpinBox_setDecimals_int(self, prec)
    end
    def value_from_text(text : String) : Float64
      Binding.bg_QDoubleSpinBox_valueFromText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text_from_value(val : Float64) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_textFromValue_double(self, val))
    end
    def value=(val : Float64) : Void
      Binding.bg_QDoubleSpinBox_setValue_double(self, val)
    end
    def value_changed(unnamed_arg_0 : Float64) : Void
      Binding.bg_QDoubleSpinBox_valueChanged_double(self, unnamed_arg_0)
    end
    def on_value_changed(&block : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDoubleSpinBox_valueChanged_CONNECT_CrystalProc_void__double_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Float64){ block.call(unnamed_arg_0) })))
    end
    def value_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QDoubleSpinBox_valueChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_value_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDoubleSpinBox_valueChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
  end
  class MenuBar < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QMenuBar_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMenuBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QMenuBar_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MenuBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width visible= change_event key_press_event mouse_release_event mouse_press_event mouse_move_event leave_event paint_event resize_event action_event focus_out_event focus_in_event timer_event event_filter event dev_type has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event move_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenuBar.new(
      bg_QMenuBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenuBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenuBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QMenuBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QMenuBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenuBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_menu(menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addMenu_QMenu_X(self, menu))
    end
    def add_menu(title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenuBar_addMenu_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    def add_menu(icon : Icon, title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(title)))
    end
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addSeparator_(self))
    end
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_insertSeparator_QAction_X(self, before))
    end
    def insert_menu(before : Action, menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_insertMenu_QAction_X_QMenu_X(self, before, menu))
    end
    def clear() : Void
      Binding.bg_QMenuBar_clear_(self)
    end
    def active_action() : Action
      Action.new(unwrap: Binding.bg_QMenuBar_activeAction_(self))
    end
    def active_action=(action : Action) : Void
      Binding.bg_QMenuBar_setActiveAction_QAction_X(self, action)
    end
    def default_up=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QMenuBar_setDefaultUp_bool(self, unnamed_arg_0)
    end
    def default_up?() : Bool
      Binding.bg_QMenuBar_isDefaultUp_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QMenuBar_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QMenuBar_minimumSizeHint_(self)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QMenuBar_heightForWidth_int(self, unnamed_arg_0)
    end
    def action_geometry(unnamed_arg_0 : Action) : Rect
      Rect.new(unwrap: Binding.bg_QMenuBar_actionGeometry_QAction_X(self, unnamed_arg_0))
    end
    def action_at(unnamed_arg_0 : Point) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_actionAt_const_QPoint_R(self, unnamed_arg_0))
    end
    def set_corner_widget(w : Widget, corner : Corner = Corner::TopRightCorner) : Void
      Binding.bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(self, w, corner)
    end
    def corner_widget(corner : Corner = Corner::TopRightCorner) : Widget
      Widget.new(unwrap: Binding.bg_QMenuBar_cornerWidget_Qt__Corner(self, corner))
    end
    def native_menu_bar?() : Bool
      Binding.bg_QMenuBar_isNativeMenuBar_(self)
    end
    def native_menu_bar=(native_menu_bar : Bool) : Void
      Binding.bg_QMenuBar_setNativeMenuBar_bool(self, native_menu_bar)
    end
    def platform_menu_bar() : QPlatformMenuBar*
      Binding.bg_QMenuBar_platformMenuBar_(self)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QMenuBar_setVisible_bool(self, visible)
    end
    def triggered(action : Action) : Void
      Binding.bg_QMenuBar_triggered_QAction_X(self, action)
    end
    def on_triggered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenuBar_triggered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : Binding::QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    def hovered(action : Action) : Void
      Binding.bg_QMenuBar_hovered_QAction_X(self, action)
    end
    def on_hovered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenuBar_hovered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : Binding::QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenuBar_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QMenuBar_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenuBar_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def leave_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenuBar_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QMenuBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QMenuBar_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def action_event(unnamed_arg_0 : ActionEvent) : Void
      Binding.bg_QMenuBar_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QMenuBar_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QMenuBar_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QMenuBar_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QMenuBar_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QMenuBar_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionMenuItem*, action : Action) : Void
      Binding.bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(self, option, action)
    end
  end
  class Menu < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QMenu_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMenu_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QMenu_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(title : String, parent : Widget? = nil)
      unwrap = Binding.bg_QMenu_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_action(icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_action(text : String, receiver : Object, member : UInt8*, shortcut : KeySequence) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(self, Qt::Converter::QString.wrap(text), receiver, member, shortcut))
    end
    def add_action(icon : Icon, text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(self, icon, Qt::Converter::QString.wrap(text), receiver, member))
    end
    def add_action(icon : Icon, text : String, receiver : Object, member : UInt8*, shortcut : KeySequence) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(self, icon, Qt::Converter::QString.wrap(text), receiver, member, shortcut))
    end
    def add_menu(menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenu_addMenu_QMenu_X(self, menu))
    end
    def add_menu(title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenu_addMenu_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    def add_menu(icon : Icon, title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenu_addMenu_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(title)))
    end
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QMenu_addSeparator_(self))
    end
    def add_section(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addSection_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_section(icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addSection_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    def insert_menu(before : Action, menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertMenu_QAction_X_QMenu_X(self, before, menu))
    end
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSeparator_QAction_X(self, before))
    end
    def insert_section(before : Action, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSection_QAction_X_const_QString_R(self, before, Qt::Converter::QString.wrap(text)))
    end
    def insert_section(before : Action, icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(self, before, icon, Qt::Converter::QString.wrap(text)))
    end
    def empty?() : Bool
      Binding.bg_QMenu_isEmpty_(self)
    end
    def clear() : Void
      Binding.bg_QMenu_clear_(self)
    end
    def tear_off_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QMenu_setTearOffEnabled_bool(self, unnamed_arg_0)
    end
    def tear_off_enabled?() : Bool
      Binding.bg_QMenu_isTearOffEnabled_(self)
    end
    def tear_off_menu_visible?() : Bool
      Binding.bg_QMenu_isTearOffMenuVisible_(self)
    end
    def show_tear_off_menu() : Void
      Binding.bg_QMenu_showTearOffMenu_(self)
    end
    def show_tear_off_menu(pos : Point) : Void
      Binding.bg_QMenu_showTearOffMenu_const_QPoint_R(self, pos)
    end
    def hide_tear_off_menu() : Void
      Binding.bg_QMenu_hideTearOffMenu_(self)
    end
    def default_action=(unnamed_arg_0 : Action) : Void
      Binding.bg_QMenu_setDefaultAction_QAction_X(self, unnamed_arg_0)
    end
    def default_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_defaultAction_(self))
    end
    def active_action=(act : Action) : Void
      Binding.bg_QMenu_setActiveAction_QAction_X(self, act)
    end
    def active_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_activeAction_(self))
    end
    def popup(pos : Point, at : Action? = nil) : Void
      Binding.bg_QMenu_popup_const_QPoint_R_QAction_X(self, pos, at)
    end
    def exec() : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_(self))
    end
    def exec(pos : Point, at : Action? = nil) : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_const_QPoint_R_QAction_X(self, pos, at))
    end
    def self.exec(actions : Enumerable(Action), pos : Point, at : Action? = nil, parent : Widget? = nil) : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_STATIC_QList_QAction_X__const_QPoint_R_QAction_X_QWidget_X(BindgenHelper.wrap_container(QList_QAction_X, actions).to_unsafe, pos, at, parent))
    end
    def size_hint() : QSize*
      Binding.bg_QMenu_sizeHint_(self)
    end
    def action_geometry(unnamed_arg_0 : Action) : Rect
      Rect.new(unwrap: Binding.bg_QMenu_actionGeometry_QAction_X(self, unnamed_arg_0))
    end
    def action_at(unnamed_arg_0 : Point) : Action
      Action.new(unwrap: Binding.bg_QMenu_actionAt_const_QPoint_R(self, unnamed_arg_0))
    end
    def menu_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_menuAction_(self))
    end
    def title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_title_(self))
    end
    def title=(title : String) : Void
      Binding.bg_QMenu_setTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QMenu_icon_(self))
    end
    def icon=(icon : Icon) : Void
      Binding.bg_QMenu_setIcon_const_QIcon_R(self, icon)
    end
    def no_replay_for=(widget : Widget) : Void
      Binding.bg_QMenu_setNoReplayFor_QWidget_X(self, widget)
    end
    def platform_menu() : QPlatformMenu*
      Binding.bg_QMenu_platformMenu_(self)
    end
    def platform_menu=(platform_menu : QPlatformMenu*) : Void
      Binding.bg_QMenu_setPlatformMenu_QPlatformMenu_X(self, platform_menu)
    end
    def separators_collapsible() : Bool
      Binding.bg_QMenu_separatorsCollapsible_(self)
    end
    def separators_collapsible=(collapse : Bool) : Void
      Binding.bg_QMenu_setSeparatorsCollapsible_bool(self, collapse)
    end
    def tool_tips_visible() : Bool
      Binding.bg_QMenu_toolTipsVisible_(self)
    end
    def tool_tips_visible=(visible : Bool) : Void
      Binding.bg_QMenu_setToolTipsVisible_bool(self, visible)
    end
    def about_to_show() : Void
      Binding.bg_QMenu_aboutToShow_(self)
    end
    def on_about_to_show(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_aboutToShow_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def about_to_hide() : Void
      Binding.bg_QMenu_aboutToHide_(self)
    end
    def on_about_to_hide(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_aboutToHide_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def triggered(action : Action) : Void
      Binding.bg_QMenu_triggered_QAction_X(self, action)
    end
    def on_triggered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_triggered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : Binding::QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    def hovered(action : Action) : Void
      Binding.bg_QMenu_hovered_QAction_X(self, action)
    end
    def on_hovered(&block : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_hovered_CONNECT_CrystalProc_void__QActionX_(self, BindgenHelper.wrap_proc(->(action : Binding::QAction*){ block.call(Action.new(unwrap: action)) })))
    end
    protected def column_count() : Int32
      Binding.bg_QMenu_columnCount_(self)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenu_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QMenu_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenu_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenu_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenu_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def wheel_event(unnamed_arg_0 : QWheelEvent*) : Void
      Binding.bg_QMenu_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    protected def enter_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenu_enterEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def leave_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenu_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def hide_event(unnamed_arg_0 : HideEvent) : Void
      Binding.bg_QMenu_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QMenu_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def action_event(unnamed_arg_0 : ActionEvent) : Void
      Binding.bg_QMenu_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QMenu_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QMenu_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QMenu_focusNextPrevChild_bool(self, next_)
    end
    protected def init_style_option(option : QStyleOptionMenuItem*, action : Action) : Void
      Binding.bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(self, option, action)
    end
    protected def initialize(dd : QMenuPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QMenu_CONSTRUCT_QMenuPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(unnamed_arg_0 : QWheelEvent*){ self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(unnamed_arg_0 : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(unnamed_arg_0 : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMenu_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class Action < Object
    enum Event : UInt32
      Trigger = 0
      Hover = 1
    end
    enum MenuRole : UInt32
      NoRole = 0
      TextHeuristicRole = 1
      ApplicationSpecificRole = 2
      AboutQtRole = 3
      AboutRole = 4
      PreferencesRole = 5
      QuitRole = 6
    end
    enum Priority : UInt32
      LowPriority = 0
      NormalPriority = 128
      HighPriority = 256
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QAction_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAction_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QAction_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Object? = nil)
      unwrap = Binding.bg_QAction_CONSTRUCT_const_QString_R_QObject_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(icon : Icon, text : String, parent : Object? = nil)
      unwrap = Binding.bg_QAction_CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(icon, Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def action_group=(group : QActionGroup*) : Void
      Binding.bg_QAction_setActionGroup_QActionGroup_X(self, group)
    end
    def action_group() : QActionGroup*
      Binding.bg_QAction_actionGroup_(self)
    end
    def icon=(icon : Icon) : Void
      Binding.bg_QAction_setIcon_const_QIcon_R(self, icon)
    end
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QAction_icon_(self))
    end
    def text=(text : String) : Void
      Binding.bg_QAction_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_text_(self))
    end
    def icon_text=(text : String) : Void
      Binding.bg_QAction_setIconText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def icon_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_iconText_(self))
    end
    def tool_tip=(tip : String) : Void
      Binding.bg_QAction_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tip))
    end
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_toolTip_(self))
    end
    def status_tip=(status_tip : String) : Void
      Binding.bg_QAction_setStatusTip_const_QString_R(self, Qt::Converter::QString.wrap(status_tip))
    end
    def status_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_statusTip_(self))
    end
    def whats_this=(what : String) : Void
      Binding.bg_QAction_setWhatsThis_const_QString_R(self, Qt::Converter::QString.wrap(what))
    end
    def whats_this() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_whatsThis_(self))
    end
    def priority=(priority : Action::Priority) : Void
      Binding.bg_QAction_setPriority_QAction__Priority(self, priority)
    end
    def priority() : Action::Priority
      Binding.bg_QAction_priority_(self)
    end
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QAction_menu_(self))
    end
    def menu=(menu : Menu) : Void
      Binding.bg_QAction_setMenu_QMenu_X(self, menu)
    end
    def separator=(b : Bool) : Void
      Binding.bg_QAction_setSeparator_bool(self, b)
    end
    def separator?() : Bool
      Binding.bg_QAction_isSeparator_(self)
    end
    def shortcut=(shortcut : KeySequence) : Void
      Binding.bg_QAction_setShortcut_const_QKeySequence_R(self, shortcut)
    end
    def shortcut() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QAction_shortcut_(self))
    end
    def shortcuts=(shortcuts : Enumerable(KeySequence)) : Void
      Binding.bg_QAction_setShortcuts_const_QList_QKeySequence__R(self, BindgenHelper.wrap_container(QList_QKeySequence, shortcuts).to_unsafe)
    end
    def shortcuts=(unnamed_arg_0 : KeySequence::StandardKey) : Void
      Binding.bg_QAction_setShortcuts_QKeySequence__StandardKey(self, unnamed_arg_0)
    end
    def shortcuts() : Enumerable(KeySequence)
      QList_QKeySequence.new(unwrap: Binding.bg_QAction_shortcuts_(self))
    end
    def shortcut_context=(context : ShortcutContext) : Void
      Binding.bg_QAction_setShortcutContext_Qt__ShortcutContext(self, context)
    end
    def shortcut_context() : ShortcutContext
      Binding.bg_QAction_shortcutContext_(self)
    end
    def auto_repeat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setAutoRepeat_bool(self, unnamed_arg_0)
    end
    def auto_repeat() : Bool
      Binding.bg_QAction_autoRepeat_(self)
    end
    def font=(font : Font) : Void
      Binding.bg_QAction_setFont_const_QFont_R(self, font)
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QAction_font_(self))
    end
    def checkable=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setCheckable_bool(self, unnamed_arg_0)
    end
    def checkable?() : Bool
      Binding.bg_QAction_isCheckable_(self)
    end
    def checked?() : Bool
      Binding.bg_QAction_isChecked_(self)
    end
    def enabled?() : Bool
      Binding.bg_QAction_isEnabled_(self)
    end
    def visible?() : Bool
      Binding.bg_QAction_isVisible_(self)
    end
    def activate(event : Action::Event) : Void
      Binding.bg_QAction_activate_QAction__ActionEvent(self, event)
    end
    def show_status_text(widget : Widget? = nil) : Bool
      Binding.bg_QAction_showStatusText_QWidget_X(self, widget)
    end
    def menu_role=(menu_role : Action::MenuRole) : Void
      Binding.bg_QAction_setMenuRole_QAction__MenuRole(self, menu_role)
    end
    def menu_role() : Action::MenuRole
      Binding.bg_QAction_menuRole_(self)
    end
    def icon_visible_in_menu=(visible : Bool) : Void
      Binding.bg_QAction_setIconVisibleInMenu_bool(self, visible)
    end
    def icon_visible_in_menu?() : Bool
      Binding.bg_QAction_isIconVisibleInMenu_(self)
    end
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QAction_parentWidget_(self))
    end
    def associated_widgets() : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QAction_associatedWidgets_(self))
    end
    def associated_graphics_widgets() : Enumerable(GraphicsWidget)
      QList_QGraphicsWidget_X.new(unwrap: Binding.bg_QAction_associatedGraphicsWidgets_(self))
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAction_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def initialize(dd : QActionPrivate*, parent : Object)
      unwrap = Binding.bg_QAction_CONSTRUCT_QActionPrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QAction_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def trigger() : Void
      Binding.bg_QAction_trigger_(self)
    end
    def hover() : Void
      Binding.bg_QAction_hover_(self)
    end
    def checked=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setChecked_bool(self, unnamed_arg_0)
    end
    def toggle() : Void
      Binding.bg_QAction_toggle_(self)
    end
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setEnabled_bool(self, unnamed_arg_0)
    end
    def disabled=(b : Bool) : Void
      Binding.bg_QAction_setDisabled_bool(self, b)
    end
    def visible=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setVisible_bool(self, unnamed_arg_0)
    end
    def changed() : Void
      Binding.bg_QAction_changed_(self)
    end
    def on_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_changed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def triggered(checked : Bool = false) : Void
      Binding.bg_QAction_triggered_bool(self, checked)
    end
    def on_triggered(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_triggered_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(checked : Bool){ block.call(checked) })))
    end
    def hovered() : Void
      Binding.bg_QAction_hovered_(self)
    end
    def on_hovered(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_hovered_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def toggled(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_toggled_bool(self, unnamed_arg_0)
    end
    def on_toggled(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_toggled_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Bool){ block.call(unnamed_arg_0) })))
    end
  end
  class StatusBar < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QStatusBar_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QStatusBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusBar_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QStatusBar_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(StatusBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall show_event paint_event resize_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQStatusBar.new(
      bg_QStatusBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QStatusBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QStatusBar_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QStatusBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QStatusBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QStatusBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QStatusBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def add_widget(widget : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QStatusBar_addWidget_QWidget_X_int(self, widget, stretch)
    end
    def insert_widget(index : Int32, widget : Widget, stretch : Int32 = 0) : Int32
      Binding.bg_QStatusBar_insertWidget_int_QWidget_X_int(self, index, widget, stretch)
    end
    def add_permanent_widget(widget : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QStatusBar_addPermanentWidget_QWidget_X_int(self, widget, stretch)
    end
    def insert_permanent_widget(index : Int32, widget : Widget, stretch : Int32 = 0) : Int32
      Binding.bg_QStatusBar_insertPermanentWidget_int_QWidget_X_int(self, index, widget, stretch)
    end
    def remove_widget(widget : Widget) : Void
      Binding.bg_QStatusBar_removeWidget_QWidget_X(self, widget)
    end
    def size_grip_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QStatusBar_setSizeGripEnabled_bool(self, unnamed_arg_0)
    end
    def size_grip_enabled?() : Bool
      Binding.bg_QStatusBar_isSizeGripEnabled_(self)
    end
    def current_message() : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusBar_currentMessage_(self))
    end
    def show_message(text : String, timeout : Int32 = 0) : Void
      Binding.bg_QStatusBar_showMessage_const_QString_R_int(self, Qt::Converter::QString.wrap(text), timeout)
    end
    def clear_message() : Void
      Binding.bg_QStatusBar_clearMessage_(self)
    end
    def message_changed(text : String) : Void
      Binding.bg_QStatusBar_messageChanged_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def on_message_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QStatusBar_messageChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(text : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(text)) })))
    end
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QStatusBar_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QStatusBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QStatusBar_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def reformat() : Void
      Binding.bg_QStatusBar_reformat_(self)
    end
    protected def hide_or_show() : Void
      Binding.bg_QStatusBar_hideOrShow_(self)
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QStatusBar_event_QEvent_X(self, unnamed_arg_0)
    end
  end
  class MainWindow < Widget
    @[Flags]
    enum DockOptions : UInt32
      AnimatedDocks = 1
      AllowNestedDocks = 2
      AllowTabbedDocks = 4
      ForceTabbedDocks = 8
      VerticalTabs = 16
      GroupedDragging = 32
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QMainWindow_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMainWindow_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QMainWindow_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MainWindow)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall create_popup_menu context_menu_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMainWindow.new(
      bg_QMainWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMainWindow_createPopupMenu_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_popup_menu") %} ->(){ Menu.new(unwrap: self.create_popup_menu()).to_unsafe } {% else %} nil {% end %}),
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QMainWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMainWindow_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget?, flags : WindowFlags)
      unwrap = Binding.bg_QMainWindow_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, flags)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MainWindow)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall create_popup_menu context_menu_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMainWindow.new(
      bg_QMainWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMainWindow_createPopupMenu_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_popup_menu") %} ->(){ Menu.new(unwrap: self.create_popup_menu()).to_unsafe } {% else %} nil {% end %}),
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QMainWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMainWindow_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def icon_size() : QSize*
      Binding.bg_QMainWindow_iconSize_(self)
    end
    def icon_size=(icon_size : QSize*) : Void
      Binding.bg_QMainWindow_setIconSize_const_QSize_R(self, icon_size)
    end
    def tool_button_style() : ToolButtonStyle
      Binding.bg_QMainWindow_toolButtonStyle_(self)
    end
    def tool_button_style=(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(self, tool_button_style)
    end
    def animated?() : Bool
      Binding.bg_QMainWindow_isAnimated_(self)
    end
    def dock_nesting_enabled?() : Bool
      Binding.bg_QMainWindow_isDockNestingEnabled_(self)
    end
    def document_mode() : Bool
      Binding.bg_QMainWindow_documentMode_(self)
    end
    def document_mode=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setDocumentMode_bool(self, enabled)
    end
    def tab_shape() : TabWidget::TabShape
      Binding.bg_QMainWindow_tabShape_(self)
    end
    def tab_shape=(tab_shape : TabWidget::TabShape) : Void
      Binding.bg_QMainWindow_setTabShape_QTabWidget__TabShape(self, tab_shape)
    end
    def tab_position(area : DockWidgetArea) : TabWidget::TabPosition
      Binding.bg_QMainWindow_tabPosition_Qt__DockWidgetArea(self, area)
    end
    def set_tab_position(areas : DockWidgetAreas, tab_position : TabWidget::TabPosition) : Void
      Binding.bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(self, areas, tab_position)
    end
    def dock_options=(options : MainWindow::DockOptions) : Void
      Binding.bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(self, options)
    end
    def dock_options() : MainWindow::DockOptions
      Binding.bg_QMainWindow_dockOptions_(self)
    end
    def is_separator(pos : Point) : Bool
      Binding.bg_QMainWindow_isSeparator_const_QPoint_R(self, pos)
    end
    def menu_bar() : MenuBar
      MenuBar.new(unwrap: Binding.bg_QMainWindow_menuBar_(self))
    end
    def menu_bar=(menubar : MenuBar) : Void
      Binding.bg_QMainWindow_setMenuBar_QMenuBar_X(self, menubar)
    end
    def menu_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_menuWidget_(self))
    end
    def menu_widget=(menubar : Widget) : Void
      Binding.bg_QMainWindow_setMenuWidget_QWidget_X(self, menubar)
    end
    def status_bar() : StatusBar
      StatusBar.new(unwrap: Binding.bg_QMainWindow_statusBar_(self))
    end
    def status_bar=(statusbar : StatusBar) : Void
      Binding.bg_QMainWindow_setStatusBar_QStatusBar_X(self, statusbar)
    end
    def central_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_centralWidget_(self))
    end
    def central_widget=(widget : Widget) : Void
      Binding.bg_QMainWindow_setCentralWidget_QWidget_X(self, widget)
    end
    def take_central_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_takeCentralWidget_(self))
    end
    def set_corner(corner : Corner, area : DockWidgetArea) : Void
      Binding.bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(self, corner, area)
    end
    def corner(corner : Corner) : DockWidgetArea
      Binding.bg_QMainWindow_corner_Qt__Corner(self, corner)
    end
    def add_tool_bar_break(area : ToolBarArea = ToolBarArea::TopToolBarArea) : Void
      Binding.bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(self, area)
    end
    def insert_tool_bar_break(before : ToolBar) : Void
      Binding.bg_QMainWindow_insertToolBarBreak_QToolBar_X(self, before)
    end
    def add_tool_bar(area : ToolBarArea, toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(self, area, toolbar)
    end
    def add_tool_bar(toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_addToolBar_QToolBar_X(self, toolbar)
    end
    def add_tool_bar(title : String) : ToolBar
      ToolBar.new(unwrap: Binding.bg_QMainWindow_addToolBar_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    def insert_tool_bar(before : ToolBar, toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(self, before, toolbar)
    end
    def remove_tool_bar(toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_removeToolBar_QToolBar_X(self, toolbar)
    end
    def remove_tool_bar_break(before : ToolBar) : Void
      Binding.bg_QMainWindow_removeToolBarBreak_QToolBar_X(self, before)
    end
    def unified_title_and_tool_bar_on_mac() : Bool
      Binding.bg_QMainWindow_unifiedTitleAndToolBarOnMac_(self)
    end
    def tool_bar_area(toolbar : ToolBar) : ToolBarArea
      Binding.bg_QMainWindow_toolBarArea_QToolBar_X(self, toolbar)
    end
    def tool_bar_break(toolbar : ToolBar) : Bool
      Binding.bg_QMainWindow_toolBarBreak_QToolBar_X(self, toolbar)
    end
    def add_dock_widget(area : DockWidgetArea, dockwidget : DockWidget) : Void
      Binding.bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(self, area, dockwidget)
    end
    def add_dock_widget(area : DockWidgetArea, dockwidget : DockWidget, orientation : Orientation) : Void
      Binding.bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(self, area, dockwidget, orientation)
    end
    def split_dock_widget(after : DockWidget, dockwidget : DockWidget, orientation : Orientation) : Void
      Binding.bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(self, after, dockwidget, orientation)
    end
    def tabify_dock_widget(first : DockWidget, second : DockWidget) : Void
      Binding.bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(self, first, second)
    end
    def tabified_dock_widgets(dockwidget : DockWidget) : Enumerable(DockWidget)
      QList_QDockWidget_X.new(unwrap: Binding.bg_QMainWindow_tabifiedDockWidgets_QDockWidget_X(self, dockwidget))
    end
    def remove_dock_widget(dockwidget : DockWidget) : Void
      Binding.bg_QMainWindow_removeDockWidget_QDockWidget_X(self, dockwidget)
    end
    def restore_dock_widget(dockwidget : DockWidget) : Bool
      Binding.bg_QMainWindow_restoreDockWidget_QDockWidget_X(self, dockwidget)
    end
    def dock_widget_area(dockwidget : DockWidget) : DockWidgetArea
      Binding.bg_QMainWindow_dockWidgetArea_QDockWidget_X(self, dockwidget)
    end
    def resize_docks(docks : Enumerable(DockWidget), sizes : Enumerable(Int32), orientation : Orientation) : Void
      Binding.bg_QMainWindow_resizeDocks_const_QList_QDockWidget_X__R_const_QList_int__R_Qt__Orientation(self, BindgenHelper.wrap_container(QList_QDockWidget_X, docks).to_unsafe, BindgenHelper.wrap_container(QList_int, sizes).to_unsafe, orientation)
    end
    def save_state(version : Int32 = 0) : QByteArray*
      Binding.bg_QMainWindow_saveState_int(self, version)
    end
    def restore_state(state : QByteArray*, version : Int32 = 0) : Bool
      Binding.bg_QMainWindow_restoreState_const_QByteArray_R_int(self, state, version)
    end
    def create_popup_menu() : Menu
      Menu.new(unwrap: Binding.bg_QMainWindow_createPopupMenu_(self))
    end
    def animated=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setAnimated_bool(self, enabled)
    end
    def dock_nesting_enabled=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setDockNestingEnabled_bool(self, enabled)
    end
    def unified_title_and_tool_bar_on_mac=(set : Bool) : Void
      Binding.bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(self, set)
    end
    def icon_size_changed(icon_size : QSize*) : Void
      Binding.bg_QMainWindow_iconSizeChanged_const_QSize_R(self, icon_size)
    end
    def on_icon_size_changed(&block : Proc(QSize*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_iconSizeChanged_CONNECT_CrystalProc_void__const_QSizeR_(self, BindgenHelper.wrap_proc(->(icon_size : QSize*){ block.call(icon_size) })))
    end
    def tool_button_style_changed(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(self, tool_button_style)
    end
    def on_tool_button_style_changed(&block : Proc(ToolButtonStyle, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_toolButtonStyleChanged_CONNECT_CrystalProc_void__Qt__ToolButtonStyle_(self, BindgenHelper.wrap_proc(->(tool_button_style : ToolButtonStyle){ block.call(tool_button_style) })))
    end
    def tabified_dock_widget_activated(dock_widget : DockWidget) : Void
      Binding.bg_QMainWindow_tabifiedDockWidgetActivated_QDockWidget_X(self, dock_widget)
    end
    def on_tabified_dock_widget_activated(&block : Proc(DockWidget, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_tabifiedDockWidgetActivated_CONNECT_CrystalProc_void__QDockWidgetX_(self, BindgenHelper.wrap_proc(->(dock_widget : Binding::QDockWidget*){ block.call(DockWidget.new(unwrap: dock_widget)) })))
    end
    protected def context_menu_event(event : QContextMenuEvent*) : Void
      Binding.bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    protected def event(event : Event) : Bool
      Binding.bg_QMainWindow_event_QEvent_X(self, event)
    end
  end
  class DockWidget < Widget
    enum Feature : UInt32
      DockWidgetClosable = 1
      DockWidgetMovable = 2
      DockWidgetFloatable = 4
      DockWidgetVerticalTitleBar = 8
      DockWidgetFeatureMask = 15
      AllDockWidgetFeatures = 7
      NoDockWidgetFeatures = 0
      Reserved = 255
    end
    @[Flags]
    enum Features : UInt32
      DockWidgetClosable = 1
      DockWidgetMovable = 2
      DockWidgetFloatable = 4
      DockWidgetVerticalTitleBar = 8
      DockWidgetFeatureMask = 15
      AllDockWidgetFeatures = 7
      NoDockWidgetFeatures = 0
      Reserved = 255
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QDockWidget_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDockWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDockWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDockWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(title : String, parent : Widget? = nil)
      unwrap = Binding.bg_QDockWidget_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDockWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(title : String, parent : Widget?, flags : WindowFlags)
      unwrap = Binding.bg_QDockWidget_CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(Qt::Converter::QString.wrap(title), parent, flags)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDockWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QDockWidget_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDockWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget?, flags : WindowFlags)
      unwrap = Binding.bg_QDockWidget_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, flags)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDockWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QDockWidget_widget_(self))
    end
    def widget=(widget : Widget) : Void
      Binding.bg_QDockWidget_setWidget_QWidget_X(self, widget)
    end
    def features=(features : DockWidget::Features) : Void
      Binding.bg_QDockWidget_setFeatures_QDockWidget__DockWidgetFeatures(self, features)
    end
    def features() : DockWidget::Features
      Binding.bg_QDockWidget_features_(self)
    end
    def floating=(floating : Bool) : Void
      Binding.bg_QDockWidget_setFloating_bool(self, floating)
    end
    def floating?() : Bool
      Binding.bg_QDockWidget_isFloating_(self)
    end
    def allowed_areas=(areas : DockWidgetAreas) : Void
      Binding.bg_QDockWidget_setAllowedAreas_Qt__DockWidgetAreas(self, areas)
    end
    def allowed_areas() : DockWidgetAreas
      Binding.bg_QDockWidget_allowedAreas_(self)
    end
    def title_bar_widget=(widget : Widget) : Void
      Binding.bg_QDockWidget_setTitleBarWidget_QWidget_X(self, widget)
    end
    def title_bar_widget() : Widget
      Widget.new(unwrap: Binding.bg_QDockWidget_titleBarWidget_(self))
    end
    def is_area_allowed(area : DockWidgetArea) : Bool
      Binding.bg_QDockWidget_isAreaAllowed_Qt__DockWidgetArea(self, area)
    end
    def toggle_view_action() : Action
      Action.new(unwrap: Binding.bg_QDockWidget_toggleViewAction_(self))
    end
    def features_changed(features : DockWidget::Features) : Void
      Binding.bg_QDockWidget_featuresChanged_QDockWidget__DockWidgetFeatures(self, features)
    end
    def on_features_changed(&block : Proc(DockWidget::Features, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_featuresChanged_CONNECT_CrystalProc_void__QDockWidget__DockWidgetFeatures_(self, BindgenHelper.wrap_proc(->(features : DockWidget::Features){ block.call(features) })))
    end
    def top_level_changed(top_level : Bool) : Void
      Binding.bg_QDockWidget_topLevelChanged_bool(self, top_level)
    end
    def on_top_level_changed(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_topLevelChanged_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(top_level : Bool){ block.call(top_level) })))
    end
    def allowed_areas_changed(allowed_areas : DockWidgetAreas) : Void
      Binding.bg_QDockWidget_allowedAreasChanged_Qt__DockWidgetAreas(self, allowed_areas)
    end
    def on_allowed_areas_changed(&block : Proc(DockWidgetAreas, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_allowedAreasChanged_CONNECT_CrystalProc_void__Qt__DockWidgetAreas_(self, BindgenHelper.wrap_proc(->(allowed_areas : DockWidgetAreas){ block.call(allowed_areas) })))
    end
    def visibility_changed(visible : Bool) : Void
      Binding.bg_QDockWidget_visibilityChanged_bool(self, visible)
    end
    def on_visibility_changed(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_visibilityChanged_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(visible : Bool){ block.call(visible) })))
    end
    def dock_location_changed(area : DockWidgetArea) : Void
      Binding.bg_QDockWidget_dockLocationChanged_Qt__DockWidgetArea(self, area)
    end
    def on_dock_location_changed(&block : Proc(DockWidgetArea, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_dockLocationChanged_CONNECT_CrystalProc_void__Qt__DockWidgetArea_(self, BindgenHelper.wrap_proc(->(area : DockWidgetArea){ block.call(area) })))
    end
    protected def change_event(event : Event) : Void
      Binding.bg_QDockWidget_changeEvent_QEvent_X(self, event)
    end
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QDockWidget_closeEvent_QCloseEvent_X(self, event)
    end
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QDockWidget_paintEvent_QPaintEvent_X(self, event)
    end
    protected def event(event : Event) : Bool
      Binding.bg_QDockWidget_event_QEvent_X(self, event)
    end
    protected def init_style_option(option : QStyleOptionDockWidget*) : Void
      Binding.bg_QDockWidget_initStyleOption_QStyleOptionDockWidget_X(self, option)
    end
  end
  class Dialog < Widget
    enum DialogCode : UInt32
      Rejected = 0
      Accepted = 1
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QDialog_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDialog_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget?, f : WindowFlags)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def result() : Int32
      Binding.bg_QDialog_result_(self)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QDialog_setVisible_bool(self, visible)
    end
    def orientation=(orientation : Orientation) : Void
      Binding.bg_QDialog_setOrientation_Qt__Orientation(self, orientation)
    end
    def orientation() : Orientation
      Binding.bg_QDialog_orientation_(self)
    end
    def extension=(extension : Widget) : Void
      Binding.bg_QDialog_setExtension_QWidget_X(self, extension)
    end
    def extension() : Widget
      Widget.new(unwrap: Binding.bg_QDialog_extension_(self))
    end
    def size_hint() : QSize*
      Binding.bg_QDialog_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QDialog_minimumSizeHint_(self)
    end
    def size_grip_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QDialog_setSizeGripEnabled_bool(self, unnamed_arg_0)
    end
    def size_grip_enabled?() : Bool
      Binding.bg_QDialog_isSizeGripEnabled_(self)
    end
    def modal=(modal : Bool) : Void
      Binding.bg_QDialog_setModal_bool(self, modal)
    end
    def result=(r : Int32) : Void
      Binding.bg_QDialog_setResult_int(self, r)
    end
    def finished(result : Int32) : Void
      Binding.bg_QDialog_finished_int(self, result)
    end
    def on_finished(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_finished_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(result : Int32){ block.call(result) })))
    end
    def accepted() : Void
      Binding.bg_QDialog_accepted_(self)
    end
    def on_accepted(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_accepted_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def rejected() : Void
      Binding.bg_QDialog_rejected_(self)
    end
    def on_rejected(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_rejected_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def open() : Void
      Binding.bg_QDialog_open_(self)
    end
    def exec() : Int32
      Binding.bg_QDialog_exec_(self)
    end
    def done(unnamed_arg_0 : Int32) : Void
      Binding.bg_QDialog_done_int(self, unnamed_arg_0)
    end
    def accept() : Void
      Binding.bg_QDialog_accept_(self)
    end
    def reject() : Void
      Binding.bg_QDialog_reject_(self)
    end
    def show_extension(unnamed_arg_0 : Bool) : Void
      Binding.bg_QDialog_showExtension_bool(self, unnamed_arg_0)
    end
    protected def initialize(unnamed_arg_0 : QDialogPrivate*, parent : Widget)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(unnamed_arg_0 : QDialogPrivate*, parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QDialog_CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(unnamed_arg_0, parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(unnamed_arg_0 : Int32){ self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QDialog_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def close_event(unnamed_arg_0 : CloseEvent) : Void
      Binding.bg_QDialog_closeEvent_QCloseEvent_X(self, unnamed_arg_0)
    end
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QDialog_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QDialog_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def context_menu_event(unnamed_arg_0 : QContextMenuEvent*) : Void
      Binding.bg_QDialog_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QDialog_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    protected def adjust_position(unnamed_arg_0 : Widget) : Void
      Binding.bg_QDialog_adjustPosition_QWidget_X(self, unnamed_arg_0)
    end
  end
  class Label < Frame
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLabel_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLabel_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QLabel_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget?, f : WindowFlags)
      unwrap = Binding.bg_QLabel_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget? = nil)
      unwrap = Binding.bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget?, f : WindowFlags)
      unwrap = Binding.bg_QLabel_CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(Qt::Converter::QString.wrap(text), parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child dev_type visible= has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(ev : QKeyEvent*){ self.key_press_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(ev : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(ev : QContextMenuEvent*){ self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(ev : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLabel_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_text_(self))
    end
    def pixmap() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QLabel_pixmap_(self))
    end
    def picture() : QPicture*
      Binding.bg_QLabel_picture_(self)
    end
    def movie() : QMovie*
      Binding.bg_QLabel_movie_(self)
    end
    def text_format() : TextFormatEnum
      Binding.bg_QLabel_textFormat_(self)
    end
    def text_format=(unnamed_arg_0 : TextFormatEnum) : Void
      Binding.bg_QLabel_setTextFormat_Qt__TextFormat(self, unnamed_arg_0)
    end
    def alignment() : Alignment
      Binding.bg_QLabel_alignment_(self)
    end
    def alignment=(unnamed_arg_0 : Alignment) : Void
      Binding.bg_QLabel_setAlignment_Qt__Alignment(self, unnamed_arg_0)
    end
    def word_wrap=(on : Bool) : Void
      Binding.bg_QLabel_setWordWrap_bool(self, on)
    end
    def word_wrap() : Bool
      Binding.bg_QLabel_wordWrap_(self)
    end
    def indent() : Int32
      Binding.bg_QLabel_indent_(self)
    end
    def indent=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setIndent_int(self, unnamed_arg_0)
    end
    def margin() : Int32
      Binding.bg_QLabel_margin_(self)
    end
    def margin=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setMargin_int(self, unnamed_arg_0)
    end
    def has_scaled_contents?() : Bool
      Binding.bg_QLabel_hasScaledContents_(self)
    end
    def scaled_contents=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLabel_setScaledContents_bool(self, unnamed_arg_0)
    end
    def size_hint() : QSize*
      Binding.bg_QLabel_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QLabel_minimumSizeHint_(self)
    end
    def buddy=(unnamed_arg_0 : Widget) : Void
      Binding.bg_QLabel_setBuddy_QWidget_X(self, unnamed_arg_0)
    end
    def buddy() : Widget
      Widget.new(unwrap: Binding.bg_QLabel_buddy_(self))
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLabel_heightForWidth_int(self, unnamed_arg_0)
    end
    def open_external_links() : Bool
      Binding.bg_QLabel_openExternalLinks_(self)
    end
    def open_external_links=(open : Bool) : Void
      Binding.bg_QLabel_setOpenExternalLinks_bool(self, open)
    end
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    def text_interaction_flags() : TextInteractionFlags
      Binding.bg_QLabel_textInteractionFlags_(self)
    end
    def set_selection(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLabel_setSelection_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    def has_selected_text?() : Bool
      Binding.bg_QLabel_hasSelectedText_(self)
    end
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_selectedText_(self))
    end
    def selection_start() : Int32
      Binding.bg_QLabel_selectionStart_(self)
    end
    def text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLabel_setText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def pixmap=(unnamed_arg_0 : Pixmap) : Void
      Binding.bg_QLabel_setPixmap_const_QPixmap_R(self, unnamed_arg_0)
    end
    def picture=(unnamed_arg_0 : QPicture*) : Void
      Binding.bg_QLabel_setPicture_const_QPicture_R(self, unnamed_arg_0)
    end
    def movie=(movie : QMovie*) : Void
      Binding.bg_QLabel_setMovie_QMovie_X(self, movie)
    end
    def num=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setNum_int(self, unnamed_arg_0)
    end
    def num=(unnamed_arg_0 : Float64) : Void
      Binding.bg_QLabel_setNum_double(self, unnamed_arg_0)
    end
    def clear() : Void
      Binding.bg_QLabel_clear_(self)
    end
    def link_activated(link : String) : Void
      Binding.bg_QLabel_linkActivated_const_QString_R(self, Qt::Converter::QString.wrap(link))
    end
    def on_link_activated(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLabel_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(link : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(link)) })))
    end
    def link_hovered(link : String) : Void
      Binding.bg_QLabel_linkHovered_const_QString_R(self, Qt::Converter::QString.wrap(link))
    end
    def on_link_hovered(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLabel_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(link : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(link)) })))
    end
    protected def event(e : Event) : Bool
      Binding.bg_QLabel_event_QEvent_X(self, e)
    end
    protected def key_press_event(ev : QKeyEvent*) : Void
      Binding.bg_QLabel_keyPressEvent_QKeyEvent_X(self, ev)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QLabel_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QLabel_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(ev : MouseEvent) : Void
      Binding.bg_QLabel_mousePressEvent_QMouseEvent_X(self, ev)
    end
    protected def mouse_move_event(ev : MouseEvent) : Void
      Binding.bg_QLabel_mouseMoveEvent_QMouseEvent_X(self, ev)
    end
    protected def mouse_release_event(ev : MouseEvent) : Void
      Binding.bg_QLabel_mouseReleaseEvent_QMouseEvent_X(self, ev)
    end
    protected def context_menu_event(ev : QContextMenuEvent*) : Void
      Binding.bg_QLabel_contextMenuEvent_QContextMenuEvent_X(self, ev)
    end
    protected def focus_in_event(ev : FocusEvent) : Void
      Binding.bg_QLabel_focusInEvent_QFocusEvent_X(self, ev)
    end
    protected def focus_out_event(ev : FocusEvent) : Void
      Binding.bg_QLabel_focusOutEvent_QFocusEvent_X(self, ev)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QLabel_focusNextPrevChild_bool(self, next_)
    end
  end
  class LcdNumber < Frame
    enum Mode : UInt32
      Hex = 0
      Dec = 1
      Oct = 2
      Bin = 3
    end
    enum SegmentStyle : UInt32
      Outline = 0
      Filled = 1
      Flat = 2
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLCDNumber_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLCDNumber_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QLCDNumber_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLCDNumber_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(num_digits : UInt32, parent : Widget? = nil)
      unwrap = Binding.bg_QLCDNumber_CONSTRUCT_uint_QWidget_X(num_digits, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLCDNumber_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def small_decimal_point() : Bool
      Binding.bg_QLCDNumber_smallDecimalPoint_(self)
    end
    def digit_count() : Int32
      Binding.bg_QLCDNumber_digitCount_(self)
    end
    def digit_count=(n_digits : Int32) : Void
      Binding.bg_QLCDNumber_setDigitCount_int(self, n_digits)
    end
    def check_overflow(num : Float64) : Bool
      Binding.bg_QLCDNumber_checkOverflow_double(self, num)
    end
    def check_overflow(num : Int32) : Bool
      Binding.bg_QLCDNumber_checkOverflow_int(self, num)
    end
    def mode() : LcdNumber::Mode
      Binding.bg_QLCDNumber_mode_(self)
    end
    def mode=(unnamed_arg_0 : LcdNumber::Mode) : Void
      Binding.bg_QLCDNumber_setMode_QLCDNumber__Mode(self, unnamed_arg_0)
    end
    def segment_style() : LcdNumber::SegmentStyle
      Binding.bg_QLCDNumber_segmentStyle_(self)
    end
    def segment_style=(unnamed_arg_0 : LcdNumber::SegmentStyle) : Void
      Binding.bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(self, unnamed_arg_0)
    end
    def value() : Float64
      Binding.bg_QLCDNumber_value_(self)
    end
    def int_value() : Int32
      Binding.bg_QLCDNumber_intValue_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QLCDNumber_sizeHint_(self)
    end
    def display(str : String) : Void
      Binding.bg_QLCDNumber_display_const_QString_R(self, Qt::Converter::QString.wrap(str))
    end
    def display(num : Int32) : Void
      Binding.bg_QLCDNumber_display_int(self, num)
    end
    def display(num : Float64) : Void
      Binding.bg_QLCDNumber_display_double(self, num)
    end
    def set_hex_mode() : Void
      Binding.bg_QLCDNumber_setHexMode_(self)
    end
    def set_dec_mode() : Void
      Binding.bg_QLCDNumber_setDecMode_(self)
    end
    def set_oct_mode() : Void
      Binding.bg_QLCDNumber_setOctMode_(self)
    end
    def set_bin_mode() : Void
      Binding.bg_QLCDNumber_setBinMode_(self)
    end
    def small_decimal_point=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLCDNumber_setSmallDecimalPoint_bool(self, unnamed_arg_0)
    end
    def overflow() : Void
      Binding.bg_QLCDNumber_overflow_(self)
    end
    def on_overflow(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLCDNumber_overflow_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(e : Event) : Bool
      Binding.bg_QLCDNumber_event_QEvent_X(self, e)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QLCDNumber_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
  end
  class PushButton < AbstractButton
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QPushButton_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QPushButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget? = nil)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(icon : Icon, text : String, parent : Widget? = nil)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(icon, Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QPushButton_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QPushButton_minimumSizeHint_(self)
    end
    def auto_default() : Bool
      Binding.bg_QPushButton_autoDefault_(self)
    end
    def auto_default=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setAutoDefault_bool(self, unnamed_arg_0)
    end
    def default?() : Bool
      Binding.bg_QPushButton_isDefault_(self)
    end
    def default=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setDefault_bool(self, unnamed_arg_0)
    end
    def menu=(menu : Menu) : Void
      Binding.bg_QPushButton_setMenu_QMenu_X(self, menu)
    end
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QPushButton_menu_(self))
    end
    def flat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setFlat_bool(self, unnamed_arg_0)
    end
    def flat?() : Bool
      Binding.bg_QPushButton_isFlat_(self)
    end
    def show_menu() : Void
      Binding.bg_QPushButton_showMenu_(self)
    end
    protected def event(e : Event) : Bool
      Binding.bg_QPushButton_event_QEvent_X(self, e)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QPushButton_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QPushButton_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QPushButton_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QPushButton_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionButton*) : Void
      Binding.bg_QPushButton_initStyleOption_QStyleOptionButton_X(self, option)
    end
    protected def initialize(dd : QPushButtonPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QPushButton_CONSTRUCT_QPushButtonPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QPushButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class CheckBox < AbstractButton
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QCheckBox_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QCheckBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QCheckBox_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCheckBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget? = nil)
      unwrap = Binding.bg_QCheckBox_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(pos : Binding::QPoint){ self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCheckBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QCheckBox_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QCheckBox_minimumSizeHint_(self)
    end
    def tristate=(y : Bool = true) : Void
      Binding.bg_QCheckBox_setTristate_bool(self, y)
    end
    def tristate?() : Bool
      Binding.bg_QCheckBox_isTristate_(self)
    end
    def check_state() : CheckState
      Binding.bg_QCheckBox_checkState_(self)
    end
    def check_state=(state : CheckState) : Void
      Binding.bg_QCheckBox_setCheckState_Qt__CheckState(self, state)
    end
    def state_changed(unnamed_arg_0 : Int32) : Void
      Binding.bg_QCheckBox_stateChanged_int(self, unnamed_arg_0)
    end
    def on_state_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCheckBox_stateChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    protected def event(e : Event) : Bool
      Binding.bg_QCheckBox_event_QEvent_X(self, e)
    end
    protected def hit_button(pos : Point) : Bool
      Binding.bg_QCheckBox_hitButton_const_QPoint_R(self, pos)
    end
    protected def check_state_set() : Void
      Binding.bg_QCheckBox_checkStateSet_(self)
    end
    protected def next_check_state() : Void
      Binding.bg_QCheckBox_nextCheckState_(self)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QCheckBox_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionButton*) : Void
      Binding.bg_QCheckBox_initStyleOption_QStyleOptionButton_X(self, option)
    end
  end
  class RadioButton < AbstractButton
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QRadioButton_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QRadioButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QRadioButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QRadioButton_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QRadioButton_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(RadioButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button paint_event mouse_move_event check_state_set next_check_state key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQRadioButton.new(
      bg_QRadioButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QRadioButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QRadioButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(unnamed_arg_0 : Binding::QPoint){ self.hit_button(Point.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QRadioButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget? = nil)
      unwrap = Binding.bg_QRadioButton_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(RadioButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button paint_event mouse_move_event check_state_set next_check_state key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQRadioButton.new(
      bg_QRadioButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QRadioButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QRadioButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} ->(unnamed_arg_0 : Binding::QPoint){ self.hit_button(Point.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} ->(){ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} ->(){ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QRadioButton_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QRadioButton_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QRadioButton_minimumSizeHint_(self)
    end
    protected def event(e : Event) : Bool
      Binding.bg_QRadioButton_event_QEvent_X(self, e)
    end
    protected def hit_button(unnamed_arg_0 : Point) : Bool
      Binding.bg_QRadioButton_hitButton_const_QPoint_R(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QRadioButton_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QRadioButton_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(button : QStyleOptionButton*) : Void
      Binding.bg_QRadioButton_initStyleOption_QStyleOptionButton_X(self, button)
    end
  end
  class ButtonGroup < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QButtonGroup_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QButtonGroup_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QButtonGroup_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QButtonGroup_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ButtonGroup)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQButtonGroup.new(
      bg_QButtonGroup_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QButtonGroup_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QButtonGroup_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def exclusive=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QButtonGroup_setExclusive_bool(self, unnamed_arg_0)
    end
    def exclusive() : Bool
      Binding.bg_QButtonGroup_exclusive_(self)
    end
    def add_button(unnamed_arg_0 : AbstractButton, id : Int32 = -1) : Void
      Binding.bg_QButtonGroup_addButton_QAbstractButton_X_int(self, unnamed_arg_0, id)
    end
    def remove_button(unnamed_arg_0 : AbstractButton) : Void
      Binding.bg_QButtonGroup_removeButton_QAbstractButton_X(self, unnamed_arg_0)
    end
    def buttons() : Enumerable(AbstractButton)
      QList_QAbstractButton_X.new(unwrap: Binding.bg_QButtonGroup_buttons_(self))
    end
    def checked_button() : AbstractButton
      AbstractButton.new(unwrap: Binding.bg_QButtonGroup_checkedButton_(self))
    end
    def button(id : Int32) : AbstractButton
      AbstractButton.new(unwrap: Binding.bg_QButtonGroup_button_int(self, id))
    end
    def set_id(button : AbstractButton, id : Int32) : Void
      Binding.bg_QButtonGroup_setId_QAbstractButton_X_int(self, button, id)
    end
    def id(button : AbstractButton) : Int32
      Binding.bg_QButtonGroup_id_QAbstractButton_X(self, button)
    end
    def checked_id() : Int32
      Binding.bg_QButtonGroup_checkedId_(self)
    end
    def button_clicked(unnamed_arg_0 : AbstractButton) : Void
      Binding.bg_QButtonGroup_buttonClicked_QAbstractButton_X(self, unnamed_arg_0)
    end
    def on_button_clicked(&block : Proc(AbstractButton, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonClicked_CONNECT_CrystalProc_void__QAbstractButtonX_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::QAbstractButton*){ block.call(AbstractButton.new(unwrap: unnamed_arg_0)) })))
    end
    def button_clicked(unnamed_arg_0 : Int32) : Void
      Binding.bg_QButtonGroup_buttonClicked_int(self, unnamed_arg_0)
    end
    def on_button_clicked(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonClicked_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    def button_pressed(unnamed_arg_0 : AbstractButton) : Void
      Binding.bg_QButtonGroup_buttonPressed_QAbstractButton_X(self, unnamed_arg_0)
    end
    def on_button_pressed(&block : Proc(AbstractButton, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonPressed_CONNECT_CrystalProc_void__QAbstractButtonX_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::QAbstractButton*){ block.call(AbstractButton.new(unwrap: unnamed_arg_0)) })))
    end
    def button_pressed(unnamed_arg_0 : Int32) : Void
      Binding.bg_QButtonGroup_buttonPressed_int(self, unnamed_arg_0)
    end
    def on_button_pressed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonPressed_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    def button_released(unnamed_arg_0 : AbstractButton) : Void
      Binding.bg_QButtonGroup_buttonReleased_QAbstractButton_X(self, unnamed_arg_0)
    end
    def on_button_released(&block : Proc(AbstractButton, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonReleased_CONNECT_CrystalProc_void__QAbstractButtonX_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::QAbstractButton*){ block.call(AbstractButton.new(unwrap: unnamed_arg_0)) })))
    end
    def button_released(unnamed_arg_0 : Int32) : Void
      Binding.bg_QButtonGroup_buttonReleased_int(self, unnamed_arg_0)
    end
    def on_button_released(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonReleased_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    def button_toggled(unnamed_arg_0 : AbstractButton, unnamed_arg_1 : Bool) : Void
      Binding.bg_QButtonGroup_buttonToggled_QAbstractButton_X_bool(self, unnamed_arg_0, unnamed_arg_1)
    end
    def on_button_toggled(&block : Proc(AbstractButton, Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonToggled_CONNECT_CrystalProc_void__QAbstractButtonX__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::QAbstractButton*, unnamed_arg_1 : Bool){ block.call(AbstractButton.new(unwrap: unnamed_arg_0), unnamed_arg_1) })))
    end
    def button_toggled(unnamed_arg_0 : Int32, unnamed_arg_1 : Bool) : Void
      Binding.bg_QButtonGroup_buttonToggled_int_bool(self, unnamed_arg_0, unnamed_arg_1)
    end
    def on_button_toggled(&block : Proc(Int32, Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_buttonToggled_CONNECT_CrystalProc_void__int__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32, unnamed_arg_1 : Bool){ block.call(unnamed_arg_0, unnamed_arg_1) })))
    end
  end
  class GroupBox < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGroupBox_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGroupBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGroupBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGroupBox_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QGroupBox_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GroupBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint event child_event resize_event paint_event focus_in_event change_event mouse_press_event mouse_move_event mouse_release_event dev_type visible= size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event key_press_event key_release_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGroupBox.new(
      bg_QGroupBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGroupBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QGroupBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QGroupBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGroupBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(title : String, parent : Widget? = nil)
      unwrap = Binding.bg_QGroupBox_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GroupBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint event child_event resize_event paint_event focus_in_event change_event mouse_press_event mouse_move_event mouse_release_event dev_type visible= size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event key_press_event key_release_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGroupBox.new(
      bg_QGroupBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGroupBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QGroupBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QGroupBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGroupBox_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGroupBox_title_(self))
    end
    def title=(title : String) : Void
      Binding.bg_QGroupBox_setTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def alignment() : Alignment
      Binding.bg_QGroupBox_alignment_(self)
    end
    def alignment=(alignment : Int32) : Void
      Binding.bg_QGroupBox_setAlignment_int(self, alignment)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QGroupBox_minimumSizeHint_(self)
    end
    def flat?() : Bool
      Binding.bg_QGroupBox_isFlat_(self)
    end
    def flat=(flat : Bool) : Void
      Binding.bg_QGroupBox_setFlat_bool(self, flat)
    end
    def checkable?() : Bool
      Binding.bg_QGroupBox_isCheckable_(self)
    end
    def checkable=(checkable : Bool) : Void
      Binding.bg_QGroupBox_setCheckable_bool(self, checkable)
    end
    def checked?() : Bool
      Binding.bg_QGroupBox_isChecked_(self)
    end
    def checked=(checked : Bool) : Void
      Binding.bg_QGroupBox_setChecked_bool(self, checked)
    end
    def clicked(checked : Bool = false) : Void
      Binding.bg_QGroupBox_clicked_bool(self, checked)
    end
    def on_clicked(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGroupBox_clicked_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(checked : Bool){ block.call(checked) })))
    end
    def toggled(unnamed_arg_0 : Bool) : Void
      Binding.bg_QGroupBox_toggled_bool(self, unnamed_arg_0)
    end
    def on_toggled(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGroupBox_toggled_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Bool){ block.call(unnamed_arg_0) })))
    end
    protected def event(event : Event) : Bool
      Binding.bg_QGroupBox_event_QEvent_X(self, event)
    end
    protected def child_event(event : QChildEvent*) : Void
      Binding.bg_QGroupBox_childEvent_QChildEvent_X(self, event)
    end
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QGroupBox_resizeEvent_QResizeEvent_X(self, event)
    end
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QGroupBox_paintEvent_QPaintEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGroupBox_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def change_event(event : Event) : Void
      Binding.bg_QGroupBox_changeEvent_QEvent_X(self, event)
    end
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QGroupBox_mousePressEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QGroupBox_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    protected def init_style_option(option : QStyleOptionGroupBox*) : Void
      Binding.bg_QGroupBox_initStyleOption_QStyleOptionGroupBox_X(self, option)
    end
  end
  class CoreApplication < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QCoreApplication_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QCoreApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32 = 329985)
      unwrap = Binding.bg_QCoreApplication_CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CoreApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCoreApplication.new(
      bg_QCoreApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCoreApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QCoreApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : Binding::QEvent*, receiver : Binding::QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCoreApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.arguments() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QCoreApplication_arguments_STATIC_())
    end
    def self.set_attribute(attribute : ApplicationAttribute, on : Bool = true) : Void
      Binding.bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(attribute, on)
    end
    def self.test_attribute(attribute : ApplicationAttribute) : Bool
      Binding.bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(attribute)
    end
    def self.organization_domain=(org_domain : String) : Void
      Binding.bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(Qt::Converter::QString.wrap(org_domain))
    end
    def self.organization_domain() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_organizationDomain_STATIC_())
    end
    def self.organization_name=(org_name : String) : Void
      Binding.bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(Qt::Converter::QString.wrap(org_name))
    end
    def self.organization_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_organizationName_STATIC_())
    end
    def self.application_name=(application : String) : Void
      Binding.bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(Qt::Converter::QString.wrap(application))
    end
    def self.application_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationName_STATIC_())
    end
    def self.application_version=(version : String) : Void
      Binding.bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(Qt::Converter::QString.wrap(version))
    end
    def self.application_version() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationVersion_STATIC_())
    end
    def self.setuid_allowed=(allow : Bool) : Void
      Binding.bg_QCoreApplication_setSetuidAllowed_STATIC_bool(allow)
    end
    def self.setuid_allowed?() : Bool
      Binding.bg_QCoreApplication_isSetuidAllowed_STATIC_()
    end
    def self.instance() : CoreApplication
      CoreApplication.new(unwrap: Binding.bg_QCoreApplication_instance_STATIC_())
    end
    def self.exec() : Int32
      Binding.bg_QCoreApplication_exec_STATIC_()
    end
    def self.process_events() : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_()
    end
    def self.process_events(flags : EventLoop::ProcessEventsFlags) : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(flags)
    end
    def self.process_events(flags : EventLoop::ProcessEventsFlags, maxtime : Int32) : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(flags, maxtime)
    end
    def self.exit(retcode : Int32 = 0) : Void
      Binding.bg_QCoreApplication_exit_STATIC_int(retcode)
    end
    def self.send_event(receiver : Object, event : Event) : Bool
      Binding.bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(receiver, event)
    end
    def self.post_event(receiver : Object, event : Event, priority : Int32 = 0) : Void
      Binding.bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(receiver, event, priority)
    end
    def self.send_posted_events(receiver : Object? = nil, event_type : Int32 = 0) : Void
      Binding.bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(receiver, event_type)
    end
    def self.remove_posted_events(receiver : Object, event_type : Int32 = 0) : Void
      Binding.bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(receiver, event_type)
    end
    def self.has_pending_events?() : Bool
      Binding.bg_QCoreApplication_hasPendingEvents_STATIC_()
    end
    def self.event_dispatcher() : AbstractEventDispatcher
      AbstractEventDispatcher.new(unwrap: Binding.bg_QCoreApplication_eventDispatcher_STATIC_())
    end
    def self.event_dispatcher=(event_dispatcher : AbstractEventDispatcher) : Void
      Binding.bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(event_dispatcher)
    end
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QCoreApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    def self.starting_up() : Bool
      Binding.bg_QCoreApplication_startingUp_STATIC_()
    end
    def self.closing_down() : Bool
      Binding.bg_QCoreApplication_closingDown_STATIC_()
    end
    def self.application_dir_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationDirPath_STATIC_())
    end
    def self.application_file_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationFilePath_STATIC_())
    end
    def self.application_pid() : Int64
      Binding.bg_QCoreApplication_applicationPid_STATIC_()
    end
    def self.library_paths=(unnamed_arg_0 : Enumerable(String)) : Void
      Binding.bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(BindgenHelper.wrap_container(QList_QString, unnamed_arg_0).to_unsafe)
    end
    def self.library_paths() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QCoreApplication_libraryPaths_STATIC_())
    end
    def self.add_library_path(unnamed_arg_0 : String) : Void
      Binding.bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.remove_library_path(unnamed_arg_0 : String) : Void
      Binding.bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.install_translator(message_file : QTranslator*) : Bool
      Binding.bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(message_file)
    end
    def self.remove_translator(message_file : QTranslator*) : Bool
      Binding.bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(message_file)
    end
    def self.translate(context : UInt8*, key : UInt8*, disambiguation : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(context, key, disambiguation, n))
    end
    def self.flush() : Void
      Binding.bg_QCoreApplication_flush_STATIC_()
    end
    def install_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def remove_native_event_filter(filter_obj : QAbstractNativeEventFilter*) : Void
      Binding.bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    def self.quit_lock_enabled?() : Bool
      Binding.bg_QCoreApplication_isQuitLockEnabled_STATIC_()
    end
    def self.quit_lock_enabled=(enabled : Bool) : Void
      Binding.bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(enabled)
    end
    def self.quit() : Void
      Binding.bg_QCoreApplication_quit_STATIC_()
    end
    def organization_name_changed() : Void
      Binding.bg_QCoreApplication_organizationNameChanged_(self)
    end
    def on_organization_name_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_organizationNameChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def organization_domain_changed() : Void
      Binding.bg_QCoreApplication_organizationDomainChanged_(self)
    end
    def on_organization_domain_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_organizationDomainChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def application_name_changed() : Void
      Binding.bg_QCoreApplication_applicationNameChanged_(self)
    end
    def on_application_name_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_applicationNameChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def application_version_changed() : Void
      Binding.bg_QCoreApplication_applicationVersionChanged_(self)
    end
    def on_application_version_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_applicationVersionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QCoreApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : QPostEventList*) : Bool
      Binding.bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
    protected def initialize(p : QCoreApplicationPrivate*)
      unwrap = Binding.bg_QCoreApplication_CONSTRUCT_QCoreApplicationPrivate_R(p)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CoreApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQCoreApplication.new(
      bg_QCoreApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCoreApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QCoreApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : Binding::QEvent*, receiver : Binding::QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QCoreApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class GuiApplication < CoreApplication
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGuiApplication_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGuiApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32 = 329985)
      unwrap = Binding.bg_QGuiApplication_CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GuiApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGuiApplication.new(
      bg_QGuiApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGuiApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QGuiApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : Binding::QEvent*, receiver : Binding::QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGuiApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.application_display_name=(name : String) : Void
      Binding.bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    def self.application_display_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_applicationDisplayName_STATIC_())
    end
    def self.desktop_file_name=(name : String) : Void
      Binding.bg_QGuiApplication_setDesktopFileName_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    def self.desktop_file_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_desktopFileName_STATIC_())
    end
    def self.all_windows() : QWindowList*
      Binding.bg_QGuiApplication_allWindows_STATIC_()
    end
    def self.top_level_windows() : QWindowList*
      Binding.bg_QGuiApplication_topLevelWindows_STATIC_()
    end
    def self.top_level_at(pos : Point) : QWindow*
      Binding.bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(pos)
    end
    def self.window_icon=(icon : Icon) : Void
      Binding.bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(icon)
    end
    def self.window_icon() : Icon
      Icon.new(unwrap: Binding.bg_QGuiApplication_windowIcon_STATIC_())
    end
    def self.platform_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_platformName_STATIC_())
    end
    def self.modal_window() : QWindow*
      Binding.bg_QGuiApplication_modalWindow_STATIC_()
    end
    def self.focus_window() : QWindow*
      Binding.bg_QGuiApplication_focusWindow_STATIC_()
    end
    def self.focus_object() : Object
      Object.new(unwrap: Binding.bg_QGuiApplication_focusObject_STATIC_())
    end
    def self.primary_screen() : Screen
      Screen.new(unwrap: Binding.bg_QGuiApplication_primaryScreen_STATIC_())
    end
    def self.screens() : Enumerable(Screen)
      QList_QScreen_X.new(unwrap: Binding.bg_QGuiApplication_screens_STATIC_())
    end
    def device_pixel_ratio() : Float64
      Binding.bg_QGuiApplication_devicePixelRatio_(self)
    end
    def self.override_cursor() : QCursor*
      Binding.bg_QGuiApplication_overrideCursor_STATIC_()
    end
    def self.override_cursor=(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0)
    end
    def self.change_override_cursor(unnamed_arg_0 : QCursor*) : Void
      Binding.bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0)
    end
    def self.restore_override_cursor() : Void
      Binding.bg_QGuiApplication_restoreOverrideCursor_STATIC_()
    end
    def self.font() : Font
      Font.new(unwrap: Binding.bg_QGuiApplication_font_STATIC_())
    end
    def self.font=(unnamed_arg_0 : Font) : Void
      Binding.bg_QGuiApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0)
    end
    def self.clipboard() : QClipboard*
      Binding.bg_QGuiApplication_clipboard_STATIC_()
    end
    def self.palette() : Palette
      Palette.new(unwrap: Binding.bg_QGuiApplication_palette_STATIC_())
    end
    def self.palette=(pal : Palette) : Void
      Binding.bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(pal)
    end
    def self.keyboard_modifiers() : KeyboardModifiers
      Binding.bg_QGuiApplication_keyboardModifiers_STATIC_()
    end
    def self.query_keyboard_modifiers() : KeyboardModifiers
      Binding.bg_QGuiApplication_queryKeyboardModifiers_STATIC_()
    end
    def self.mouse_buttons() : MouseButtons
      Binding.bg_QGuiApplication_mouseButtons_STATIC_()
    end
    def self.layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(direction)
    end
    def self.layout_direction() : LayoutDirection
      Binding.bg_QGuiApplication_layoutDirection_STATIC_()
    end
    def self.right_to_left?() : Bool
      Binding.bg_QGuiApplication_isRightToLeft_STATIC_()
    end
    def self.left_to_right?() : Bool
      Binding.bg_QGuiApplication_isLeftToRight_STATIC_()
    end
    def self.style_hints() : QStyleHints*
      Binding.bg_QGuiApplication_styleHints_STATIC_()
    end
    def self.desktop_settings_aware=(on : Bool) : Void
      Binding.bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(on)
    end
    def self.desktop_settings_aware() : Bool
      Binding.bg_QGuiApplication_desktopSettingsAware_STATIC_()
    end
    def self.input_method() : QInputMethod*
      Binding.bg_QGuiApplication_inputMethod_STATIC_()
    end
    def self.platform_native_interface() : QPlatformNativeInterface*
      Binding.bg_QGuiApplication_platformNativeInterface_STATIC_()
    end
    def self.quit_on_last_window_closed=(quit : Bool) : Void
      Binding.bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(quit)
    end
    def self.quit_on_last_window_closed() : Bool
      Binding.bg_QGuiApplication_quitOnLastWindowClosed_STATIC_()
    end
    def self.application_state() : ApplicationState
      Binding.bg_QGuiApplication_applicationState_STATIC_()
    end
    def self.exec() : Int32
      Binding.bg_QGuiApplication_exec_STATIC_()
    end
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QGuiApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    def session_restored?() : Bool
      Binding.bg_QGuiApplication_isSessionRestored_(self)
    end
    def session_id() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_sessionId_(self))
    end
    def session_key() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_sessionKey_(self))
    end
    def saving_session?() : Bool
      Binding.bg_QGuiApplication_isSavingSession_(self)
    end
    def self.fallback_session_management_enabled?() : Bool
      Binding.bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_()
    end
    def self.fallback_session_management_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(unnamed_arg_0)
    end
    def self.sync() : Void
      Binding.bg_QGuiApplication_sync_STATIC_()
    end
    def font_database_changed() : Void
      Binding.bg_QGuiApplication_fontDatabaseChanged_(self)
    end
    def on_font_database_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_fontDatabaseChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def screen_added(screen : Screen) : Void
      Binding.bg_QGuiApplication_screenAdded_QScreen_X(self, screen)
    end
    def on_screen_added(&block : Proc(Screen, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_screenAdded_CONNECT_CrystalProc_void__QScreenX_(self, BindgenHelper.wrap_proc(->(screen : Binding::QScreen*){ block.call(Screen.new(unwrap: screen)) })))
    end
    def screen_removed(screen : Screen) : Void
      Binding.bg_QGuiApplication_screenRemoved_QScreen_X(self, screen)
    end
    def on_screen_removed(&block : Proc(Screen, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_screenRemoved_CONNECT_CrystalProc_void__QScreenX_(self, BindgenHelper.wrap_proc(->(screen : Binding::QScreen*){ block.call(Screen.new(unwrap: screen)) })))
    end
    def primary_screen_changed(screen : Screen) : Void
      Binding.bg_QGuiApplication_primaryScreenChanged_QScreen_X(self, screen)
    end
    def on_primary_screen_changed(&block : Proc(Screen, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_primaryScreenChanged_CONNECT_CrystalProc_void__QScreenX_(self, BindgenHelper.wrap_proc(->(screen : Binding::QScreen*){ block.call(Screen.new(unwrap: screen)) })))
    end
    def last_window_closed() : Void
      Binding.bg_QGuiApplication_lastWindowClosed_(self)
    end
    def on_last_window_closed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_lastWindowClosed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def focus_object_changed(focus_object : Object) : Void
      Binding.bg_QGuiApplication_focusObjectChanged_QObject_X(self, focus_object)
    end
    def on_focus_object_changed(&block : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_focusObjectChanged_CONNECT_CrystalProc_void__QObjectX_(self, BindgenHelper.wrap_proc(->(focus_object : Binding::QObject*){ block.call(Object.new(unwrap: focus_object)) })))
    end
    def focus_window_changed(focus_window : QWindow*) : Void
      Binding.bg_QGuiApplication_focusWindowChanged_QWindow_X(self, focus_window)
    end
    def on_focus_window_changed(&block : Proc(QWindow*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_focusWindowChanged_CONNECT_CrystalProc_void__QWindowX_(self, BindgenHelper.wrap_proc(->(focus_window : QWindow*){ block.call(focus_window) })))
    end
    def application_state_changed(state : ApplicationState) : Void
      Binding.bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(self, state)
    end
    def on_application_state_changed(&block : Proc(ApplicationState, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_applicationStateChanged_CONNECT_CrystalProc_void__Qt__ApplicationState_(self, BindgenHelper.wrap_proc(->(state : ApplicationState){ block.call(state) })))
    end
    def layout_direction_changed(direction : LayoutDirection) : Void
      Binding.bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(self, direction)
    end
    def on_layout_direction_changed(&block : Proc(LayoutDirection, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_layoutDirectionChanged_CONNECT_CrystalProc_void__Qt__LayoutDirection_(self, BindgenHelper.wrap_proc(->(direction : LayoutDirection){ block.call(direction) })))
    end
    def commit_data_request(session_manager : QSessionManager) : Void
      Binding.bg_QGuiApplication_commitDataRequest_QSessionManager_R(self, session_manager)
    end
    def on_commit_data_request(&block : Proc(QSessionManager, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_commitDataRequest_CONNECT_CrystalProc_void__QSessionManagerR_(self, BindgenHelper.wrap_proc(->(session_manager : Binding::QSessionManager*){ block.call(QSessionManager.new(unwrap: session_manager)) })))
    end
    def save_state_request(session_manager : QSessionManager) : Void
      Binding.bg_QGuiApplication_saveStateRequest_QSessionManager_R(self, session_manager)
    end
    def on_save_state_request(&block : Proc(QSessionManager, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_saveStateRequest_CONNECT_CrystalProc_void__QSessionManagerR_(self, BindgenHelper.wrap_proc(->(session_manager : Binding::QSessionManager*){ block.call(QSessionManager.new(unwrap: session_manager)) })))
    end
    def palette_changed(pal : Palette) : Void
      Binding.bg_QGuiApplication_paletteChanged_const_QPalette_R(self, pal)
    end
    def on_palette_changed(&block : Proc(Palette, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_paletteChanged_CONNECT_CrystalProc_void__const_QPaletteR_(self, BindgenHelper.wrap_proc(->(pal : Binding::QPalette*){ block.call(Palette.new(unwrap: pal)) })))
    end
    def application_display_name_changed() : Void
      Binding.bg_QGuiApplication_applicationDisplayNameChanged_(self)
    end
    def on_application_display_name_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_applicationDisplayNameChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QGuiApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : QPostEventList*) : Bool
      Binding.bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
    protected def initialize(p : QGuiApplicationPrivate*)
      unwrap = Binding.bg_QGuiApplication_CONSTRUCT_QGuiApplicationPrivate_R(p)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GuiApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGuiApplication.new(
      bg_QGuiApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGuiApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QGuiApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : Binding::QEvent*, receiver : Binding::QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGuiApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class Application < GuiApplication
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QApplication_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32 = 329985)
      unwrap = Binding.bg_QApplication_CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Application)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQApplication.new(
      bg_QApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} ->(unnamed_arg_0 : Binding::QEvent*, receiver : Binding::QObject*, unnamed_arg_2 : QPostEventList*){ self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QApplication_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def self.style() : QStyle*
      Binding.bg_QApplication_style_STATIC_()
    end
    def self.style=(unnamed_arg_0 : QStyle*) : Void
      Binding.bg_QApplication_setStyle_STATIC_QStyle_X(unnamed_arg_0)
    end
    def self.set_style(unnamed_arg_0 : String) : QStyle*
      Binding.bg_QApplication_setStyle_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.color_spec() : Int32
      Binding.bg_QApplication_colorSpec_STATIC_()
    end
    def self.color_spec=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setColorSpec_STATIC_int(unnamed_arg_0)
    end
    def self.palette(unnamed_arg_0 : Widget) : Palette
      Palette.new(unwrap: Binding.bg_QApplication_palette_STATIC_const_QWidget_X(unnamed_arg_0))
    end
    def self.palette(class_name : UInt8*) : Palette
      Palette.new(unwrap: Binding.bg_QApplication_palette_STATIC_const_char_X(class_name))
    end
    def self.set_palette(unnamed_arg_0 : Palette, class_name : UInt8*? = nil) : Void
      Binding.bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(unnamed_arg_0, class_name)
    end
    def self.font() : Font
      Font.new(unwrap: Binding.bg_QApplication_font_STATIC_())
    end
    def self.font(unnamed_arg_0 : Widget) : Font
      Font.new(unwrap: Binding.bg_QApplication_font_STATIC_const_QWidget_X(unnamed_arg_0))
    end
    def self.font(class_name : UInt8*) : Font
      Font.new(unwrap: Binding.bg_QApplication_font_STATIC_const_char_X(class_name))
    end
    def self.set_font(unnamed_arg_0 : Font, class_name : UInt8*? = nil) : Void
      Binding.bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(unnamed_arg_0, class_name)
    end
    def self.font_metrics() : QFontMetrics*
      Binding.bg_QApplication_fontMetrics_STATIC_()
    end
    def self.window_icon=(icon : Icon) : Void
      Binding.bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(icon)
    end
    def self.window_icon() : Icon
      Icon.new(unwrap: Binding.bg_QApplication_windowIcon_STATIC_())
    end
    def self.all_widgets() : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QApplication_allWidgets_STATIC_())
    end
    def self.top_level_widgets() : Enumerable(Widget)
      QList_QWidget_X.new(unwrap: Binding.bg_QApplication_topLevelWidgets_STATIC_())
    end
    def self.desktop() : DesktopWidget
      DesktopWidget.new(unwrap: Binding.bg_QApplication_desktop_STATIC_())
    end
    def self.active_popup_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activePopupWidget_STATIC_())
    end
    def self.active_modal_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activeModalWidget_STATIC_())
    end
    def self.focus_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_focusWidget_STATIC_())
    end
    def self.active_window() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activeWindow_STATIC_())
    end
    def self.active_window=(act : Widget) : Void
      Binding.bg_QApplication_setActiveWindow_STATIC_QWidget_X(act)
    end
    def self.widget_at(p : Point) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_widgetAt_STATIC_const_QPoint_R(p))
    end
    def self.widget_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_widgetAt_STATIC_int_int(x, y))
    end
    def self.top_level_at(p : Point) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_topLevelAt_STATIC_const_QPoint_R(p))
    end
    def self.top_level_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_topLevelAt_STATIC_int_int(x, y))
    end
    def self.beep() : Void
      Binding.bg_QApplication_beep_STATIC_()
    end
    def self.alert(widget : Widget, duration : Int32 = 0) : Void
      Binding.bg_QApplication_alert_STATIC_QWidget_X_int(widget, duration)
    end
    def self.cursor_flash_time=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setCursorFlashTime_STATIC_int(unnamed_arg_0)
    end
    def self.cursor_flash_time() : Int32
      Binding.bg_QApplication_cursorFlashTime_STATIC_()
    end
    def self.double_click_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setDoubleClickInterval_STATIC_int(unnamed_arg_0)
    end
    def self.double_click_interval() : Int32
      Binding.bg_QApplication_doubleClickInterval_STATIC_()
    end
    def self.keyboard_input_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setKeyboardInputInterval_STATIC_int(unnamed_arg_0)
    end
    def self.keyboard_input_interval() : Int32
      Binding.bg_QApplication_keyboardInputInterval_STATIC_()
    end
    def self.wheel_scroll_lines=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setWheelScrollLines_STATIC_int(unnamed_arg_0)
    end
    def self.wheel_scroll_lines() : Int32
      Binding.bg_QApplication_wheelScrollLines_STATIC_()
    end
    def self.global_strut=(unnamed_arg_0 : QSize*) : Void
      Binding.bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(unnamed_arg_0)
    end
    def self.global_strut() : QSize*
      Binding.bg_QApplication_globalStrut_STATIC_()
    end
    def self.start_drag_time=(ms : Int32) : Void
      Binding.bg_QApplication_setStartDragTime_STATIC_int(ms)
    end
    def self.start_drag_time() : Int32
      Binding.bg_QApplication_startDragTime_STATIC_()
    end
    def self.start_drag_distance=(l : Int32) : Void
      Binding.bg_QApplication_setStartDragDistance_STATIC_int(l)
    end
    def self.start_drag_distance() : Int32
      Binding.bg_QApplication_startDragDistance_STATIC_()
    end
    def self.is_effect_enabled(unnamed_arg_0 : UIEffect) : Bool
      Binding.bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0)
    end
    def self.set_effect_enabled(unnamed_arg_0 : UIEffect, enable : Bool = true) : Void
      Binding.bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(unnamed_arg_0, enable)
    end
    def self.exec() : Int32
      Binding.bg_QApplication_exec_STATIC_()
    end
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    def focus_changed(old : Widget, now : Widget) : Void
      Binding.bg_QApplication_focusChanged_QWidget_X_QWidget_X(self, old, now)
    end
    def on_focus_changed(&block : Proc(Widget, Widget, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QApplication_focusChanged_CONNECT_CrystalProc_void__QWidgetX__QWidgetX_(self, BindgenHelper.wrap_proc(->(old : Binding::QWidget*, now : Binding::QWidget*){ block.call(Widget.new(unwrap: old), Widget.new(unwrap: now)) })))
    end
    def style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_styleSheet_(self))
    end
    def style_sheet=(sheet : String) : Void
      Binding.bg_QApplication_setStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(sheet))
    end
    def auto_sip_enabled=(enabled : Bool) : Void
      Binding.bg_QApplication_setAutoSipEnabled_const_bool(self, enabled)
    end
    def auto_sip_enabled() : Bool
      Binding.bg_QApplication_autoSipEnabled_(self)
    end
    def self.close_all_windows() : Void
      Binding.bg_QApplication_closeAllWindows_STATIC_()
    end
    def self.about_qt() : Void
      Binding.bg_QApplication_aboutQt_STATIC_()
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : QPostEventList*) : Bool
      Binding.bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
  end
  class Image < PaintDevice
    enum Format : UInt32
      FormatInvalid = 0
      FormatMono = 1
      FormatMonoLSB = 2
      FormatIndexed8 = 3
      FormatRGB32 = 4
      FormatARGB32 = 5
      FormatARGB32Premultiplied = 6
      FormatRGB16 = 7
      FormatARGB8565Premultiplied = 8
      FormatRGB666 = 9
      FormatARGB6666Premultiplied = 10
      FormatRGB555 = 11
      FormatARGB8555Premultiplied = 12
      FormatRGB888 = 13
      FormatRGB444 = 14
      FormatARGB4444Premultiplied = 15
      FormatRGBX8888 = 16
      FormatRGBA8888 = 17
      FormatRGBA8888Premultiplied = 18
      FormatBGR30 = 19
      FormatA2BGR30Premultiplied = 20
      FormatRGB30 = 21
      FormatA2RGB30Premultiplied = 22
      FormatAlpha8 = 23
      FormatGrayscale8 = 24
      NImageFormats = 25
    end
    enum InvertMode : UInt32
      InvertRgb = 0
      InvertRgba = 1
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QImage_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(size : QSize*, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_QSize_R_QImage__Format(size, format)
    @unwrap = unwrap
    
    end
    def initialize(width : Int32, height : Int32, format : Image::Format)
      unwrap = Binding.bg_QImage_CONSTRUCT_int_int_QImage__Format(width, height, format)
    @unwrap = unwrap
    
    end
    def initialize(xpm : UInt8**)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_char_Xconst_X(xpm)
    @unwrap = unwrap
    
    end
    def initialize(file_name : String, format : UInt8*? = nil)
      unwrap = Binding.bg_QImage_CONSTRUCT_const_QString_R_const_char_X(Qt::Converter::QString.wrap(file_name), format)
    @unwrap = unwrap
    
    end
    def swap(other : Image) : Void
      Binding.bg_QImage_swap_QImage_R(self, other)
    end
    def null?() : Bool
      Binding.bg_QImage_isNull_(self)
    end
    def dev_type() : Int32
      Binding.bg_QImage_devType_(self)
    end
    def detach() : Void
      Binding.bg_QImage_detach_(self)
    end
    def detached?() : Bool
      Binding.bg_QImage_isDetached_(self)
    end
    def copy() : Image
      Image.new(unwrap: Binding.bg_QImage_copy_(self))
    end
    def copy(rect : Rect) : Image
      Image.new(unwrap: Binding.bg_QImage_copy_const_QRect_R(self, rect))
    end
    def copy(x : Int32, y : Int32, w : Int32, h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_copy_int_int_int_int(self, x, y, w, h))
    end
    def format() : Image::Format
      Binding.bg_QImage_format_(self)
    end
    def convert_to_format(f : Image::Format) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format(self, f))
    end
    def convert_to_format(f : Image::Format, flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(self, f, flags))
    end
    def convert_to_format(f : Image::Format, color_table : Enumerable(UInt32)) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R(self, f, BindgenHelper.wrap_container(QVector_QRgb, color_table).to_unsafe))
    end
    def convert_to_format(f : Image::Format, color_table : Enumerable(UInt32), flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R_Qt__ImageConversionFlags(self, f, BindgenHelper.wrap_container(QVector_QRgb, color_table).to_unsafe, flags))
    end
    def reinterpret_as_format(f : Image::Format) : Bool
      Binding.bg_QImage_reinterpretAsFormat_QImage__Format(self, f)
    end
    def width() : Int32
      Binding.bg_QImage_width_(self)
    end
    def height() : Int32
      Binding.bg_QImage_height_(self)
    end
    def size() : QSize*
      Binding.bg_QImage_size_(self)
    end
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QImage_rect_(self))
    end
    def depth() : Int32
      Binding.bg_QImage_depth_(self)
    end
    def color_count() : Int32
      Binding.bg_QImage_colorCount_(self)
    end
    def bit_plane_count() : Int32
      Binding.bg_QImage_bitPlaneCount_(self)
    end
    def color(i : Int32) : UInt32
      Binding.bg_QImage_color_int(self, i)
    end
    def set_color(i : Int32, c : UInt32) : Void
      Binding.bg_QImage_setColor_int_QRgb(self, i, c)
    end
    def color_count=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setColorCount_int(self, unnamed_arg_0)
    end
    def all_gray() : Bool
      Binding.bg_QImage_allGray_(self)
    end
    def grayscale?() : Bool
      Binding.bg_QImage_isGrayscale_(self)
    end
    def bits() : UInt8*
      Binding.bg_QImage_bits_(self)
    end
    def const_bits() : UInt8*
      Binding.bg_QImage_constBits_(self)
    end
    def byte_count() : Int32
      Binding.bg_QImage_byteCount_(self)
    end
    def scan_line(unnamed_arg_0 : Int32) : UInt8*
      Binding.bg_QImage_scanLine_int(self, unnamed_arg_0)
    end
    def const_scan_line(unnamed_arg_0 : Int32) : UInt8*
      Binding.bg_QImage_constScanLine_int(self, unnamed_arg_0)
    end
    def bytes_per_line() : Int32
      Binding.bg_QImage_bytesPerLine_(self)
    end
    def valid(x : Int32, y : Int32) : Bool
      Binding.bg_QImage_valid_int_int(self, x, y)
    end
    def valid(pt : Point) : Bool
      Binding.bg_QImage_valid_const_QPoint_R(self, pt)
    end
    def pixel_index(x : Int32, y : Int32) : Int32
      Binding.bg_QImage_pixelIndex_int_int(self, x, y)
    end
    def pixel_index(pt : Point) : Int32
      Binding.bg_QImage_pixelIndex_const_QPoint_R(self, pt)
    end
    def pixel(x : Int32, y : Int32) : UInt32
      Binding.bg_QImage_pixel_int_int(self, x, y)
    end
    def pixel(pt : Point) : UInt32
      Binding.bg_QImage_pixel_const_QPoint_R(self, pt)
    end
    def set_pixel(x : Int32, y : Int32, index_or_rgb : UInt32) : Void
      Binding.bg_QImage_setPixel_int_int_uint(self, x, y, index_or_rgb)
    end
    def set_pixel(pt : Point, index_or_rgb : UInt32) : Void
      Binding.bg_QImage_setPixel_const_QPoint_R_uint(self, pt, index_or_rgb)
    end
    def pixel_color(x : Int32, y : Int32) : Color
      Color.new(unwrap: Binding.bg_QImage_pixelColor_int_int(self, x, y))
    end
    def pixel_color(pt : Point) : Color
      Color.new(unwrap: Binding.bg_QImage_pixelColor_const_QPoint_R(self, pt))
    end
    def set_pixel_color(x : Int32, y : Int32, c : Color) : Void
      Binding.bg_QImage_setPixelColor_int_int_const_QColor_R(self, x, y, c)
    end
    def set_pixel_color(pt : Point, c : Color) : Void
      Binding.bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(self, pt, c)
    end
    def color_table() : Enumerable(UInt32)
      QVector_QRgb.new(unwrap: Binding.bg_QImage_colorTable_(self))
    end
    def color_table=(colors : Enumerable(UInt32)) : Void
      Binding.bg_QImage_setColorTable_const_QVector_QRgb_(self, BindgenHelper.wrap_container(QVector_QRgb, colors).to_unsafe)
    end
    def device_pixel_ratio() : Float64
      Binding.bg_QImage_devicePixelRatio_(self)
    end
    def device_pixel_ratio=(scale_factor : Float64) : Void
      Binding.bg_QImage_setDevicePixelRatio_qreal(self, scale_factor)
    end
    def fill(pixel : UInt32) : Void
      Binding.bg_QImage_fill_uint(self, pixel)
    end
    def fill(color : Color) : Void
      Binding.bg_QImage_fill_const_QColor_R(self, color)
    end
    def fill(color : GlobalColor) : Void
      Binding.bg_QImage_fill_Qt__GlobalColor(self, color)
    end
    def has_alpha_channel?() : Bool
      Binding.bg_QImage_hasAlphaChannel_(self)
    end
    def alpha_channel=(alpha_channel : Image) : Void
      Binding.bg_QImage_setAlphaChannel_const_QImage_R(self, alpha_channel)
    end
    def alpha_channel() : Image
      Image.new(unwrap: Binding.bg_QImage_alphaChannel_(self))
    end
    def create_alpha_mask() : Image
      Image.new(unwrap: Binding.bg_QImage_createAlphaMask_(self))
    end
    def create_alpha_mask(flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_createAlphaMask_Qt__ImageConversionFlags(self, flags))
    end
    def create_heuristic_mask(clip_tight : Bool = true) : Image
      Image.new(unwrap: Binding.bg_QImage_createHeuristicMask_bool(self, clip_tight))
    end
    def create_mask_from_color(color : UInt32, mode : MaskMode = MaskMode::MaskInColor) : Image
      Image.new(unwrap: Binding.bg_QImage_createMaskFromColor_QRgb_Qt__MaskMode(self, color, mode))
    end
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(self, w, h, aspect_mode, mode))
    end
    def scaled(s : QSize*, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(self, s, aspect_mode, mode))
    end
    def scaled_to_width(w : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToWidth_int_Qt__TransformationMode(self, w, mode))
    end
    def scaled_to_height(h : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToHeight_int_Qt__TransformationMode(self, h, mode))
    end
    def transformed(matrix : QMatrix*, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_transformed_const_QMatrix_R_Qt__TransformationMode(self, matrix, mode))
    end
    def self.true_matrix(unnamed_arg_0 : QMatrix*, w : Int32, h : Int32) : QMatrix*
      Binding.bg_QImage_trueMatrix_STATIC_const_QMatrix_R_int_int(unnamed_arg_0, w, h)
    end
    def transformed(matrix : QTransform*, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_transformed_const_QTransform_R_Qt__TransformationMode(self, matrix, mode))
    end
    def self.true_matrix(unnamed_arg_0 : QTransform*, w : Int32, h : Int32) : QTransform*
      Binding.bg_QImage_trueMatrix_STATIC_const_QTransform_R_int_int(unnamed_arg_0, w, h)
    end
    def mirrored(horizontally : Bool = false, vertically : Bool = true) : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_bool_bool(self, horizontally, vertically))
    end
    def rgb_swapped() : Image
      Image.new(unwrap: Binding.bg_QImage_rgbSwapped_(self))
    end
    def invert_pixels(unnamed_arg_0 : Image::InvertMode = Image::InvertMode::InvertRgb) : Void
      Binding.bg_QImage_invertPixels_QImage__InvertMode(self, unnamed_arg_0)
    end
    def load(device : IODevice, format : UInt8*) : Bool
      Binding.bg_QImage_load_QIODevice_X_const_char_X(self, device, format)
    end
    def load(file_name : String, format : UInt8*? = nil) : Bool
      Binding.bg_QImage_load_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    def load_from_data(buf : UInt8*, len : Int32, format : UInt8*? = nil) : Bool
      Binding.bg_QImage_loadFromData_const_uchar_X_int_const_char_X(self, buf, len, format)
    end
    def load_from_data(data : QByteArray*, aformat : UInt8*? = nil) : Bool
      Binding.bg_QImage_loadFromData_const_QByteArray_R_const_char_X(self, data, aformat)
    end
    def save(file_name : String, format : UInt8*? = nil, quality : Int32 = -1) : Bool
      Binding.bg_QImage_save_const_QString_R_const_char_X_int(self, Qt::Converter::QString.wrap(file_name), format, quality)
    end
    def save(device : IODevice, format : UInt8*? = nil, quality : Int32 = -1) : Bool
      Binding.bg_QImage_save_QIODevice_X_const_char_X_int(self, device, format, quality)
    end
    def self.from_data(data : UInt8*, size : Int32, format : UInt8*? = nil) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(data, size, format))
    end
    def self.from_data(data : QByteArray*, format : UInt8*? = nil) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(data, format))
    end
    def cache_key() : Int64
      Binding.bg_QImage_cacheKey_(self)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QImage_paintEngine_(self)
    end
    def dots_per_meter_x() : Int32
      Binding.bg_QImage_dotsPerMeterX_(self)
    end
    def dots_per_meter_y() : Int32
      Binding.bg_QImage_dotsPerMeterY_(self)
    end
    def dots_per_meter_x=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setDotsPerMeterX_int(self, unnamed_arg_0)
    end
    def dots_per_meter_y=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setDotsPerMeterY_int(self, unnamed_arg_0)
    end
    def offset() : Point
      Point.new(unwrap: Binding.bg_QImage_offset_(self))
    end
    def offset=(unnamed_arg_0 : Point) : Void
      Binding.bg_QImage_setOffset_const_QPoint_R(self, unnamed_arg_0)
    end
    def text_keys() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QImage_textKeys_(self))
    end
    def text(key : String = "") : String
      Qt::Converter::QString.unwrap(Binding.bg_QImage_text_const_QString_R(self, Qt::Converter::QString.wrap(key)))
    end
    def set_text(key : String, value : String) : Void
      Binding.bg_QImage_setText_const_QString_R_const_QString_R(self, Qt::Converter::QString.wrap(key), Qt::Converter::QString.wrap(value))
    end
    def pixel_format() : PixelFormat
      PixelFormat.new(unwrap: Binding.bg_QImage_pixelFormat_(self))
    end
    def self.to_pixel_format(format : Image::Format) : PixelFormat
      PixelFormat.new(unwrap: Binding.bg_QImage_toPixelFormat_STATIC_QImage__Format(format))
    end
    def self.to_image_format(format : PixelFormat) : Image::Format
      Binding.bg_QImage_toImageFormat_STATIC_QPixelFormat(format)
    end
    protected def metric(metric : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QImage_metric_QPaintDevice__PaintDeviceMetric(self, metric)
    end
    protected def mirrored_helper(horizontal : Bool, vertical : Bool) : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_helper_bool_bool(self, horizontal, vertical))
    end
    protected def rgb_swapped_helper() : Image
      Image.new(unwrap: Binding.bg_QImage_rgbSwapped_helper_(self))
    end
    protected def mirrored_inplace(horizontal : Bool, vertical : Bool) : Void
      Binding.bg_QImage_mirrored_inplace_bool_bool(self, horizontal, vertical)
    end
    protected def rgb_swapped_inplace() : Void
      Binding.bg_QImage_rgbSwapped_inplace_(self)
    end
    protected def convert_to_format_helper(format : Image::Format, flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(self, format, flags))
    end
    protected def convert_to_format_inplace(format : Image::Format, flags : ImageConversionFlags) : Bool
      Binding.bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(self, format, flags)
    end
    protected def smooth_scaled(w : Int32, h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_smoothScaled_int_int(self, w, h))
    end
  end
  class Pixmap < PaintDevice
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QPixmap_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(data : QPlatformPixmap*)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_QPlatformPixmap_X(data)
    @unwrap = unwrap
    
    end
    def initialize(w : Int32, h : Int32)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_int_int(w, h)
    @unwrap = unwrap
    
    end
    def initialize(unnamed_arg_0 : QSize*)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_QSize_R(unnamed_arg_0)
    @unwrap = unwrap
    
    end
    def initialize(file_name : String, format : UInt8*? = nil)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X(Qt::Converter::QString.wrap(file_name), format)
    @unwrap = unwrap
    
    end
    def initialize(file_name : String, format : UInt8*?, flags : ImageConversionFlags)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(Qt::Converter::QString.wrap(file_name), format, flags)
    @unwrap = unwrap
    
    end
    def initialize(xpm : UInt8**)
      unwrap = Binding.bg_QPixmap_CONSTRUCT_const_char_Xconst_X(xpm)
    @unwrap = unwrap
    
    end
    def swap(other : Pixmap) : Void
      Binding.bg_QPixmap_swap_QPixmap_R(self, other)
    end
    def null?() : Bool
      Binding.bg_QPixmap_isNull_(self)
    end
    def dev_type() : Int32
      Binding.bg_QPixmap_devType_(self)
    end
    def width() : Int32
      Binding.bg_QPixmap_width_(self)
    end
    def height() : Int32
      Binding.bg_QPixmap_height_(self)
    end
    def size() : QSize*
      Binding.bg_QPixmap_size_(self)
    end
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QPixmap_rect_(self))
    end
    def depth() : Int32
      Binding.bg_QPixmap_depth_(self)
    end
    def self.default_depth() : Int32
      Binding.bg_QPixmap_defaultDepth_STATIC_()
    end
    def fill() : Void
      Binding.bg_QPixmap_fill_(self)
    end
    def fill(fill_color : Color) : Void
      Binding.bg_QPixmap_fill_const_QColor_R(self, fill_color)
    end
    def fill(device : PaintDevice, ofs : Point) : Void
      Binding.bg_QPixmap_fill_const_QPaintDevice_X_const_QPoint_R(self, device, ofs)
    end
    def fill(device : PaintDevice, xofs : Int32, yofs : Int32) : Void
      Binding.bg_QPixmap_fill_const_QPaintDevice_X_int_int(self, device, xofs, yofs)
    end
    def mask() : QBitmap*
      Binding.bg_QPixmap_mask_(self)
    end
    def mask=(unnamed_arg_0 : QBitmap*) : Void
      Binding.bg_QPixmap_setMask_const_QBitmap_R(self, unnamed_arg_0)
    end
    def device_pixel_ratio() : Float64
      Binding.bg_QPixmap_devicePixelRatio_(self)
    end
    def device_pixel_ratio=(scale_factor : Float64) : Void
      Binding.bg_QPixmap_setDevicePixelRatio_qreal(self, scale_factor)
    end
    def has_alpha?() : Bool
      Binding.bg_QPixmap_hasAlpha_(self)
    end
    def has_alpha_channel?() : Bool
      Binding.bg_QPixmap_hasAlphaChannel_(self)
    end
    def create_heuristic_mask(clip_tight : Bool = true) : QBitmap*
      Binding.bg_QPixmap_createHeuristicMask_bool(self, clip_tight)
    end
    def create_mask_from_color(mask_color : Color, mode : MaskMode = MaskMode::MaskInColor) : QBitmap*
      Binding.bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(self, mask_color, mode)
    end
    def self.grab_widget(widget : Object, rect : Rect) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X_const_QRect_R(widget, rect))
    end
    def self.grab_widget(widget : Object, x : Int32 = 0, y : Int32 = 0, w : Int32 = -1, h : Int32 = -1) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_grabWidget_STATIC_QObject_X_int_int_int_int(widget, x, y, w, h))
    end
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(self, w, h, aspect_mode, mode))
    end
    def scaled(s : QSize*, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(self, s, aspect_mode, mode))
    end
    def scaled_to_width(w : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(self, w, mode))
    end
    def scaled_to_height(h : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(self, h, mode))
    end
    def transformed(unnamed_arg_0 : QMatrix*, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_transformed_const_QMatrix_R_Qt__TransformationMode(self, unnamed_arg_0, mode))
    end
    def self.true_matrix(m : QMatrix*, w : Int32, h : Int32) : QMatrix*
      Binding.bg_QPixmap_trueMatrix_STATIC_const_QMatrix_R_int_int(m, w, h)
    end
    def transformed(unnamed_arg_0 : QTransform*, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_transformed_const_QTransform_R_Qt__TransformationMode(self, unnamed_arg_0, mode))
    end
    def self.true_matrix(m : QTransform*, w : Int32, h : Int32) : QTransform*
      Binding.bg_QPixmap_trueMatrix_STATIC_const_QTransform_R_int_int(m, w, h)
    end
    def to_image() : Image
      Image.new(unwrap: Binding.bg_QPixmap_toImage_(self))
    end
    def self.from_image(image : Image) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImage_STATIC_const_QImage_R(image))
    end
    def self.from_image(image : Image, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image, flags))
    end
    def self.from_image_reader(image_reader : QImageReader*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageReader_STATIC_QImageReader_X(image_reader))
    end
    def self.from_image_reader(image_reader : QImageReader*, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(image_reader, flags))
    end
    def load(file_name : String, format : UInt8*? = nil) : Bool
      Binding.bg_QPixmap_load_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    def load(file_name : String, format : UInt8*?, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(self, Qt::Converter::QString.wrap(file_name), format, flags)
    end
    def load_from_data(buf : UInt8*, len : UInt32, format : UInt8*? = nil) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(self, buf, len, format)
    end
    def load_from_data(buf : UInt8*, len : UInt32, format : UInt8*?, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(self, buf, len, format, flags)
    end
    def load_from_data(data : QByteArray*, format : UInt8*? = nil) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(self, data, format)
    end
    def load_from_data(data : QByteArray*, format : UInt8*?, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(self, data, format, flags)
    end
    def save(file_name : String, format : UInt8*? = nil, quality : Int32 = -1) : Bool
      Binding.bg_QPixmap_save_const_QString_R_const_char_X_int(self, Qt::Converter::QString.wrap(file_name), format, quality)
    end
    def save(device : IODevice, format : UInt8*? = nil, quality : Int32 = -1) : Bool
      Binding.bg_QPixmap_save_QIODevice_X_const_char_X_int(self, device, format, quality)
    end
    def convert_from_image(img : Image) : Bool
      Binding.bg_QPixmap_convertFromImage_const_QImage_R(self, img)
    end
    def convert_from_image(img : Image, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(self, img, flags)
    end
    def copy(x : Int32, y : Int32, width : Int32, height : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_int_int_int_int(self, x, y, width, height))
    end
    def copy() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_(self))
    end
    def copy(rect : Rect) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_const_QRect_R(self, rect))
    end
    def scroll(dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32, exposed : QRegion*? = nil) : Void
      Binding.bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(self, dx, dy, x, y, width, height, exposed)
    end
    def scroll(dx : Int32, dy : Int32, rect : Rect, exposed : QRegion*? = nil) : Void
      Binding.bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(self, dx, dy, rect, exposed)
    end
    def cache_key() : Int64
      Binding.bg_QPixmap_cacheKey_(self)
    end
    def detached?() : Bool
      Binding.bg_QPixmap_isDetached_(self)
    end
    def detach() : Void
      Binding.bg_QPixmap_detach_(self)
    end
    def q_bitmap?() : Bool
      Binding.bg_QPixmap_isQBitmap_(self)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QPixmap_paintEngine_(self)
    end
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    protected def self.from_image_in_place(image : Image) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageInPlace_STATIC_QImage_R(image))
    end
    protected def self.from_image_in_place(image : Image, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(image, flags))
    end
    def handle() : QPlatformPixmap*
      Binding.bg_QPixmap_handle_(self)
    end
  end
  class Icon 
    enum Mode : UInt32
      Normal = 0
      Disabled = 1
      Active = 2
      Selected = 3
    end
    enum State : UInt32
      On = 0
      Off = 1
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QIcon_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(pixmap : Pixmap)
      unwrap = Binding.bg_QIcon_CONSTRUCT_const_QPixmap_R(pixmap)
    @unwrap = unwrap
    
    end
    def initialize(file_name : String)
      unwrap = Binding.bg_QIcon_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file_name))
    @unwrap = unwrap
    
    end
    def initialize(engine : QIconEngine*)
      unwrap = Binding.bg_QIcon_CONSTRUCT_QIconEngine_X(engine)
    @unwrap = unwrap
    
    end
    def swap(other : Icon) : Void
      Binding.bg_QIcon_swap_QIcon_R(self, other)
    end
    def pixmap(size : QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_const_QSize_R_QIcon__Mode_QIcon__State(self, size, mode, state))
    end
    def pixmap(w : Int32, h : Int32, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_int_int_QIcon__Mode_QIcon__State(self, w, h, mode, state))
    end
    def pixmap(extent : Int32, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_int_QIcon__Mode_QIcon__State(self, extent, mode, state))
    end
    def pixmap(window : QWindow*, size : QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(self, window, size, mode, state))
    end
    def actual_size(size : QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : QSize*
      Binding.bg_QIcon_actualSize_const_QSize_R_QIcon__Mode_QIcon__State(self, size, mode, state)
    end
    def actual_size(window : QWindow*, size : QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : QSize*
      Binding.bg_QIcon_actualSize_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(self, window, size, mode, state)
    end
    def name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QIcon_name_(self))
    end
    def paint(painter : Painter, rect : Rect) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R(self, painter, rect)
    end
    def paint(painter : Painter, rect : Rect, alignment : Alignment) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment(self, painter, rect, alignment)
    end
    def paint(painter : Painter, rect : Rect, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode(self, painter, rect, alignment, mode)
    end
    def paint(painter : Painter, rect : Rect, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode_QIcon__State(self, painter, rect, alignment, mode, state)
    end
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int(self, painter, x, y, w, h)
    end
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment(self, painter, x, y, w, h, alignment)
    end
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode(self, painter, x, y, w, h, alignment, mode)
    end
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode_QIcon__State(self, painter, x, y, w, h, alignment, mode, state)
    end
    def null?() : Bool
      Binding.bg_QIcon_isNull_(self)
    end
    def detached?() : Bool
      Binding.bg_QIcon_isDetached_(self)
    end
    def detach() : Void
      Binding.bg_QIcon_detach_(self)
    end
    def cache_key() : Int64
      Binding.bg_QIcon_cacheKey_(self)
    end
    def add_pixmap(pixmap : Pixmap, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_addPixmap_const_QPixmap_R_QIcon__Mode_QIcon__State(self, pixmap, mode, state)
    end
    def add_file(file_name : String) : Void
      Binding.bg_QIcon_addFile_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    def add_file(file_name : String, size : QSize*) : Void
      Binding.bg_QIcon_addFile_const_QString_R_const_QSize_R(self, Qt::Converter::QString.wrap(file_name), size)
    end
    def add_file(file_name : String, size : QSize*, mode : Icon::Mode = Icon::Mode::Normal) : Void
      Binding.bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode(self, Qt::Converter::QString.wrap(file_name), size, mode)
    end
    def add_file(file_name : String, size : QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode_QIcon__State(self, Qt::Converter::QString.wrap(file_name), size, mode, state)
    end
    def available_sizes(mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Enumerable(QSize)
      QList_QSize.new(unwrap: Binding.bg_QIcon_availableSizes_QIcon__Mode_QIcon__State(self, mode, state))
    end
    def is_mask=(is_mask : Bool) : Void
      Binding.bg_QIcon_setIsMask_bool(self, is_mask)
    end
    def mask?() : Bool
      Binding.bg_QIcon_isMask_(self)
    end
    def self.from_theme(name : String) : Icon
      Icon.new(unwrap: Binding.bg_QIcon_fromTheme_STATIC_const_QString_R(Qt::Converter::QString.wrap(name)))
    end
    def self.from_theme(name : String, fallback : Icon) : Icon
      Icon.new(unwrap: Binding.bg_QIcon_fromTheme_STATIC_const_QString_R_const_QIcon_R(Qt::Converter::QString.wrap(name), fallback))
    end
    def self.has_theme_icon(name : String) : Bool
      Binding.bg_QIcon_hasThemeIcon_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    def self.theme_search_paths() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QIcon_themeSearchPaths_STATIC_())
    end
    def self.theme_search_paths=(searchpath : Enumerable(String)) : Void
      Binding.bg_QIcon_setThemeSearchPaths_STATIC_const_QStringList_R(BindgenHelper.wrap_container(QList_QString, searchpath).to_unsafe)
    end
    def self.theme_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QIcon_themeName_STATIC_())
    end
    def self.theme_name=(path : String) : Void
      Binding.bg_QIcon_setThemeName_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
  end
  class EventLoop < Object
    @[Flags]
    enum ProcessEventsFlags : UInt32
      AllEvents = 0
      ExcludeUserInputEvents = 1
      ExcludeSocketNotifiers = 2
      WaitForMoreEvents = 4
      X11ExcludeTimers = 8
      EventLoopExec = 32
      DialogExec = 64
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QEventLoop_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QEventLoop_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QEventLoop_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(EventLoop)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQEventLoop.new(
      bg_QEventLoop_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QEventLoop_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QEventLoop_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QEventLoop_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def process_events() : Bool
      Binding.bg_QEventLoop_processEvents_(self)
    end
    def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
      Binding.bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(self, flags)
    end
    def process_events(flags : EventLoop::ProcessEventsFlags, maximum_time : Int32) : Void
      Binding.bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(self, flags, maximum_time)
    end
    def exec() : Int32
      Binding.bg_QEventLoop_exec_(self)
    end
    def exec(flags : EventLoop::ProcessEventsFlags) : Int32
      Binding.bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(self, flags)
    end
    def exit(return_code : Int32 = 0) : Void
      Binding.bg_QEventLoop_exit_int(self, return_code)
    end
    def running?() : Bool
      Binding.bg_QEventLoop_isRunning_(self)
    end
    def wake_up() : Void
      Binding.bg_QEventLoop_wakeUp_(self)
    end
    def event(event : Event) : Bool
      Binding.bg_QEventLoop_event_QEvent_X(self, event)
    end
    def quit() : Void
      Binding.bg_QEventLoop_quit_(self)
    end
  end
  class TabBar < Widget
    enum ButtonPosition : UInt32
      LeftSide = 0
      RightSide = 1
    end
    enum SelectionBehavior : UInt32
      SelectLeftTab = 0
      SelectRightTab = 1
      SelectPreviousTab = 2
    end
    enum Shape : UInt32
      RoundedNorth = 0
      RoundedSouth = 1
      RoundedWest = 2
      RoundedEast = 3
      TriangularNorth = 4
      TriangularSouth = 5
      TriangularWest = 6
      TriangularEast = 7
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QTabBar_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTabBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QTabBar_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TabBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint tab_size_hint minimum_tab_size_hint tab_inserted tab_removed tab_layout_change event resize_event show_event hide_event paint_event mouse_press_event mouse_move_event mouse_release_event wheel_event key_press_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTabBar.new(
      bg_QTabBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTabBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTabBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QTabBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QTabBar_tabSizeHint_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_size_hint") %} ->(index : Int32){ self.tab_size_hint(index) } {% else %} nil {% end %}),
      bg_QTabBar_minimumTabSizeHint_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_tab_size_hint") %} ->(index : Int32){ self.minimum_tab_size_hint(index) } {% else %} nil {% end %}),
      bg_QTabBar_tabInserted_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_inserted") %} ->(index : Int32){ self.tab_inserted(index) } {% else %} nil {% end %}),
      bg_QTabBar_tabRemoved_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_removed") %} ->(index : Int32){ self.tab_removed(index) } {% else %} nil {% end %}),
      bg_QTabBar_tabLayoutChange_: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_layout_change") %} ->(){ self.tab_layout_change() } {% else %} nil {% end %}),
      bg_QTabBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(unnamed_arg_0 : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QTabBar_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTabBar_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def shape() : TabBar::Shape
      Binding.bg_QTabBar_shape_(self)
    end
    def shape=(shape : TabBar::Shape) : Void
      Binding.bg_QTabBar_setShape_QTabBar__Shape(self, shape)
    end
    def add_tab(text : String) : Int32
      Binding.bg_QTabBar_addTab_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def add_tab(icon : Icon, text : String) : Int32
      Binding.bg_QTabBar_addTab_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text))
    end
    def insert_tab(index : Int32, text : String) : Int32
      Binding.bg_QTabBar_insertTab_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    def insert_tab(index : Int32, icon : Icon, text : String) : Int32
      Binding.bg_QTabBar_insertTab_int_const_QIcon_R_const_QString_R(self, index, icon, Qt::Converter::QString.wrap(text))
    end
    def remove_tab(index : Int32) : Void
      Binding.bg_QTabBar_removeTab_int(self, index)
    end
    def move_tab(from : Int32, to : Int32) : Void
      Binding.bg_QTabBar_moveTab_int_int(self, from, to)
    end
    def is_tab_enabled(index : Int32) : Bool
      Binding.bg_QTabBar_isTabEnabled_int(self, index)
    end
    def set_tab_enabled(index : Int32, unnamed_arg_1 : Bool) : Void
      Binding.bg_QTabBar_setTabEnabled_int_bool(self, index, unnamed_arg_1)
    end
    def tab_text(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tabText_int(self, index))
    end
    def set_tab_text(index : Int32, text : String) : Void
      Binding.bg_QTabBar_setTabText_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    def tab_text_color(index : Int32) : Color
      Color.new(unwrap: Binding.bg_QTabBar_tabTextColor_int(self, index))
    end
    def set_tab_text_color(index : Int32, color : Color) : Void
      Binding.bg_QTabBar_setTabTextColor_int_const_QColor_R(self, index, color)
    end
    def tab_icon(index : Int32) : Icon
      Icon.new(unwrap: Binding.bg_QTabBar_tabIcon_int(self, index))
    end
    def set_tab_icon(index : Int32, icon : Icon) : Void
      Binding.bg_QTabBar_setTabIcon_int_const_QIcon_R(self, index, icon)
    end
    def elide_mode() : TextElideMode
      Binding.bg_QTabBar_elideMode_(self)
    end
    def elide_mode=(unnamed_arg_0 : TextElideMode) : Void
      Binding.bg_QTabBar_setElideMode_Qt__TextElideMode(self, unnamed_arg_0)
    end
    def set_tab_tool_tip(index : Int32, tip : String) : Void
      Binding.bg_QTabBar_setTabToolTip_int_const_QString_R(self, index, Qt::Converter::QString.wrap(tip))
    end
    def tab_tool_tip(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tabToolTip_int(self, index))
    end
    def set_tab_whats_this(index : Int32, text : String) : Void
      Binding.bg_QTabBar_setTabWhatsThis_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    def tab_whats_this(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tabWhatsThis_int(self, index))
    end
    def tab_rect(index : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QTabBar_tabRect_int(self, index))
    end
    def tab_at(pos : Point) : Int32
      Binding.bg_QTabBar_tabAt_const_QPoint_R(self, pos)
    end
    def current_index() : Int32
      Binding.bg_QTabBar_currentIndex_(self)
    end
    def count() : Int32
      Binding.bg_QTabBar_count_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QTabBar_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QTabBar_minimumSizeHint_(self)
    end
    def draw_base=(draw_the_base : Bool) : Void
      Binding.bg_QTabBar_setDrawBase_bool(self, draw_the_base)
    end
    def draw_base() : Bool
      Binding.bg_QTabBar_drawBase_(self)
    end
    def icon_size() : QSize*
      Binding.bg_QTabBar_iconSize_(self)
    end
    def icon_size=(size : QSize*) : Void
      Binding.bg_QTabBar_setIconSize_const_QSize_R(self, size)
    end
    def uses_scroll_buttons() : Bool
      Binding.bg_QTabBar_usesScrollButtons_(self)
    end
    def uses_scroll_buttons=(use_buttons : Bool) : Void
      Binding.bg_QTabBar_setUsesScrollButtons_bool(self, use_buttons)
    end
    def tabs_closable() : Bool
      Binding.bg_QTabBar_tabsClosable_(self)
    end
    def tabs_closable=(closable : Bool) : Void
      Binding.bg_QTabBar_setTabsClosable_bool(self, closable)
    end
    def set_tab_button(index : Int32, position : TabBar::ButtonPosition, widget : Widget) : Void
      Binding.bg_QTabBar_setTabButton_int_QTabBar__ButtonPosition_QWidget_X(self, index, position, widget)
    end
    def tab_button(index : Int32, position : TabBar::ButtonPosition) : Widget
      Widget.new(unwrap: Binding.bg_QTabBar_tabButton_int_QTabBar__ButtonPosition(self, index, position))
    end
    def selection_behavior_on_remove() : TabBar::SelectionBehavior
      Binding.bg_QTabBar_selectionBehaviorOnRemove_(self)
    end
    def selection_behavior_on_remove=(behavior : TabBar::SelectionBehavior) : Void
      Binding.bg_QTabBar_setSelectionBehaviorOnRemove_QTabBar__SelectionBehavior(self, behavior)
    end
    def expanding() : Bool
      Binding.bg_QTabBar_expanding_(self)
    end
    def expanding=(enabled : Bool) : Void
      Binding.bg_QTabBar_setExpanding_bool(self, enabled)
    end
    def movable?() : Bool
      Binding.bg_QTabBar_isMovable_(self)
    end
    def movable=(movable : Bool) : Void
      Binding.bg_QTabBar_setMovable_bool(self, movable)
    end
    def document_mode() : Bool
      Binding.bg_QTabBar_documentMode_(self)
    end
    def document_mode=(set : Bool) : Void
      Binding.bg_QTabBar_setDocumentMode_bool(self, set)
    end
    def auto_hide() : Bool
      Binding.bg_QTabBar_autoHide_(self)
    end
    def auto_hide=(hide : Bool) : Void
      Binding.bg_QTabBar_setAutoHide_bool(self, hide)
    end
    def change_current_on_drag() : Bool
      Binding.bg_QTabBar_changeCurrentOnDrag_(self)
    end
    def change_current_on_drag=(change : Bool) : Void
      Binding.bg_QTabBar_setChangeCurrentOnDrag_bool(self, change)
    end
    def accessible_tab_name(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_accessibleTabName_int(self, index))
    end
    def set_accessible_tab_name(index : Int32, name : String) : Void
      Binding.bg_QTabBar_setAccessibleTabName_int_const_QString_R(self, index, Qt::Converter::QString.wrap(name))
    end
    def current_index=(index : Int32) : Void
      Binding.bg_QTabBar_setCurrentIndex_int(self, index)
    end
    def current_changed(index : Int32) : Void
      Binding.bg_QTabBar_currentChanged_int(self, index)
    end
    def on_current_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_currentChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_close_requested(index : Int32) : Void
      Binding.bg_QTabBar_tabCloseRequested_int(self, index)
    end
    def on_tab_close_requested(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_tabCloseRequested_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_moved(from : Int32, to : Int32) : Void
      Binding.bg_QTabBar_tabMoved_int_int(self, from, to)
    end
    def on_tab_moved(&block : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_tabMoved_CONNECT_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(->(from : Int32, to : Int32){ block.call(from, to) })))
    end
    def tab_bar_clicked(index : Int32) : Void
      Binding.bg_QTabBar_tabBarClicked_int(self, index)
    end
    def on_tab_bar_clicked(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_tabBarClicked_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_bar_double_clicked(index : Int32) : Void
      Binding.bg_QTabBar_tabBarDoubleClicked_int(self, index)
    end
    def on_tab_bar_double_clicked(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_tabBarDoubleClicked_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    protected def tab_size_hint(index : Int32) : QSize*
      Binding.bg_QTabBar_tabSizeHint_int(self, index)
    end
    protected def minimum_tab_size_hint(index : Int32) : QSize*
      Binding.bg_QTabBar_minimumTabSizeHint_int(self, index)
    end
    protected def tab_inserted(index : Int32) : Void
      Binding.bg_QTabBar_tabInserted_int(self, index)
    end
    protected def tab_removed(index : Int32) : Void
      Binding.bg_QTabBar_tabRemoved_int(self, index)
    end
    protected def tab_layout_change() : Void
      Binding.bg_QTabBar_tabLayoutChange_(self)
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QTabBar_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QTabBar_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QTabBar_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def hide_event(unnamed_arg_0 : HideEvent) : Void
      Binding.bg_QTabBar_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QTabBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QTabBar_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QTabBar_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QTabBar_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def wheel_event(event : QWheelEvent*) : Void
      Binding.bg_QTabBar_wheelEvent_QWheelEvent_X(self, event)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QTabBar_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QTabBar_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QTabBar_timerEvent_QTimerEvent_X(self, event)
    end
    protected def init_style_option(option : QStyleOptionTab*, tab_index : Int32) : Void
      Binding.bg_QTabBar_initStyleOption_QStyleOptionTab_X_int(self, option, tab_index)
    end
  end
  class TabWidget < Widget
    enum TabShape : UInt32
      Rounded = 0
      Triangular = 1
    end
    enum TabPosition : UInt32
      North = 0
      South = 1
      West = 2
      East = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QTabWidget_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTabWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QTabWidget_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TabWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width has_height_for_width? tab_inserted tab_removed show_event resize_event key_press_event paint_event change_event event dev_type visible= paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTabWidget.new(
      bg_QTabWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTabWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTabWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(width : Int32){ self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QTabWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QTabWidget_tabInserted_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_inserted") %} ->(index : Int32){ self.tab_inserted(index) } {% else %} nil {% end %}),
      bg_QTabWidget_tabRemoved_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_removed") %} ->(index : Int32){ self.tab_removed(index) } {% else %} nil {% end %}),
      bg_QTabWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTabWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def add_tab(widget : Widget, unnamed_arg_1 : String) : Int32
      Binding.bg_QTabWidget_addTab_QWidget_X_const_QString_R(self, widget, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    def add_tab(widget : Widget, icon : Icon, label : String) : Int32
      Binding.bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(self, widget, icon, Qt::Converter::QString.wrap(label))
    end
    def insert_tab(index : Int32, widget : Widget, unnamed_arg_2 : String) : Int32
      Binding.bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(self, index, widget, Qt::Converter::QString.wrap(unnamed_arg_2))
    end
    def insert_tab(index : Int32, widget : Widget, icon : Icon, label : String) : Int32
      Binding.bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(self, index, widget, icon, Qt::Converter::QString.wrap(label))
    end
    def remove_tab(index : Int32) : Void
      Binding.bg_QTabWidget_removeTab_int(self, index)
    end
    def is_tab_enabled(index : Int32) : Bool
      Binding.bg_QTabWidget_isTabEnabled_int(self, index)
    end
    def set_tab_enabled(index : Int32, unnamed_arg_1 : Bool) : Void
      Binding.bg_QTabWidget_setTabEnabled_int_bool(self, index, unnamed_arg_1)
    end
    def tab_text(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabText_int(self, index))
    end
    def set_tab_text(index : Int32, unnamed_arg_1 : String) : Void
      Binding.bg_QTabWidget_setTabText_int_const_QString_R(self, index, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    def tab_icon(index : Int32) : Icon
      Icon.new(unwrap: Binding.bg_QTabWidget_tabIcon_int(self, index))
    end
    def set_tab_icon(index : Int32, icon : Icon) : Void
      Binding.bg_QTabWidget_setTabIcon_int_const_QIcon_R(self, index, icon)
    end
    def set_tab_tool_tip(index : Int32, tip : String) : Void
      Binding.bg_QTabWidget_setTabToolTip_int_const_QString_R(self, index, Qt::Converter::QString.wrap(tip))
    end
    def tab_tool_tip(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabToolTip_int(self, index))
    end
    def set_tab_whats_this(index : Int32, text : String) : Void
      Binding.bg_QTabWidget_setTabWhatsThis_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    def tab_whats_this(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabWhatsThis_int(self, index))
    end
    def current_index() : Int32
      Binding.bg_QTabWidget_currentIndex_(self)
    end
    def current_widget() : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_currentWidget_(self))
    end
    def widget(index : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_widget_int(self, index))
    end
    def index_of(widget : Widget) : Int32
      Binding.bg_QTabWidget_indexOf_QWidget_X(self, widget)
    end
    def count() : Int32
      Binding.bg_QTabWidget_count_(self)
    end
    def tab_position() : TabWidget::TabPosition
      Binding.bg_QTabWidget_tabPosition_(self)
    end
    def tab_position=(unnamed_arg_0 : TabWidget::TabPosition) : Void
      Binding.bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(self, unnamed_arg_0)
    end
    def tabs_closable() : Bool
      Binding.bg_QTabWidget_tabsClosable_(self)
    end
    def tabs_closable=(closeable : Bool) : Void
      Binding.bg_QTabWidget_setTabsClosable_bool(self, closeable)
    end
    def movable?() : Bool
      Binding.bg_QTabWidget_isMovable_(self)
    end
    def movable=(movable : Bool) : Void
      Binding.bg_QTabWidget_setMovable_bool(self, movable)
    end
    def tab_shape() : TabWidget::TabShape
      Binding.bg_QTabWidget_tabShape_(self)
    end
    def tab_shape=(s : TabWidget::TabShape) : Void
      Binding.bg_QTabWidget_setTabShape_QTabWidget__TabShape(self, s)
    end
    def size_hint() : QSize*
      Binding.bg_QTabWidget_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QTabWidget_minimumSizeHint_(self)
    end
    def height_for_width(width : Int32) : Int32
      Binding.bg_QTabWidget_heightForWidth_int(self, width)
    end
    def has_height_for_width?() : Bool
      Binding.bg_QTabWidget_hasHeightForWidth_(self)
    end
    def set_corner_widget(w : Widget, corner : Corner = Corner::TopRightCorner) : Void
      Binding.bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(self, w, corner)
    end
    def corner_widget(corner : Corner = Corner::TopRightCorner) : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_cornerWidget_Qt__Corner(self, corner))
    end
    def elide_mode() : TextElideMode
      Binding.bg_QTabWidget_elideMode_(self)
    end
    def elide_mode=(unnamed_arg_0 : TextElideMode) : Void
      Binding.bg_QTabWidget_setElideMode_Qt__TextElideMode(self, unnamed_arg_0)
    end
    def icon_size() : QSize*
      Binding.bg_QTabWidget_iconSize_(self)
    end
    def icon_size=(size : QSize*) : Void
      Binding.bg_QTabWidget_setIconSize_const_QSize_R(self, size)
    end
    def uses_scroll_buttons() : Bool
      Binding.bg_QTabWidget_usesScrollButtons_(self)
    end
    def uses_scroll_buttons=(use_buttons : Bool) : Void
      Binding.bg_QTabWidget_setUsesScrollButtons_bool(self, use_buttons)
    end
    def document_mode() : Bool
      Binding.bg_QTabWidget_documentMode_(self)
    end
    def document_mode=(set : Bool) : Void
      Binding.bg_QTabWidget_setDocumentMode_bool(self, set)
    end
    def tab_bar_auto_hide() : Bool
      Binding.bg_QTabWidget_tabBarAutoHide_(self)
    end
    def tab_bar_auto_hide=(enabled : Bool) : Void
      Binding.bg_QTabWidget_setTabBarAutoHide_bool(self, enabled)
    end
    def clear() : Void
      Binding.bg_QTabWidget_clear_(self)
    end
    def tab_bar() : TabBar
      TabBar.new(unwrap: Binding.bg_QTabWidget_tabBar_(self))
    end
    def current_index=(index : Int32) : Void
      Binding.bg_QTabWidget_setCurrentIndex_int(self, index)
    end
    def current_widget=(widget : Widget) : Void
      Binding.bg_QTabWidget_setCurrentWidget_QWidget_X(self, widget)
    end
    def current_changed(index : Int32) : Void
      Binding.bg_QTabWidget_currentChanged_int(self, index)
    end
    def on_current_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_currentChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_close_requested(index : Int32) : Void
      Binding.bg_QTabWidget_tabCloseRequested_int(self, index)
    end
    def on_tab_close_requested(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_tabCloseRequested_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_bar_clicked(index : Int32) : Void
      Binding.bg_QTabWidget_tabBarClicked_int(self, index)
    end
    def on_tab_bar_clicked(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_tabBarClicked_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    def tab_bar_double_clicked(index : Int32) : Void
      Binding.bg_QTabWidget_tabBarDoubleClicked_int(self, index)
    end
    def on_tab_bar_double_clicked(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_tabBarDoubleClicked_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(index : Int32){ block.call(index) })))
    end
    protected def tab_inserted(index : Int32) : Void
      Binding.bg_QTabWidget_tabInserted_int(self, index)
    end
    protected def tab_removed(index : Int32) : Void
      Binding.bg_QTabWidget_tabRemoved_int(self, index)
    end
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QTabWidget_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QTabWidget_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QTabWidget_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QTabWidget_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def tab_bar=(unnamed_arg_0 : TabBar) : Void
      Binding.bg_QTabWidget_setTabBar_QTabBar_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QTabWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QTabWidget_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionTabWidgetFrame*) : Void
      Binding.bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(self, option)
    end
  end
  abstract class LayoutItem 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QLayoutItem_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LayoutItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions geometry= geometry empty? has_height_for_width? height_for_width minimum_height_for_width invalidate widget layout spacer_item control_types ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayoutItem.new(
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayoutItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
      bg_QLayoutItem_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_QLayoutItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(alignment : Alignment)
      unwrap = Binding.bg_QLayoutItem_CONSTRUCT_Qt__Alignment(alignment)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LayoutItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions geometry= geometry empty? has_height_for_width? height_for_width minimum_height_for_width invalidate widget layout spacer_item control_types ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayoutItem.new(
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayoutItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
      bg_QLayoutItem_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_QLayoutItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    abstract def size_hint() : QSize*
    abstract def minimum_size() : QSize*
    abstract def maximum_size() : QSize*
    abstract def expanding_directions() : Orientations
    abstract def geometry=(unnamed_arg_0 : Rect) : Void
    abstract def geometry() : Rect
    abstract def empty?() : Bool
    def has_height_for_width?() : Bool
      Binding.bg_QLayoutItem_hasHeightForWidth_(self)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_heightForWidth_int(self, unnamed_arg_0)
    end
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    def invalidate() : Void
      Binding.bg_QLayoutItem_invalidate_(self)
    end
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayoutItem_widget_(self))
    end
    def layout() : Layout
      Layout.new(unwrap: Binding.bg_QLayoutItem_layout_(self))
    end
    def spacer_item() : QSpacerItem*
      Binding.bg_QLayoutItem_spacerItem_(self)
    end
    def alignment() : Alignment
      Binding.bg_QLayoutItem_alignment_(self)
    end
    def alignment=(a : Alignment) : Void
      Binding.bg_QLayoutItem_setAlignment_Qt__Alignment(self, a)
    end
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayoutItem_controlTypes_(self)
    end
  end
  class LayoutItemImpl < LayoutItem
    macro inherited
      {{ raise "You can't sub-class LayoutItemImpl, inherit from LayoutItem instead" }}
    end
    def size_hint() : QSize*
      Binding.bg_QLayoutItem_sizeHint_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QLayoutItem_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QLayoutItem_maximumSize_(self)
    end
    def expanding_directions() : Orientations
      Binding.bg_QLayoutItem_expandingDirections_(self)
    end
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QLayoutItem_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayoutItem_geometry_(self))
    end
    def empty?() : Bool
      Binding.bg_QLayoutItem_isEmpty_(self)
    end
  end
  abstract class Layout < Object
    enum SizeConstraint : UInt32
      SetDefaultConstraint = 0
      SetNoConstraint = 1
      SetMinimumSize = 2
      SetFixedSize = 3
      SetMaximumSize = 4
      SetMinAndMaxSize = 5
    end
    def initialize(@unwrap : Void*)
    end
    def as_layout_item() : LayoutItemImpl
      LayoutItemImpl.new(unwrap: Binding.bg_QLayout_AS_QLayoutItem_(self))
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QLayout_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.item_at(index)).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.take_at(index)).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize()
      unwrap = Binding.bg_QLayout_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.item_at(index)).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.take_at(index)).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def margin() : Int32
      Binding.bg_QLayout_margin_(self)
    end
    def spacing() : Int32
      Binding.bg_QLayout_spacing_(self)
    end
    def margin=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLayout_setMargin_int(self, unnamed_arg_0)
    end
    def spacing=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLayout_setSpacing_int(self, unnamed_arg_0)
    end
    def set_contents_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QLayout_setContentsMargins_int_int_int_int(self, left, top, right, bottom)
    end
    def contents_margins=(margins : QMargins*) : Void
      Binding.bg_QLayout_setContentsMargins_const_QMargins_R(self, margins)
    end
    def get_contents_margins(left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
      Binding.bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(self, left, top, right, bottom)
    end
    def contents_margins() : QMargins*
      Binding.bg_QLayout_contentsMargins_(self)
    end
    def contents_rect() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_contentsRect_(self))
    end
    def set_alignment(w : Widget, alignment : Alignment) : Bool
      Binding.bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(self, w, alignment)
    end
    def set_alignment(l : Layout, alignment : Alignment) : Bool
      Binding.bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(self, l, alignment)
    end
    def size_constraint=(unnamed_arg_0 : Layout::SizeConstraint) : Void
      Binding.bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(self, unnamed_arg_0)
    end
    def size_constraint() : Layout::SizeConstraint
      Binding.bg_QLayout_sizeConstraint_(self)
    end
    def menu_bar=(w : Widget) : Void
      Binding.bg_QLayout_setMenuBar_QWidget_X(self, w)
    end
    def menu_bar() : Widget
      Widget.new(unwrap: Binding.bg_QLayout_menuBar_(self))
    end
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayout_parentWidget_(self))
    end
    def invalidate() : Void
      Binding.bg_QLayout_invalidate_(self)
    end
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_geometry_(self))
    end
    def activate() : Bool
      Binding.bg_QLayout_activate_(self)
    end
    def update() : Void
      Binding.bg_QLayout_update_(self)
    end
    def add_widget(w : Widget) : Void
      Binding.bg_QLayout_addWidget_QWidget_X(self, w)
    end
    abstract def add_item(unnamed_arg_0 : LayoutItem) : Void
    def remove_widget(w : Widget) : Void
      Binding.bg_QLayout_removeWidget_QWidget_X(self, w)
    end
    def remove_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QLayout_removeItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    def expanding_directions() : Orientations
      Binding.bg_QLayout_expandingDirections_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QLayout_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QLayout_maximumSize_(self)
    end
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    abstract def item_at(index : Int32) : LayoutItem
    abstract def take_at(index : Int32) : LayoutItem
    def index_of(unnamed_arg_0 : Widget) : Int32
      Binding.bg_QLayout_indexOf_QWidget_X(self, unnamed_arg_0)
    end
    abstract def count() : Int32
    def empty?() : Bool
      Binding.bg_QLayout_isEmpty_(self)
    end
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayout_controlTypes_(self)
    end
    def replace_widget(from : Widget, to : Widget) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_replaceWidget_QWidget_X_QWidget_X(self, from, to))
    end
    def replace_widget(from : Widget, to : Widget, options : FindChildOptions) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(self, from, to, options))
    end
    def total_height_for_width(w : Int32) : Int32
      Binding.bg_QLayout_totalHeightForWidth_int(self, w)
    end
    def total_minimum_size() : QSize*
      Binding.bg_QLayout_totalMinimumSize_(self)
    end
    def total_maximum_size() : QSize*
      Binding.bg_QLayout_totalMaximumSize_(self)
    end
    def total_size_hint() : QSize*
      Binding.bg_QLayout_totalSizeHint_(self)
    end
    def layout() : Layout
      Layout.new(unwrap: Binding.bg_QLayout_layout_(self))
    end
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLayout_setEnabled_bool(self, unnamed_arg_0)
    end
    def enabled?() : Bool
      Binding.bg_QLayout_isEnabled_(self)
    end
    def self.closest_acceptable_size(w : Widget, s : QSize*) : QSize*
      Binding.bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(w, s)
    end
    protected def widget_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QLayout_widgetEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def child_event(e : QChildEvent*) : Void
      Binding.bg_QLayout_childEvent_QChildEvent_X(self, e)
    end
    protected def add_child_layout(l : Layout) : Void
      Binding.bg_QLayout_addChildLayout_QLayout_X(self, l)
    end
    protected def add_child_widget(w : Widget) : Void
      Binding.bg_QLayout_addChildWidget_QWidget_X(self, w)
    end
    protected def adopt_layout(layout : Layout) : Bool
      Binding.bg_QLayout_adoptLayout_QLayout_X(self, layout)
    end
    protected def alignment_rect(unnamed_arg_0 : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QLayout_alignmentRect_const_QRect_R(self, unnamed_arg_0))
    end
    protected def initialize(d : QLayoutPrivate*, unnamed_arg_1 : Layout, unnamed_arg_2 : Widget)
      unwrap = Binding.bg_QLayout_CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(d, unnamed_arg_1, unnamed_arg_2)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.item_at(index)).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(index : Int32){ LayoutItem.new(unwrap: self.take_at(index)).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class LayoutImpl < Layout
    macro inherited
      {{ raise "You can't sub-class LayoutImpl, inherit from Layout instead" }}
    end
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    def item_at(index : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_itemAt_int(self, index))
    end
    def take_at(index : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QLayout_takeAt_int(self, index))
    end
    def count() : Int32
      Binding.bg_QLayout_count_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QLayoutItem_sizeHint_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QLayoutItem_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QLayoutItem_maximumSize_(self)
    end
    def expanding_directions() : Orientations
      Binding.bg_QLayoutItem_expandingDirections_(self)
    end
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QLayoutItem_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayoutItem_geometry_(self))
    end
    def empty?() : Bool
      Binding.bg_QLayoutItem_isEmpty_(self)
    end
  end
  class BoxLayout < Layout
    enum Direction : UInt32
      LeftToRight = 0
      RightToLeft = 1
      TopToBottom = 2
      BottomToTop = 3
      Down = 2
      Up = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QBoxLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(unnamed_arg_0 : BoxLayout::Direction, parent : Widget? = nil)
      unwrap = Binding.bg_QBoxLayout_CONSTRUCT_QBoxLayout__Direction_QWidget_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(BoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQBoxLayout.new(
      bg_QBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def direction() : BoxLayout::Direction
      Binding.bg_QBoxLayout_direction_(self)
    end
    def direction=(unnamed_arg_0 : BoxLayout::Direction) : Void
      Binding.bg_QBoxLayout_setDirection_QBoxLayout__Direction(self, unnamed_arg_0)
    end
    def add_spacing(size : Int32) : Void
      Binding.bg_QBoxLayout_addSpacing_int(self, size)
    end
    def add_stretch(stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_addStretch_int(self, stretch)
    end
    def add_spacer_item(spacer_item : QSpacerItem*) : Void
      Binding.bg_QBoxLayout_addSpacerItem_QSpacerItem_X(self, spacer_item)
    end
    def add_widget(unnamed_arg_0 : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_addWidget_QWidget_X_int(self, unnamed_arg_0, stretch)
    end
    def add_widget(unnamed_arg_0 : Widget, stretch : Int32, alignment : Alignment) : Void
      Binding.bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(self, unnamed_arg_0, stretch, alignment)
    end
    def add_layout(layout : Layout, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_addLayout_QLayout_X_int(self, layout, stretch)
    end
    def add_strut(unnamed_arg_0 : Int32) : Void
      Binding.bg_QBoxLayout_addStrut_int(self, unnamed_arg_0)
    end
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QBoxLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    def insert_spacing(index : Int32, size : Int32) : Void
      Binding.bg_QBoxLayout_insertSpacing_int_int(self, index, size)
    end
    def insert_stretch(index : Int32, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_insertStretch_int_int(self, index, stretch)
    end
    def insert_spacer_item(index : Int32, spacer_item : QSpacerItem*) : Void
      Binding.bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(self, index, spacer_item)
    end
    def insert_widget(index : Int32, widget : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_insertWidget_int_QWidget_X_int(self, index, widget, stretch)
    end
    def insert_widget(index : Int32, widget : Widget, stretch : Int32, alignment : Alignment) : Void
      Binding.bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(self, index, widget, stretch, alignment)
    end
    def insert_layout(index : Int32, layout : Layout, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_insertLayout_int_QLayout_X_int(self, index, layout, stretch)
    end
    def insert_item(index : Int32, unnamed_arg_1 : LayoutItem) : Void
      Binding.bg_QBoxLayout_insertItem_int_QLayoutItem_X(self, index, unnamed_arg_1)
    end
    def spacing() : Int32
      Binding.bg_QBoxLayout_spacing_(self)
    end
    def spacing=(spacing : Int32) : Void
      Binding.bg_QBoxLayout_setSpacing_int(self, spacing)
    end
    def set_stretch_factor(w : Widget, stretch : Int32) : Bool
      Binding.bg_QBoxLayout_setStretchFactor_QWidget_X_int(self, w, stretch)
    end
    def set_stretch_factor(l : Layout, stretch : Int32) : Bool
      Binding.bg_QBoxLayout_setStretchFactor_QLayout_X_int(self, l, stretch)
    end
    def set_stretch(index : Int32, stretch : Int32) : Void
      Binding.bg_QBoxLayout_setStretch_int_int(self, index, stretch)
    end
    def stretch(index : Int32) : Int32
      Binding.bg_QBoxLayout_stretch_int(self, index)
    end
    def size_hint() : QSize*
      Binding.bg_QBoxLayout_sizeHint_(self)
    end
    def minimum_size() : QSize*
      Binding.bg_QBoxLayout_minimumSize_(self)
    end
    def maximum_size() : QSize*
      Binding.bg_QBoxLayout_maximumSize_(self)
    end
    def has_height_for_width?() : Bool
      Binding.bg_QBoxLayout_hasHeightForWidth_(self)
    end
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_heightForWidth_int(self, unnamed_arg_0)
    end
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    def expanding_directions() : Orientations
      Binding.bg_QBoxLayout_expandingDirections_(self)
    end
    def invalidate() : Void
      Binding.bg_QBoxLayout_invalidate_(self)
    end
    def item_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QBoxLayout_itemAt_int(self, unnamed_arg_0))
    end
    def take_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItem.new(unwrap: Binding.bg_QBoxLayout_takeAt_int(self, unnamed_arg_0))
    end
    def count() : Int32
      Binding.bg_QBoxLayout_count_(self)
    end
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QBoxLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
  end
  class HBoxLayout < BoxLayout
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QHBoxLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QHBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QHBoxLayout_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(HBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQHBoxLayout.new(
      bg_QHBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QHBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QHBoxLayout_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(HBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQHBoxLayout.new(
      bg_QHBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QHBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class VBoxLayout < BoxLayout
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QVBoxLayout_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QVBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QVBoxLayout_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(VBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQVBoxLayout.new(
      bg_QVBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QVBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget)
      unwrap = Binding.bg_QVBoxLayout_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(VBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQVBoxLayout.new(
      bg_QVBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} ->(unnamed_arg_0 : Binding::QLayoutItem*){ self.add_item(LayoutItem.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} ->(){ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} ->(){ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} ->(unnamed_arg_0 : Int32){ self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} ->(){ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} ->(){ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.item_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} ->(unnamed_arg_0 : Int32){ LayoutItem.new(unwrap: self.take_at(unnamed_arg_0)).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} ->(){ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(unnamed_arg_0 : Binding::QRect*){ self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} ->(){ Rect.new(unwrap: self.geometry()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} ->(unnamed_arg_0 : Binding::QWidget*){ self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} ->(){ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} ->(){ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} ->(){ Layout.new(unwrap: self.layout()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(e : QChildEvent*){ self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} ->(){ Widget.new(unwrap: self.widget()).to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} ->(){ self.spacer_item() } {% else %} nil {% end %}),
    )
    Binding.bg_QVBoxLayout_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class Palette 
    enum ColorGroup : UInt32
      Active = 0
      Disabled = 1
      Inactive = 2
      NColorGroups = 3
      Current = 4
      All = 5
      Normal = 0
    end
    enum ColorRole : UInt32
      WindowText = 0
      Button = 1
      Light = 2
      Midlight = 3
      Dark = 4
      Mid = 5
      Text = 6
      BrightText = 7
      ButtonText = 8
      Base = 9
      Window = 10
      Shadow = 11
      Highlight = 12
      HighlightedText = 13
      Link = 14
      LinkVisited = 15
      AlternateBase = 16
      NoRole = 17
      ToolTipBase = 18
      ToolTipText = 19
      NColorRoles = 20
      Foreground = 0
      Background = 10
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QPalette_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(button : Color)
      unwrap = Binding.bg_QPalette_CONSTRUCT_const_QColor_R(button)
    @unwrap = unwrap
    
    end
    def initialize(button : GlobalColor)
      unwrap = Binding.bg_QPalette_CONSTRUCT_Qt__GlobalColor(button)
    @unwrap = unwrap
    
    end
    def initialize(button : Color, window : Color)
      unwrap = Binding.bg_QPalette_CONSTRUCT_const_QColor_R_const_QColor_R(button, window)
    @unwrap = unwrap
    
    end
    def initialize(window_text : Brush, button : Brush, light : Brush, dark : Brush, mid : Brush, text : Brush, bright_text : Brush, base : Brush, window : Brush)
      unwrap = Binding.bg_QPalette_CONSTRUCT_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(window_text, button, light, dark, mid, text, bright_text, base, window)
    @unwrap = unwrap
    
    end
    def initialize(window_text : Color, window : Color, light : Color, dark : Color, mid : Color, text : Color, base : Color)
      unwrap = Binding.bg_QPalette_CONSTRUCT_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R(window_text, window, light, dark, mid, text, base)
    @unwrap = unwrap
    
    end
    def swap(other : Palette) : Void
      Binding.bg_QPalette_swap_QPalette_R(self, other)
    end
    def current_color_group() : Palette::ColorGroup
      Binding.bg_QPalette_currentColorGroup_(self)
    end
    def current_color_group=(cg : Palette::ColorGroup) : Void
      Binding.bg_QPalette_setCurrentColorGroup_QPalette__ColorGroup(self, cg)
    end
    def color(cg : Palette::ColorGroup, cr : Palette::ColorRole) : Color
      Color.new(unwrap: Binding.bg_QPalette_color_QPalette__ColorGroup_QPalette__ColorRole(self, cg, cr))
    end
    def brush(cg : Palette::ColorGroup, cr : Palette::ColorRole) : Brush
      Brush.new(unwrap: Binding.bg_QPalette_brush_QPalette__ColorGroup_QPalette__ColorRole(self, cg, cr))
    end
    def set_color(cg : Palette::ColorGroup, cr : Palette::ColorRole, color : Color) : Void
      Binding.bg_QPalette_setColor_QPalette__ColorGroup_QPalette__ColorRole_const_QColor_R(self, cg, cr, color)
    end
    def set_color(cr : Palette::ColorRole, color : Color) : Void
      Binding.bg_QPalette_setColor_QPalette__ColorRole_const_QColor_R(self, cr, color)
    end
    def set_brush(cr : Palette::ColorRole, brush : Brush) : Void
      Binding.bg_QPalette_setBrush_QPalette__ColorRole_const_QBrush_R(self, cr, brush)
    end
    def is_brush_set(cg : Palette::ColorGroup, cr : Palette::ColorRole) : Bool
      Binding.bg_QPalette_isBrushSet_QPalette__ColorGroup_QPalette__ColorRole(self, cg, cr)
    end
    def set_brush(cg : Palette::ColorGroup, cr : Palette::ColorRole, brush : Brush) : Void
      Binding.bg_QPalette_setBrush_QPalette__ColorGroup_QPalette__ColorRole_const_QBrush_R(self, cg, cr, brush)
    end
    def set_color_group(cr : Palette::ColorGroup, window_text : Brush, button : Brush, light : Brush, dark : Brush, mid : Brush, text : Brush, bright_text : Brush, base : Brush, window : Brush) : Void
      Binding.bg_QPalette_setColorGroup_QPalette__ColorGroup_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(self, cr, window_text, button, light, dark, mid, text, bright_text, base, window)
    end
    def is_equal(cr1 : Palette::ColorGroup, cr2 : Palette::ColorGroup) : Bool
      Binding.bg_QPalette_isEqual_QPalette__ColorGroup_QPalette__ColorGroup(self, cr1, cr2)
    end
    def color(cr : Palette::ColorRole) : Color
      Color.new(unwrap: Binding.bg_QPalette_color_QPalette__ColorRole(self, cr))
    end
    def brush(cr : Palette::ColorRole) : Brush
      Brush.new(unwrap: Binding.bg_QPalette_brush_QPalette__ColorRole(self, cr))
    end
    def foreground() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_foreground_(self))
    end
    def window_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_windowText_(self))
    end
    def button() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_button_(self))
    end
    def light() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_light_(self))
    end
    def dark() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_dark_(self))
    end
    def mid() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_mid_(self))
    end
    def text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_text_(self))
    end
    def base() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_base_(self))
    end
    def alternate_base() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_alternateBase_(self))
    end
    def tool_tip_base() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_toolTipBase_(self))
    end
    def tool_tip_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_toolTipText_(self))
    end
    def background() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_background_(self))
    end
    def window() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_window_(self))
    end
    def midlight() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_midlight_(self))
    end
    def bright_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_brightText_(self))
    end
    def button_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_buttonText_(self))
    end
    def shadow() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_shadow_(self))
    end
    def highlight() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_highlight_(self))
    end
    def highlighted_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_highlightedText_(self))
    end
    def link() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_link_(self))
    end
    def link_visited() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_linkVisited_(self))
    end
    def is_copy_of(p : Palette) : Bool
      Binding.bg_QPalette_isCopyOf_const_QPalette_R(self, p)
    end
    def cache_key() : Int64
      Binding.bg_QPalette_cacheKey_(self)
    end
    def resolve(unnamed_arg_0 : Palette) : Palette
      Palette.new(unwrap: Binding.bg_QPalette_resolve_const_QPalette_R(self, unnamed_arg_0))
    end
    def resolve() : UInt32
      Binding.bg_QPalette_resolve_(self)
    end
    def resolve(mask : UInt32) : Void
      Binding.bg_QPalette_resolve_uint(self, mask)
    end
  end
  class Rect 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QRect_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(topleft : Point, bottomright : Point)
      unwrap = Binding.bg_QRect_CONSTRUCT_const_QPoint_R_const_QPoint_R(topleft, bottomright)
    @unwrap = unwrap
    
    end
    def initialize(topleft : Point, size : QSize*)
      unwrap = Binding.bg_QRect_CONSTRUCT_const_QPoint_R_const_QSize_R(topleft, size)
    @unwrap = unwrap
    
    end
    def initialize(left : Int32, top : Int32, width : Int32, height : Int32)
      unwrap = Binding.bg_QRect_CONSTRUCT_int_int_int_int(left, top, width, height)
    @unwrap = unwrap
    
    end
    def null?() : Bool
      Binding.bg_QRect_isNull_(self)
    end
    def empty?() : Bool
      Binding.bg_QRect_isEmpty_(self)
    end
    def valid?() : Bool
      Binding.bg_QRect_isValid_(self)
    end
    def left() : Int32
      Binding.bg_QRect_left_(self)
    end
    def top() : Int32
      Binding.bg_QRect_top_(self)
    end
    def right() : Int32
      Binding.bg_QRect_right_(self)
    end
    def bottom() : Int32
      Binding.bg_QRect_bottom_(self)
    end
    def normalized() : Rect
      Rect.new(unwrap: Binding.bg_QRect_normalized_(self))
    end
    def x() : Int32
      Binding.bg_QRect_x_(self)
    end
    def y() : Int32
      Binding.bg_QRect_y_(self)
    end
    def left=(pos : Int32) : Void
      Binding.bg_QRect_setLeft_int(self, pos)
    end
    def top=(pos : Int32) : Void
      Binding.bg_QRect_setTop_int(self, pos)
    end
    def right=(pos : Int32) : Void
      Binding.bg_QRect_setRight_int(self, pos)
    end
    def bottom=(pos : Int32) : Void
      Binding.bg_QRect_setBottom_int(self, pos)
    end
    def x=(x : Int32) : Void
      Binding.bg_QRect_setX_int(self, x)
    end
    def y=(y : Int32) : Void
      Binding.bg_QRect_setY_int(self, y)
    end
    def top_left=(p : Point) : Void
      Binding.bg_QRect_setTopLeft_const_QPoint_R(self, p)
    end
    def bottom_right=(p : Point) : Void
      Binding.bg_QRect_setBottomRight_const_QPoint_R(self, p)
    end
    def top_right=(p : Point) : Void
      Binding.bg_QRect_setTopRight_const_QPoint_R(self, p)
    end
    def bottom_left=(p : Point) : Void
      Binding.bg_QRect_setBottomLeft_const_QPoint_R(self, p)
    end
    def top_left() : Point
      Point.new(unwrap: Binding.bg_QRect_topLeft_(self))
    end
    def bottom_right() : Point
      Point.new(unwrap: Binding.bg_QRect_bottomRight_(self))
    end
    def top_right() : Point
      Point.new(unwrap: Binding.bg_QRect_topRight_(self))
    end
    def bottom_left() : Point
      Point.new(unwrap: Binding.bg_QRect_bottomLeft_(self))
    end
    def center() : Point
      Point.new(unwrap: Binding.bg_QRect_center_(self))
    end
    def move_left(pos : Int32) : Void
      Binding.bg_QRect_moveLeft_int(self, pos)
    end
    def move_top(pos : Int32) : Void
      Binding.bg_QRect_moveTop_int(self, pos)
    end
    def move_right(pos : Int32) : Void
      Binding.bg_QRect_moveRight_int(self, pos)
    end
    def move_bottom(pos : Int32) : Void
      Binding.bg_QRect_moveBottom_int(self, pos)
    end
    def move_top_left(p : Point) : Void
      Binding.bg_QRect_moveTopLeft_const_QPoint_R(self, p)
    end
    def move_bottom_right(p : Point) : Void
      Binding.bg_QRect_moveBottomRight_const_QPoint_R(self, p)
    end
    def move_top_right(p : Point) : Void
      Binding.bg_QRect_moveTopRight_const_QPoint_R(self, p)
    end
    def move_bottom_left(p : Point) : Void
      Binding.bg_QRect_moveBottomLeft_const_QPoint_R(self, p)
    end
    def move_center(p : Point) : Void
      Binding.bg_QRect_moveCenter_const_QPoint_R(self, p)
    end
    def translate(dx : Int32, dy : Int32) : Void
      Binding.bg_QRect_translate_int_int(self, dx, dy)
    end
    def translate(p : Point) : Void
      Binding.bg_QRect_translate_const_QPoint_R(self, p)
    end
    def translated(dx : Int32, dy : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QRect_translated_int_int(self, dx, dy))
    end
    def translated(p : Point) : Rect
      Rect.new(unwrap: Binding.bg_QRect_translated_const_QPoint_R(self, p))
    end
    def transposed() : Rect
      Rect.new(unwrap: Binding.bg_QRect_transposed_(self))
    end
    def move_to(x : Int32, t : Int32) : Void
      Binding.bg_QRect_moveTo_int_int(self, x, t)
    end
    def move_to(p : Point) : Void
      Binding.bg_QRect_moveTo_const_QPoint_R(self, p)
    end
    def set_rect(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QRect_setRect_int_int_int_int(self, x, y, w, h)
    end
    def get_rect(x : Int32*, y : Int32*, w : Int32*, h : Int32*) : Void
      Binding.bg_QRect_getRect_int_X_int_X_int_X_int_X(self, x, y, w, h)
    end
    def set_coords(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QRect_setCoords_int_int_int_int(self, x1, y1, x2, y2)
    end
    def get_coords(x1 : Int32*, y1 : Int32*, x2 : Int32*, y2 : Int32*) : Void
      Binding.bg_QRect_getCoords_int_X_int_X_int_X_int_X(self, x1, y1, x2, y2)
    end
    def adjust(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QRect_adjust_int_int_int_int(self, x1, y1, x2, y2)
    end
    def adjusted(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QRect_adjusted_int_int_int_int(self, x1, y1, x2, y2))
    end
    def size() : QSize*
      Binding.bg_QRect_size_(self)
    end
    def width() : Int32
      Binding.bg_QRect_width_(self)
    end
    def height() : Int32
      Binding.bg_QRect_height_(self)
    end
    def width=(w : Int32) : Void
      Binding.bg_QRect_setWidth_int(self, w)
    end
    def height=(h : Int32) : Void
      Binding.bg_QRect_setHeight_int(self, h)
    end
    def size=(s : QSize*) : Void
      Binding.bg_QRect_setSize_const_QSize_R(self, s)
    end
    def contains(r : Rect, proper : Bool = false) : Bool
      Binding.bg_QRect_contains_const_QRect_R_bool(self, r, proper)
    end
    def contains(p : Point, proper : Bool = false) : Bool
      Binding.bg_QRect_contains_const_QPoint_R_bool(self, p, proper)
    end
    def contains(x : Int32, y : Int32) : Bool
      Binding.bg_QRect_contains_int_int(self, x, y)
    end
    def contains(x : Int32, y : Int32, proper : Bool) : Bool
      Binding.bg_QRect_contains_int_int_bool(self, x, y, proper)
    end
    def united(other : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect_united_const_QRect_R(self, other))
    end
    def intersected(other : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect_intersected_const_QRect_R(self, other))
    end
    def intersects(r : Rect) : Bool
      Binding.bg_QRect_intersects_const_QRect_R(self, r)
    end
    def margins_added(margins : QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect_marginsAdded_const_QMargins_R(self, margins))
    end
    def margins_removed(margins : QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect_marginsRemoved_const_QMargins_R(self, margins))
    end
  end
  class RectF 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QRectF_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(topleft : PointF, size : QSizeF*)
      unwrap = Binding.bg_QRectF_CONSTRUCT_const_QPointF_R_const_QSizeF_R(topleft, size)
    @unwrap = unwrap
    
    end
    def initialize(topleft : PointF, bottom_right : PointF)
      unwrap = Binding.bg_QRectF_CONSTRUCT_const_QPointF_R_const_QPointF_R(topleft, bottom_right)
    @unwrap = unwrap
    
    end
    def initialize(left : Float64, top : Float64, width : Float64, height : Float64)
      unwrap = Binding.bg_QRectF_CONSTRUCT_qreal_qreal_qreal_qreal(left, top, width, height)
    @unwrap = unwrap
    
    end
    def initialize(rect : Rect)
      unwrap = Binding.bg_QRectF_CONSTRUCT_const_QRect_R(rect)
    @unwrap = unwrap
    
    end
    def null?() : Bool
      Binding.bg_QRectF_isNull_(self)
    end
    def empty?() : Bool
      Binding.bg_QRectF_isEmpty_(self)
    end
    def valid?() : Bool
      Binding.bg_QRectF_isValid_(self)
    end
    def normalized() : RectF
      RectF.new(unwrap: Binding.bg_QRectF_normalized_(self))
    end
    def left() : Float64
      Binding.bg_QRectF_left_(self)
    end
    def top() : Float64
      Binding.bg_QRectF_top_(self)
    end
    def right() : Float64
      Binding.bg_QRectF_right_(self)
    end
    def bottom() : Float64
      Binding.bg_QRectF_bottom_(self)
    end
    def x() : Float64
      Binding.bg_QRectF_x_(self)
    end
    def y() : Float64
      Binding.bg_QRectF_y_(self)
    end
    def left=(pos : Float64) : Void
      Binding.bg_QRectF_setLeft_qreal(self, pos)
    end
    def top=(pos : Float64) : Void
      Binding.bg_QRectF_setTop_qreal(self, pos)
    end
    def right=(pos : Float64) : Void
      Binding.bg_QRectF_setRight_qreal(self, pos)
    end
    def bottom=(pos : Float64) : Void
      Binding.bg_QRectF_setBottom_qreal(self, pos)
    end
    def x=(pos : Float64) : Void
      Binding.bg_QRectF_setX_qreal(self, pos)
    end
    def y=(pos : Float64) : Void
      Binding.bg_QRectF_setY_qreal(self, pos)
    end
    def top_left() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_topLeft_(self))
    end
    def bottom_right() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_bottomRight_(self))
    end
    def top_right() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_topRight_(self))
    end
    def bottom_left() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_bottomLeft_(self))
    end
    def center() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_center_(self))
    end
    def top_left=(p : PointF) : Void
      Binding.bg_QRectF_setTopLeft_const_QPointF_R(self, p)
    end
    def bottom_right=(p : PointF) : Void
      Binding.bg_QRectF_setBottomRight_const_QPointF_R(self, p)
    end
    def top_right=(p : PointF) : Void
      Binding.bg_QRectF_setTopRight_const_QPointF_R(self, p)
    end
    def bottom_left=(p : PointF) : Void
      Binding.bg_QRectF_setBottomLeft_const_QPointF_R(self, p)
    end
    def move_left(pos : Float64) : Void
      Binding.bg_QRectF_moveLeft_qreal(self, pos)
    end
    def move_top(pos : Float64) : Void
      Binding.bg_QRectF_moveTop_qreal(self, pos)
    end
    def move_right(pos : Float64) : Void
      Binding.bg_QRectF_moveRight_qreal(self, pos)
    end
    def move_bottom(pos : Float64) : Void
      Binding.bg_QRectF_moveBottom_qreal(self, pos)
    end
    def move_top_left(p : PointF) : Void
      Binding.bg_QRectF_moveTopLeft_const_QPointF_R(self, p)
    end
    def move_bottom_right(p : PointF) : Void
      Binding.bg_QRectF_moveBottomRight_const_QPointF_R(self, p)
    end
    def move_top_right(p : PointF) : Void
      Binding.bg_QRectF_moveTopRight_const_QPointF_R(self, p)
    end
    def move_bottom_left(p : PointF) : Void
      Binding.bg_QRectF_moveBottomLeft_const_QPointF_R(self, p)
    end
    def move_center(p : PointF) : Void
      Binding.bg_QRectF_moveCenter_const_QPointF_R(self, p)
    end
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QRectF_translate_qreal_qreal(self, dx, dy)
    end
    def translate(p : PointF) : Void
      Binding.bg_QRectF_translate_const_QPointF_R(self, p)
    end
    def translated(dx : Float64, dy : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_translated_qreal_qreal(self, dx, dy))
    end
    def translated(p : PointF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_translated_const_QPointF_R(self, p))
    end
    def transposed() : RectF
      RectF.new(unwrap: Binding.bg_QRectF_transposed_(self))
    end
    def move_to(x : Float64, y : Float64) : Void
      Binding.bg_QRectF_moveTo_qreal_qreal(self, x, y)
    end
    def move_to(p : PointF) : Void
      Binding.bg_QRectF_moveTo_const_QPointF_R(self, p)
    end
    def set_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QRectF_setRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def get_rect(x : Float64*, y : Float64*, w : Float64*, h : Float64*) : Void
      Binding.bg_QRectF_getRect_qreal_X_qreal_X_qreal_X_qreal_X(self, x, y, w, h)
    end
    def set_coords(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
      Binding.bg_QRectF_setCoords_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    def get_coords(x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
      Binding.bg_QRectF_getCoords_qreal_X_qreal_X_qreal_X_qreal_X(self, x1, y1, x2, y2)
    end
    def adjust(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
      Binding.bg_QRectF_adjust_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    def adjusted(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_adjusted_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2))
    end
    def size() : QSizeF*
      Binding.bg_QRectF_size_(self)
    end
    def width() : Float64
      Binding.bg_QRectF_width_(self)
    end
    def height() : Float64
      Binding.bg_QRectF_height_(self)
    end
    def width=(w : Float64) : Void
      Binding.bg_QRectF_setWidth_qreal(self, w)
    end
    def height=(h : Float64) : Void
      Binding.bg_QRectF_setHeight_qreal(self, h)
    end
    def size=(s : QSizeF*) : Void
      Binding.bg_QRectF_setSize_const_QSizeF_R(self, s)
    end
    def contains(r : RectF) : Bool
      Binding.bg_QRectF_contains_const_QRectF_R(self, r)
    end
    def contains(p : PointF) : Bool
      Binding.bg_QRectF_contains_const_QPointF_R(self, p)
    end
    def contains(x : Float64, y : Float64) : Bool
      Binding.bg_QRectF_contains_qreal_qreal(self, x, y)
    end
    def united(other : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_united_const_QRectF_R(self, other))
    end
    def intersected(other : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_intersected_const_QRectF_R(self, other))
    end
    def intersects(r : RectF) : Bool
      Binding.bg_QRectF_intersects_const_QRectF_R(self, r)
    end
    def margins_added(margins : QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_marginsAdded_const_QMarginsF_R(self, margins))
    end
    def margins_removed(margins : QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_marginsRemoved_const_QMarginsF_R(self, margins))
    end
    def to_rect() : Rect
      Rect.new(unwrap: Binding.bg_QRectF_toRect_(self))
    end
    def to_aligned_rect() : Rect
      Rect.new(unwrap: Binding.bg_QRectF_toAlignedRect_(self))
    end
  end
  class KeySequence 
    enum StandardKey : UInt32
      UnknownKey = 0
      HelpContents = 1
      WhatsThis = 2
      Open = 3
      Close = 4
      Save = 5
      New = 6
      Delete = 7
      Cut = 8
      Copy = 9
      Paste = 10
      Undo = 11
      Redo = 12
      Back = 13
      Forward = 14
      Refresh = 15
      ZoomIn = 16
      ZoomOut = 17
      Print = 18
      AddTab = 19
      NextChild = 20
      PreviousChild = 21
      Find = 22
      FindNext = 23
      FindPrevious = 24
      Replace = 25
      SelectAll = 26
      Bold = 27
      Italic = 28
      Underline = 29
      MoveToNextChar = 30
      MoveToPreviousChar = 31
      MoveToNextWord = 32
      MoveToPreviousWord = 33
      MoveToNextLine = 34
      MoveToPreviousLine = 35
      MoveToNextPage = 36
      MoveToPreviousPage = 37
      MoveToStartOfLine = 38
      MoveToEndOfLine = 39
      MoveToStartOfBlock = 40
      MoveToEndOfBlock = 41
      MoveToStartOfDocument = 42
      MoveToEndOfDocument = 43
      SelectNextChar = 44
      SelectPreviousChar = 45
      SelectNextWord = 46
      SelectPreviousWord = 47
      SelectNextLine = 48
      SelectPreviousLine = 49
      SelectNextPage = 50
      SelectPreviousPage = 51
      SelectStartOfLine = 52
      SelectEndOfLine = 53
      SelectStartOfBlock = 54
      SelectEndOfBlock = 55
      SelectStartOfDocument = 56
      SelectEndOfDocument = 57
      DeleteStartOfWord = 58
      DeleteEndOfWord = 59
      DeleteEndOfLine = 60
      InsertParagraphSeparator = 61
      InsertLineSeparator = 62
      SaveAs = 63
      Preferences = 64
      Quit = 65
      FullScreen = 66
      Deselect = 67
      DeleteCompleteLine = 68
      Backspace = 69
      Cancel = 70
    end
    enum SequenceFormat : UInt32
      NativeText = 0
      PortableText = 1
    end
    enum SequenceMatch : UInt32
      NoMatch = 0
      PartialMatch = 1
      ExactMatch = 2
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(key : String, format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::NativeText)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(key), format)
    @unwrap = unwrap
    
    end
    def initialize(k1 : Int32, k2 : Int32 = 0, k3 : Int32 = 0, k4 : Int32 = 0)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_int_int_int_int(k1, k2, k3, k4)
    @unwrap = unwrap
    
    end
    def initialize(key : KeySequence::StandardKey)
      unwrap = Binding.bg_QKeySequence_CONSTRUCT_QKeySequence__StandardKey(key)
    @unwrap = unwrap
    
    end
    def count() : Int32
      Binding.bg_QKeySequence_count_(self)
    end
    def empty?() : Bool
      Binding.bg_QKeySequence_isEmpty_(self)
    end
    def to_string(format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : String
      Qt::Converter::QString.unwrap(Binding.bg_QKeySequence_toString_QKeySequence__SequenceFormat(self, format))
    end
    def self.from_string(str : String, format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(str), format))
    end
    def self.list_from_string(str : String, format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : Enumerable(KeySequence)
      QList_QKeySequence.new(unwrap: Binding.bg_QKeySequence_listFromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(str), format))
    end
    def self.list_to_string(list : Enumerable(KeySequence), format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : String
      Qt::Converter::QString.unwrap(Binding.bg_QKeySequence_listToString_STATIC_const_QList_QKeySequence__R_QKeySequence__SequenceFormat(BindgenHelper.wrap_container(QList_QKeySequence, list).to_unsafe, format))
    end
    def matches(seq : KeySequence) : KeySequence::SequenceMatch
      Binding.bg_QKeySequence_matches_const_QKeySequence_R(self, seq)
    end
    def self.mnemonic(text : String) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QKeySequence_mnemonic_STATIC_const_QString_R(Qt::Converter::QString.wrap(text)))
    end
    def self.key_bindings(key : KeySequence::StandardKey) : Enumerable(KeySequence)
      QList_QKeySequence.new(unwrap: Binding.bg_QKeySequence_keyBindings_STATIC_QKeySequence__StandardKey(key))
    end
    def swap(other : KeySequence) : Void
      Binding.bg_QKeySequence_swap_QKeySequence_R(self, other)
    end
    def detached?() : Bool
      Binding.bg_QKeySequence_isDetached_(self)
    end
  end
  class LineEdit < Widget
    enum ActionPosition : UInt32
      LeadingPosition = 0
      TrailingPosition = 1
    end
    enum EchoMode : UInt32
      Normal = 0
      NoEcho = 1
      Password = 2
      PasswordEchoOnEdit = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QLineEdit_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLineEdit_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QLineEdit_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLineEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(unnamed_arg_0 : String, parent : Widget? = nil)
      unwrap = Binding.bg_QLineEdit_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(unnamed_arg_0), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(unnamed_arg_0 : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(unnamed_arg_0 : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(unnamed_arg_0 : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(unnamed_arg_0 : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(unnamed_arg_0 : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QLineEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_text_(self))
    end
    def display_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_displayText_(self))
    end
    def placeholder_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_placeholderText_(self))
    end
    def placeholder_text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_setPlaceholderText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def max_length() : Int32
      Binding.bg_QLineEdit_maxLength_(self)
    end
    def max_length=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLineEdit_setMaxLength_int(self, unnamed_arg_0)
    end
    def frame=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setFrame_bool(self, unnamed_arg_0)
    end
    def has_frame?() : Bool
      Binding.bg_QLineEdit_hasFrame_(self)
    end
    def clear_button_enabled=(enable : Bool) : Void
      Binding.bg_QLineEdit_setClearButtonEnabled_bool(self, enable)
    end
    def clear_button_enabled?() : Bool
      Binding.bg_QLineEdit_isClearButtonEnabled_(self)
    end
    def echo_mode() : LineEdit::EchoMode
      Binding.bg_QLineEdit_echoMode_(self)
    end
    def echo_mode=(unnamed_arg_0 : LineEdit::EchoMode) : Void
      Binding.bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(self, unnamed_arg_0)
    end
    def read_only?() : Bool
      Binding.bg_QLineEdit_isReadOnly_(self)
    end
    def read_only=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setReadOnly_bool(self, unnamed_arg_0)
    end
    def validator=(unnamed_arg_0 : QValidator*) : Void
      Binding.bg_QLineEdit_setValidator_const_QValidator_X(self, unnamed_arg_0)
    end
    def validator() : QValidator*
      Binding.bg_QLineEdit_validator_(self)
    end
    def completer=(completer : QCompleter*) : Void
      Binding.bg_QLineEdit_setCompleter_QCompleter_X(self, completer)
    end
    def completer() : QCompleter*
      Binding.bg_QLineEdit_completer_(self)
    end
    def size_hint() : QSize*
      Binding.bg_QLineEdit_sizeHint_(self)
    end
    def minimum_size_hint() : QSize*
      Binding.bg_QLineEdit_minimumSizeHint_(self)
    end
    def cursor_position() : Int32
      Binding.bg_QLineEdit_cursorPosition_(self)
    end
    def cursor_position=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLineEdit_setCursorPosition_int(self, unnamed_arg_0)
    end
    def cursor_position_at(pos : Point) : Int32
      Binding.bg_QLineEdit_cursorPositionAt_const_QPoint_R(self, pos)
    end
    def alignment=(flag : Alignment) : Void
      Binding.bg_QLineEdit_setAlignment_Qt__Alignment(self, flag)
    end
    def alignment() : Alignment
      Binding.bg_QLineEdit_alignment_(self)
    end
    def cursor_forward(mark : Bool, steps : Int32 = 1) : Void
      Binding.bg_QLineEdit_cursorForward_bool_int(self, mark, steps)
    end
    def cursor_backward(mark : Bool, steps : Int32 = 1) : Void
      Binding.bg_QLineEdit_cursorBackward_bool_int(self, mark, steps)
    end
    def cursor_word_forward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorWordForward_bool(self, mark)
    end
    def cursor_word_backward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorWordBackward_bool(self, mark)
    end
    def backspace() : Void
      Binding.bg_QLineEdit_backspace_(self)
    end
    def del() : Void
      Binding.bg_QLineEdit_del_(self)
    end
    def home(mark : Bool) : Void
      Binding.bg_QLineEdit_home_bool(self, mark)
    end
    def end(mark : Bool) : Void
      Binding.bg_QLineEdit_end_bool(self, mark)
    end
    def modified?() : Bool
      Binding.bg_QLineEdit_isModified_(self)
    end
    def modified=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setModified_bool(self, unnamed_arg_0)
    end
    def set_selection(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLineEdit_setSelection_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    def has_selected_text?() : Bool
      Binding.bg_QLineEdit_hasSelectedText_(self)
    end
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_selectedText_(self))
    end
    def selection_start() : Int32
      Binding.bg_QLineEdit_selectionStart_(self)
    end
    def undo_available?() : Bool
      Binding.bg_QLineEdit_isUndoAvailable_(self)
    end
    def redo_available?() : Bool
      Binding.bg_QLineEdit_isRedoAvailable_(self)
    end
    def drag_enabled=(b : Bool) : Void
      Binding.bg_QLineEdit_setDragEnabled_bool(self, b)
    end
    def drag_enabled() : Bool
      Binding.bg_QLineEdit_dragEnabled_(self)
    end
    def cursor_move_style=(style : CursorMoveStyle) : Void
      Binding.bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(self, style)
    end
    def cursor_move_style() : CursorMoveStyle
      Binding.bg_QLineEdit_cursorMoveStyle_(self)
    end
    def input_mask() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_inputMask_(self))
    end
    def input_mask=(input_mask : String) : Void
      Binding.bg_QLineEdit_setInputMask_const_QString_R(self, Qt::Converter::QString.wrap(input_mask))
    end
    def has_acceptable_input?() : Bool
      Binding.bg_QLineEdit_hasAcceptableInput_(self)
    end
    def set_text_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QLineEdit_setTextMargins_int_int_int_int(self, left, top, right, bottom)
    end
    def text_margins=(margins : QMargins*) : Void
      Binding.bg_QLineEdit_setTextMargins_const_QMargins_R(self, margins)
    end
    def get_text_margins(left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
      Binding.bg_QLineEdit_getTextMargins_int_X_int_X_int_X_int_X(self, left, top, right, bottom)
    end
    def text_margins() : QMargins*
      Binding.bg_QLineEdit_textMargins_(self)
    end
    def add_action(action : Action, position : LineEdit::ActionPosition) : Void
      Binding.bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(self, action, position)
    end
    def add_action(icon : Icon, position : LineEdit::ActionPosition) : Action
      Action.new(unwrap: Binding.bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(self, icon, position))
    end
    def text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_setText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def clear() : Void
      Binding.bg_QLineEdit_clear_(self)
    end
    def select_all() : Void
      Binding.bg_QLineEdit_selectAll_(self)
    end
    def undo() : Void
      Binding.bg_QLineEdit_undo_(self)
    end
    def redo() : Void
      Binding.bg_QLineEdit_redo_(self)
    end
    def cut() : Void
      Binding.bg_QLineEdit_cut_(self)
    end
    def copy() : Void
      Binding.bg_QLineEdit_copy_(self)
    end
    def paste() : Void
      Binding.bg_QLineEdit_paste_(self)
    end
    def deselect() : Void
      Binding.bg_QLineEdit_deselect_(self)
    end
    def insert(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_insert_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def create_standard_context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QLineEdit_createStandardContextMenu_(self))
    end
    def text_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_textChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_text_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_textChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
    def text_edited(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_textEdited_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_text_edited(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_textEdited_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
    def cursor_position_changed(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLineEdit_cursorPositionChanged_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    def on_cursor_position_changed(&block : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_cursorPositionChanged_CONNECT_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32){ block.call(unnamed_arg_0, unnamed_arg_1) })))
    end
    def return_pressed() : Void
      Binding.bg_QLineEdit_returnPressed_(self)
    end
    def on_return_pressed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_returnPressed_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def editing_finished() : Void
      Binding.bg_QLineEdit_editingFinished_(self)
    end
    def on_editing_finished(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_editingFinished_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def selection_changed() : Void
      Binding.bg_QLineEdit_selectionChanged_(self)
    end
    def on_selection_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_selectionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    protected def key_press_event(unnamed_arg_0 : QKeyEvent*) : Void
      Binding.bg_QLineEdit_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QLineEdit_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QLineEdit_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QLineEdit_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
      Binding.bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(self, unnamed_arg_0)
    end
    protected def drag_move_event(e : DragMoveEvent) : Void
      Binding.bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(self, e)
    end
    protected def drag_leave_event(e : DragLeaveEvent) : Void
      Binding.bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(self, e)
    end
    protected def drop_event(unnamed_arg_0 : DropEvent) : Void
      Binding.bg_QLineEdit_dropEvent_QDropEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QLineEdit_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    protected def context_menu_event(unnamed_arg_0 : QContextMenuEvent*) : Void
      Binding.bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    protected def init_style_option(option : QStyleOptionFrame*) : Void
      Binding.bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(self, option)
    end
    def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QLineEdit_event_QEvent_X(self, unnamed_arg_0)
    end
    protected def cursor_rect() : Rect
      Rect.new(unwrap: Binding.bg_QLineEdit_cursorRect_(self))
    end
  end
  class TextEdit < AbstractScrollArea
    @[Flags]
    enum AutoFormatting : UInt32
      AutoNone = 0
      AutoBulletList = 1
      AutoAll = 4294967295
    end
    enum AutoFormattingFlag : UInt32
      AutoNone = 0
      AutoBulletList = 1
      AutoAll = 4294967295
    end
    enum LineWrapMode : UInt32
      NoWrap = 0
      WidgetWidth = 1
      FixedPixelWidth = 2
      FixedColumnWidth = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QTextEdit_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTextEdit_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ MimeData.new(unwrap: self.create_mime_data_from_selection()).to_unsafe } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : Binding::QMimeData*){ self.can_insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : Binding::QMimeData*){ self.insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : Binding::QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Widget? = nil)
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ MimeData.new(unwrap: self.create_mime_data_from_selection()).to_unsafe } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : Binding::QMimeData*){ self.can_insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : Binding::QMimeData*){ self.insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : Binding::QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def document=(document : TextDocument) : Void
      Binding.bg_QTextEdit_setDocument_QTextDocument_X(self, document)
    end
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextEdit_document_(self))
    end
    def placeholder_text=(placeholder_text : String) : Void
      Binding.bg_QTextEdit_setPlaceholderText_const_QString_R(self, Qt::Converter::QString.wrap(placeholder_text))
    end
    def placeholder_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_placeholderText_(self))
    end
    def text_cursor=(cursor : TextCursor) : Void
      Binding.bg_QTextEdit_setTextCursor_const_QTextCursor_R(self, cursor)
    end
    def text_cursor() : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextEdit_textCursor_(self))
    end
    def read_only?() : Bool
      Binding.bg_QTextEdit_isReadOnly_(self)
    end
    def read_only=(ro : Bool) : Void
      Binding.bg_QTextEdit_setReadOnly_bool(self, ro)
    end
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    def text_interaction_flags() : TextInteractionFlags
      Binding.bg_QTextEdit_textInteractionFlags_(self)
    end
    def font_point_size() : Float64
      Binding.bg_QTextEdit_fontPointSize_(self)
    end
    def font_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_fontFamily_(self))
    end
    def font_weight() : Int32
      Binding.bg_QTextEdit_fontWeight_(self)
    end
    def font_underline() : Bool
      Binding.bg_QTextEdit_fontUnderline_(self)
    end
    def font_italic() : Bool
      Binding.bg_QTextEdit_fontItalic_(self)
    end
    def text_color() : Color
      Color.new(unwrap: Binding.bg_QTextEdit_textColor_(self))
    end
    def text_background_color() : Color
      Color.new(unwrap: Binding.bg_QTextEdit_textBackgroundColor_(self))
    end
    def current_font() : Font
      Font.new(unwrap: Binding.bg_QTextEdit_currentFont_(self))
    end
    def alignment() : Alignment
      Binding.bg_QTextEdit_alignment_(self)
    end
    def merge_current_char_format(modifier : TextCharFormat) : Void
      Binding.bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    def current_char_format=(format : TextCharFormat) : Void
      Binding.bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(self, format)
    end
    def current_char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextEdit_currentCharFormat_(self))
    end
    def auto_formatting() : TextEdit::AutoFormatting
      Binding.bg_QTextEdit_autoFormatting_(self)
    end
    def auto_formatting=(features : TextEdit::AutoFormatting) : Void
      Binding.bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(self, features)
    end
    def tab_changes_focus() : Bool
      Binding.bg_QTextEdit_tabChangesFocus_(self)
    end
    def tab_changes_focus=(b : Bool) : Void
      Binding.bg_QTextEdit_setTabChangesFocus_bool(self, b)
    end
    def document_title=(title : String) : Void
      Binding.bg_QTextEdit_setDocumentTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def document_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_documentTitle_(self))
    end
    def undo_redo_enabled?() : Bool
      Binding.bg_QTextEdit_isUndoRedoEnabled_(self)
    end
    def undo_redo_enabled=(enable : Bool) : Void
      Binding.bg_QTextEdit_setUndoRedoEnabled_bool(self, enable)
    end
    def line_wrap_mode() : TextEdit::LineWrapMode
      Binding.bg_QTextEdit_lineWrapMode_(self)
    end
    def line_wrap_mode=(mode : TextEdit::LineWrapMode) : Void
      Binding.bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(self, mode)
    end
    def line_wrap_column_or_width() : Int32
      Binding.bg_QTextEdit_lineWrapColumnOrWidth_(self)
    end
    def line_wrap_column_or_width=(w : Int32) : Void
      Binding.bg_QTextEdit_setLineWrapColumnOrWidth_int(self, w)
    end
    def word_wrap_mode() : TextOption::WrapMode
      Binding.bg_QTextEdit_wordWrapMode_(self)
    end
    def word_wrap_mode=(policy : TextOption::WrapMode) : Void
      Binding.bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(self, policy)
    end
    def find(exp : String) : Bool
      Binding.bg_QTextEdit_find_const_QString_R(self, Qt::Converter::QString.wrap(exp))
    end
    def find(exp : String, options : TextDocument::FindFlags) : Bool
      Binding.bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(exp), options)
    end
    def find(exp : QRegExp*) : Bool
      Binding.bg_QTextEdit_find_const_QRegExp_R(self, exp)
    end
    def find(exp : QRegExp*, options : TextDocument::FindFlags) : Bool
      Binding.bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(self, exp, options)
    end
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toPlainText_(self))
    end
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toHtml_(self))
    end
    def ensure_cursor_visible() : Void
      Binding.bg_QTextEdit_ensureCursorVisible_(self)
    end
    def create_standard_context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QTextEdit_createStandardContextMenu_(self))
    end
    def create_standard_context_menu(position : Point) : Menu
      Menu.new(unwrap: Binding.bg_QTextEdit_createStandardContextMenu_const_QPoint_R(self, position))
    end
    def cursor_for_position(pos : Point) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextEdit_cursorForPosition_const_QPoint_R(self, pos))
    end
    def cursor_rect(cursor : TextCursor) : Rect
      Rect.new(unwrap: Binding.bg_QTextEdit_cursorRect_const_QTextCursor_R(self, cursor))
    end
    def cursor_rect() : Rect
      Rect.new(unwrap: Binding.bg_QTextEdit_cursorRect_(self))
    end
    def anchor_at(pos : Point) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_anchorAt_const_QPoint_R(self, pos))
    end
    def overwrite_mode() : Bool
      Binding.bg_QTextEdit_overwriteMode_(self)
    end
    def overwrite_mode=(overwrite : Bool) : Void
      Binding.bg_QTextEdit_setOverwriteMode_bool(self, overwrite)
    end
    def tab_stop_width() : Int32
      Binding.bg_QTextEdit_tabStopWidth_(self)
    end
    def tab_stop_width=(width : Int32) : Void
      Binding.bg_QTextEdit_setTabStopWidth_int(self, width)
    end
    def cursor_width() : Int32
      Binding.bg_QTextEdit_cursorWidth_(self)
    end
    def cursor_width=(width : Int32) : Void
      Binding.bg_QTextEdit_setCursorWidth_int(self, width)
    end
    def accept_rich_text() : Bool
      Binding.bg_QTextEdit_acceptRichText_(self)
    end
    def accept_rich_text=(accept : Bool) : Void
      Binding.bg_QTextEdit_setAcceptRichText_bool(self, accept)
    end
    def move_cursor(operation : TextCursor::MoveOperation, mode : TextCursor::MoveMode = TextCursor::MoveMode::MoveAnchor) : Void
      Binding.bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(self, operation, mode)
    end
    def can_paste() : Bool
      Binding.bg_QTextEdit_canPaste_(self)
    end
    def print(printer : QPagedPaintDevice*) : Void
      Binding.bg_QTextEdit_print_QPagedPaintDevice_X(self, printer)
    end
    def font_point_size=(s : Float64) : Void
      Binding.bg_QTextEdit_setFontPointSize_qreal(self, s)
    end
    def font_family=(font_family : String) : Void
      Binding.bg_QTextEdit_setFontFamily_const_QString_R(self, Qt::Converter::QString.wrap(font_family))
    end
    def font_weight=(w : Int32) : Void
      Binding.bg_QTextEdit_setFontWeight_int(self, w)
    end
    def font_underline=(b : Bool) : Void
      Binding.bg_QTextEdit_setFontUnderline_bool(self, b)
    end
    def font_italic=(b : Bool) : Void
      Binding.bg_QTextEdit_setFontItalic_bool(self, b)
    end
    def text_color=(c : Color) : Void
      Binding.bg_QTextEdit_setTextColor_const_QColor_R(self, c)
    end
    def text_background_color=(c : Color) : Void
      Binding.bg_QTextEdit_setTextBackgroundColor_const_QColor_R(self, c)
    end
    def current_font=(f : Font) : Void
      Binding.bg_QTextEdit_setCurrentFont_const_QFont_R(self, f)
    end
    def alignment=(a : Alignment) : Void
      Binding.bg_QTextEdit_setAlignment_Qt__Alignment(self, a)
    end
    def plain_text=(text : String) : Void
      Binding.bg_QTextEdit_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def html=(text : String) : Void
      Binding.bg_QTextEdit_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text=(text : String) : Void
      Binding.bg_QTextEdit_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def cut() : Void
      Binding.bg_QTextEdit_cut_(self)
    end
    def copy() : Void
      Binding.bg_QTextEdit_copy_(self)
    end
    def paste() : Void
      Binding.bg_QTextEdit_paste_(self)
    end
    def undo() : Void
      Binding.bg_QTextEdit_undo_(self)
    end
    def redo() : Void
      Binding.bg_QTextEdit_redo_(self)
    end
    def clear() : Void
      Binding.bg_QTextEdit_clear_(self)
    end
    def select_all() : Void
      Binding.bg_QTextEdit_selectAll_(self)
    end
    def insert_plain_text(text : String) : Void
      Binding.bg_QTextEdit_insertPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def insert_html(text : String) : Void
      Binding.bg_QTextEdit_insertHtml_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def append(text : String) : Void
      Binding.bg_QTextEdit_append_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def scroll_to_anchor(name : String) : Void
      Binding.bg_QTextEdit_scrollToAnchor_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def zoom_in(range : Int32 = 1) : Void
      Binding.bg_QTextEdit_zoomIn_int(self, range)
    end
    def zoom_out(range : Int32 = 1) : Void
      Binding.bg_QTextEdit_zoomOut_int(self, range)
    end
    def text_changed() : Void
      Binding.bg_QTextEdit_textChanged_(self)
    end
    def on_text_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_textChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def undo_available(b : Bool) : Void
      Binding.bg_QTextEdit_undoAvailable_bool(self, b)
    end
    def on_undo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_undoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(b : Bool){ block.call(b) })))
    end
    def redo_available(b : Bool) : Void
      Binding.bg_QTextEdit_redoAvailable_bool(self, b)
    end
    def on_redo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_redoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(b : Bool){ block.call(b) })))
    end
    def current_char_format_changed(format : TextCharFormat) : Void
      Binding.bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(self, format)
    end
    def on_current_char_format_changed(&block : Proc(TextCharFormat, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_currentCharFormatChanged_CONNECT_CrystalProc_void__const_QTextCharFormatR_(self, BindgenHelper.wrap_proc(->(format : Binding::QTextCharFormat*){ block.call(TextCharFormat.new(unwrap: format)) })))
    end
    def copy_available(b : Bool) : Void
      Binding.bg_QTextEdit_copyAvailable_bool(self, b)
    end
    def on_copy_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_copyAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(b : Bool){ block.call(b) })))
    end
    def selection_changed() : Void
      Binding.bg_QTextEdit_selectionChanged_(self)
    end
    def on_selection_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_selectionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def cursor_position_changed() : Void
      Binding.bg_QTextEdit_cursorPositionChanged_(self)
    end
    def on_cursor_position_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_cursorPositionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(e : Event) : Bool
      Binding.bg_QTextEdit_event_QEvent_X(self, e)
    end
    protected def timer_event(e : TimerEvent) : Void
      Binding.bg_QTextEdit_timerEvent_QTimerEvent_X(self, e)
    end
    protected def key_press_event(e : QKeyEvent*) : Void
      Binding.bg_QTextEdit_keyPressEvent_QKeyEvent_X(self, e)
    end
    protected def key_release_event(e : QKeyEvent*) : Void
      Binding.bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    protected def resize_event(e : ResizeEvent) : Void
      Binding.bg_QTextEdit_resizeEvent_QResizeEvent_X(self, e)
    end
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QTextEdit_paintEvent_QPaintEvent_X(self, e)
    end
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mousePressEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_move_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    protected def mouse_double_click_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(self, e)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QTextEdit_focusNextPrevChild_bool(self, next_)
    end
    protected def context_menu_event(e : QContextMenuEvent*) : Void
      Binding.bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(self, e)
    end
    protected def drag_enter_event(e : DragEnterEvent) : Void
      Binding.bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(self, e)
    end
    protected def drag_leave_event(e : DragLeaveEvent) : Void
      Binding.bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(self, e)
    end
    protected def drag_move_event(e : DragMoveEvent) : Void
      Binding.bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(self, e)
    end
    protected def drop_event(e : DropEvent) : Void
      Binding.bg_QTextEdit_dropEvent_QDropEvent_X(self, e)
    end
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QTextEdit_focusInEvent_QFocusEvent_X(self, e)
    end
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QTextEdit_focusOutEvent_QFocusEvent_X(self, e)
    end
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QTextEdit_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    protected def change_event(e : Event) : Void
      Binding.bg_QTextEdit_changeEvent_QEvent_X(self, e)
    end
    protected def wheel_event(e : QWheelEvent*) : Void
      Binding.bg_QTextEdit_wheelEvent_QWheelEvent_X(self, e)
    end
    protected def create_mime_data_from_selection() : MimeData
      MimeData.new(unwrap: Binding.bg_QTextEdit_createMimeDataFromSelection_(self))
    end
    protected def can_insert_from_mime_data(source : MimeData) : Bool
      Binding.bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(self, source)
    end
    protected def insert_from_mime_data(source : MimeData) : Void
      Binding.bg_QTextEdit_insertFromMimeData_const_QMimeData_X(self, source)
    end
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    protected def initialize(dd : QTextEditPrivate*, parent : Widget)
      unwrap = Binding.bg_QTextEdit_CONSTRUCT_QTextEditPrivate_R_QWidget_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter shared_painter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(e : Binding::QEvent*){ self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(e : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(e : QKeyEvent*){ self.key_press_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(e : QKeyEvent*){ self.key_release_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(e : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(e : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(e : QContextMenuEvent*){ self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(e : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(e : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(e : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(e : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(e : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(e : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(e : QWheelEvent*){ self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} ->(){ MimeData.new(unwrap: self.create_mime_data_from_selection()).to_unsafe } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} ->(source : Binding::QMimeData*){ self.can_insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} ->(source : Binding::QMimeData*){ self.insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} ->(cursor : Binding::QTextCursor*){ self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(viewport : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextEdit_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QTextEdit_scrollContentsBy_int_int(self, dx, dy)
    end
    protected def do_set_text_cursor(cursor : TextCursor) : Void
      Binding.bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(self, cursor)
    end
    protected def zoom_in_f(range : Float32) : Void
      Binding.bg_QTextEdit_zoomInF_float(self, range)
    end
  end
  class FileDialog < Dialog
    enum AcceptMode : UInt32
      AcceptOpen = 0
      AcceptSave = 1
    end
    enum DialogLabel : UInt32
      LookIn = 0
      FileName = 1
      FileType = 2
      Accept = 3
      Reject = 4
    end
    enum FileMode : UInt32
      AnyFile = 0
      ExistingFile = 1
      Directory = 2
      ExistingFiles = 3
      DirectoryOnly = 4
    end
    enum Option : UInt32
      ShowDirsOnly = 1
      DontResolveSymlinks = 2
      DontConfirmOverwrite = 4
      DontUseSheet = 8
      DontUseNativeDialog = 16
      ReadOnly = 32
      HideNameFilterDetails = 64
      DontUseCustomDirectoryIcons = 128
    end
    @[Flags]
    enum Options : UInt32
      ShowDirsOnly = 1
      DontResolveSymlinks = 2
      DontConfirmOverwrite = 4
      DontUseSheet = 8
      DontUseNativeDialog = 16
      ReadOnly = 32
      HideNameFilterDetails = 64
      DontUseCustomDirectoryIcons = 128
    end
    enum ViewMode : UInt32
      Detail = 0
      List = 1
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QFileDialog_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QFileDialog_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget, f : WindowFlags)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Widget? = nil, caption : String = "", directory : String = "", filter : String = "")
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(directory), Qt::Converter::QString.wrap(filter))
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def directory=(directory : String) : Void
      Binding.bg_QFileDialog_setDirectory_const_QString_R(self, Qt::Converter::QString.wrap(directory))
    end
    def directory=(directory : Dir) : Void
      Binding.bg_QFileDialog_setDirectory_const_QDir_R(self, directory)
    end
    def directory() : Dir
      Dir.new(unwrap: Binding.bg_QFileDialog_directory_(self))
    end
    def directory_url=(directory : Url) : Void
      Binding.bg_QFileDialog_setDirectoryUrl_const_QUrl_R(self, directory)
    end
    def directory_url() : Url
      Url.new(unwrap: Binding.bg_QFileDialog_directoryUrl_(self))
    end
    def select_file(filename : String) : Void
      Binding.bg_QFileDialog_selectFile_const_QString_R(self, Qt::Converter::QString.wrap(filename))
    end
    def selected_files() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_selectedFiles_(self))
    end
    def select_url(url : Url) : Void
      Binding.bg_QFileDialog_selectUrl_const_QUrl_R(self, url)
    end
    def selected_urls() : Enumerable(Url)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_selectedUrls_(self))
    end
    def name_filter_details_visible=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setNameFilterDetailsVisible_bool(self, enabled)
    end
    def name_filter_details_visible?() : Bool
      Binding.bg_QFileDialog_isNameFilterDetailsVisible_(self)
    end
    def name_filter=(filter : String) : Void
      Binding.bg_QFileDialog_setNameFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def name_filters=(filters : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setNameFilters_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, filters).to_unsafe)
    end
    def name_filters() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_nameFilters_(self))
    end
    def select_name_filter(filter : String) : Void
      Binding.bg_QFileDialog_selectNameFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def selected_mime_type_filter() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_selectedMimeTypeFilter_(self))
    end
    def selected_name_filter() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_selectedNameFilter_(self))
    end
    def mime_type_filters=(filters : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, filters).to_unsafe)
    end
    def mime_type_filters() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_mimeTypeFilters_(self))
    end
    def select_mime_type_filter(filter : String) : Void
      Binding.bg_QFileDialog_selectMimeTypeFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def filter() : Dir::Filters
      Binding.bg_QFileDialog_filter_(self)
    end
    def filter=(filters : Dir::Filters) : Void
      Binding.bg_QFileDialog_setFilter_QDir__Filters(self, filters)
    end
    def view_mode=(mode : FileDialog::ViewMode) : Void
      Binding.bg_QFileDialog_setViewMode_QFileDialog__ViewMode(self, mode)
    end
    def view_mode() : FileDialog::ViewMode
      Binding.bg_QFileDialog_viewMode_(self)
    end
    def file_mode=(mode : FileDialog::FileMode) : Void
      Binding.bg_QFileDialog_setFileMode_QFileDialog__FileMode(self, mode)
    end
    def file_mode() : FileDialog::FileMode
      Binding.bg_QFileDialog_fileMode_(self)
    end
    def accept_mode=(mode : FileDialog::AcceptMode) : Void
      Binding.bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(self, mode)
    end
    def accept_mode() : FileDialog::AcceptMode
      Binding.bg_QFileDialog_acceptMode_(self)
    end
    def read_only=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setReadOnly_bool(self, enabled)
    end
    def read_only?() : Bool
      Binding.bg_QFileDialog_isReadOnly_(self)
    end
    def resolve_symlinks=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setResolveSymlinks_bool(self, enabled)
    end
    def resolve_symlinks() : Bool
      Binding.bg_QFileDialog_resolveSymlinks_(self)
    end
    def sidebar_urls=(urls : Enumerable(Url)) : Void
      Binding.bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(self, BindgenHelper.wrap_container(QList_QUrl, urls).to_unsafe)
    end
    def sidebar_urls() : Enumerable(Url)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_sidebarUrls_(self))
    end
    def save_state() : QByteArray*
      Binding.bg_QFileDialog_saveState_(self)
    end
    def restore_state(state : QByteArray*) : Bool
      Binding.bg_QFileDialog_restoreState_const_QByteArray_R(self, state)
    end
    def confirm_overwrite=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setConfirmOverwrite_bool(self, enabled)
    end
    def confirm_overwrite() : Bool
      Binding.bg_QFileDialog_confirmOverwrite_(self)
    end
    def default_suffix=(suffix : String) : Void
      Binding.bg_QFileDialog_setDefaultSuffix_const_QString_R(self, Qt::Converter::QString.wrap(suffix))
    end
    def default_suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_defaultSuffix_(self))
    end
    def history=(paths : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setHistory_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, paths).to_unsafe)
    end
    def history() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_history_(self))
    end
    def item_delegate=(delegate : QAbstractItemDelegate*) : Void
      Binding.bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(self, delegate)
    end
    def item_delegate() : QAbstractItemDelegate*
      Binding.bg_QFileDialog_itemDelegate_(self)
    end
    def icon_provider=(provider : QFileIconProvider*) : Void
      Binding.bg_QFileDialog_setIconProvider_QFileIconProvider_X(self, provider)
    end
    def icon_provider() : QFileIconProvider*
      Binding.bg_QFileDialog_iconProvider_(self)
    end
    def set_label_text(label : FileDialog::DialogLabel, text : String) : Void
      Binding.bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(self, label, Qt::Converter::QString.wrap(text))
    end
    def label_text(label : FileDialog::DialogLabel) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_labelText_QFileDialog__DialogLabel(self, label))
    end
    def supported_schemes=(schemes : Enumerable(String)) : Void
      Binding.bg_QFileDialog_setSupportedSchemes_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, schemes).to_unsafe)
    end
    def supported_schemes() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFileDialog_supportedSchemes_(self))
    end
    def proxy_model=(model : QAbstractProxyModel*) : Void
      Binding.bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(self, model)
    end
    def proxy_model() : QAbstractProxyModel*
      Binding.bg_QFileDialog_proxyModel_(self)
    end
    def set_option(option : FileDialog::Option, on : Bool = true) : Void
      Binding.bg_QFileDialog_setOption_QFileDialog__Option_bool(self, option, on)
    end
    def test_option(option : FileDialog::Option) : Bool
      Binding.bg_QFileDialog_testOption_QFileDialog__Option(self, option)
    end
    def options=(options : FileDialog::Options) : Void
      Binding.bg_QFileDialog_setOptions_QFileDialog__Options(self, options)
    end
    def options() : FileDialog::Options
      Binding.bg_QFileDialog_options_(self)
    end
    def open(receiver : Object, member : UInt8*) : Void
      Binding.bg_QFileDialog_open_QObject_X_const_char_X(self, receiver, member)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QFileDialog_setVisible_bool(self, visible)
    end
    def file_selected(file : String) : Void
      Binding.bg_QFileDialog_fileSelected_const_QString_R(self, Qt::Converter::QString.wrap(file))
    end
    def on_file_selected(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_fileSelected_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(file : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(file)) })))
    end
    def files_selected(files : Enumerable(String)) : Void
      Binding.bg_QFileDialog_filesSelected_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, files).to_unsafe)
    end
    def on_files_selected(&block : Proc(Enumerable(String), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_filesSelected_CONNECT_CrystalProc_void__const_QStringListX_(self, BindgenHelper.wrap_proc(->(files : Void**){ block.call(QList_QString.new(unwrap: files)) })))
    end
    def current_changed(path : String) : Void
      Binding.bg_QFileDialog_currentChanged_const_QString_R(self, Qt::Converter::QString.wrap(path))
    end
    def on_current_changed(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_currentChanged_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(path : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(path)) })))
    end
    def directory_entered(directory : String) : Void
      Binding.bg_QFileDialog_directoryEntered_const_QString_R(self, Qt::Converter::QString.wrap(directory))
    end
    def on_directory_entered(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_directoryEntered_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(directory : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(directory)) })))
    end
    def url_selected(url : Url) : Void
      Binding.bg_QFileDialog_urlSelected_const_QUrl_R(self, url)
    end
    def on_url_selected(&block : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_urlSelected_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(url : Binding::QUrl*){ block.call(Url.new(unwrap: url)) })))
    end
    def urls_selected(urls : Enumerable(Url)) : Void
      Binding.bg_QFileDialog_urlsSelected_const_QList_QUrl__R(self, BindgenHelper.wrap_container(QList_QUrl, urls).to_unsafe)
    end
    def on_urls_selected(&block : Proc(Enumerable(Url), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_urlsSelected_CONNECT_CrystalProc_void__const_QList_QUrl_X_(self, BindgenHelper.wrap_proc(->(urls : Void**){ block.call(QList_QUrl.new(unwrap: urls)) })))
    end
    def current_url_changed(url : Url) : Void
      Binding.bg_QFileDialog_currentUrlChanged_const_QUrl_R(self, url)
    end
    def on_current_url_changed(&block : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_currentUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(url : Binding::QUrl*){ block.call(Url.new(unwrap: url)) })))
    end
    def directory_url_entered(directory : Url) : Void
      Binding.bg_QFileDialog_directoryUrlEntered_const_QUrl_R(self, directory)
    end
    def on_directory_url_entered(&block : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_directoryUrlEntered_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(directory : Binding::QUrl*){ block.call(Url.new(unwrap: directory)) })))
    end
    def filter_selected(filter : String) : Void
      Binding.bg_QFileDialog_filterSelected_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    def on_filter_selected(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_filterSelected_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(filter : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(filter)) })))
    end
    def self.get_open_file_url(parent : Widget? = nil, caption : String = "") : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_open_file_url(parent : Widget?, caption : String, dir : Url) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    def self.get_open_file_url(parent : Widget?, caption : String, dir : Url, filter : String = "") : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter)))
    end
    def self.get_save_file_url(parent : Widget? = nil, caption : String = "") : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_save_file_url(parent : Widget?, caption : String, dir : Url) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    def self.get_save_file_url(parent : Widget?, caption : String, dir : Url, filter : String = "") : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter)))
    end
    def self.get_existing_directory(parent : Widget? = nil, caption : String = "", dir : String = "") : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    def self.get_existing_directory(parent : Widget?, caption : String, dir : String, options : FileDialog::Options) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), options))
    end
    def self.get_existing_directory_url(parent : Widget? = nil, caption : String = "") : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_existing_directory_url(parent : Widget?, caption : String, dir : Url) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    def self.get_existing_directory_url(parent : Widget?, caption : String, dir : Url, options : FileDialog::Options) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(parent, Qt::Converter::QString.wrap(caption), dir, options))
    end
    def self.get_existing_directory_url(parent : Widget?, caption : String, dir : Url, options : FileDialog::Options, supported_schemes : Enumerable(String)) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(parent, Qt::Converter::QString.wrap(caption), dir, options, BindgenHelper.wrap_container(QList_QString, supported_schemes).to_unsafe))
    end
    def self.get_open_file_urls(parent : Widget? = nil, caption : String = "") : Enumerable(Url)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    def self.get_open_file_urls(parent : Widget?, caption : String, dir : Url) : Enumerable(Url)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    def self.get_open_file_urls(parent : Widget?, caption : String, dir : Url, filter : String = "") : Enumerable(Url)
      QList_QUrl.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter)))
    end
    protected def initialize(args : QFileDialogArgs*)
      unwrap = Binding.bg_QFileDialog_CONSTRUCT_const_QFileDialogArgs_R(args)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} ->(result : Int32){ self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} ->(){ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(e : Binding::QEvent*){ self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(){ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} ->(){ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} ->(){ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(unnamed_arg_0 : QKeyEvent*){ self.key_press_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(unnamed_arg_0 : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(unnamed_arg_0 : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(unnamed_arg_0 : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(unnamed_arg_0 : QContextMenuEvent*){ self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QFileDialog_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def done(result : Int32) : Void
      Binding.bg_QFileDialog_done_int(self, result)
    end
    protected def accept() : Void
      Binding.bg_QFileDialog_accept_(self)
    end
    protected def change_event(e : Event) : Void
      Binding.bg_QFileDialog_changeEvent_QEvent_X(self, e)
    end
  end
  class TextOption 
    @[Flags]
    enum Flags : UInt32
      ShowTabsAndSpaces = 1
      ShowLineAndParagraphSeparators = 2
      AddSpaceForLineAndParagraphSeparators = 4
      SuppressColors = 8
      ShowDocumentTerminator = 16
      IncludeTrailingSpaces = 2147483648
    end
    enum WrapMode : UInt32
      NoWrap = 0
      WordWrap = 1
      ManualWrap = 2
      WrapAnywhere = 3
      WrapAtWordBoundaryOrAnywhere = 4
    end
    enum TabType : UInt32
      LeftTab = 0
      RightTab = 1
      CenterTab = 2
      DelimiterTab = 3
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextOption_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(alignment : Alignment)
      unwrap = Binding.bg_QTextOption_CONSTRUCT_Qt__Alignment(alignment)
    @unwrap = unwrap
    
    end
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QTextOption_setAlignment_Qt__Alignment(self, alignment)
    end
    def alignment() : Alignment
      Binding.bg_QTextOption_alignment_(self)
    end
    def text_direction=(a_direction : LayoutDirection) : Void
      Binding.bg_QTextOption_setTextDirection_Qt__LayoutDirection(self, a_direction)
    end
    def text_direction() : LayoutDirection
      Binding.bg_QTextOption_textDirection_(self)
    end
    def wrap_mode=(wrap : TextOption::WrapMode) : Void
      Binding.bg_QTextOption_setWrapMode_QTextOption__WrapMode(self, wrap)
    end
    def wrap_mode() : TextOption::WrapMode
      Binding.bg_QTextOption_wrapMode_(self)
    end
    def flags=(flags : TextOption::Flags) : Void
      Binding.bg_QTextOption_setFlags_QTextOption__Flags(self, flags)
    end
    def flags() : TextOption::Flags
      Binding.bg_QTextOption_flags_(self)
    end
    def tab_stop=(tab_stop : Float64) : Void
      Binding.bg_QTextOption_setTabStop_qreal(self, tab_stop)
    end
    def tab_stop() : Float64
      Binding.bg_QTextOption_tabStop_(self)
    end
    def tab_array=(tab_stops : Enumerable(Float64)) : Void
      Binding.bg_QTextOption_setTabArray_const_QList_qreal__R(self, BindgenHelper.wrap_container(QList_qreal, tab_stops).to_unsafe)
    end
    def tab_array() : Enumerable(Float64)
      QList_qreal.new(unwrap: Binding.bg_QTextOption_tabArray_(self))
    end
    def use_design_metrics=(b : Bool) : Void
      Binding.bg_QTextOption_setUseDesignMetrics_bool(self, b)
    end
    def use_design_metrics() : Bool
      Binding.bg_QTextOption_useDesignMetrics_(self)
    end
  end
  class TextDocument < Object
    enum MetaInformation : UInt32
      DocumentTitle = 0
      DocumentUrl = 1
    end
    enum Stacks : UInt32
      UndoStack = 1
      RedoStack = 2
      UndoAndRedoStacks = 3
    end
    @[Flags]
    enum FindFlags : UInt32
      FindBackward = 1
      FindCaseSensitively = 2
      FindWholeWords = 4
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QTextDocument_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTextDocument_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : Binding::QTextFormat*){ self.create_object(TextFormat.new(unwrap: f)) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : Object? = nil)
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_const_QString_R_QObject_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : Binding::QTextFormat*){ self.create_object(TextFormat.new(unwrap: f)) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def clone(parent : Object? = nil) : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextDocument_clone_QObject_X(self, parent))
    end
    def empty?() : Bool
      Binding.bg_QTextDocument_isEmpty_(self)
    end
    def clear() : Void
      Binding.bg_QTextDocument_clear_(self)
    end
    def undo_redo_enabled=(enable : Bool) : Void
      Binding.bg_QTextDocument_setUndoRedoEnabled_bool(self, enable)
    end
    def undo_redo_enabled?() : Bool
      Binding.bg_QTextDocument_isUndoRedoEnabled_(self)
    end
    def undo_available?() : Bool
      Binding.bg_QTextDocument_isUndoAvailable_(self)
    end
    def redo_available?() : Bool
      Binding.bg_QTextDocument_isRedoAvailable_(self)
    end
    def available_undo_steps() : Int32
      Binding.bg_QTextDocument_availableUndoSteps_(self)
    end
    def available_redo_steps() : Int32
      Binding.bg_QTextDocument_availableRedoSteps_(self)
    end
    def revision() : Int32
      Binding.bg_QTextDocument_revision_(self)
    end
    def document_layout=(layout : QAbstractTextDocumentLayout*) : Void
      Binding.bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(self, layout)
    end
    def document_layout() : QAbstractTextDocumentLayout*
      Binding.bg_QTextDocument_documentLayout_(self)
    end
    def set_meta_information(info : TextDocument::MetaInformation, unnamed_arg_1 : String) : Void
      Binding.bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(self, info, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    def meta_information(info : TextDocument::MetaInformation) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(self, info))
    end
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toHtml_(self))
    end
    def to_html(encoding : QByteArray*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toHtml_const_QByteArray_R(self, encoding))
    end
    def html=(html : String) : Void
      Binding.bg_QTextDocument_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    def to_raw_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toRawText_(self))
    end
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toPlainText_(self))
    end
    def plain_text=(text : String) : Void
      Binding.bg_QTextDocument_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def character_at(pos : Int32) : QChar*
      Binding.bg_QTextDocument_characterAt_int(self, pos)
    end
    def find(sub_string : String, from : Int32 = 0) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_int(self, Qt::Converter::QString.wrap(sub_string), from))
    end
    def find(sub_string : String, from : Int32, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(sub_string), from, options))
    end
    def find(sub_string : String, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(self, Qt::Converter::QString.wrap(sub_string), cursor))
    end
    def find(sub_string : String, cursor : TextCursor, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(sub_string), cursor, options))
    end
    def find(expr : QRegExp*, from : Int32 = 0) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_int(self, expr, from))
    end
    def find(expr : QRegExp*, from : Int32, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(self, expr, from, options))
    end
    def find(expr : QRegExp*, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(self, expr, cursor))
    end
    def find(expr : QRegExp*, cursor : TextCursor, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(self, expr, cursor, options))
    end
    def find(expr : QRegularExpression*, from : Int32 = 0) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_int(self, expr, from))
    end
    def find(expr : QRegularExpression*, from : Int32, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(self, expr, from, options))
    end
    def find(expr : QRegularExpression*, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(self, expr, cursor))
    end
    def find(expr : QRegularExpression*, cursor : TextCursor, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(self, expr, cursor, options))
    end
    def frame_at(pos : Int32) : QTextFrame*
      Binding.bg_QTextDocument_frameAt_int(self, pos)
    end
    def root_frame() : QTextFrame*
      Binding.bg_QTextDocument_rootFrame_(self)
    end
    def object(object_index : Int32) : QTextObject*
      Binding.bg_QTextDocument_object_int(self, object_index)
    end
    def object_for_format(unnamed_arg_0 : TextFormat) : QTextObject*
      Binding.bg_QTextDocument_objectForFormat_const_QTextFormat_R(self, unnamed_arg_0)
    end
    def find_block(pos : Int32) : QTextBlock*
      Binding.bg_QTextDocument_findBlock_int(self, pos)
    end
    def find_block_by_number(block_number : Int32) : QTextBlock*
      Binding.bg_QTextDocument_findBlockByNumber_int(self, block_number)
    end
    def find_block_by_line_number(block_number : Int32) : QTextBlock*
      Binding.bg_QTextDocument_findBlockByLineNumber_int(self, block_number)
    end
    def begin() : QTextBlock*
      Binding.bg_QTextDocument_begin_(self)
    end
    def end() : QTextBlock*
      Binding.bg_QTextDocument_end_(self)
    end
    def first_block() : QTextBlock*
      Binding.bg_QTextDocument_firstBlock_(self)
    end
    def last_block() : QTextBlock*
      Binding.bg_QTextDocument_lastBlock_(self)
    end
    def page_size=(size : QSizeF*) : Void
      Binding.bg_QTextDocument_setPageSize_const_QSizeF_R(self, size)
    end
    def page_size() : QSizeF*
      Binding.bg_QTextDocument_pageSize_(self)
    end
    def default_font=(font : Font) : Void
      Binding.bg_QTextDocument_setDefaultFont_const_QFont_R(self, font)
    end
    def default_font() : Font
      Font.new(unwrap: Binding.bg_QTextDocument_defaultFont_(self))
    end
    def page_count() : Int32
      Binding.bg_QTextDocument_pageCount_(self)
    end
    def modified?() : Bool
      Binding.bg_QTextDocument_isModified_(self)
    end
    def print(printer : QPagedPaintDevice*) : Void
      Binding.bg_QTextDocument_print_QPagedPaintDevice_X(self, printer)
    end
    def all_formats() : Enumerable(TextFormat)
      QVector_QTextFormat.new(unwrap: Binding.bg_QTextDocument_allFormats_(self))
    end
    def mark_contents_dirty(from : Int32, length : Int32) : Void
      Binding.bg_QTextDocument_markContentsDirty_int_int(self, from, length)
    end
    def use_design_metrics=(b : Bool) : Void
      Binding.bg_QTextDocument_setUseDesignMetrics_bool(self, b)
    end
    def use_design_metrics() : Bool
      Binding.bg_QTextDocument_useDesignMetrics_(self)
    end
    def draw_contents(painter : Painter) : Void
      Binding.bg_QTextDocument_drawContents_QPainter_X(self, painter)
    end
    def draw_contents(painter : Painter, rect : RectF) : Void
      Binding.bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    def text_width=(width : Float64) : Void
      Binding.bg_QTextDocument_setTextWidth_qreal(self, width)
    end
    def text_width() : Float64
      Binding.bg_QTextDocument_textWidth_(self)
    end
    def ideal_width() : Float64
      Binding.bg_QTextDocument_idealWidth_(self)
    end
    def indent_width() : Float64
      Binding.bg_QTextDocument_indentWidth_(self)
    end
    def indent_width=(width : Float64) : Void
      Binding.bg_QTextDocument_setIndentWidth_qreal(self, width)
    end
    def document_margin() : Float64
      Binding.bg_QTextDocument_documentMargin_(self)
    end
    def document_margin=(margin : Float64) : Void
      Binding.bg_QTextDocument_setDocumentMargin_qreal(self, margin)
    end
    def adjust_size() : Void
      Binding.bg_QTextDocument_adjustSize_(self)
    end
    def size() : QSizeF*
      Binding.bg_QTextDocument_size_(self)
    end
    def block_count() : Int32
      Binding.bg_QTextDocument_blockCount_(self)
    end
    def line_count() : Int32
      Binding.bg_QTextDocument_lineCount_(self)
    end
    def character_count() : Int32
      Binding.bg_QTextDocument_characterCount_(self)
    end
    def default_style_sheet=(sheet : String) : Void
      Binding.bg_QTextDocument_setDefaultStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(sheet))
    end
    def default_style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_defaultStyleSheet_(self))
    end
    def undo(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_undo_QTextCursor_X(self, cursor)
    end
    def redo(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_redo_QTextCursor_X(self, cursor)
    end
    def clear_undo_redo_stacks(history_to_clear : TextDocument::Stacks = TextDocument::Stacks::UndoAndRedoStacks) : Void
      Binding.bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(self, history_to_clear)
    end
    def maximum_block_count() : Int32
      Binding.bg_QTextDocument_maximumBlockCount_(self)
    end
    def maximum_block_count=(maximum : Int32) : Void
      Binding.bg_QTextDocument_setMaximumBlockCount_int(self, maximum)
    end
    def default_text_option() : TextOption
      TextOption.new(unwrap: Binding.bg_QTextDocument_defaultTextOption_(self))
    end
    def default_text_option=(option : TextOption) : Void
      Binding.bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(self, option)
    end
    def base_url() : Url
      Url.new(unwrap: Binding.bg_QTextDocument_baseUrl_(self))
    end
    def base_url=(url : Url) : Void
      Binding.bg_QTextDocument_setBaseUrl_const_QUrl_R(self, url)
    end
    def default_cursor_move_style() : CursorMoveStyle
      Binding.bg_QTextDocument_defaultCursorMoveStyle_(self)
    end
    def default_cursor_move_style=(style : CursorMoveStyle) : Void
      Binding.bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(self, style)
    end
    def contents_change(from : Int32, chars_removed : Int32, chars_added : Int32) : Void
      Binding.bg_QTextDocument_contentsChange_int_int_int(self, from, chars_removed, chars_added)
    end
    def on_contents_change(&block : Proc(Int32, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_contentsChange_CONNECT_CrystalProc_void__int__int__int_(self, BindgenHelper.wrap_proc(->(from : Int32, chars_removed : Int32, chars_added : Int32){ block.call(from, chars_removed, chars_added) })))
    end
    def contents_changed() : Void
      Binding.bg_QTextDocument_contentsChanged_(self)
    end
    def on_contents_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_contentsChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def undo_available(unnamed_arg_0 : Bool) : Void
      Binding.bg_QTextDocument_undoAvailable_bool(self, unnamed_arg_0)
    end
    def on_undo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_undoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Bool){ block.call(unnamed_arg_0) })))
    end
    def redo_available(unnamed_arg_0 : Bool) : Void
      Binding.bg_QTextDocument_redoAvailable_bool(self, unnamed_arg_0)
    end
    def on_redo_available(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_redoAvailable_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Bool){ block.call(unnamed_arg_0) })))
    end
    def undo_command_added() : Void
      Binding.bg_QTextDocument_undoCommandAdded_(self)
    end
    def on_undo_command_added(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_undoCommandAdded_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def modification_changed(m : Bool) : Void
      Binding.bg_QTextDocument_modificationChanged_bool(self, m)
    end
    def on_modification_changed(&block : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_modificationChanged_CONNECT_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(->(m : Bool){ block.call(m) })))
    end
    def cursor_position_changed(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(self, cursor)
    end
    def on_cursor_position_changed(&block : Proc(TextCursor, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_cursorPositionChanged_CONNECT_CrystalProc_void__const_QTextCursorR_(self, BindgenHelper.wrap_proc(->(cursor : Binding::QTextCursor*){ block.call(TextCursor.new(unwrap: cursor)) })))
    end
    def block_count_changed(new_block_count : Int32) : Void
      Binding.bg_QTextDocument_blockCountChanged_int(self, new_block_count)
    end
    def on_block_count_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_blockCountChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(new_block_count : Int32){ block.call(new_block_count) })))
    end
    def base_url_changed(url : Url) : Void
      Binding.bg_QTextDocument_baseUrlChanged_const_QUrl_R(self, url)
    end
    def on_base_url_changed(&block : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_baseUrlChanged_CONNECT_CrystalProc_void__const_QUrlR_(self, BindgenHelper.wrap_proc(->(url : Binding::QUrl*){ block.call(Url.new(unwrap: url)) })))
    end
    def document_layout_changed() : Void
      Binding.bg_QTextDocument_documentLayoutChanged_(self)
    end
    def on_document_layout_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_documentLayoutChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def undo() : Void
      Binding.bg_QTextDocument_undo_(self)
    end
    def redo() : Void
      Binding.bg_QTextDocument_redo_(self)
    end
    def append_undo_item(unnamed_arg_0 : QAbstractUndoItem*) : Void
      Binding.bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(self, unnamed_arg_0)
    end
    def modified=(m : Bool = true) : Void
      Binding.bg_QTextDocument_setModified_bool(self, m)
    end
    protected def create_object(f : TextFormat) : QTextObject*
      Binding.bg_QTextDocument_createObject_const_QTextFormat_R(self, f)
    end
    protected def initialize(dd : QTextDocumentPrivate*, parent : Object)
      unwrap = Binding.bg_QTextDocument_CONSTRUCT_QTextDocumentPrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall clear create_object event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} ->(){ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} ->(f : Binding::QTextFormat*){ self.create_object(TextFormat.new(unwrap: f)) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QTextDocument_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def doc_handle() : QTextDocumentPrivate*
      Binding.bg_QTextDocument_docHandle_(self)
    end
  end
  class TextCursor 
    enum MoveOperation : UInt32
      NoMove = 0
      Start = 1
      Up = 2
      StartOfLine = 3
      StartOfBlock = 4
      StartOfWord = 5
      PreviousBlock = 6
      PreviousCharacter = 7
      PreviousWord = 8
      Left = 9
      WordLeft = 10
      End = 11
      Down = 12
      EndOfLine = 13
      EndOfWord = 14
      EndOfBlock = 15
      NextBlock = 16
      NextCharacter = 17
      NextWord = 18
      Right = 19
      WordRight = 20
      NextCell = 21
      PreviousCell = 22
      NextRow = 23
      PreviousRow = 24
    end
    enum MoveMode : UInt32
      MoveAnchor = 0
      KeepAnchor = 1
    end
    enum SelectionType : UInt32
      WordUnderCursor = 0
      LineUnderCursor = 1
      BlockUnderCursor = 2
      Document = 3
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(document : TextDocument)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextDocument_X(document)
    @unwrap = unwrap
    
    end
    def initialize(p : QTextDocumentPrivate*, pos : Int32)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextDocumentPrivate_X_int(p, pos)
    @unwrap = unwrap
    
    end
    def initialize(d : QTextCursorPrivate*)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextCursorPrivate_X(d)
    @unwrap = unwrap
    
    end
    def initialize(frame : QTextFrame*)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_QTextFrame_X(frame)
    @unwrap = unwrap
    
    end
    def initialize(block : QTextBlock*)
      unwrap = Binding.bg_QTextCursor_CONSTRUCT_const_QTextBlock_R(block)
    @unwrap = unwrap
    
    end
    def swap(other : TextCursor) : Void
      Binding.bg_QTextCursor_swap_QTextCursor_R(self, other)
    end
    def null?() : Bool
      Binding.bg_QTextCursor_isNull_(self)
    end
    def set_position(pos : Int32, mode : TextCursor::MoveMode = TextCursor::MoveMode::MoveAnchor) : Void
      Binding.bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(self, pos, mode)
    end
    def position() : Int32
      Binding.bg_QTextCursor_position_(self)
    end
    def position_in_block() : Int32
      Binding.bg_QTextCursor_positionInBlock_(self)
    end
    def anchor() : Int32
      Binding.bg_QTextCursor_anchor_(self)
    end
    def insert_text(text : String) : Void
      Binding.bg_QTextCursor_insertText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def insert_text(text : String, format : TextCharFormat) : Void
      Binding.bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(self, Qt::Converter::QString.wrap(text), format)
    end
    def move_position(op : TextCursor::MoveOperation, unnamed_arg_1 : TextCursor::MoveMode = TextCursor::MoveMode::MoveAnchor, n : Int32 = 1) : Bool
      Binding.bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(self, op, unnamed_arg_1, n)
    end
    def visual_navigation() : Bool
      Binding.bg_QTextCursor_visualNavigation_(self)
    end
    def visual_navigation=(b : Bool) : Void
      Binding.bg_QTextCursor_setVisualNavigation_bool(self, b)
    end
    def vertical_movement_x=(x : Int32) : Void
      Binding.bg_QTextCursor_setVerticalMovementX_int(self, x)
    end
    def vertical_movement_x() : Int32
      Binding.bg_QTextCursor_verticalMovementX_(self)
    end
    def keep_position_on_insert=(b : Bool) : Void
      Binding.bg_QTextCursor_setKeepPositionOnInsert_bool(self, b)
    end
    def keep_position_on_insert() : Bool
      Binding.bg_QTextCursor_keepPositionOnInsert_(self)
    end
    def delete_char() : Void
      Binding.bg_QTextCursor_deleteChar_(self)
    end
    def delete_previous_char() : Void
      Binding.bg_QTextCursor_deletePreviousChar_(self)
    end
    def select(selection : TextCursor::SelectionType) : Void
      Binding.bg_QTextCursor_select_QTextCursor__SelectionType(self, selection)
    end
    def has_selection?() : Bool
      Binding.bg_QTextCursor_hasSelection_(self)
    end
    def has_complex_selection?() : Bool
      Binding.bg_QTextCursor_hasComplexSelection_(self)
    end
    def remove_selected_text() : Void
      Binding.bg_QTextCursor_removeSelectedText_(self)
    end
    def clear_selection() : Void
      Binding.bg_QTextCursor_clearSelection_(self)
    end
    def selection_start() : Int32
      Binding.bg_QTextCursor_selectionStart_(self)
    end
    def selection_end() : Int32
      Binding.bg_QTextCursor_selectionEnd_(self)
    end
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCursor_selectedText_(self))
    end
    def selection() : QTextDocumentFragment*
      Binding.bg_QTextCursor_selection_(self)
    end
    def selected_table_cells(first_row : Int32*, num_rows : Int32*, first_column : Int32*, num_columns : Int32*) : Void
      Binding.bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(self, first_row, num_rows, first_column, num_columns)
    end
    def block() : QTextBlock*
      Binding.bg_QTextCursor_block_(self)
    end
    def char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextCursor_charFormat_(self))
    end
    def char_format=(format : TextCharFormat) : Void
      Binding.bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(self, format)
    end
    def merge_char_format(modifier : TextCharFormat) : Void
      Binding.bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    def block_format() : TextBlockFormat
      TextBlockFormat.new(unwrap: Binding.bg_QTextCursor_blockFormat_(self))
    end
    def block_format=(format : TextBlockFormat) : Void
      Binding.bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(self, format)
    end
    def merge_block_format(modifier : TextBlockFormat) : Void
      Binding.bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(self, modifier)
    end
    def block_char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextCursor_blockCharFormat_(self))
    end
    def block_char_format=(format : TextCharFormat) : Void
      Binding.bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(self, format)
    end
    def merge_block_char_format(modifier : TextCharFormat) : Void
      Binding.bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    def at_block_start() : Bool
      Binding.bg_QTextCursor_atBlockStart_(self)
    end
    def at_block_end() : Bool
      Binding.bg_QTextCursor_atBlockEnd_(self)
    end
    def at_start() : Bool
      Binding.bg_QTextCursor_atStart_(self)
    end
    def at_end() : Bool
      Binding.bg_QTextCursor_atEnd_(self)
    end
    def insert_block() : Void
      Binding.bg_QTextCursor_insertBlock_(self)
    end
    def insert_block(format : TextBlockFormat) : Void
      Binding.bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(self, format)
    end
    def insert_block(format : TextBlockFormat, char_format : TextCharFormat) : Void
      Binding.bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(self, format, char_format)
    end
    def insert_list(format : TextListFormat) : QTextList*
      Binding.bg_QTextCursor_insertList_const_QTextListFormat_R(self, format)
    end
    def insert_list(style : TextListFormat::Style) : QTextList*
      Binding.bg_QTextCursor_insertList_QTextListFormat__Style(self, style)
    end
    def create_list(format : TextListFormat) : QTextList*
      Binding.bg_QTextCursor_createList_const_QTextListFormat_R(self, format)
    end
    def create_list(style : TextListFormat::Style) : QTextList*
      Binding.bg_QTextCursor_createList_QTextListFormat__Style(self, style)
    end
    def current_list() : QTextList*
      Binding.bg_QTextCursor_currentList_(self)
    end
    def insert_table(rows : Int32, cols : Int32, format : QTextTableFormat*) : QTextTable*
      Binding.bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(self, rows, cols, format)
    end
    def insert_table(rows : Int32, cols : Int32) : QTextTable*
      Binding.bg_QTextCursor_insertTable_int_int(self, rows, cols)
    end
    def current_table() : QTextTable*
      Binding.bg_QTextCursor_currentTable_(self)
    end
    def insert_frame(format : TextFrameFormat) : QTextFrame*
      Binding.bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(self, format)
    end
    def current_frame() : QTextFrame*
      Binding.bg_QTextCursor_currentFrame_(self)
    end
    def insert_fragment(fragment : QTextDocumentFragment*) : Void
      Binding.bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(self, fragment)
    end
    def insert_html(html : String) : Void
      Binding.bg_QTextCursor_insertHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    def insert_image(format : QTextImageFormat*, alignment : TextFrameFormat::Position) : Void
      Binding.bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(self, format, alignment)
    end
    def insert_image(format : QTextImageFormat*) : Void
      Binding.bg_QTextCursor_insertImage_const_QTextImageFormat_R(self, format)
    end
    def insert_image(name : String) : Void
      Binding.bg_QTextCursor_insertImage_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def insert_image(image : Image, name : String = "") : Void
      Binding.bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(self, image, Qt::Converter::QString.wrap(name))
    end
    def begin_edit_block() : Void
      Binding.bg_QTextCursor_beginEditBlock_(self)
    end
    def join_previous_edit_block() : Void
      Binding.bg_QTextCursor_joinPreviousEditBlock_(self)
    end
    def end_edit_block() : Void
      Binding.bg_QTextCursor_endEditBlock_(self)
    end
    def is_copy_of(other : TextCursor) : Bool
      Binding.bg_QTextCursor_isCopyOf_const_QTextCursor_R(self, other)
    end
    def block_number() : Int32
      Binding.bg_QTextCursor_blockNumber_(self)
    end
    def column_number() : Int32
      Binding.bg_QTextCursor_columnNumber_(self)
    end
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextCursor_document_(self))
    end
  end
  class Dir 
    @[Flags]
    enum Filters : Int32
      Dirs = 1
      Files = 2
      Drives = 4
      NoSymLinks = 8
      AllEntries = 7
      TypeMask = 15
      Readable = 16
      Writable = 32
      Executable = 64
      PermissionMask = 112
      Modified = 128
      Hidden = 256
      System = 512
      AccessMask = 1008
      AllDirs = 1024
      CaseSensitive = 2048
      NoDot = 8192
      NoDotDot = 16384
      NoDotAndDotDot = 24576
      NoFilter = -1
    end
    @[Flags]
    enum SortFlags : Int32
      Name = 0
      Time = 1
      Size = 2
      Unsorted = 3
      SortByMask = 3
      DirsFirst = 4
      Reversed = 8
      IgnoreCase = 16
      DirsLast = 32
      LocaleAware = 64
      Type = 128
      NoSort = -1
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize(path : String = "")
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(path))
    @unwrap = unwrap
    
    end
    def initialize(path : String, name_filter : String)
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter))
    @unwrap = unwrap
    
    end
    def initialize(path : String, name_filter : String, sort : Dir::SortFlags)
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter), sort)
    @unwrap = unwrap
    
    end
    def initialize(path : String, name_filter : String, sort : Dir::SortFlags, filter : Dir::Filters)
      unwrap = Binding.bg_QDir_CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter), sort, filter)
    @unwrap = unwrap
    
    end
    def swap(other : Dir) : Void
      Binding.bg_QDir_swap_QDir_R(self, other)
    end
    def path=(path : String) : Void
      Binding.bg_QDir_setPath_const_QString_R(self, Qt::Converter::QString.wrap(path))
    end
    def path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_path_(self))
    end
    def absolute_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_absolutePath_(self))
    end
    def canonical_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_canonicalPath_(self))
    end
    def self.add_resource_search_path(path : String) : Void
      Binding.bg_QDir_addResourceSearchPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def self.set_search_paths(prefix : String, search_paths : Enumerable(String)) : Void
      Binding.bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(Qt::Converter::QString.wrap(prefix), BindgenHelper.wrap_container(QList_QString, search_paths).to_unsafe)
    end
    def self.add_search_path(prefix : String, path : String) : Void
      Binding.bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(prefix), Qt::Converter::QString.wrap(path))
    end
    def self.search_paths(prefix : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_searchPaths_STATIC_const_QString_R(Qt::Converter::QString.wrap(prefix)))
    end
    def dir_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_dirName_(self))
    end
    def file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_filePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    def absolute_file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_absoluteFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    def relative_file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_relativeFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    def self.to_native_separators(path_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_toNativeSeparators_STATIC_const_QString_R(Qt::Converter::QString.wrap(path_name)))
    end
    def self.from_native_separators(path_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_fromNativeSeparators_STATIC_const_QString_R(Qt::Converter::QString.wrap(path_name)))
    end
    def cd(dir_name : String) : Bool
      Binding.bg_QDir_cd_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    def cd_up() : Bool
      Binding.bg_QDir_cdUp_(self)
    end
    def name_filters() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_nameFilters_(self))
    end
    def name_filters=(name_filters : Enumerable(String)) : Void
      Binding.bg_QDir_setNameFilters_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, name_filters).to_unsafe)
    end
    def filter() : Dir::Filters
      Binding.bg_QDir_filter_(self)
    end
    def filter=(filter : Dir::Filters) : Void
      Binding.bg_QDir_setFilter_QDir__Filters(self, filter)
    end
    def sorting() : Dir::SortFlags
      Binding.bg_QDir_sorting_(self)
    end
    def sorting=(sort : Dir::SortFlags) : Void
      Binding.bg_QDir_setSorting_QDir__SortFlags(self, sort)
    end
    def count() : UInt32
      Binding.bg_QDir_count_(self)
    end
    def empty?() : Bool
      Binding.bg_QDir_isEmpty_(self)
    end
    def is_empty(filters : Dir::Filters) : Bool
      Binding.bg_QDir_isEmpty_QDir__Filters(self, filters)
    end
    def self.name_filters_from_string(name_filter : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_nameFiltersFromString_STATIC_const_QString_R(Qt::Converter::QString.wrap(name_filter)))
    end
    def entry_list() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_(self))
    end
    def entry_list(filters : Dir::Filters) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_QDir__Filters(self, filters))
    end
    def entry_list(filters : Dir::Filters, sort : Dir::SortFlags) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_QDir__Filters_QDir__SortFlags(self, filters, sort))
    end
    def entry_list(name_filters : Enumerable(String)) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, name_filters).to_unsafe))
    end
    def entry_list(name_filters : Enumerable(String), filters : Dir::Filters) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_const_QStringList_R_QDir__Filters(self, BindgenHelper.wrap_container(QList_QString, name_filters).to_unsafe, filters))
    end
    def entry_list(name_filters : Enumerable(String), filters : Dir::Filters, sort : Dir::SortFlags) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(self, BindgenHelper.wrap_container(QList_QString, name_filters).to_unsafe, filters, sort))
    end
    def entry_info_list() : QFileInfoList*
      Binding.bg_QDir_entryInfoList_(self)
    end
    def entry_info_list(filters : Dir::Filters) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_QDir__Filters(self, filters)
    end
    def entry_info_list(filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(self, filters, sort)
    end
    def entry_info_list(name_filters : Enumerable(String)) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, name_filters).to_unsafe)
    end
    def entry_info_list(name_filters : Enumerable(String), filters : Dir::Filters) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(self, BindgenHelper.wrap_container(QList_QString, name_filters).to_unsafe, filters)
    end
    def entry_info_list(name_filters : Enumerable(String), filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(self, BindgenHelper.wrap_container(QList_QString, name_filters).to_unsafe, filters, sort)
    end
    def mkdir(dir_name : String) : Bool
      Binding.bg_QDir_mkdir_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    def rmdir(dir_name : String) : Bool
      Binding.bg_QDir_rmdir_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    def mkpath(dir_path : String) : Bool
      Binding.bg_QDir_mkpath_const_QString_R(self, Qt::Converter::QString.wrap(dir_path))
    end
    def rmpath(dir_path : String) : Bool
      Binding.bg_QDir_rmpath_const_QString_R(self, Qt::Converter::QString.wrap(dir_path))
    end
    def remove_recursively() : Bool
      Binding.bg_QDir_removeRecursively_(self)
    end
    def readable?() : Bool
      Binding.bg_QDir_isReadable_(self)
    end
    def exists() : Bool
      Binding.bg_QDir_exists_(self)
    end
    def root?() : Bool
      Binding.bg_QDir_isRoot_(self)
    end
    def self.is_relative_path(path : String) : Bool
      Binding.bg_QDir_isRelativePath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def self.is_absolute_path(path : String) : Bool
      Binding.bg_QDir_isAbsolutePath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def relative?() : Bool
      Binding.bg_QDir_isRelative_(self)
    end
    def absolute?() : Bool
      Binding.bg_QDir_isAbsolute_(self)
    end
    def make_absolute() : Bool
      Binding.bg_QDir_makeAbsolute_(self)
    end
    def remove(file_name : String) : Bool
      Binding.bg_QDir_remove_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    def rename(old_name : String, new_name : String) : Bool
      Binding.bg_QDir_rename_const_QString_R_const_QString_R(self, Qt::Converter::QString.wrap(old_name), Qt::Converter::QString.wrap(new_name))
    end
    def exists(name : String) : Bool
      Binding.bg_QDir_exists_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def self.drives() : QFileInfoList*
      Binding.bg_QDir_drives_STATIC_()
    end
    def self.list_separator() : QChar*
      Binding.bg_QDir_listSeparator_STATIC_()
    end
    def self.separator() : QChar*
      Binding.bg_QDir_separator_STATIC_()
    end
    def self.set_current(path : String) : Bool
      Binding.bg_QDir_setCurrent_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    def self.current() : Dir
      Dir.new(unwrap: Binding.bg_QDir_current_STATIC_())
    end
    def self.current_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_currentPath_STATIC_())
    end
    def self.home() : Dir
      Dir.new(unwrap: Binding.bg_QDir_home_STATIC_())
    end
    def self.home_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_homePath_STATIC_())
    end
    def self.root() : Dir
      Dir.new(unwrap: Binding.bg_QDir_root_STATIC_())
    end
    def self.root_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_rootPath_STATIC_())
    end
    def self.temp() : Dir
      Dir.new(unwrap: Binding.bg_QDir_temp_STATIC_())
    end
    def self.temp_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_tempPath_STATIC_())
    end
    def self.match(filters : Enumerable(String), file_name : String) : Bool
      Binding.bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(BindgenHelper.wrap_container(QList_QString, filters).to_unsafe, Qt::Converter::QString.wrap(file_name))
    end
    def self.match(filter : String, file_name : String) : Bool
      Binding.bg_QDir_match_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(filter), Qt::Converter::QString.wrap(file_name))
    end
    def self.clean_path(path : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_cleanPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path)))
    end
    def refresh() : Void
      Binding.bg_QDir_refresh_(self)
    end
    protected def initialize(d : QDirPrivate*)
      unwrap = Binding.bg_QDir_CONSTRUCT_QDirPrivate_R(d)
    @unwrap = unwrap
    
    end
  end
  abstract class GraphicsItem 
    @[Flags]
    enum GraphicsItemFlags : UInt32
      ItemIsMovable = 1
      ItemIsSelectable = 2
      ItemIsFocusable = 4
      ItemClipsToShape = 8
      ItemClipsChildrenToShape = 16
      ItemIgnoresTransformations = 32
      ItemIgnoresParentOpacity = 64
      ItemDoesntPropagateOpacityToChildren = 128
      ItemStacksBehindParent = 256
      ItemUsesExtendedStyleOption = 512
      ItemHasNoContents = 1024
      ItemSendsGeometryChanges = 2048
      ItemAcceptsInputMethod = 4096
      ItemNegativeZStacksBehindParent = 8192
      ItemIsPanel = 16384
      ItemIsFocusScope = 32768
      ItemSendsScenePositionChanges = 65536
      ItemStopsClickFocusPropagation = 131072
      ItemStopsFocusHandling = 262144
      ItemContainsChildrenInShape = 524288
    end
    enum GraphicsItemFlag : UInt32
      ItemIsMovable = 1
      ItemIsSelectable = 2
      ItemIsFocusable = 4
      ItemClipsToShape = 8
      ItemClipsChildrenToShape = 16
      ItemIgnoresTransformations = 32
      ItemIgnoresParentOpacity = 64
      ItemDoesntPropagateOpacityToChildren = 128
      ItemStacksBehindParent = 256
      ItemUsesExtendedStyleOption = 512
      ItemHasNoContents = 1024
      ItemSendsGeometryChanges = 2048
      ItemAcceptsInputMethod = 4096
      ItemNegativeZStacksBehindParent = 8192
      ItemIsPanel = 16384
      ItemIsFocusScope = 32768
      ItemSendsScenePositionChanges = 65536
      ItemStopsClickFocusPropagation = 131072
      ItemStopsFocusHandling = 262144
      ItemContainsChildrenInShape = 524288
    end
    enum CacheMode : UInt32
      NoCache = 0
      ItemCoordinateCache = 1
      DeviceCoordinateCache = 2
    end
    enum PanelModality : UInt32
      NonModal = 0
      PanelModal = 1
      SceneModal = 2
    end
    enum Extension : UInt32
      UserExtension = 2147483648
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsItem.new(
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def scene() : GraphicsScene
      GraphicsScene.new(unwrap: Binding.bg_QGraphicsItem_scene_(self))
    end
    def parent_item() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsItem_parentItem_(self))
    end
    def top_level_item() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsItem_topLevelItem_(self))
    end
    def parent_object() : GraphicsObject
      GraphicsObject.new(unwrap: Binding.bg_QGraphicsItem_parentObject_(self))
    end
    def parent_widget() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsItem_parentWidget_(self))
    end
    def top_level_widget() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsItem_topLevelWidget_(self))
    end
    def window() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsItem_window_(self))
    end
    def panel() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsItem_panel_(self))
    end
    def parent_item=(parent : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_setParentItem_QGraphicsItem_X(self, parent)
    end
    def child_items() : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsItem_childItems_(self))
    end
    def widget?() : Bool
      Binding.bg_QGraphicsItem_isWidget_(self)
    end
    def window?() : Bool
      Binding.bg_QGraphicsItem_isWindow_(self)
    end
    def panel?() : Bool
      Binding.bg_QGraphicsItem_isPanel_(self)
    end
    def to_graphics_object() : GraphicsObject
      GraphicsObject.new(unwrap: Binding.bg_QGraphicsItem_toGraphicsObject_(self))
    end
    def group() : QGraphicsItemGroup*
      Binding.bg_QGraphicsItem_group_(self)
    end
    def group=(group : QGraphicsItemGroup*) : Void
      Binding.bg_QGraphicsItem_setGroup_QGraphicsItemGroup_X(self, group)
    end
    def flags() : GraphicsItem::GraphicsItemFlags
      Binding.bg_QGraphicsItem_flags_(self)
    end
    def set_flag(flag : GraphicsItem::GraphicsItemFlag, enabled : Bool = true) : Void
      Binding.bg_QGraphicsItem_setFlag_QGraphicsItem__GraphicsItemFlag_bool(self, flag, enabled)
    end
    def flags=(flags : GraphicsItem::GraphicsItemFlags) : Void
      Binding.bg_QGraphicsItem_setFlags_QGraphicsItem__GraphicsItemFlags(self, flags)
    end
    def cache_mode() : GraphicsItem::CacheMode
      Binding.bg_QGraphicsItem_cacheMode_(self)
    end
    def cache_mode=(mode : GraphicsItem::CacheMode) : Void
      Binding.bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode(self, mode)
    end
    def set_cache_mode(mode : GraphicsItem::CacheMode, cache_size : QSize*) : Void
      Binding.bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode_const_QSize_R(self, mode, cache_size)
    end
    def panel_modality() : GraphicsItem::PanelModality
      Binding.bg_QGraphicsItem_panelModality_(self)
    end
    def panel_modality=(panel_modality : GraphicsItem::PanelModality) : Void
      Binding.bg_QGraphicsItem_setPanelModality_QGraphicsItem__PanelModality(self, panel_modality)
    end
    def is_blocked_by_modal_panel(blocking_panel : GraphicsItem*? = nil) : Bool
      Binding.bg_QGraphicsItem_isBlockedByModalPanel_QGraphicsItem_XX(self, blocking_panel)
    end
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsItem_toolTip_(self))
    end
    def tool_tip=(tool_tip : String) : Void
      Binding.bg_QGraphicsItem_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tool_tip))
    end
    def cursor() : QCursor*
      Binding.bg_QGraphicsItem_cursor_(self)
    end
    def cursor=(cursor : QCursor*) : Void
      Binding.bg_QGraphicsItem_setCursor_const_QCursor_R(self, cursor)
    end
    def has_cursor?() : Bool
      Binding.bg_QGraphicsItem_hasCursor_(self)
    end
    def unset_cursor() : Void
      Binding.bg_QGraphicsItem_unsetCursor_(self)
    end
    def visible?() : Bool
      Binding.bg_QGraphicsItem_isVisible_(self)
    end
    def is_visible_to(parent : GraphicsItem) : Bool
      Binding.bg_QGraphicsItem_isVisibleTo_const_QGraphicsItem_X(self, parent)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QGraphicsItem_setVisible_bool(self, visible)
    end
    def hide() : Void
      Binding.bg_QGraphicsItem_hide_(self)
    end
    def show() : Void
      Binding.bg_QGraphicsItem_show_(self)
    end
    def enabled?() : Bool
      Binding.bg_QGraphicsItem_isEnabled_(self)
    end
    def enabled=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setEnabled_bool(self, enabled)
    end
    def selected?() : Bool
      Binding.bg_QGraphicsItem_isSelected_(self)
    end
    def selected=(selected : Bool) : Void
      Binding.bg_QGraphicsItem_setSelected_bool(self, selected)
    end
    def accept_drops() : Bool
      Binding.bg_QGraphicsItem_acceptDrops_(self)
    end
    def accept_drops=(on : Bool) : Void
      Binding.bg_QGraphicsItem_setAcceptDrops_bool(self, on)
    end
    def opacity() : Float64
      Binding.bg_QGraphicsItem_opacity_(self)
    end
    def effective_opacity() : Float64
      Binding.bg_QGraphicsItem_effectiveOpacity_(self)
    end
    def opacity=(opacity : Float64) : Void
      Binding.bg_QGraphicsItem_setOpacity_qreal(self, opacity)
    end
    def graphics_effect() : QGraphicsEffect*
      Binding.bg_QGraphicsItem_graphicsEffect_(self)
    end
    def graphics_effect=(effect : QGraphicsEffect*) : Void
      Binding.bg_QGraphicsItem_setGraphicsEffect_QGraphicsEffect_X(self, effect)
    end
    def accepted_mouse_buttons() : MouseButtons
      Binding.bg_QGraphicsItem_acceptedMouseButtons_(self)
    end
    def accepted_mouse_buttons=(buttons : MouseButtons) : Void
      Binding.bg_QGraphicsItem_setAcceptedMouseButtons_Qt__MouseButtons(self, buttons)
    end
    def accept_hover_events() : Bool
      Binding.bg_QGraphicsItem_acceptHoverEvents_(self)
    end
    def accept_hover_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setAcceptHoverEvents_bool(self, enabled)
    end
    def accept_touch_events() : Bool
      Binding.bg_QGraphicsItem_acceptTouchEvents_(self)
    end
    def accept_touch_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setAcceptTouchEvents_bool(self, enabled)
    end
    def filters_child_events() : Bool
      Binding.bg_QGraphicsItem_filtersChildEvents_(self)
    end
    def filters_child_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setFiltersChildEvents_bool(self, enabled)
    end
    def handles_child_events() : Bool
      Binding.bg_QGraphicsItem_handlesChildEvents_(self)
    end
    def handles_child_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setHandlesChildEvents_bool(self, enabled)
    end
    def active?() : Bool
      Binding.bg_QGraphicsItem_isActive_(self)
    end
    def active=(active : Bool) : Void
      Binding.bg_QGraphicsItem_setActive_bool(self, active)
    end
    def has_focus?() : Bool
      Binding.bg_QGraphicsItem_hasFocus_(self)
    end
    def focus=(focus_reason : FocusReason = FocusReason::OtherFocusReason) : Void
      Binding.bg_QGraphicsItem_setFocus_Qt__FocusReason(self, focus_reason)
    end
    def clear_focus() : Void
      Binding.bg_QGraphicsItem_clearFocus_(self)
    end
    def focus_proxy() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsItem_focusProxy_(self))
    end
    def focus_proxy=(item : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_setFocusProxy_QGraphicsItem_X(self, item)
    end
    def focus_item() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsItem_focusItem_(self))
    end
    def focus_scope_item() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsItem_focusScopeItem_(self))
    end
    def grab_mouse() : Void
      Binding.bg_QGraphicsItem_grabMouse_(self)
    end
    def ungrab_mouse() : Void
      Binding.bg_QGraphicsItem_ungrabMouse_(self)
    end
    def grab_keyboard() : Void
      Binding.bg_QGraphicsItem_grabKeyboard_(self)
    end
    def ungrab_keyboard() : Void
      Binding.bg_QGraphicsItem_ungrabKeyboard_(self)
    end
    def pos() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_pos_(self))
    end
    def x() : Float64
      Binding.bg_QGraphicsItem_x_(self)
    end
    def x=(x : Float64) : Void
      Binding.bg_QGraphicsItem_setX_qreal(self, x)
    end
    def y() : Float64
      Binding.bg_QGraphicsItem_y_(self)
    end
    def y=(y : Float64) : Void
      Binding.bg_QGraphicsItem_setY_qreal(self, y)
    end
    def scene_pos() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_scenePos_(self))
    end
    def pos=(pos : PointF) : Void
      Binding.bg_QGraphicsItem_setPos_const_QPointF_R(self, pos)
    end
    def set_pos(x : Float64, y : Float64) : Void
      Binding.bg_QGraphicsItem_setPos_qreal_qreal(self, x, y)
    end
    def move_by(dx : Float64, dy : Float64) : Void
      Binding.bg_QGraphicsItem_moveBy_qreal_qreal(self, dx, dy)
    end
    def ensure_visible() : Void
      Binding.bg_QGraphicsItem_ensureVisible_(self)
    end
    def ensure_visible(rect : RectF) : Void
      Binding.bg_QGraphicsItem_ensureVisible_const_QRectF_R(self, rect)
    end
    def ensure_visible(rect : RectF, xmargin : Int32 = 50) : Void
      Binding.bg_QGraphicsItem_ensureVisible_const_QRectF_R_int(self, rect, xmargin)
    end
    def ensure_visible(rect : RectF, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsItem_ensureVisible_const_QRectF_R_int_int(self, rect, xmargin, ymargin)
    end
    def ensure_visible(x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsItem_ensureVisible_qreal_qreal_qreal_qreal_int_int(self, x, y, w, h, xmargin, ymargin)
    end
    def matrix() : QMatrix*
      Binding.bg_QGraphicsItem_matrix_(self)
    end
    def scene_matrix() : QMatrix*
      Binding.bg_QGraphicsItem_sceneMatrix_(self)
    end
    def set_matrix(matrix : QMatrix*, combine : Bool = false) : Void
      Binding.bg_QGraphicsItem_setMatrix_const_QMatrix_R_bool(self, matrix, combine)
    end
    def reset_matrix() : Void
      Binding.bg_QGraphicsItem_resetMatrix_(self)
    end
    def transform() : QTransform*
      Binding.bg_QGraphicsItem_transform_(self)
    end
    def scene_transform() : QTransform*
      Binding.bg_QGraphicsItem_sceneTransform_(self)
    end
    def device_transform(viewport_transform : QTransform*) : QTransform*
      Binding.bg_QGraphicsItem_deviceTransform_const_QTransform_R(self, viewport_transform)
    end
    def item_transform(other : GraphicsItem, ok : Bool*? = true) : QTransform*
      Binding.bg_QGraphicsItem_itemTransform_const_QGraphicsItem_X_bool_X(self, other, ok)
    end
    def set_transform(matrix : QTransform*, combine : Bool = false) : Void
      Binding.bg_QGraphicsItem_setTransform_const_QTransform_R_bool(self, matrix, combine)
    end
    def reset_transform() : Void
      Binding.bg_QGraphicsItem_resetTransform_(self)
    end
    def rotation=(angle : Float64) : Void
      Binding.bg_QGraphicsItem_setRotation_qreal(self, angle)
    end
    def rotation() : Float64
      Binding.bg_QGraphicsItem_rotation_(self)
    end
    def scale=(scale : Float64) : Void
      Binding.bg_QGraphicsItem_setScale_qreal(self, scale)
    end
    def scale() : Float64
      Binding.bg_QGraphicsItem_scale_(self)
    end
    def transformations() : Enumerable(GraphicsTransform)
      QList_QGraphicsTransform_X.new(unwrap: Binding.bg_QGraphicsItem_transformations_(self))
    end
    def transformations=(transformations : Enumerable(GraphicsTransform)) : Void
      Binding.bg_QGraphicsItem_setTransformations_const_QList_QGraphicsTransform_X__R(self, BindgenHelper.wrap_container(QList_QGraphicsTransform_X, transformations).to_unsafe)
    end
    def transform_origin_point() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_transformOriginPoint_(self))
    end
    def transform_origin_point=(origin : PointF) : Void
      Binding.bg_QGraphicsItem_setTransformOriginPoint_const_QPointF_R(self, origin)
    end
    def set_transform_origin_point(ax : Float64, ay : Float64) : Void
      Binding.bg_QGraphicsItem_setTransformOriginPoint_qreal_qreal(self, ax, ay)
    end
    def advance(phase : Int32) : Void
      Binding.bg_QGraphicsItem_advance_int(self, phase)
    end
    def z_value() : Float64
      Binding.bg_QGraphicsItem_zValue_(self)
    end
    def z_value=(z : Float64) : Void
      Binding.bg_QGraphicsItem_setZValue_qreal(self, z)
    end
    def stack_before(sibling : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_stackBefore_const_QGraphicsItem_X(self, sibling)
    end
    abstract def bounding_rect() : RectF
    def children_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_childrenBoundingRect_(self))
    end
    def scene_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_sceneBoundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsItem_shape_(self)
    end
    def clipped?() : Bool
      Binding.bg_QGraphicsItem_isClipped_(self)
    end
    def clip_path() : QPainterPath*
      Binding.bg_QGraphicsItem_clipPath_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsItem_contains_const_QPointF_R(self, point)
    end
    def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(self, other, mode)
    end
    def collides_with_path(path : QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode)
    end
    def colliding_items(mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsItem_collidingItems_Qt__ItemSelectionMode(self, mode))
    end
    def obscured?() : Bool
      Binding.bg_QGraphicsItem_isObscured_(self)
    end
    def is_obscured(rect : RectF) : Bool
      Binding.bg_QGraphicsItem_isObscured_const_QRectF_R(self, rect)
    end
    def is_obscured(x : Float64, y : Float64, w : Float64, h : Float64) : Bool
      Binding.bg_QGraphicsItem_isObscured_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsItem_opaqueArea_(self)
    end
    def bounding_region(item_to_device_transform : QTransform*) : QRegion*
      Binding.bg_QGraphicsItem_boundingRegion_const_QTransform_R(self, item_to_device_transform)
    end
    def bounding_region_granularity() : Float64
      Binding.bg_QGraphicsItem_boundingRegionGranularity_(self)
    end
    def bounding_region_granularity=(granularity : Float64) : Void
      Binding.bg_QGraphicsItem_setBoundingRegionGranularity_qreal(self, granularity)
    end
    abstract def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget?) : Void
    def update() : Void
      Binding.bg_QGraphicsItem_update_(self)
    end
    def update(rect : RectF) : Void
      Binding.bg_QGraphicsItem_update_const_QRectF_R(self, rect)
    end
    def update(x : Float64, y : Float64, width : Float64, height : Float64) : Void
      Binding.bg_QGraphicsItem_update_qreal_qreal_qreal_qreal(self, x, y, width, height)
    end
    def scroll(dx : Float64, dy : Float64) : Void
      Binding.bg_QGraphicsItem_scroll_qreal_qreal(self, dx, dy)
    end
    def scroll(dx : Float64, dy : Float64, rect : RectF) : Void
      Binding.bg_QGraphicsItem_scroll_qreal_qreal_const_QRectF_R(self, dx, dy, rect)
    end
    def map_to_item(item : GraphicsItem, point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPointF_R(self, item, point))
    end
    def map_to_parent(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToParent_const_QPointF_R(self, point))
    end
    def map_to_scene(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToScene_const_QPointF_R(self, point))
    end
    def map_to_item(item : GraphicsItem, rect : RectF) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect)
    end
    def map_to_parent(rect : RectF) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToParent_const_QRectF_R(self, rect)
    end
    def map_to_scene(rect : RectF) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToScene_const_QRectF_R(self, rect)
    end
    def map_rect_to_item(item : GraphicsItem, rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect))
    end
    def map_rect_to_parent(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToParent_const_QRectF_R(self, rect))
    end
    def map_rect_to_scene(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToScene_const_QRectF_R(self, rect))
    end
    def map_to_item(item : GraphicsItem, polygon : QPolygonF*) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPolygonF_R(self, item, polygon)
    end
    def map_to_parent(polygon : QPolygonF*) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToParent_const_QPolygonF_R(self, polygon)
    end
    def map_to_scene(polygon : QPolygonF*) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToScene_const_QPolygonF_R(self, polygon)
    end
    def map_to_item(item : GraphicsItem, path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPainterPath_R(self, item, path)
    end
    def map_to_parent(path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsItem_mapToParent_const_QPainterPath_R(self, path)
    end
    def map_to_scene(path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsItem_mapToScene_const_QPainterPath_R(self, path)
    end
    def map_from_item(item : GraphicsItem, point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPointF_R(self, item, point))
    end
    def map_from_parent(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromParent_const_QPointF_R(self, point))
    end
    def map_from_scene(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromScene_const_QPointF_R(self, point))
    end
    def map_from_item(item : GraphicsItem, rect : RectF) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect)
    end
    def map_from_parent(rect : RectF) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromParent_const_QRectF_R(self, rect)
    end
    def map_from_scene(rect : RectF) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromScene_const_QRectF_R(self, rect)
    end
    def map_rect_from_item(item : GraphicsItem, rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect))
    end
    def map_rect_from_parent(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromParent_const_QRectF_R(self, rect))
    end
    def map_rect_from_scene(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromScene_const_QRectF_R(self, rect))
    end
    def map_from_item(item : GraphicsItem, polygon : QPolygonF*) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPolygonF_R(self, item, polygon)
    end
    def map_from_parent(polygon : QPolygonF*) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromParent_const_QPolygonF_R(self, polygon)
    end
    def map_from_scene(polygon : QPolygonF*) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromScene_const_QPolygonF_R(self, polygon)
    end
    def map_from_item(item : GraphicsItem, path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPainterPath_R(self, item, path)
    end
    def map_from_parent(path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsItem_mapFromParent_const_QPainterPath_R(self, path)
    end
    def map_from_scene(path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsItem_mapFromScene_const_QPainterPath_R(self, path)
    end
    def map_to_item(item : GraphicsItem, x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal(self, item, x, y))
    end
    def map_to_parent(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToParent_qreal_qreal(self, x, y))
    end
    def map_to_scene(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToScene_qreal_qreal(self, x, y))
    end
    def map_to_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h)
    end
    def map_to_parent(x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToParent_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def map_to_scene(x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
      Binding.bg_QGraphicsItem_mapToScene_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def map_rect_to_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h))
    end
    def map_rect_to_parent(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToParent_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    def map_rect_to_scene(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToScene_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    def map_from_item(item : GraphicsItem, x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal(self, item, x, y))
    end
    def map_from_parent(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromParent_qreal_qreal(self, x, y))
    end
    def map_from_scene(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromScene_qreal_qreal(self, x, y))
    end
    def map_from_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h)
    end
    def map_from_parent(x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromParent_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def map_from_scene(x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
      Binding.bg_QGraphicsItem_mapFromScene_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def map_rect_from_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h))
    end
    def map_rect_from_parent(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromParent_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    def map_rect_from_scene(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromScene_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    def is_ancestor_of(child : GraphicsItem) : Bool
      Binding.bg_QGraphicsItem_isAncestorOf_const_QGraphicsItem_X(self, child)
    end
    def common_ancestor_item(other : GraphicsItem) : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsItem_commonAncestorItem_const_QGraphicsItem_X(self, other))
    end
    def under_mouse?() : Bool
      Binding.bg_QGraphicsItem_isUnderMouse_(self)
    end
    def input_method_hints() : InputMethodHints
      Binding.bg_QGraphicsItem_inputMethodHints_(self)
    end
    def input_method_hints=(hints : InputMethodHints) : Void
      Binding.bg_QGraphicsItem_setInputMethodHints_Qt__InputMethodHints(self, hints)
    end
    def type() : Int32
      Binding.bg_QGraphicsItem_type_(self)
    end
    def install_scene_event_filter(filter_item : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_installSceneEventFilter_QGraphicsItem_X(self, filter_item)
    end
    def remove_scene_event_filter(filter_item : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_removeSceneEventFilter_QGraphicsItem_X(self, filter_item)
    end
    protected def update_micro_focus() : Void
      Binding.bg_QGraphicsItem_updateMicroFocus_(self)
    end
    protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(self, watched, event)
    end
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEvent_QEvent_X(self, event)
    end
    protected def context_menu_event(event : QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    protected def drag_enter_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drag_leave_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drag_move_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drop_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def hover_enter_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def hover_move_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def hover_leave_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def key_press_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(self, event)
    end
    protected def key_release_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    protected def mouse_press_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_double_click_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def wheel_event(event : QGraphicsSceneWheelEvent*) : Void
      Binding.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(self, event)
    end
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    protected def initialize(dd : QGraphicsItemPrivate*, parent : GraphicsItem)
      unwrap = Binding.bg_QGraphicsItem_CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsItem.new(
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def add_to_index() : Void
      Binding.bg_QGraphicsItem_addToIndex_(self)
    end
    protected def remove_from_index() : Void
      Binding.bg_QGraphicsItem_removeFromIndex_(self)
    end
    protected def prepare_geometry_change() : Void
      Binding.bg_QGraphicsItem_prepareGeometryChange_(self)
    end
  end
  class GraphicsItemImpl < GraphicsItem
    macro inherited
      {{ raise "You can't sub-class GraphicsItemImpl, inherit from GraphicsItem instead" }}
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_boundingRect_(self))
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
  end
  class GraphicsScene < Object
    enum ItemIndexMethod : Int32
      BspTreeIndex = 0
      NoIndex = -1
    end
    enum SceneLayer : UInt32
      ItemLayer = 1
      BackgroundLayer = 2
      ForegroundLayer = 4
      AllLayers = 65535
    end
    @[Flags]
    enum SceneLayers : UInt32
      ItemLayer = 1
      BackgroundLayer = 2
      ForegroundLayer = 4
      AllLayers = 65535
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGraphicsScene_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsScene_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsScene_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QGraphicsScene_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsScene)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event help_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event draw_background draw_foreground draw_items timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsScene.new(
      bg_QGraphicsScene_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsScene_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} ->(event : QGraphicsSceneHelpEvent*){ self.help_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} ->(painter : Binding::QPainter*, num_items : Int32, items : Binding::QGraphicsItem**, options : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItem.new(unwrap: items), options, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsScene_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(scene_rect : RectF, parent : Object? = nil)
      unwrap = Binding.bg_QGraphicsScene_CONSTRUCT_const_QRectF_R_QObject_X(scene_rect, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsScene)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event help_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event draw_background draw_foreground draw_items timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsScene.new(
      bg_QGraphicsScene_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsScene_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} ->(event : QGraphicsSceneHelpEvent*){ self.help_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} ->(painter : Binding::QPainter*, num_items : Int32, items : Binding::QGraphicsItem**, options : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItem.new(unwrap: items), options, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsScene_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(x : Float64, y : Float64, width : Float64, height : Float64, parent : Object? = nil)
      unwrap = Binding.bg_QGraphicsScene_CONSTRUCT_qreal_qreal_qreal_qreal_QObject_X(x, y, width, height, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsScene)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event help_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event draw_background draw_foreground draw_items timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsScene.new(
      bg_QGraphicsScene_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsScene_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} ->(event : QGraphicsSceneHelpEvent*){ self.help_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} ->(painter : Binding::QPainter*, num_items : Int32, items : Binding::QGraphicsItem**, options : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItem.new(unwrap: items), options, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsScene_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def scene_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsScene_sceneRect_(self))
    end
    def width() : Float64
      Binding.bg_QGraphicsScene_width_(self)
    end
    def height() : Float64
      Binding.bg_QGraphicsScene_height_(self)
    end
    def scene_rect=(rect : RectF) : Void
      Binding.bg_QGraphicsScene_setSceneRect_const_QRectF_R(self, rect)
    end
    def set_scene_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsScene_setSceneRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def render(painter : Painter) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X(self, painter)
    end
    def render(painter : Painter, target : RectF) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X_const_QRectF_R(self, painter, target)
    end
    def render(painter : Painter, target : RectF, source : RectF) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R(self, painter, target, source)
    end
    def render(painter : Painter, target : RectF, source : RectF, aspect_ratio_mode : AspectRatioMode = AspectRatioMode::KeepAspectRatio) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R_Qt__AspectRatioMode(self, painter, target, source, aspect_ratio_mode)
    end
    def item_index_method() : GraphicsScene::ItemIndexMethod
      Binding.bg_QGraphicsScene_itemIndexMethod_(self)
    end
    def item_index_method=(method : GraphicsScene::ItemIndexMethod) : Void
      Binding.bg_QGraphicsScene_setItemIndexMethod_QGraphicsScene__ItemIndexMethod(self, method)
    end
    def sort_cache_enabled?() : Bool
      Binding.bg_QGraphicsScene_isSortCacheEnabled_(self)
    end
    def sort_cache_enabled=(enabled : Bool) : Void
      Binding.bg_QGraphicsScene_setSortCacheEnabled_bool(self, enabled)
    end
    def bsp_tree_depth() : Int32
      Binding.bg_QGraphicsScene_bspTreeDepth_(self)
    end
    def bsp_tree_depth=(depth : Int32) : Void
      Binding.bg_QGraphicsScene_setBspTreeDepth_int(self, depth)
    end
    def items_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsScene_itemsBoundingRect_(self))
    end
    def items(order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_Qt__SortOrder(self, order))
    end
    def items(pos : PointF, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder(self, pos, mode, order))
    end
    def items(pos : PointF, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, pos, mode, order, device_transform))
    end
    def items(rect : RectF, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder(self, rect, mode, order))
    end
    def items(rect : RectF, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, rect, mode, order, device_transform))
    end
    def items(polygon : QPolygonF*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder(self, polygon, mode, order))
    end
    def items(polygon : QPolygonF*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, polygon, mode, order, device_transform))
    end
    def items(path : QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder(self, path, mode, order))
    end
    def items(path : QPainterPath*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, path, mode, order, device_transform))
    end
    def colliding_items(item : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_collidingItems_const_QGraphicsItem_X_Qt__ItemSelectionMode(self, item, mode))
    end
    def item_at(pos : PointF, device_transform : QTransform*) : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsScene_itemAt_const_QPointF_R_const_QTransform_R(self, pos, device_transform))
    end
    def items(x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder(self, x, y, w, h, mode, order))
    end
    def items(x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, x, y, w, h, mode, order, device_transform))
    end
    def item_at(x : Float64, y : Float64, device_transform : QTransform*) : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsScene_itemAt_qreal_qreal_const_QTransform_R(self, x, y, device_transform))
    end
    def selected_items() : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsScene_selectedItems_(self))
    end
    def selection_area() : QPainterPath*
      Binding.bg_QGraphicsScene_selectionArea_(self)
    end
    def set_selection_area(path : QPainterPath*, device_transform : QTransform*) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_const_QTransform_R(self, path, device_transform)
    end
    def set_selection_area(path : QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode)
    end
    def set_selection_area(path : QPainterPath*, mode : ItemSelectionMode, device_transform : QTransform*) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode_const_QTransform_R(self, path, mode, device_transform)
    end
    def set_selection_area(path : QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode(self, path, selection_operation, mode)
    end
    def set_selection_area(path : QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode, device_transform : QTransform*) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode_const_QTransform_R(self, path, selection_operation, mode, device_transform)
    end
    def create_item_group(items : Enumerable(GraphicsItem)) : QGraphicsItemGroup*
      Binding.bg_QGraphicsScene_createItemGroup_const_QList_QGraphicsItem_X__R(self, BindgenHelper.wrap_container(QList_QGraphicsItem_X, items).to_unsafe)
    end
    def destroy_item_group(group : QGraphicsItemGroup*) : Void
      Binding.bg_QGraphicsScene_destroyItemGroup_QGraphicsItemGroup_X(self, group)
    end
    def add_item(item : GraphicsItem) : Void
      Binding.bg_QGraphicsScene_addItem_QGraphicsItem_X(self, item)
    end
    def add_ellipse(rect : RectF) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_const_QRectF_R(self, rect))
    end
    def add_ellipse(rect : RectF, pen : QPen*) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R(self, rect, pen))
    end
    def add_ellipse(rect : RectF, pen : QPen*, brush : Brush) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R_const_QBrush_R(self, rect, pen, brush))
    end
    def add_line(line : QLineF) : QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_const_QLineF_R(self, line)
    end
    def add_line(line : QLineF, pen : QPen*) : QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_const_QLineF_R_const_QPen_R(self, line, pen)
    end
    def add_path(path : QPainterPath*) : GraphicsPathItem
      GraphicsPathItem.new(unwrap: Binding.bg_QGraphicsScene_addPath_const_QPainterPath_R(self, path))
    end
    def add_path(path : QPainterPath*, pen : QPen*) : GraphicsPathItem
      GraphicsPathItem.new(unwrap: Binding.bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R(self, path, pen))
    end
    def add_path(path : QPainterPath*, pen : QPen*, brush : Brush) : GraphicsPathItem
      GraphicsPathItem.new(unwrap: Binding.bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R_const_QBrush_R(self, path, pen, brush))
    end
    def add_pixmap(pixmap : Pixmap) : GraphicsPixmapItem
      GraphicsPixmapItem.new(unwrap: Binding.bg_QGraphicsScene_addPixmap_const_QPixmap_R(self, pixmap))
    end
    def add_polygon(polygon : QPolygonF*) : GraphicsPolygonItem
      GraphicsPolygonItem.new(unwrap: Binding.bg_QGraphicsScene_addPolygon_const_QPolygonF_R(self, polygon))
    end
    def add_polygon(polygon : QPolygonF*, pen : QPen*) : GraphicsPolygonItem
      GraphicsPolygonItem.new(unwrap: Binding.bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R(self, polygon, pen))
    end
    def add_polygon(polygon : QPolygonF*, pen : QPen*, brush : Brush) : GraphicsPolygonItem
      GraphicsPolygonItem.new(unwrap: Binding.bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R_const_QBrush_R(self, polygon, pen, brush))
    end
    def add_rect(rect : RectF) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_const_QRectF_R(self, rect))
    end
    def add_rect(rect : RectF, pen : QPen*) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R(self, rect, pen))
    end
    def add_rect(rect : RectF, pen : QPen*, brush : Brush) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R_const_QBrush_R(self, rect, pen, brush))
    end
    def add_text(text : String) : GraphicsTextItem
      GraphicsTextItem.new(unwrap: Binding.bg_QGraphicsScene_addText_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_text(text : String, font : Font) : GraphicsTextItem
      GraphicsTextItem.new(unwrap: Binding.bg_QGraphicsScene_addText_const_QString_R_const_QFont_R(self, Qt::Converter::QString.wrap(text), font))
    end
    def add_simple_text(text : String) : GraphicsSimpleTextItem
      GraphicsSimpleTextItem.new(unwrap: Binding.bg_QGraphicsScene_addSimpleText_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    def add_simple_text(text : String, font : Font) : GraphicsSimpleTextItem
      GraphicsSimpleTextItem.new(unwrap: Binding.bg_QGraphicsScene_addSimpleText_const_QString_R_const_QFont_R(self, Qt::Converter::QString.wrap(text), font))
    end
    def add_widget(widget : Widget) : QGraphicsProxyWidget*
      Binding.bg_QGraphicsScene_addWidget_QWidget_X(self, widget)
    end
    def add_widget(widget : Widget, w_flags : WindowFlags) : QGraphicsProxyWidget*
      Binding.bg_QGraphicsScene_addWidget_QWidget_X_Qt__WindowFlags(self, widget, w_flags)
    end
    def add_ellipse(x : Float64, y : Float64, w : Float64, h : Float64) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    def add_ellipse(x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R(self, x, y, w, h, pen))
    end
    def add_ellipse(x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*, brush : Brush) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(self, x, y, w, h, pen, brush))
    end
    def add_line(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    def add_line(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64, pen : QPen*) : QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal_const_QPen_R(self, x1, y1, x2, y2, pen)
    end
    def add_rect(x : Float64, y : Float64, w : Float64, h : Float64) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    def add_rect(x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R(self, x, y, w, h, pen))
    end
    def add_rect(x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*, brush : Brush) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(self, x, y, w, h, pen, brush))
    end
    def remove_item(item : GraphicsItem) : Void
      Binding.bg_QGraphicsScene_removeItem_QGraphicsItem_X(self, item)
    end
    def focus_item() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsScene_focusItem_(self))
    end
    def set_focus_item(item : GraphicsItem, focus_reason : FocusReason = FocusReason::OtherFocusReason) : Void
      Binding.bg_QGraphicsScene_setFocusItem_QGraphicsItem_X_Qt__FocusReason(self, item, focus_reason)
    end
    def has_focus?() : Bool
      Binding.bg_QGraphicsScene_hasFocus_(self)
    end
    def focus=(focus_reason : FocusReason = FocusReason::OtherFocusReason) : Void
      Binding.bg_QGraphicsScene_setFocus_Qt__FocusReason(self, focus_reason)
    end
    def clear_focus() : Void
      Binding.bg_QGraphicsScene_clearFocus_(self)
    end
    def sticky_focus=(enabled : Bool) : Void
      Binding.bg_QGraphicsScene_setStickyFocus_bool(self, enabled)
    end
    def sticky_focus() : Bool
      Binding.bg_QGraphicsScene_stickyFocus_(self)
    end
    def mouse_grabber_item() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsScene_mouseGrabberItem_(self))
    end
    def background_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsScene_backgroundBrush_(self))
    end
    def background_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsScene_setBackgroundBrush_const_QBrush_R(self, brush)
    end
    def foreground_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsScene_foregroundBrush_(self))
    end
    def foreground_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsScene_setForegroundBrush_const_QBrush_R(self, brush)
    end
    def views() : Enumerable(GraphicsView)
      QList_QGraphicsView_X.new(unwrap: Binding.bg_QGraphicsScene_views_(self))
    end
    def update(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsScene_update_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def invalidate(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def invalidate(x : Float64, y : Float64, w : Float64, h : Float64, layers : GraphicsScene::SceneLayers) : Void
      Binding.bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal_QGraphicsScene__SceneLayers(self, x, y, w, h, layers)
    end
    def style() : QStyle*
      Binding.bg_QGraphicsScene_style_(self)
    end
    def style=(style : QStyle*) : Void
      Binding.bg_QGraphicsScene_setStyle_QStyle_X(self, style)
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsScene_font_(self))
    end
    def font=(font : Font) : Void
      Binding.bg_QGraphicsScene_setFont_const_QFont_R(self, font)
    end
    def palette() : Palette
      Palette.new(unwrap: Binding.bg_QGraphicsScene_palette_(self))
    end
    def palette=(palette : Palette) : Void
      Binding.bg_QGraphicsScene_setPalette_const_QPalette_R(self, palette)
    end
    def active?() : Bool
      Binding.bg_QGraphicsScene_isActive_(self)
    end
    def active_panel() : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsScene_activePanel_(self))
    end
    def active_panel=(item : GraphicsItem) : Void
      Binding.bg_QGraphicsScene_setActivePanel_QGraphicsItem_X(self, item)
    end
    def active_window() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsScene_activeWindow_(self))
    end
    def active_window=(widget : GraphicsWidget) : Void
      Binding.bg_QGraphicsScene_setActiveWindow_QGraphicsWidget_X(self, widget)
    end
    def send_event(item : GraphicsItem, event : Event) : Bool
      Binding.bg_QGraphicsScene_sendEvent_QGraphicsItem_X_QEvent_X(self, item, event)
    end
    def minimum_render_size() : Float64
      Binding.bg_QGraphicsScene_minimumRenderSize_(self)
    end
    def minimum_render_size=(min_size : Float64) : Void
      Binding.bg_QGraphicsScene_setMinimumRenderSize_qreal(self, min_size)
    end
    def update() : Void
      Binding.bg_QGraphicsScene_update_(self)
    end
    def update(rect : RectF) : Void
      Binding.bg_QGraphicsScene_update_const_QRectF_R(self, rect)
    end
    def invalidate() : Void
      Binding.bg_QGraphicsScene_invalidate_(self)
    end
    def invalidate(rect : RectF) : Void
      Binding.bg_QGraphicsScene_invalidate_const_QRectF_R(self, rect)
    end
    def invalidate(rect : RectF, layers : GraphicsScene::SceneLayers) : Void
      Binding.bg_QGraphicsScene_invalidate_const_QRectF_R_QGraphicsScene__SceneLayers(self, rect, layers)
    end
    def advance() : Void
      Binding.bg_QGraphicsScene_advance_(self)
    end
    def clear_selection() : Void
      Binding.bg_QGraphicsScene_clearSelection_(self)
    end
    def clear() : Void
      Binding.bg_QGraphicsScene_clear_(self)
    end
    protected def event(event : Event) : Bool
      Binding.bg_QGraphicsScene_event_QEvent_X(self, event)
    end
    protected def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    protected def context_menu_event(event : QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    protected def drag_enter_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drag_move_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drag_leave_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drop_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsScene_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def help_event(event : QGraphicsSceneHelpEvent*) : Void
      Binding.bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(self, event)
    end
    protected def key_press_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(self, event)
    end
    protected def key_release_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    protected def mouse_press_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_double_click_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def wheel_event(event : QGraphicsSceneWheelEvent*) : Void
      Binding.bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(self, event)
    end
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    protected def draw_background(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    protected def draw_foreground(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    protected def draw_items(painter : Painter, num_items : Int32, items : GraphicsItem*, options : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, num_items, items, options, widget)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QGraphicsScene_focusNextPrevChild_bool(self, next_)
    end
    def changed(region : Enumerable(RectF)) : Void
      Binding.bg_QGraphicsScene_changed_const_QList_QRectF__R(self, BindgenHelper.wrap_container(QList_QRectF, region).to_unsafe)
    end
    def on_changed(&block : Proc(Enumerable(RectF), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_changed_CONNECT_CrystalProc_void__const_QList_QRectF_X_(self, BindgenHelper.wrap_proc(->(region : Void**){ block.call(QList_QRectF.new(unwrap: region)) })))
    end
    def scene_rect_changed(rect : RectF) : Void
      Binding.bg_QGraphicsScene_sceneRectChanged_const_QRectF_R(self, rect)
    end
    def on_scene_rect_changed(&block : Proc(RectF, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_sceneRectChanged_CONNECT_CrystalProc_void__const_QRectFR_(self, BindgenHelper.wrap_proc(->(rect : Binding::QRectF*){ block.call(RectF.new(unwrap: rect)) })))
    end
    def selection_changed() : Void
      Binding.bg_QGraphicsScene_selectionChanged_(self)
    end
    def on_selection_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_selectionChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def focus_item_changed(new_focus : GraphicsItem, old_focus : GraphicsItem, reason : FocusReason) : Void
      Binding.bg_QGraphicsScene_focusItemChanged_QGraphicsItem_X_QGraphicsItem_X_Qt__FocusReason(self, new_focus, old_focus, reason)
    end
    def on_focus_item_changed(&block : Proc(GraphicsItem, GraphicsItem, FocusReason, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_focusItemChanged_CONNECT_CrystalProc_void__QGraphicsItemX__QGraphicsItemX__Qt__FocusReason_(self, BindgenHelper.wrap_proc(->(new_focus : Binding::QGraphicsItem*, old_focus : Binding::QGraphicsItem*, reason : FocusReason){ block.call(GraphicsItem.new(unwrap: new_focus), GraphicsItem.new(unwrap: old_focus), reason) })))
    end
  end
  class GraphicsView < AbstractScrollArea
    enum ViewportAnchor : UInt32
      NoAnchor = 0
      AnchorViewCenter = 1
      AnchorUnderMouse = 2
    end
    enum ViewportUpdateMode : UInt32
      FullViewportUpdate = 0
      MinimalViewportUpdate = 1
      SmartViewportUpdate = 2
      NoViewportUpdate = 3
      BoundingRectViewportUpdate = 4
    end
    @[Flags]
    enum OptimizationFlags : UInt32
      DontClipPainter = 1
      DontSavePainterState = 2
      DontAdjustForAntialiasing = 4
      IndirectPainting = 8
    end
    enum OptimizationFlag : UInt32
      DontClipPainter = 1
      DontSavePainterState = 2
      DontAdjustForAntialiasing = 4
      IndirectPainting = 8
    end
    enum DragMode : UInt32
      NoDrag = 0
      ScrollHandDrag = 1
      RubberBandDrag = 2
    end
    @[Flags]
    enum CacheMode : UInt32
      CacheNone = 0
      CacheBackground = 1
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGraphicsView_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsView_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsView_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Widget? = nil)
      unwrap = Binding.bg_QGraphicsView_CONSTRUCT_QWidget_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint setup_viewport event viewport_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_next_prev_child focus_out_event key_press_event key_release_event mouse_double_click_event mouse_press_event mouse_move_event mouse_release_event wheel_event paint_event resize_event scroll_contents_by show_event input_method_event draw_background draw_foreground draw_items minimum_size_hint event_filter viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter shared_painter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsView.new(
      bg_QGraphicsView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsView_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QGraphicsView_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(widget : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(event : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QGraphicsView_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} ->(painter : Binding::QPainter*, num_items : Int32, items : Binding::QGraphicsItem**, options : QStyleOptionGraphicsItem*){ self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItem.new(unwrap: items), options) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsView_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(scene : GraphicsScene, parent : Widget? = nil)
      unwrap = Binding.bg_QGraphicsView_CONSTRUCT_QGraphicsScene_X_QWidget_X(scene, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint setup_viewport event viewport_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_next_prev_child focus_out_event key_press_event key_release_event mouse_double_click_event mouse_press_event mouse_move_event mouse_release_event wheel_event paint_event resize_event scroll_contents_by show_event input_method_event draw_background draw_foreground draw_items minimum_size_hint event_filter viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter shared_painter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsView.new(
      bg_QGraphicsView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsView_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QGraphicsView_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(widget : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(event : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QGraphicsView_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} ->(painter : Binding::QPainter*, num_items : Int32, items : Binding::QGraphicsItem**, options : QStyleOptionGraphicsItem*){ self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItem.new(unwrap: items), options) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsView_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def size_hint() : QSize*
      Binding.bg_QGraphicsView_sizeHint_(self)
    end
    def render_hints() : Painter::RenderHints
      Binding.bg_QGraphicsView_renderHints_(self)
    end
    def set_render_hint(hint : Painter::RenderHint, enabled : Bool = true) : Void
      Binding.bg_QGraphicsView_setRenderHint_QPainter__RenderHint_bool(self, hint, enabled)
    end
    def render_hints=(hints : Painter::RenderHints) : Void
      Binding.bg_QGraphicsView_setRenderHints_QPainter__RenderHints(self, hints)
    end
    def alignment() : Alignment
      Binding.bg_QGraphicsView_alignment_(self)
    end
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QGraphicsView_setAlignment_Qt__Alignment(self, alignment)
    end
    def transformation_anchor() : GraphicsView::ViewportAnchor
      Binding.bg_QGraphicsView_transformationAnchor_(self)
    end
    def transformation_anchor=(anchor : GraphicsView::ViewportAnchor) : Void
      Binding.bg_QGraphicsView_setTransformationAnchor_QGraphicsView__ViewportAnchor(self, anchor)
    end
    def resize_anchor() : GraphicsView::ViewportAnchor
      Binding.bg_QGraphicsView_resizeAnchor_(self)
    end
    def resize_anchor=(anchor : GraphicsView::ViewportAnchor) : Void
      Binding.bg_QGraphicsView_setResizeAnchor_QGraphicsView__ViewportAnchor(self, anchor)
    end
    def viewport_update_mode() : GraphicsView::ViewportUpdateMode
      Binding.bg_QGraphicsView_viewportUpdateMode_(self)
    end
    def viewport_update_mode=(mode : GraphicsView::ViewportUpdateMode) : Void
      Binding.bg_QGraphicsView_setViewportUpdateMode_QGraphicsView__ViewportUpdateMode(self, mode)
    end
    def optimization_flags() : GraphicsView::OptimizationFlags
      Binding.bg_QGraphicsView_optimizationFlags_(self)
    end
    def set_optimization_flag(flag : GraphicsView::OptimizationFlag, enabled : Bool = true) : Void
      Binding.bg_QGraphicsView_setOptimizationFlag_QGraphicsView__OptimizationFlag_bool(self, flag, enabled)
    end
    def optimization_flags=(flags : GraphicsView::OptimizationFlags) : Void
      Binding.bg_QGraphicsView_setOptimizationFlags_QGraphicsView__OptimizationFlags(self, flags)
    end
    def drag_mode() : GraphicsView::DragMode
      Binding.bg_QGraphicsView_dragMode_(self)
    end
    def drag_mode=(mode : GraphicsView::DragMode) : Void
      Binding.bg_QGraphicsView_setDragMode_QGraphicsView__DragMode(self, mode)
    end
    def rubber_band_selection_mode() : ItemSelectionMode
      Binding.bg_QGraphicsView_rubberBandSelectionMode_(self)
    end
    def rubber_band_selection_mode=(mode : ItemSelectionMode) : Void
      Binding.bg_QGraphicsView_setRubberBandSelectionMode_Qt__ItemSelectionMode(self, mode)
    end
    def rubber_band_rect() : Rect
      Rect.new(unwrap: Binding.bg_QGraphicsView_rubberBandRect_(self))
    end
    def cache_mode() : GraphicsView::CacheMode
      Binding.bg_QGraphicsView_cacheMode_(self)
    end
    def cache_mode=(mode : GraphicsView::CacheMode) : Void
      Binding.bg_QGraphicsView_setCacheMode_QGraphicsView__CacheMode(self, mode)
    end
    def reset_cached_content() : Void
      Binding.bg_QGraphicsView_resetCachedContent_(self)
    end
    def interactive?() : Bool
      Binding.bg_QGraphicsView_isInteractive_(self)
    end
    def interactive=(allowed : Bool) : Void
      Binding.bg_QGraphicsView_setInteractive_bool(self, allowed)
    end
    def scene() : GraphicsScene
      GraphicsScene.new(unwrap: Binding.bg_QGraphicsView_scene_(self))
    end
    def scene=(scene : GraphicsScene) : Void
      Binding.bg_QGraphicsView_setScene_QGraphicsScene_X(self, scene)
    end
    def scene_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsView_sceneRect_(self))
    end
    def scene_rect=(rect : RectF) : Void
      Binding.bg_QGraphicsView_setSceneRect_const_QRectF_R(self, rect)
    end
    def set_scene_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsView_setSceneRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def matrix() : QMatrix*
      Binding.bg_QGraphicsView_matrix_(self)
    end
    def set_matrix(matrix : QMatrix*, combine : Bool = false) : Void
      Binding.bg_QGraphicsView_setMatrix_const_QMatrix_R_bool(self, matrix, combine)
    end
    def reset_matrix() : Void
      Binding.bg_QGraphicsView_resetMatrix_(self)
    end
    def transform() : QTransform*
      Binding.bg_QGraphicsView_transform_(self)
    end
    def viewport_transform() : QTransform*
      Binding.bg_QGraphicsView_viewportTransform_(self)
    end
    def transformed?() : Bool
      Binding.bg_QGraphicsView_isTransformed_(self)
    end
    def set_transform(matrix : QTransform*, combine : Bool = false) : Void
      Binding.bg_QGraphicsView_setTransform_const_QTransform_R_bool(self, matrix, combine)
    end
    def reset_transform() : Void
      Binding.bg_QGraphicsView_resetTransform_(self)
    end
    def rotate(angle : Float64) : Void
      Binding.bg_QGraphicsView_rotate_qreal(self, angle)
    end
    def scale(sx : Float64, sy : Float64) : Void
      Binding.bg_QGraphicsView_scale_qreal_qreal(self, sx, sy)
    end
    def shear(sh : Float64, sv : Float64) : Void
      Binding.bg_QGraphicsView_shear_qreal_qreal(self, sh, sv)
    end
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QGraphicsView_translate_qreal_qreal(self, dx, dy)
    end
    def center_on(pos : PointF) : Void
      Binding.bg_QGraphicsView_centerOn_const_QPointF_R(self, pos)
    end
    def center_on(x : Float64, y : Float64) : Void
      Binding.bg_QGraphicsView_centerOn_qreal_qreal(self, x, y)
    end
    def center_on(item : GraphicsItem) : Void
      Binding.bg_QGraphicsView_centerOn_const_QGraphicsItem_X(self, item)
    end
    def ensure_visible(rect : RectF, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsView_ensureVisible_const_QRectF_R_int_int(self, rect, xmargin, ymargin)
    end
    def ensure_visible(x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsView_ensureVisible_qreal_qreal_qreal_qreal_int_int(self, x, y, w, h, xmargin, ymargin)
    end
    def ensure_visible(item : GraphicsItem, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsView_ensureVisible_const_QGraphicsItem_X_int_int(self, item, xmargin, ymargin)
    end
    def fit_in_view(rect : RectF, aspect_radio_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio) : Void
      Binding.bg_QGraphicsView_fitInView_const_QRectF_R_Qt__AspectRatioMode(self, rect, aspect_radio_mode)
    end
    def fit_in_view(x : Float64, y : Float64, w : Float64, h : Float64, aspect_radio_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio) : Void
      Binding.bg_QGraphicsView_fitInView_qreal_qreal_qreal_qreal_Qt__AspectRatioMode(self, x, y, w, h, aspect_radio_mode)
    end
    def fit_in_view(item : GraphicsItem, aspect_radio_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio) : Void
      Binding.bg_QGraphicsView_fitInView_const_QGraphicsItem_X_Qt__AspectRatioMode(self, item, aspect_radio_mode)
    end
    def render(painter : Painter) : Void
      Binding.bg_QGraphicsView_render_QPainter_X(self, painter)
    end
    def render(painter : Painter, target : RectF) : Void
      Binding.bg_QGraphicsView_render_QPainter_X_const_QRectF_R(self, painter, target)
    end
    def render(painter : Painter, target : RectF, source : Rect) : Void
      Binding.bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R(self, painter, target, source)
    end
    def render(painter : Painter, target : RectF, source : Rect, aspect_ratio_mode : AspectRatioMode = AspectRatioMode::KeepAspectRatio) : Void
      Binding.bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R_Qt__AspectRatioMode(self, painter, target, source, aspect_ratio_mode)
    end
    def items() : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsView_items_(self))
    end
    def items(pos : Point) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsView_items_const_QPoint_R(self, pos))
    end
    def items(x : Int32, y : Int32) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsView_items_int_int(self, x, y))
    end
    def items(rect : Rect, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsView_items_const_QRect_R_Qt__ItemSelectionMode(self, rect, mode))
    end
    def items(x : Int32, y : Int32, w : Int32, h : Int32, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsView_items_int_int_int_int_Qt__ItemSelectionMode(self, x, y, w, h, mode))
    end
    def items(polygon : QPolygon*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsView_items_const_QPolygon_R_Qt__ItemSelectionMode(self, polygon, mode))
    end
    def items(path : QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      QList_QGraphicsItem_X.new(unwrap: Binding.bg_QGraphicsView_items_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode))
    end
    def item_at(pos : Point) : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsView_itemAt_const_QPoint_R(self, pos))
    end
    def item_at(x : Int32, y : Int32) : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QGraphicsView_itemAt_int_int(self, x, y))
    end
    def map_to_scene(point : Point) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsView_mapToScene_const_QPoint_R(self, point))
    end
    def map_to_scene(rect : Rect) : QPolygonF*
      Binding.bg_QGraphicsView_mapToScene_const_QRect_R(self, rect)
    end
    def map_to_scene(polygon : QPolygon*) : QPolygonF*
      Binding.bg_QGraphicsView_mapToScene_const_QPolygon_R(self, polygon)
    end
    def map_to_scene(path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsView_mapToScene_const_QPainterPath_R(self, path)
    end
    def map_from_scene(point : PointF) : Point
      Point.new(unwrap: Binding.bg_QGraphicsView_mapFromScene_const_QPointF_R(self, point))
    end
    def map_from_scene(rect : RectF) : QPolygon*
      Binding.bg_QGraphicsView_mapFromScene_const_QRectF_R(self, rect)
    end
    def map_from_scene(polygon : QPolygonF*) : QPolygon*
      Binding.bg_QGraphicsView_mapFromScene_const_QPolygonF_R(self, polygon)
    end
    def map_from_scene(path : QPainterPath*) : QPainterPath*
      Binding.bg_QGraphicsView_mapFromScene_const_QPainterPath_R(self, path)
    end
    def map_to_scene(x : Int32, y : Int32) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsView_mapToScene_int_int(self, x, y))
    end
    def map_to_scene(x : Int32, y : Int32, w : Int32, h : Int32) : QPolygonF*
      Binding.bg_QGraphicsView_mapToScene_int_int_int_int(self, x, y, w, h)
    end
    def map_from_scene(x : Float64, y : Float64) : Point
      Point.new(unwrap: Binding.bg_QGraphicsView_mapFromScene_qreal_qreal(self, x, y))
    end
    def map_from_scene(x : Float64, y : Float64, w : Float64, h : Float64) : QPolygon*
      Binding.bg_QGraphicsView_mapFromScene_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def background_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsView_backgroundBrush_(self))
    end
    def background_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsView_setBackgroundBrush_const_QBrush_R(self, brush)
    end
    def foreground_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsView_foregroundBrush_(self))
    end
    def foreground_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsView_setForegroundBrush_const_QBrush_R(self, brush)
    end
    def update_scene(rects : Enumerable(RectF)) : Void
      Binding.bg_QGraphicsView_updateScene_const_QList_QRectF__R(self, BindgenHelper.wrap_container(QList_QRectF, rects).to_unsafe)
    end
    def invalidate_scene() : Void
      Binding.bg_QGraphicsView_invalidateScene_(self)
    end
    def invalidate_scene(rect : RectF) : Void
      Binding.bg_QGraphicsView_invalidateScene_const_QRectF_R(self, rect)
    end
    def invalidate_scene(rect : RectF, layers : GraphicsScene::SceneLayers) : Void
      Binding.bg_QGraphicsView_invalidateScene_const_QRectF_R_QGraphicsScene__SceneLayers(self, rect, layers)
    end
    def update_scene_rect(rect : RectF) : Void
      Binding.bg_QGraphicsView_updateSceneRect_const_QRectF_R(self, rect)
    end
    def rubber_band_changed(viewport_rect : Rect, from_scene_point : PointF, to_scene_point : PointF) : Void
      Binding.bg_QGraphicsView_rubberBandChanged_QRect_QPointF_QPointF(self, viewport_rect, from_scene_point, to_scene_point)
    end
    def on_rubber_band_changed(&block : Proc(Rect, PointF, PointF, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsView_rubberBandChanged_CONNECT_CrystalProc_void__QRectR__QPointF__QPointF_(self, BindgenHelper.wrap_proc(->(viewport_rect : Binding::QRect*, from_scene_point : Binding::QPointF, to_scene_point : Binding::QPointF){ block.call(Rect.new(unwrap: viewport_rect), PointF.new(unwrap: from_scene_point), PointF.new(unwrap: to_scene_point)) })))
    end
    protected def setup_viewport(widget : Widget) : Void
      Binding.bg_QGraphicsView_setupViewport_QWidget_X(self, widget)
    end
    protected def initialize(unnamed_arg_0 : QGraphicsViewPrivate*, parent : Widget? = nil)
      unwrap = Binding.bg_QGraphicsView_CONSTRUCT_QGraphicsViewPrivate_R_QWidget_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint setup_viewport event viewport_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_next_prev_child focus_out_event key_press_event key_release_event mouse_double_click_event mouse_press_event mouse_move_event mouse_release_event wheel_event paint_event resize_event scroll_contents_by show_event input_method_event draw_background draw_foreground draw_items minimum_size_hint event_filter viewport_size_hint change_event dev_type visible= height_for_width has_height_for_width? paint_engine enter_event leave_event move_event close_event tablet_event action_event hide_event native_event metric init_painter shared_painter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsView.new(
      bg_QGraphicsView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsView_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QGraphicsView_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} ->(widget : Binding::QWidget*){ self.setup_viewport(Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} ->(event : Binding::QEvent*){ self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} ->(dx : Int32, dy : Int32){ self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QGraphicsView_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} ->(painter : Binding::QPainter*, rect : Binding::QRectF*){ self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} ->(painter : Binding::QPainter*, num_items : Int32, items : Binding::QGraphicsItem**, options : QStyleOptionGraphicsItem*){ self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItem.new(unwrap: items), options) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(unnamed_arg_0 : Binding::QObject*, unnamed_arg_1 : Binding::QEvent*){ self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} ->(){ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsView_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def event(event : Event) : Bool
      Binding.bg_QGraphicsView_event_QEvent_X(self, event)
    end
    protected def viewport_event(event : Event) : Bool
      Binding.bg_QGraphicsView_viewportEvent_QEvent_X(self, event)
    end
    protected def context_menu_event(event : QContextMenuEvent*) : Void
      Binding.bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QGraphicsView_dropEvent_QDropEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsView_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QGraphicsView_focusNextPrevChild_bool(self, next_)
    end
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsView_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def key_press_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsView_keyPressEvent_QKeyEvent_X(self, event)
    end
    protected def key_release_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mousePressEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    protected def wheel_event(event : QWheelEvent*) : Void
      Binding.bg_QGraphicsView_wheelEvent_QWheelEvent_X(self, event)
    end
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QGraphicsView_paintEvent_QPaintEvent_X(self, event)
    end
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QGraphicsView_resizeEvent_QResizeEvent_X(self, event)
    end
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QGraphicsView_scrollContentsBy_int_int(self, dx, dy)
    end
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QGraphicsView_showEvent_QShowEvent_X(self, event)
    end
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    protected def draw_background(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    protected def draw_foreground(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    protected def draw_items(painter : Painter, num_items : Int32, items : GraphicsItem*, options : QStyleOptionGraphicsItem*) : Void
      Binding.bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(self, painter, num_items, items, options)
    end
  end
  abstract class GraphicsObject < Object
    def initialize(@unwrap : Void*)
    end
    def as_graphics_item() : GraphicsItemImpl
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsObject_AS_QGraphicsItem_(self))
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGraphicsObject_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsObject_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsObject_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsObject_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsObject)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsObject.new(
      bg_QGraphicsObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(ev : Binding::QEvent*){ self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def grab_gesture(type : GestureType) : Void
      Binding.bg_QGraphicsObject_grabGesture_Qt__GestureType(self, type)
    end
    def grab_gesture(type : GestureType, flags : GestureFlags) : Void
      Binding.bg_QGraphicsObject_grabGesture_Qt__GestureType_Qt__GestureFlags(self, type, flags)
    end
    def ungrab_gesture(type : GestureType) : Void
      Binding.bg_QGraphicsObject_ungrabGesture_Qt__GestureType(self, type)
    end
    protected def update_micro_focus() : Void
      Binding.bg_QGraphicsObject_updateMicroFocus_(self)
    end
    def parent_changed() : Void
      Binding.bg_QGraphicsObject_parentChanged_(self)
    end
    def on_parent_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_parentChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def opacity_changed() : Void
      Binding.bg_QGraphicsObject_opacityChanged_(self)
    end
    def on_opacity_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_opacityChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def visible_changed() : Void
      Binding.bg_QGraphicsObject_visibleChanged_(self)
    end
    def on_visible_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_visibleChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def enabled_changed() : Void
      Binding.bg_QGraphicsObject_enabledChanged_(self)
    end
    def on_enabled_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_enabledChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def x_changed() : Void
      Binding.bg_QGraphicsObject_xChanged_(self)
    end
    def on_x_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_xChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def y_changed() : Void
      Binding.bg_QGraphicsObject_yChanged_(self)
    end
    def on_y_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_yChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def z_changed() : Void
      Binding.bg_QGraphicsObject_zChanged_(self)
    end
    def on_z_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_zChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def rotation_changed() : Void
      Binding.bg_QGraphicsObject_rotationChanged_(self)
    end
    def on_rotation_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_rotationChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def scale_changed() : Void
      Binding.bg_QGraphicsObject_scaleChanged_(self)
    end
    def on_scale_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_scaleChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def children_changed() : Void
      Binding.bg_QGraphicsObject_childrenChanged_(self)
    end
    def on_children_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_childrenChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def width_changed() : Void
      Binding.bg_QGraphicsObject_widthChanged_(self)
    end
    def on_width_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_widthChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def height_changed() : Void
      Binding.bg_QGraphicsObject_heightChanged_(self)
    end
    def on_height_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_heightChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def initialize(dd : QGraphicsItemPrivate*, parent : GraphicsItem)
      unwrap = Binding.bg_QGraphicsObject_CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsObject)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsObject.new(
      bg_QGraphicsObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(ev : Binding::QEvent*){ self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsObject_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def event(ev : Event) : Bool
      Binding.bg_QGraphicsObject_event_QEvent_X(self, ev)
    end
  end
  class GraphicsObjectImpl < GraphicsObject
    macro inherited
      {{ raise "You can't sub-class GraphicsObjectImpl, inherit from GraphicsObject instead" }}
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_boundingRect_(self))
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
  end
  class GraphicsWidget < GraphicsObject
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGraphicsWidget_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsWidget_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint update_geometry scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance contains collides_with_item collides_with_path is_obscured_by opaque_area scene_event_filter context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event hover_enter_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(rect : Binding::QRectF*){ self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} ->(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*){ self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint_window_frame(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} ->(option : QStyleOption*){ self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(which : SizeHint, constraint : QSizeF*){ self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} ->(){ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} ->(e : Binding::QEvent*){ self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} ->(pos : Binding::QPointF){ self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QGraphicsSceneMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} ->(){ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QGraphicsSceneResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} ->(event : Binding::QEvent*){ self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} ->(event : Binding::QEvent*){ self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} ->(event : Binding::QEvent*){ self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} ->(event : Binding::QEvent*){ self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : GraphicsItem?, w_flags : WindowFlags)
      unwrap = Binding.bg_QGraphicsWidget_CONSTRUCT_QGraphicsItem_X_Qt__WindowFlags(parent, w_flags)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint update_geometry scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance contains collides_with_item collides_with_path is_obscured_by opaque_area scene_event_filter context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event hover_enter_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(rect : Binding::QRectF*){ self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} ->(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*){ self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint_window_frame(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} ->(option : QStyleOption*){ self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(which : SizeHint, constraint : QSizeF*){ self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} ->(){ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} ->(e : Binding::QEvent*){ self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} ->(pos : Binding::QPointF){ self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QGraphicsSceneMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} ->(){ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QGraphicsSceneResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} ->(event : Binding::QEvent*){ self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} ->(event : Binding::QEvent*){ self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} ->(event : Binding::QEvent*){ self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} ->(event : Binding::QEvent*){ self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def layout() : QGraphicsLayout*
      Binding.bg_QGraphicsWidget_layout_(self)
    end
    def layout=(layout : QGraphicsLayout*) : Void
      Binding.bg_QGraphicsWidget_setLayout_QGraphicsLayout_X(self, layout)
    end
    def adjust_size() : Void
      Binding.bg_QGraphicsWidget_adjustSize_(self)
    end
    def layout_direction() : LayoutDirection
      Binding.bg_QGraphicsWidget_layoutDirection_(self)
    end
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QGraphicsWidget_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    def unset_layout_direction() : Void
      Binding.bg_QGraphicsWidget_unsetLayoutDirection_(self)
    end
    def style() : QStyle*
      Binding.bg_QGraphicsWidget_style_(self)
    end
    def style=(style : QStyle*) : Void
      Binding.bg_QGraphicsWidget_setStyle_QStyle_X(self, style)
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsWidget_font_(self))
    end
    def font=(font : Font) : Void
      Binding.bg_QGraphicsWidget_setFont_const_QFont_R(self, font)
    end
    def palette() : Palette
      Palette.new(unwrap: Binding.bg_QGraphicsWidget_palette_(self))
    end
    def palette=(palette : Palette) : Void
      Binding.bg_QGraphicsWidget_setPalette_const_QPalette_R(self, palette)
    end
    def auto_fill_background() : Bool
      Binding.bg_QGraphicsWidget_autoFillBackground_(self)
    end
    def auto_fill_background=(enabled : Bool) : Void
      Binding.bg_QGraphicsWidget_setAutoFillBackground_bool(self, enabled)
    end
    def resize(size : QSizeF*) : Void
      Binding.bg_QGraphicsWidget_resize_const_QSizeF_R(self, size)
    end
    def resize(w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsWidget_resize_qreal_qreal(self, w, h)
    end
    def size() : QSizeF*
      Binding.bg_QGraphicsWidget_size_(self)
    end
    def geometry=(rect : RectF) : Void
      Binding.bg_QGraphicsWidget_setGeometry_const_QRectF_R(self, rect)
    end
    def set_geometry(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsWidget_setGeometry_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_rect_(self))
    end
    def set_contents_margins(left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
      Binding.bg_QGraphicsWidget_setContentsMargins_qreal_qreal_qreal_qreal(self, left, top, right, bottom)
    end
    def get_contents_margins(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
      Binding.bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(self, left, top, right, bottom)
    end
    def set_window_frame_margins(left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
      Binding.bg_QGraphicsWidget_setWindowFrameMargins_qreal_qreal_qreal_qreal(self, left, top, right, bottom)
    end
    def get_window_frame_margins(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
      Binding.bg_QGraphicsWidget_getWindowFrameMargins_qreal_X_qreal_X_qreal_X_qreal_X(self, left, top, right, bottom)
    end
    def unset_window_frame_margins() : Void
      Binding.bg_QGraphicsWidget_unsetWindowFrameMargins_(self)
    end
    def window_frame_geometry() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_windowFrameGeometry_(self))
    end
    def window_frame_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_windowFrameRect_(self))
    end
    def window_flags() : WindowFlags
      Binding.bg_QGraphicsWidget_windowFlags_(self)
    end
    def window_type() : WindowType
      Binding.bg_QGraphicsWidget_windowType_(self)
    end
    def window_flags=(w_flags : WindowFlags) : Void
      Binding.bg_QGraphicsWidget_setWindowFlags_Qt__WindowFlags(self, w_flags)
    end
    def active_window?() : Bool
      Binding.bg_QGraphicsWidget_isActiveWindow_(self)
    end
    def window_title=(title : String) : Void
      Binding.bg_QGraphicsWidget_setWindowTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    def window_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsWidget_windowTitle_(self))
    end
    def focus_policy() : FocusPolicy
      Binding.bg_QGraphicsWidget_focusPolicy_(self)
    end
    def focus_policy=(policy : FocusPolicy) : Void
      Binding.bg_QGraphicsWidget_setFocusPolicy_Qt__FocusPolicy(self, policy)
    end
    def self.set_tab_order(first : GraphicsWidget, second : GraphicsWidget) : Void
      Binding.bg_QGraphicsWidget_setTabOrder_STATIC_QGraphicsWidget_X_QGraphicsWidget_X(first, second)
    end
    def focus_widget() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsWidget_focusWidget_(self))
    end
    def grab_shortcut(sequence : KeySequence, context : ShortcutContext = ShortcutContext::WindowShortcut) : Int32
      Binding.bg_QGraphicsWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(self, sequence, context)
    end
    def release_shortcut(id : Int32) : Void
      Binding.bg_QGraphicsWidget_releaseShortcut_int(self, id)
    end
    def set_shortcut_enabled(id : Int32, enabled : Bool = true) : Void
      Binding.bg_QGraphicsWidget_setShortcutEnabled_int_bool(self, id, enabled)
    end
    def set_shortcut_auto_repeat(id : Int32, enabled : Bool = true) : Void
      Binding.bg_QGraphicsWidget_setShortcutAutoRepeat_int_bool(self, id, enabled)
    end
    def add_action(action : Action) : Void
      Binding.bg_QGraphicsWidget_addAction_QAction_X(self, action)
    end
    def add_actions(actions : Enumerable(Action)) : Void
      Binding.bg_QGraphicsWidget_addActions_QList_QAction_X_(self, BindgenHelper.wrap_container(QList_QAction_X, actions).to_unsafe)
    end
    def insert_actions(before : Action, actions : Enumerable(Action)) : Void
      Binding.bg_QGraphicsWidget_insertActions_QAction_X_QList_QAction_X_(self, before, BindgenHelper.wrap_container(QList_QAction_X, actions).to_unsafe)
    end
    def insert_action(before : Action, action : Action) : Void
      Binding.bg_QGraphicsWidget_insertAction_QAction_X_QAction_X(self, before, action)
    end
    def remove_action(action : Action) : Void
      Binding.bg_QGraphicsWidget_removeAction_QAction_X(self, action)
    end
    def actions() : Enumerable(Action)
      QList_QAction_X.new(unwrap: Binding.bg_QGraphicsWidget_actions_(self))
    end
    def set_attribute(attribute : WidgetAttribute, on : Bool = true) : Void
      Binding.bg_QGraphicsWidget_setAttribute_Qt__WidgetAttribute_bool(self, attribute, on)
    end
    def test_attribute(attribute : WidgetAttribute) : Bool
      Binding.bg_QGraphicsWidget_testAttribute_Qt__WidgetAttribute(self, attribute)
    end
    def type() : Int32
      Binding.bg_QGraphicsWidget_type_(self)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def paint_window_frame(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsWidget_shape_(self)
    end
    def geometry_changed() : Void
      Binding.bg_QGraphicsWidget_geometryChanged_(self)
    end
    def on_geometry_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsWidget_geometryChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def layout_changed() : Void
      Binding.bg_QGraphicsWidget_layoutChanged_(self)
    end
    def on_layout_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsWidget_layoutChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def close() : Bool
      Binding.bg_QGraphicsWidget_close_(self)
    end
    protected def init_style_option(option : QStyleOption*) : Void
      Binding.bg_QGraphicsWidget_initStyleOption_QStyleOption_X(self, option)
    end
    protected def size_hint(which : SizeHint) : QSizeF*
      Binding.bg_QGraphicsWidget_sizeHint_Qt__SizeHint(self, which)
    end
    protected def size_hint(which : SizeHint, constraint : QSizeF*) : QSizeF*
      Binding.bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(self, which, constraint)
    end
    protected def update_geometry() : Void
      Binding.bg_QGraphicsWidget_updateGeometry_(self)
    end
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsWidget_sceneEvent_QEvent_X(self, event)
    end
    protected def window_frame_event(e : Event) : Bool
      Binding.bg_QGraphicsWidget_windowFrameEvent_QEvent_X(self, e)
    end
    protected def window_frame_section_at(pos : PointF) : WindowFrameSection
      Binding.bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(self, pos)
    end
    protected def event(event : Event) : Bool
      Binding.bg_QGraphicsWidget_event_QEvent_X(self, event)
    end
    protected def change_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_changeEvent_QEvent_X(self, event)
    end
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QGraphicsWidget_closeEvent_QCloseEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QGraphicsWidget_focusNextPrevChild_bool(self, next_)
    end
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QGraphicsWidget_hideEvent_QHideEvent_X(self, event)
    end
    protected def move_event(event : QGraphicsSceneMoveEvent*) : Void
      Binding.bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(self, event)
    end
    protected def polish_event() : Void
      Binding.bg_QGraphicsWidget_polishEvent_(self)
    end
    protected def resize_event(event : QGraphicsSceneResizeEvent*) : Void
      Binding.bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(self, event)
    end
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QGraphicsWidget_showEvent_QShowEvent_X(self, event)
    end
    protected def hover_move_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def hover_leave_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def grab_mouse_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_grabMouseEvent_QEvent_X(self, event)
    end
    protected def ungrab_mouse_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(self, event)
    end
    protected def grab_keyboard_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(self, event)
    end
    protected def ungrab_keyboard_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(self, event)
    end
    protected def initialize(unnamed_arg_0 : QGraphicsWidgetPrivate*, parent : GraphicsItem)
      unwrap = Binding.bg_QGraphicsWidget_CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X(unnamed_arg_0, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint update_geometry scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance contains collides_with_item collides_with_path is_obscured_by opaque_area scene_event_filter context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event hover_enter_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(rect : Binding::QRectF*){ self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} ->(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*){ self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint_window_frame(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} ->(option : QStyleOption*){ self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(which : SizeHint, constraint : QSizeF*){ self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} ->(){ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} ->(e : Binding::QEvent*){ self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} ->(pos : Binding::QPointF){ self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QGraphicsSceneMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} ->(){ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QGraphicsSceneResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} ->(event : Binding::QEvent*){ self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} ->(event : Binding::QEvent*){ self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} ->(event : Binding::QEvent*){ self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} ->(event : Binding::QEvent*){ self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected def initialize(unnamed_arg_0 : QGraphicsWidgetPrivate*, parent : GraphicsItem, w_flags : WindowFlags)
      unwrap = Binding.bg_QGraphicsWidget_CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X_Qt__WindowFlags(unnamed_arg_0, parent, w_flags)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint update_geometry scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance contains collides_with_item collides_with_path is_obscured_by opaque_area scene_event_filter context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event hover_enter_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} ->(rect : Binding::QRectF*){ self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} ->(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*){ self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint_window_frame(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} ->(option : QStyleOption*){ self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(which : SizeHint, constraint : QSizeF*){ self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} ->(){ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} ->(e : Binding::QEvent*){ self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} ->(pos : Binding::QPointF){ self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(event : Binding::QEvent*){ self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : QGraphicsSceneMoveEvent*){ self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} ->(){ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(event : QGraphicsSceneResizeEvent*){ self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} ->(event : Binding::QEvent*){ self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} ->(event : Binding::QEvent*){ self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} ->(event : Binding::QEvent*){ self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} ->(event : Binding::QEvent*){ self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class GraphicsTextItem < GraphicsObject
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGraphicsTextItem_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsTextItem_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsTextItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall bounding_rect shape contains paint is_obscured_by opaque_area type scene_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event context_menu_event key_press_event key_release_event focus_in_event focus_out_event drag_enter_event drag_leave_event drag_move_event drop_event input_method_event hover_enter_event hover_move_event hover_leave_event supports_extension event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance collides_with_item collides_with_path scene_event_filter wheel_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsTextItem.new(
      bg_QGraphicsTextItem_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(ev : Binding::QEvent*){ self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsTextItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsTextItem_CONSTRUCT_const_QString_R_QGraphicsItem_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall bounding_rect shape contains paint is_obscured_by opaque_area type scene_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event context_menu_event key_press_event key_release_event focus_in_event focus_out_event drag_enter_event drag_leave_event drag_move_event drop_event input_method_event hover_enter_event hover_move_event hover_leave_event supports_extension event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance collides_with_item collides_with_path scene_event_filter wheel_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsTextItem.new(
      bg_QGraphicsTextItem_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(ev : Binding::QEvent*){ self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsTextItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_toHtml_(self))
    end
    def html=(html : String) : Void
      Binding.bg_QGraphicsTextItem_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_toPlainText_(self))
    end
    def plain_text=(text : String) : Void
      Binding.bg_QGraphicsTextItem_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsTextItem_font_(self))
    end
    def font=(font : Font) : Void
      Binding.bg_QGraphicsTextItem_setFont_const_QFont_R(self, font)
    end
    def default_text_color=(c : Color) : Void
      Binding.bg_QGraphicsTextItem_setDefaultTextColor_const_QColor_R(self, c)
    end
    def default_text_color() : Color
      Color.new(unwrap: Binding.bg_QGraphicsTextItem_defaultTextColor_(self))
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsTextItem_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsTextItem_shape_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsTextItem_contains_const_QPointF_R(self, point)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsTextItem_opaqueArea_(self)
    end
    def type() : Int32
      Binding.bg_QGraphicsTextItem_type_(self)
    end
    def text_width=(width : Float64) : Void
      Binding.bg_QGraphicsTextItem_setTextWidth_qreal(self, width)
    end
    def text_width() : Float64
      Binding.bg_QGraphicsTextItem_textWidth_(self)
    end
    def adjust_size() : Void
      Binding.bg_QGraphicsTextItem_adjustSize_(self)
    end
    def document=(document : TextDocument) : Void
      Binding.bg_QGraphicsTextItem_setDocument_QTextDocument_X(self, document)
    end
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QGraphicsTextItem_document_(self))
    end
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QGraphicsTextItem_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    def text_interaction_flags() : TextInteractionFlags
      Binding.bg_QGraphicsTextItem_textInteractionFlags_(self)
    end
    def tab_changes_focus=(b : Bool) : Void
      Binding.bg_QGraphicsTextItem_setTabChangesFocus_bool(self, b)
    end
    def tab_changes_focus() : Bool
      Binding.bg_QGraphicsTextItem_tabChangesFocus_(self)
    end
    def open_external_links=(open : Bool) : Void
      Binding.bg_QGraphicsTextItem_setOpenExternalLinks_bool(self, open)
    end
    def open_external_links() : Bool
      Binding.bg_QGraphicsTextItem_openExternalLinks_(self)
    end
    def text_cursor=(cursor : TextCursor) : Void
      Binding.bg_QGraphicsTextItem_setTextCursor_const_QTextCursor_R(self, cursor)
    end
    def text_cursor() : TextCursor
      TextCursor.new(unwrap: Binding.bg_QGraphicsTextItem_textCursor_(self))
    end
    def link_activated(unnamed_arg_0 : String) : Void
      Binding.bg_QGraphicsTextItem_linkActivated_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_link_activated(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsTextItem_linkActivated_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
    def link_hovered(unnamed_arg_0 : String) : Void
      Binding.bg_QGraphicsTextItem_linkHovered_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def on_link_hovered(&block : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsTextItem_linkHovered_CONNECT_CrystalProc_void__const_CrystalString_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Binding::CrystalString){ block.call(Qt::Converter::QString.unwrap(unnamed_arg_0)) })))
    end
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsTextItem_sceneEvent_QEvent_X(self, event)
    end
    protected def mouse_press_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_move_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_release_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def mouse_double_click_event(event : QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    protected def context_menu_event(event : QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    protected def key_press_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(self, event)
    end
    protected def key_release_event(event : QKeyEvent*) : Void
      Binding.bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(self, event)
    end
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(self, event)
    end
    protected def drag_enter_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drag_leave_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drag_move_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def drop_event(event : QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    protected def hover_enter_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def hover_move_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def hover_leave_event(event : QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
  end
  abstract class GraphicsTransform < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGraphicsTransform_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsTransform_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTransform_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QGraphicsTransform_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTransform)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall apply_to event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsTransform.new(
      bg_QGraphicsTransform_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_applyTo_QMatrix4x4_X: BindgenHelper.wrap_proc({% if forwarded.includes?("apply_to") %} ->(matrix : QMatrix4x4*){ self.apply_to(matrix) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsTransform_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    abstract def apply_to(matrix : QMatrix4x4*) : Void
    protected def update() : Void
      Binding.bg_QGraphicsTransform_update_(self)
    end
    protected def initialize(p : QGraphicsTransformPrivate*, parent : Object)
      unwrap = Binding.bg_QGraphicsTransform_CONSTRUCT_QGraphicsTransformPrivate_R_QObject_X(p, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTransform)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall apply_to event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsTransform.new(
      bg_QGraphicsTransform_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_applyTo_QMatrix4x4_X: BindgenHelper.wrap_proc({% if forwarded.includes?("apply_to") %} ->(matrix : QMatrix4x4*){ self.apply_to(matrix) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsTransform_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class GraphicsTransformImpl < GraphicsTransform
    macro inherited
      {{ raise "You can't sub-class GraphicsTransformImpl, inherit from GraphicsTransform instead" }}
    end
    def apply_to(matrix : QMatrix4x4*) : Void
      Binding.bg_QGraphicsTransform_applyTo_QMatrix4x4_X(self, matrix)
    end
  end
  abstract class AbstractGraphicsShapeItem < GraphicsItem
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QAbstractGraphicsShapeItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractGraphicsShapeItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ is_obscured_by opaque_area advance bounding_rect shape contains collides_with_item collides_with_path paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractGraphicsShapeItem.new(
      bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QAbstractGraphicsShapeItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractGraphicsShapeItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def pen() : QPen*
      Binding.bg_QAbstractGraphicsShapeItem_pen_(self)
    end
    def pen=(pen : QPen*) : Void
      Binding.bg_QAbstractGraphicsShapeItem_setPen_const_QPen_R(self, pen)
    end
    def brush() : Brush
      Brush.new(unwrap: Binding.bg_QAbstractGraphicsShapeItem_brush_(self))
    end
    def brush=(brush : Brush) : Void
      Binding.bg_QAbstractGraphicsShapeItem_setBrush_const_QBrush_R(self, brush)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QAbstractGraphicsShapeItem_opaqueArea_(self)
    end
    protected def initialize(dd : QAbstractGraphicsShapeItemPrivate*, parent : GraphicsItem)
      unwrap = Binding.bg_QAbstractGraphicsShapeItem_CONSTRUCT_QAbstractGraphicsShapeItemPrivate_R_QGraphicsItem_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractGraphicsShapeItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ is_obscured_by opaque_area advance bounding_rect shape contains collides_with_item collides_with_path paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event supports_extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQAbstractGraphicsShapeItem.new(
      bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QAbstractGraphicsShapeItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
    )
    Binding.bg_QAbstractGraphicsShapeItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class AbstractGraphicsShapeItemImpl < AbstractGraphicsShapeItem
    macro inherited
      {{ raise "You can't sub-class AbstractGraphicsShapeItemImpl, inherit from AbstractGraphicsShapeItem instead" }}
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_boundingRect_(self))
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
  end
  class GraphicsEllipseItem < AbstractGraphicsShapeItem
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsEllipseItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsEllipseItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsEllipseItem.new(
      bg_QGraphicsEllipseItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsEllipseItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(rect : RectF, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsEllipseItem_CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsEllipseItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsEllipseItem.new(
      bg_QGraphicsEllipseItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsEllipseItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(x : Float64, y : Float64, w : Float64, h : Float64, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsEllipseItem_CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x, y, w, h, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsEllipseItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsEllipseItem.new(
      bg_QGraphicsEllipseItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsEllipseItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsEllipseItem_rect_(self))
    end
    def rect=(rect : RectF) : Void
      Binding.bg_QGraphicsEllipseItem_setRect_const_QRectF_R(self, rect)
    end
    def set_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsEllipseItem_setRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def start_angle() : Int32
      Binding.bg_QGraphicsEllipseItem_startAngle_(self)
    end
    def start_angle=(angle : Int32) : Void
      Binding.bg_QGraphicsEllipseItem_setStartAngle_int(self, angle)
    end
    def span_angle() : Int32
      Binding.bg_QGraphicsEllipseItem_spanAngle_(self)
    end
    def span_angle=(angle : Int32) : Void
      Binding.bg_QGraphicsEllipseItem_setSpanAngle_int(self, angle)
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsEllipseItem_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsEllipseItem_shape_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsEllipseItem_contains_const_QPointF_R(self, point)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsEllipseItem_opaqueArea_(self)
    end
    def type() : Int32
      Binding.bg_QGraphicsEllipseItem_type_(self)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
  end
  class GraphicsPathItem < AbstractGraphicsShapeItem
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsPathItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPathItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsPathItem.new(
      bg_QGraphicsPathItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsPathItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(path : QPainterPath*, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsPathItem_CONSTRUCT_const_QPainterPath_R_QGraphicsItem_X(path, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPathItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsPathItem.new(
      bg_QGraphicsPathItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsPathItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def path() : QPainterPath*
      Binding.bg_QGraphicsPathItem_path_(self)
    end
    def path=(path : QPainterPath*) : Void
      Binding.bg_QGraphicsPathItem_setPath_const_QPainterPath_R(self, path)
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsPathItem_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsPathItem_shape_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsPathItem_contains_const_QPointF_R(self, point)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsPathItem_opaqueArea_(self)
    end
    def type() : Int32
      Binding.bg_QGraphicsPathItem_type_(self)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
  end
  class GraphicsPolygonItem < AbstractGraphicsShapeItem
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsPolygonItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPolygonItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsPolygonItem.new(
      bg_QGraphicsPolygonItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsPolygonItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(polygon : QPolygonF*, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsPolygonItem_CONSTRUCT_const_QPolygonF_R_QGraphicsItem_X(polygon, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPolygonItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsPolygonItem.new(
      bg_QGraphicsPolygonItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsPolygonItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def polygon() : QPolygonF*
      Binding.bg_QGraphicsPolygonItem_polygon_(self)
    end
    def polygon=(polygon : QPolygonF*) : Void
      Binding.bg_QGraphicsPolygonItem_setPolygon_const_QPolygonF_R(self, polygon)
    end
    def fill_rule() : FillRule
      Binding.bg_QGraphicsPolygonItem_fillRule_(self)
    end
    def fill_rule=(rule : FillRule) : Void
      Binding.bg_QGraphicsPolygonItem_setFillRule_Qt__FillRule(self, rule)
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsPolygonItem_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsPolygonItem_shape_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsPolygonItem_contains_const_QPointF_R(self, point)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsPolygonItem_opaqueArea_(self)
    end
    def type() : Int32
      Binding.bg_QGraphicsPolygonItem_type_(self)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
  end
  class GraphicsRectItem < AbstractGraphicsShapeItem
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsRectItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsRectItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsRectItem.new(
      bg_QGraphicsRectItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsRectItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(rect : RectF, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsRectItem_CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsRectItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsRectItem.new(
      bg_QGraphicsRectItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsRectItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(x : Float64, y : Float64, w : Float64, h : Float64, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsRectItem_CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x, y, w, h, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsRectItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsRectItem.new(
      bg_QGraphicsRectItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsRectItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsRectItem_rect_(self))
    end
    def rect=(rect : RectF) : Void
      Binding.bg_QGraphicsRectItem_setRect_const_QRectF_R(self, rect)
    end
    def set_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsRectItem_setRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsRectItem_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsRectItem_shape_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsRectItem_contains_const_QPointF_R(self, point)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsRectItem_opaqueArea_(self)
    end
    def type() : Int32
      Binding.bg_QGraphicsRectItem_type_(self)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
  end
  class GraphicsSimpleTextItem < AbstractGraphicsShapeItem
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsSimpleTextItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsSimpleTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsSimpleTextItem.new(
      bg_QGraphicsSimpleTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsSimpleTextItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(text : String, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsSimpleTextItem_CONSTRUCT_const_QString_R_QGraphicsItem_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsSimpleTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsSimpleTextItem.new(
      bg_QGraphicsSimpleTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsSimpleTextItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def text=(text : String) : Void
      Binding.bg_QGraphicsSimpleTextItem_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsSimpleTextItem_text_(self))
    end
    def font=(font : Font) : Void
      Binding.bg_QGraphicsSimpleTextItem_setFont_const_QFont_R(self, font)
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsSimpleTextItem_font_(self))
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsSimpleTextItem_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsSimpleTextItem_shape_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(self, point)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsSimpleTextItem_opaqueArea_(self)
    end
    def type() : Int32
      Binding.bg_QGraphicsSimpleTextItem_type_(self)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
  end
  class GraphicsPixmapItem < GraphicsItem
    enum ShapeMode : UInt32
      MaskShape = 0
      BoundingRectShape = 1
      HeuristicMaskShape = 2
    end
    def initialize(@unwrap : Void*)
    end
    def initialize(parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsPixmapItem_CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPixmapItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsPixmapItem.new(
      bg_QGraphicsPixmapItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsPixmapItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(pixmap : Pixmap, parent : GraphicsItem? = nil)
      unwrap = Binding.bg_QGraphicsPixmapItem_CONSTRUCT_const_QPixmap_R_QGraphicsItem_X(pixmap, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPixmapItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGraphicsPixmapItem.new(
      bg_QGraphicsPixmapItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} ->(){ RectF.new(unwrap: self.bounding_rect()).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} ->(){ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} ->(point : Binding::QPointF){ self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} ->(painter : Binding::QPainter*, option : QStyleOptionGraphicsItem*, widget : Binding::QWidget*){ self.paint(Painter.new(unwrap: painter), option, Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} ->(item : Binding::QGraphicsItem*){ self.is_obscured_by(GraphicsItem.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} ->(){ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} ->(){ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} ->(extension : GraphicsItem::Extension){ self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} ->(phase : Int32){ self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} ->(other : Binding::QGraphicsItem*, mode : ItemSelectionMode){ self.collides_with_item(GraphicsItem.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} ->(path : QPainterPath*, mode : ItemSelectionMode){ self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} ->(watched : Binding::QGraphicsItem*, event : Binding::QEvent*){ self.scene_event_filter(GraphicsItem.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} ->(event : Binding::QEvent*){ self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QGraphicsSceneContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : QGraphicsSceneDragDropEvent*){ self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} ->(event : QGraphicsSceneHoverEvent*){ self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : QGraphicsSceneMouseEvent*){ self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QGraphicsSceneWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(event : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_QGraphicsPixmapItem_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def pixmap() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QGraphicsPixmapItem_pixmap_(self))
    end
    def pixmap=(pixmap : Pixmap) : Void
      Binding.bg_QGraphicsPixmapItem_setPixmap_const_QPixmap_R(self, pixmap)
    end
    def transformation_mode() : TransformationMode
      Binding.bg_QGraphicsPixmapItem_transformationMode_(self)
    end
    def transformation_mode=(mode : TransformationMode) : Void
      Binding.bg_QGraphicsPixmapItem_setTransformationMode_Qt__TransformationMode(self, mode)
    end
    def offset() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsPixmapItem_offset_(self))
    end
    def offset=(offset : PointF) : Void
      Binding.bg_QGraphicsPixmapItem_setOffset_const_QPointF_R(self, offset)
    end
    def set_offset(x : Float64, y : Float64) : Void
      Binding.bg_QGraphicsPixmapItem_setOffset_qreal_qreal(self, x, y)
    end
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsPixmapItem_boundingRect_(self))
    end
    def shape() : QPainterPath*
      Binding.bg_QGraphicsPixmapItem_shape_(self)
    end
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsPixmapItem_contains_const_QPointF_R(self, point)
    end
    def paint(painter : Painter, option : QStyleOptionGraphicsItem*, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    def opaque_area() : QPainterPath*
      Binding.bg_QGraphicsPixmapItem_opaqueArea_(self)
    end
    def type() : Int32
      Binding.bg_QGraphicsPixmapItem_type_(self)
    end
    def shape_mode() : GraphicsPixmapItem::ShapeMode
      Binding.bg_QGraphicsPixmapItem_shapeMode_(self)
    end
    def shape_mode=(mode : GraphicsPixmapItem::ShapeMode) : Void
      Binding.bg_QGraphicsPixmapItem_setShapeMode_QGraphicsPixmapItem__ShapeMode(self, mode)
    end
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
  end
  class Brush 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QBrush_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(bs : BrushStyle)
      unwrap = Binding.bg_QBrush_CONSTRUCT_Qt__BrushStyle(bs)
    @unwrap = unwrap
    
    end
    def initialize(color : Color, bs : BrushStyle = BrushStyle::SolidPattern)
      unwrap = Binding.bg_QBrush_CONSTRUCT_const_QColor_R_Qt__BrushStyle(color, bs)
    @unwrap = unwrap
    
    end
    def initialize(color : GlobalColor, bs : BrushStyle = BrushStyle::SolidPattern)
      unwrap = Binding.bg_QBrush_CONSTRUCT_Qt__GlobalColor_Qt__BrushStyle(color, bs)
    @unwrap = unwrap
    
    end
    def initialize(color : Color, pixmap : Pixmap)
      unwrap = Binding.bg_QBrush_CONSTRUCT_const_QColor_R_const_QPixmap_R(color, pixmap)
    @unwrap = unwrap
    
    end
    def initialize(color : GlobalColor, pixmap : Pixmap)
      unwrap = Binding.bg_QBrush_CONSTRUCT_Qt__GlobalColor_const_QPixmap_R(color, pixmap)
    @unwrap = unwrap
    
    end
    def initialize(pixmap : Pixmap)
      unwrap = Binding.bg_QBrush_CONSTRUCT_const_QPixmap_R(pixmap)
    @unwrap = unwrap
    
    end
    def initialize(image : Image)
      unwrap = Binding.bg_QBrush_CONSTRUCT_const_QImage_R(image)
    @unwrap = unwrap
    
    end
    def initialize(gradient : QGradient*)
      unwrap = Binding.bg_QBrush_CONSTRUCT_const_QGradient_R(gradient)
    @unwrap = unwrap
    
    end
    def swap(other : Brush) : Void
      Binding.bg_QBrush_swap_QBrush_R(self, other)
    end
    def style() : BrushStyle
      Binding.bg_QBrush_style_(self)
    end
    def style=(unnamed_arg_0 : BrushStyle) : Void
      Binding.bg_QBrush_setStyle_Qt__BrushStyle(self, unnamed_arg_0)
    end
    def matrix() : QMatrix*
      Binding.bg_QBrush_matrix_(self)
    end
    def matrix=(mat : QMatrix*) : Void
      Binding.bg_QBrush_setMatrix_const_QMatrix_R(self, mat)
    end
    def transform() : QTransform*
      Binding.bg_QBrush_transform_(self)
    end
    def transform=(unnamed_arg_0 : QTransform*) : Void
      Binding.bg_QBrush_setTransform_const_QTransform_R(self, unnamed_arg_0)
    end
    def texture() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QBrush_texture_(self))
    end
    def texture=(pixmap : Pixmap) : Void
      Binding.bg_QBrush_setTexture_const_QPixmap_R(self, pixmap)
    end
    def texture_image() : Image
      Image.new(unwrap: Binding.bg_QBrush_textureImage_(self))
    end
    def texture_image=(image : Image) : Void
      Binding.bg_QBrush_setTextureImage_const_QImage_R(self, image)
    end
    def color() : Color
      Color.new(unwrap: Binding.bg_QBrush_color_(self))
    end
    def color=(color : Color) : Void
      Binding.bg_QBrush_setColor_const_QColor_R(self, color)
    end
    def color=(color : GlobalColor) : Void
      Binding.bg_QBrush_setColor_Qt__GlobalColor(self, color)
    end
    def gradient() : QGradient*
      Binding.bg_QBrush_gradient_(self)
    end
    def opaque?() : Bool
      Binding.bg_QBrush_isOpaque_(self)
    end
    def detached?() : Bool
      Binding.bg_QBrush_isDetached_(self)
    end
  end
  class Color 
    enum NameFormat : UInt32
      HexRgb = 0
      HexArgb = 1
    end
    enum Spec : UInt32
      Invalid = 0
      Rgb = 1
      Hsv = 2
      Cmyk = 3
      Hsl = 4
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QColor_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(color : GlobalColor)
      unwrap = Binding.bg_QColor_CONSTRUCT_Qt__GlobalColor(color)
    @unwrap = unwrap
    
    end
    def initialize(r : Int32, g : Int32, b : Int32, a : Int32 = 255)
      unwrap = Binding.bg_QColor_CONSTRUCT_int_int_int_int(r, g, b, a)
    @unwrap = unwrap
    
    end
    def initialize(rgb : UInt32)
      unwrap = Binding.bg_QColor_CONSTRUCT_QRgb(rgb)
    @unwrap = unwrap
    
    end
    def initialize(rgba64 : QRgba64*)
      unwrap = Binding.bg_QColor_CONSTRUCT_QRgba64(rgba64)
    @unwrap = unwrap
    
    end
    def initialize(name : String)
      unwrap = Binding.bg_QColor_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(name))
    @unwrap = unwrap
    
    end
    def initialize(aname : UInt8*)
      unwrap = Binding.bg_QColor_CONSTRUCT_const_char_X(aname)
    @unwrap = unwrap
    
    end
    def initialize(name : QLatin1String*)
      unwrap = Binding.bg_QColor_CONSTRUCT_QLatin1String(name)
    @unwrap = unwrap
    
    end
    def initialize(spec : Color::Spec)
      unwrap = Binding.bg_QColor_CONSTRUCT_QColor__Spec(spec)
    @unwrap = unwrap
    
    end
    def valid?() : Bool
      Binding.bg_QColor_isValid_(self)
    end
    def name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QColor_name_(self))
    end
    def name(format : Color::NameFormat) : String
      Qt::Converter::QString.unwrap(Binding.bg_QColor_name_QColor__NameFormat(self, format))
    end
    def named_color=(name : String) : Void
      Binding.bg_QColor_setNamedColor_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def named_color=(name : QLatin1String*) : Void
      Binding.bg_QColor_setNamedColor_QLatin1String(self, name)
    end
    def self.color_names() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QColor_colorNames_STATIC_())
    end
    def spec() : Color::Spec
      Binding.bg_QColor_spec_(self)
    end
    def alpha() : Int32
      Binding.bg_QColor_alpha_(self)
    end
    def alpha=(alpha : Int32) : Void
      Binding.bg_QColor_setAlpha_int(self, alpha)
    end
    def alpha_f() : Float64
      Binding.bg_QColor_alphaF_(self)
    end
    def alpha_f=(alpha : Float64) : Void
      Binding.bg_QColor_setAlphaF_qreal(self, alpha)
    end
    def red() : Int32
      Binding.bg_QColor_red_(self)
    end
    def green() : Int32
      Binding.bg_QColor_green_(self)
    end
    def blue() : Int32
      Binding.bg_QColor_blue_(self)
    end
    def red=(red : Int32) : Void
      Binding.bg_QColor_setRed_int(self, red)
    end
    def green=(green : Int32) : Void
      Binding.bg_QColor_setGreen_int(self, green)
    end
    def blue=(blue : Int32) : Void
      Binding.bg_QColor_setBlue_int(self, blue)
    end
    def red_f() : Float64
      Binding.bg_QColor_redF_(self)
    end
    def green_f() : Float64
      Binding.bg_QColor_greenF_(self)
    end
    def blue_f() : Float64
      Binding.bg_QColor_blueF_(self)
    end
    def red_f=(red : Float64) : Void
      Binding.bg_QColor_setRedF_qreal(self, red)
    end
    def green_f=(green : Float64) : Void
      Binding.bg_QColor_setGreenF_qreal(self, green)
    end
    def blue_f=(blue : Float64) : Void
      Binding.bg_QColor_setBlueF_qreal(self, blue)
    end
    def get_rgb(r : Int32*, g : Int32*, b : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getRgb_int_X_int_X_int_X_int_X(self, r, g, b, a)
    end
    def set_rgb(r : Int32, g : Int32, b : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setRgb_int_int_int_int(self, r, g, b, a)
    end
    def get_rgb_f(r : Float64*, g : Float64*, b : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getRgbF_qreal_X_qreal_X_qreal_X_qreal_X(self, r, g, b, a)
    end
    def set_rgb_f(r : Float64, g : Float64, b : Float64, a : Float64 = nil) : Void
      Binding.bg_QColor_setRgbF_qreal_qreal_qreal_qreal(self, r, g, b, a)
    end
    def rgba64() : QRgba64*
      Binding.bg_QColor_rgba64_(self)
    end
    def rgba64=(rgba : QRgba64*) : Void
      Binding.bg_QColor_setRgba64_QRgba64(self, rgba)
    end
    def rgba() : UInt32
      Binding.bg_QColor_rgba_(self)
    end
    def rgba=(rgba : UInt32) : Void
      Binding.bg_QColor_setRgba_QRgb(self, rgba)
    end
    def rgb() : UInt32
      Binding.bg_QColor_rgb_(self)
    end
    def rgb=(rgb : UInt32) : Void
      Binding.bg_QColor_setRgb_QRgb(self, rgb)
    end
    def hue() : Int32
      Binding.bg_QColor_hue_(self)
    end
    def saturation() : Int32
      Binding.bg_QColor_saturation_(self)
    end
    def hsv_hue() : Int32
      Binding.bg_QColor_hsvHue_(self)
    end
    def hsv_saturation() : Int32
      Binding.bg_QColor_hsvSaturation_(self)
    end
    def value() : Int32
      Binding.bg_QColor_value_(self)
    end
    def hue_f() : Float64
      Binding.bg_QColor_hueF_(self)
    end
    def saturation_f() : Float64
      Binding.bg_QColor_saturationF_(self)
    end
    def hsv_hue_f() : Float64
      Binding.bg_QColor_hsvHueF_(self)
    end
    def hsv_saturation_f() : Float64
      Binding.bg_QColor_hsvSaturationF_(self)
    end
    def value_f() : Float64
      Binding.bg_QColor_valueF_(self)
    end
    def get_hsv(h : Int32*, s : Int32*, v : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getHsv_int_X_int_X_int_X_int_X(self, h, s, v, a)
    end
    def set_hsv(h : Int32, s : Int32, v : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setHsv_int_int_int_int(self, h, s, v, a)
    end
    def get_hsv_f(h : Float64*, s : Float64*, v : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getHsvF_qreal_X_qreal_X_qreal_X_qreal_X(self, h, s, v, a)
    end
    def set_hsv_f(h : Float64, s : Float64, v : Float64, a : Float64 = nil) : Void
      Binding.bg_QColor_setHsvF_qreal_qreal_qreal_qreal(self, h, s, v, a)
    end
    def cyan() : Int32
      Binding.bg_QColor_cyan_(self)
    end
    def magenta() : Int32
      Binding.bg_QColor_magenta_(self)
    end
    def yellow() : Int32
      Binding.bg_QColor_yellow_(self)
    end
    def black() : Int32
      Binding.bg_QColor_black_(self)
    end
    def cyan_f() : Float64
      Binding.bg_QColor_cyanF_(self)
    end
    def magenta_f() : Float64
      Binding.bg_QColor_magentaF_(self)
    end
    def yellow_f() : Float64
      Binding.bg_QColor_yellowF_(self)
    end
    def black_f() : Float64
      Binding.bg_QColor_blackF_(self)
    end
    def get_cmyk(c : Int32*, m : Int32*, y : Int32*, k : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getCmyk_int_X_int_X_int_X_int_X_int_X(self, c, m, y, k, a)
    end
    def set_cmyk(c : Int32, m : Int32, y : Int32, k : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setCmyk_int_int_int_int_int(self, c, m, y, k, a)
    end
    def get_cmyk_f(c : Float64*, m : Float64*, y : Float64*, k : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getCmykF_qreal_X_qreal_X_qreal_X_qreal_X_qreal_X(self, c, m, y, k, a)
    end
    def set_cmyk_f(c : Float64, m : Float64, y : Float64, k : Float64, a : Float64 = nil) : Void
      Binding.bg_QColor_setCmykF_qreal_qreal_qreal_qreal_qreal(self, c, m, y, k, a)
    end
    def hsl_hue() : Int32
      Binding.bg_QColor_hslHue_(self)
    end
    def hsl_saturation() : Int32
      Binding.bg_QColor_hslSaturation_(self)
    end
    def lightness() : Int32
      Binding.bg_QColor_lightness_(self)
    end
    def hsl_hue_f() : Float64
      Binding.bg_QColor_hslHueF_(self)
    end
    def hsl_saturation_f() : Float64
      Binding.bg_QColor_hslSaturationF_(self)
    end
    def lightness_f() : Float64
      Binding.bg_QColor_lightnessF_(self)
    end
    def get_hsl(h : Int32*, s : Int32*, l : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getHsl_int_X_int_X_int_X_int_X(self, h, s, l, a)
    end
    def set_hsl(h : Int32, s : Int32, l : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setHsl_int_int_int_int(self, h, s, l, a)
    end
    def get_hsl_f(h : Float64*, s : Float64*, l : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getHslF_qreal_X_qreal_X_qreal_X_qreal_X(self, h, s, l, a)
    end
    def set_hsl_f(h : Float64, s : Float64, l : Float64, a : Float64 = nil) : Void
      Binding.bg_QColor_setHslF_qreal_qreal_qreal_qreal(self, h, s, l, a)
    end
    def to_rgb() : Color
      Color.new(unwrap: Binding.bg_QColor_toRgb_(self))
    end
    def to_hsv() : Color
      Color.new(unwrap: Binding.bg_QColor_toHsv_(self))
    end
    def to_cmyk() : Color
      Color.new(unwrap: Binding.bg_QColor_toCmyk_(self))
    end
    def to_hsl() : Color
      Color.new(unwrap: Binding.bg_QColor_toHsl_(self))
    end
    def convert_to(color_spec : Color::Spec) : Color
      Color.new(unwrap: Binding.bg_QColor_convertTo_QColor__Spec(self, color_spec))
    end
    def self.from_rgb(rgb : UInt32) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgb_STATIC_QRgb(rgb))
    end
    def self.from_rgba(rgba : UInt32) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgba_STATIC_QRgb(rgba))
    end
    def self.from_rgb(r : Int32, g : Int32, b : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgb_STATIC_int_int_int_int(r, g, b, a))
    end
    def self.from_rgb_f(r : Float64, g : Float64, b : Float64, a : Float64 = nil) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgbF_STATIC_qreal_qreal_qreal_qreal(r, g, b, a))
    end
    def self.from_rgba64(r : UInt16, g : UInt16, b : UInt16, a : UInt16 = 65535u16) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgba64_STATIC_ushort_ushort_ushort_ushort(r, g, b, a))
    end
    def self.from_rgba64(rgba : QRgba64*) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgba64_STATIC_QRgba64(rgba))
    end
    def self.from_hsv(h : Int32, s : Int32, v : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHsv_STATIC_int_int_int_int(h, s, v, a))
    end
    def self.from_hsv_f(h : Float64, s : Float64, v : Float64, a : Float64 = nil) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHsvF_STATIC_qreal_qreal_qreal_qreal(h, s, v, a))
    end
    def self.from_cmyk(c : Int32, m : Int32, y : Int32, k : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromCmyk_STATIC_int_int_int_int_int(c, m, y, k, a))
    end
    def self.from_cmyk_f(c : Float64, m : Float64, y : Float64, k : Float64, a : Float64 = nil) : Color
      Color.new(unwrap: Binding.bg_QColor_fromCmykF_STATIC_qreal_qreal_qreal_qreal_qreal(c, m, y, k, a))
    end
    def self.from_hsl(h : Int32, s : Int32, l : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHsl_STATIC_int_int_int_int(h, s, l, a))
    end
    def self.from_hsl_f(h : Float64, s : Float64, l : Float64, a : Float64 = nil) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHslF_STATIC_qreal_qreal_qreal_qreal(h, s, l, a))
    end
    def light(f : Int32 = 150) : Color
      Color.new(unwrap: Binding.bg_QColor_light_int(self, f))
    end
    def lighter(f : Int32 = 150) : Color
      Color.new(unwrap: Binding.bg_QColor_lighter_int(self, f))
    end
    def dark(f : Int32 = 200) : Color
      Color.new(unwrap: Binding.bg_QColor_dark_int(self, f))
    end
    def darker(f : Int32 = 200) : Color
      Color.new(unwrap: Binding.bg_QColor_darker_int(self, f))
    end
    def self.is_valid_color(name : String) : Bool
      Binding.bg_QColor_isValidColor_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    def self.is_valid_color(unnamed_arg_0 : QLatin1String*) : Bool
      Binding.bg_QColor_isValidColor_STATIC_QLatin1String(unnamed_arg_0)
    end
  end
  class Event 
    enum Type : UInt32
      None = 0
      Timer = 1
      MouseButtonPress = 2
      MouseButtonRelease = 3
      MouseButtonDblClick = 4
      MouseMove = 5
      KeyPress = 6
      KeyRelease = 7
      FocusIn = 8
      FocusOut = 9
      FocusAboutToChange = 23
      Enter = 10
      Leave = 11
      Paint = 12
      Move = 13
      Resize = 14
      Create = 15
      Destroy = 16
      Show = 17
      Hide = 18
      Close = 19
      Quit = 20
      ParentChange = 21
      ParentAboutToChange = 131
      ThreadChange = 22
      WindowActivate = 24
      WindowDeactivate = 25
      ShowToParent = 26
      HideToParent = 27
      Wheel = 31
      WindowTitleChange = 33
      WindowIconChange = 34
      ApplicationWindowIconChange = 35
      ApplicationFontChange = 36
      ApplicationLayoutDirectionChange = 37
      ApplicationPaletteChange = 38
      PaletteChange = 39
      Clipboard = 40
      Speech = 42
      MetaCall = 43
      SockAct = 50
      WinEventAct = 132
      DeferredDelete = 52
      DragEnter = 60
      DragMove = 61
      DragLeave = 62
      Drop = 63
      DragResponse = 64
      ChildAdded = 68
      ChildPolished = 69
      ChildRemoved = 71
      ShowWindowRequest = 73
      PolishRequest = 74
      Polish = 75
      LayoutRequest = 76
      UpdateRequest = 77
      UpdateLater = 78
      EmbeddingControl = 79
      ActivateControl = 80
      DeactivateControl = 81
      ContextMenu = 82
      InputMethod = 83
      TabletMove = 87
      LocaleChange = 88
      LanguageChange = 89
      LayoutDirectionChange = 90
      Style = 91
      TabletPress = 92
      TabletRelease = 93
      OkRequest = 94
      HelpRequest = 95
      IconDrag = 96
      FontChange = 97
      EnabledChange = 98
      ActivationChange = 99
      StyleChange = 100
      IconTextChange = 101
      ModifiedChange = 102
      MouseTrackingChange = 109
      WindowBlocked = 103
      WindowUnblocked = 104
      WindowStateChange = 105
      ReadOnlyChange = 106
      ToolTip = 110
      WhatsThis = 111
      StatusTip = 112
      ActionChanged = 113
      ActionAdded = 114
      ActionRemoved = 115
      FileOpen = 116
      Shortcut = 117
      ShortcutOverride = 51
      WhatsThisClicked = 118
      ToolBarChange = 120
      ApplicationActivate = 121
      ApplicationActivated = 121
      ApplicationDeactivate = 122
      ApplicationDeactivated = 122
      QueryWhatsThis = 123
      EnterWhatsThisMode = 124
      LeaveWhatsThisMode = 125
      ZOrderChange = 126
      HoverEnter = 127
      HoverLeave = 128
      HoverMove = 129
      AcceptDropsChange = 152
      ZeroTimerEvent = 154
      GraphicsSceneMouseMove = 155
      GraphicsSceneMousePress = 156
      GraphicsSceneMouseRelease = 157
      GraphicsSceneMouseDoubleClick = 158
      GraphicsSceneContextMenu = 159
      GraphicsSceneHoverEnter = 160
      GraphicsSceneHoverMove = 161
      GraphicsSceneHoverLeave = 162
      GraphicsSceneHelp = 163
      GraphicsSceneDragEnter = 164
      GraphicsSceneDragMove = 165
      GraphicsSceneDragLeave = 166
      GraphicsSceneDrop = 167
      GraphicsSceneWheel = 168
      KeyboardLayoutChange = 169
      DynamicPropertyChange = 170
      TabletEnterProximity = 171
      TabletLeaveProximity = 172
      NonClientAreaMouseMove = 173
      NonClientAreaMouseButtonPress = 174
      NonClientAreaMouseButtonRelease = 175
      NonClientAreaMouseButtonDblClick = 176
      MacSizeChange = 177
      ContentsRectChange = 178
      MacGLWindowChange = 179
      FutureCallOut = 180
      GraphicsSceneResize = 181
      GraphicsSceneMove = 182
      CursorChange = 183
      ToolTipChange = 184
      NetworkReplyUpdated = 185
      GrabMouse = 186
      UngrabMouse = 187
      GrabKeyboard = 188
      UngrabKeyboard = 189
      MacGLClearDrawable = 191
      StateMachineSignal = 192
      StateMachineWrapped = 193
      TouchBegin = 194
      TouchUpdate = 195
      TouchEnd = 196
      NativeGesture = 197
      RequestSoftwareInputPanel = 199
      CloseSoftwareInputPanel = 200
      WinIdChange = 203
      Gesture = 198
      GestureOverride = 202
      ScrollPrepare = 204
      Scroll = 205
      Expose = 206
      InputMethodQuery = 207
      OrientationChange = 208
      TouchCancel = 209
      ThemeChange = 210
      SockClose = 211
      PlatformPanel = 212
      StyleAnimationUpdate = 213
      ApplicationStateChange = 214
      WindowChangeInternal = 215
      ScreenChangeInternal = 216
      PlatformSurface = 217
      Pointer = 218
      TabletTrackingChange = 219
      User = 1000
      MaxUser = 65535
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize(type : Event::Type)
      unwrap = Binding.bg_QEvent_CONSTRUCT_QEvent__Type(type)
    @unwrap = unwrap
    
    end
    def type() : Event::Type
      Binding.bg_QEvent_type_(self)
    end
    def spontaneous() : Bool
      Binding.bg_QEvent_spontaneous_(self)
    end
    def accepted=(accepted : Bool) : Void
      Binding.bg_QEvent_setAccepted_bool(self, accepted)
    end
    def accepted?() : Bool
      Binding.bg_QEvent_isAccepted_(self)
    end
    def accept() : Void
      Binding.bg_QEvent_accept_(self)
    end
    def ignore() : Void
      Binding.bg_QEvent_ignore_(self)
    end
    def self.register_event_type(hint : Int32 = -1) : Int32
      Binding.bg_QEvent_registerEventType_STATIC_int(hint)
    end
  end
  class TimerEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(timer_id : Int32)
      unwrap = Binding.bg_QTimerEvent_CONSTRUCT_int(timer_id)
    @unwrap = unwrap
    
    end
    def timer_id() : Int32
      Binding.bg_QTimerEvent_timerId_(self)
    end
  end
  class DynamicPropertyChangeEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(name : QByteArray*)
      unwrap = Binding.bg_QDynamicPropertyChangeEvent_CONSTRUCT_const_QByteArray_R(name)
    @unwrap = unwrap
    
    end
    def property_name() : QByteArray*
      Binding.bg_QDynamicPropertyChangeEvent_propertyName_(self)
    end
  end
  class DeferredDeleteEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QDeferredDeleteEvent_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def loop_level() : Int32
      Binding.bg_QDeferredDeleteEvent_loopLevel_(self)
    end
  end
  class InputEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(type : Event::Type)
      unwrap = Binding.bg_QInputEvent_CONSTRUCT_QEvent__Type(type)
    @unwrap = unwrap
    
    end
    def initialize(type : Event::Type, modifiers : KeyboardModifiers)
      unwrap = Binding.bg_QInputEvent_CONSTRUCT_QEvent__Type_Qt__KeyboardModifiers(type, modifiers)
    @unwrap = unwrap
    
    end
    def modifiers() : KeyboardModifiers
      Binding.bg_QInputEvent_modifiers_(self)
    end
    def modifiers=(amodifiers : KeyboardModifiers) : Void
      Binding.bg_QInputEvent_setModifiers_Qt__KeyboardModifiers(self, amodifiers)
    end
    def timestamp() : UInt32
      Binding.bg_QInputEvent_timestamp_(self)
    end
    def timestamp=(atimestamp : UInt32) : Void
      Binding.bg_QInputEvent_setTimestamp_ulong(self, atimestamp)
    end
  end
  class MouseEvent < InputEvent
    def initialize(@unwrap : Void*)
    end
    def initialize(type : Event::Type, local_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers)
      unwrap = Binding.bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type, local_pos, button, buttons, modifiers)
    @unwrap = unwrap
    
    end
    def initialize(type : Event::Type, local_pos : PointF, screen_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers)
      unwrap = Binding.bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type, local_pos, screen_pos, button, buttons, modifiers)
    @unwrap = unwrap
    
    end
    def initialize(type : Event::Type, local_pos : PointF, window_pos : PointF, screen_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers)
      unwrap = Binding.bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type, local_pos, window_pos, screen_pos, button, buttons, modifiers)
    @unwrap = unwrap
    
    end
    def initialize(type : Event::Type, local_pos : PointF, window_pos : PointF, screen_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers, source : MouseEventSource)
      unwrap = Binding.bg_QMouseEvent_CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers_Qt__MouseEventSource(type, local_pos, window_pos, screen_pos, button, buttons, modifiers, source)
    @unwrap = unwrap
    
    end
    def pos() : Point
      Point.new(unwrap: Binding.bg_QMouseEvent_pos_(self))
    end
    def global_pos() : Point
      Point.new(unwrap: Binding.bg_QMouseEvent_globalPos_(self))
    end
    def x() : Int32
      Binding.bg_QMouseEvent_x_(self)
    end
    def y() : Int32
      Binding.bg_QMouseEvent_y_(self)
    end
    def global_x() : Int32
      Binding.bg_QMouseEvent_globalX_(self)
    end
    def global_y() : Int32
      Binding.bg_QMouseEvent_globalY_(self)
    end
    def local_pos() : PointF
      PointF.new(unwrap: Binding.bg_QMouseEvent_localPos_(self))
    end
    def window_pos() : PointF
      PointF.new(unwrap: Binding.bg_QMouseEvent_windowPos_(self))
    end
    def screen_pos() : PointF
      PointF.new(unwrap: Binding.bg_QMouseEvent_screenPos_(self))
    end
    def button() : MouseButton
      Binding.bg_QMouseEvent_button_(self)
    end
    def buttons() : MouseButtons
      Binding.bg_QMouseEvent_buttons_(self)
    end
    def local_pos=(local_position : PointF) : Void
      Binding.bg_QMouseEvent_setLocalPos_const_QPointF_R(self, local_position)
    end
    def source() : MouseEventSource
      Binding.bg_QMouseEvent_source_(self)
    end
    def flags() : MouseEventFlags
      Binding.bg_QMouseEvent_flags_(self)
    end
  end
  class EnterEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(local_pos : PointF, window_pos : PointF, screen_pos : PointF)
      unwrap = Binding.bg_QEnterEvent_CONSTRUCT_const_QPointF_R_const_QPointF_R_const_QPointF_R(local_pos, window_pos, screen_pos)
    @unwrap = unwrap
    
    end
    def pos() : Point
      Point.new(unwrap: Binding.bg_QEnterEvent_pos_(self))
    end
    def global_pos() : Point
      Point.new(unwrap: Binding.bg_QEnterEvent_globalPos_(self))
    end
    def x() : Int32
      Binding.bg_QEnterEvent_x_(self)
    end
    def y() : Int32
      Binding.bg_QEnterEvent_y_(self)
    end
    def global_x() : Int32
      Binding.bg_QEnterEvent_globalX_(self)
    end
    def global_y() : Int32
      Binding.bg_QEnterEvent_globalY_(self)
    end
    def local_pos() : PointF
      PointF.new(unwrap: Binding.bg_QEnterEvent_localPos_(self))
    end
    def window_pos() : PointF
      PointF.new(unwrap: Binding.bg_QEnterEvent_windowPos_(self))
    end
    def screen_pos() : PointF
      PointF.new(unwrap: Binding.bg_QEnterEvent_screenPos_(self))
    end
  end
  class FocusEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(type : Event::Type, reason : FocusReason = FocusReason::OtherFocusReason)
      unwrap = Binding.bg_QFocusEvent_CONSTRUCT_QEvent__Type_Qt__FocusReason(type, reason)
    @unwrap = unwrap
    
    end
    def got_focus() : Bool
      Binding.bg_QFocusEvent_gotFocus_(self)
    end
    def lost_focus() : Bool
      Binding.bg_QFocusEvent_lostFocus_(self)
    end
    def reason() : FocusReason
      Binding.bg_QFocusEvent_reason_(self)
    end
  end
  class PaintEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(paint_region : QRegion*)
      unwrap = Binding.bg_QPaintEvent_CONSTRUCT_const_QRegion_R(paint_region)
    @unwrap = unwrap
    
    end
    def initialize(paint_rect : Rect)
      unwrap = Binding.bg_QPaintEvent_CONSTRUCT_const_QRect_R(paint_rect)
    @unwrap = unwrap
    
    end
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QPaintEvent_rect_(self))
    end
    def region() : QRegion*
      Binding.bg_QPaintEvent_region_(self)
    end
  end
  class MoveEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(pos : Point, old_pos : Point)
      unwrap = Binding.bg_QMoveEvent_CONSTRUCT_const_QPoint_R_const_QPoint_R(pos, old_pos)
    @unwrap = unwrap
    
    end
    def pos() : Point
      Point.new(unwrap: Binding.bg_QMoveEvent_pos_(self))
    end
    def old_pos() : Point
      Point.new(unwrap: Binding.bg_QMoveEvent_oldPos_(self))
    end
  end
  class ExposeEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(rgn : QRegion*)
      unwrap = Binding.bg_QExposeEvent_CONSTRUCT_const_QRegion_R(rgn)
    @unwrap = unwrap
    
    end
    def region() : QRegion*
      Binding.bg_QExposeEvent_region_(self)
    end
  end
  class PlatformSurfaceEvent < Event
    enum SurfaceEventType : UInt32
      SurfaceCreated = 0
      SurfaceAboutToBeDestroyed = 1
    end
    def initialize(@unwrap : Void*)
    end
    def initialize(surface_event_type : PlatformSurfaceEvent::SurfaceEventType)
      unwrap = Binding.bg_QPlatformSurfaceEvent_CONSTRUCT_QPlatformSurfaceEvent__SurfaceEventType(surface_event_type)
    @unwrap = unwrap
    
    end
    def surface_event_type() : PlatformSurfaceEvent::SurfaceEventType
      Binding.bg_QPlatformSurfaceEvent_surfaceEventType_(self)
    end
  end
  class ResizeEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(size : QSize*, old_size : QSize*)
      unwrap = Binding.bg_QResizeEvent_CONSTRUCT_const_QSize_R_const_QSize_R(size, old_size)
    @unwrap = unwrap
    
    end
    def size() : QSize*
      Binding.bg_QResizeEvent_size_(self)
    end
    def old_size() : QSize*
      Binding.bg_QResizeEvent_oldSize_(self)
    end
  end
  class CloseEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QCloseEvent_CONSTRUCT_()
    @unwrap = unwrap
    
    end
  end
  class IconDragEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QIconDragEvent_CONSTRUCT_()
    @unwrap = unwrap
    
    end
  end
  class ShowEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QShowEvent_CONSTRUCT_()
    @unwrap = unwrap
    
    end
  end
  class HideEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QHideEvent_CONSTRUCT_()
    @unwrap = unwrap
    
    end
  end
  class InputMethodEvent < Event
    enum AttributeType : UInt32
      TextFormat = 0
      Cursor = 1
      Language = 2
      Ruby = 3
      Selection = 4
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QInputMethodEvent_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def set_commit_string(commit_string : String, replace_from : Int32 = 0, replace_length : Int32 = 0) : Void
      Binding.bg_QInputMethodEvent_setCommitString_const_QString_R_int_int(self, Qt::Converter::QString.wrap(commit_string), replace_from, replace_length)
    end
    def preedit_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QInputMethodEvent_preeditString_(self))
    end
    def commit_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QInputMethodEvent_commitString_(self))
    end
    def replacement_start() : Int32
      Binding.bg_QInputMethodEvent_replacementStart_(self)
    end
    def replacement_length() : Int32
      Binding.bg_QInputMethodEvent_replacementLength_(self)
    end
  end
  class InputMethodQueryEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(queries : InputMethodQueries)
      unwrap = Binding.bg_QInputMethodQueryEvent_CONSTRUCT_Qt__InputMethodQueries(queries)
    @unwrap = unwrap
    
    end
    def queries() : InputMethodQueries
      Binding.bg_QInputMethodQueryEvent_queries_(self)
    end
  end
  class Drag < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QDrag_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDrag_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDrag_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDrag_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(drag_source : Object)
      unwrap = Binding.bg_QDrag_CONSTRUCT_QObject_X(drag_source)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Drag)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDrag.new(
      bg_QDrag_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDrag_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDrag_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def mime_data=(data : MimeData) : Void
      Binding.bg_QDrag_setMimeData_QMimeData_X(self, data)
    end
    def mime_data() : MimeData
      MimeData.new(unwrap: Binding.bg_QDrag_mimeData_(self))
    end
    def pixmap=(unnamed_arg_0 : Pixmap) : Void
      Binding.bg_QDrag_setPixmap_const_QPixmap_R(self, unnamed_arg_0)
    end
    def pixmap() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QDrag_pixmap_(self))
    end
    def hot_spot=(hotspot : Point) : Void
      Binding.bg_QDrag_setHotSpot_const_QPoint_R(self, hotspot)
    end
    def hot_spot() : Point
      Point.new(unwrap: Binding.bg_QDrag_hotSpot_(self))
    end
    def source() : Object
      Object.new(unwrap: Binding.bg_QDrag_source_(self))
    end
    def target() : Object
      Object.new(unwrap: Binding.bg_QDrag_target_(self))
    end
    def start() : DropAction
      Binding.bg_QDrag_start_(self)
    end
    def start(supported_actions : DropActions) : DropAction
      Binding.bg_QDrag_start_Qt__DropActions(self, supported_actions)
    end
    def exec() : DropAction
      Binding.bg_QDrag_exec_(self)
    end
    def exec(supported_actions : DropActions) : DropAction
      Binding.bg_QDrag_exec_Qt__DropActions(self, supported_actions)
    end
    def exec(supported_actions : DropActions, default_action : DropAction) : DropAction
      Binding.bg_QDrag_exec_Qt__DropActions_Qt__DropAction(self, supported_actions, default_action)
    end
    def set_drag_cursor(cursor : Pixmap, action : DropAction) : Void
      Binding.bg_QDrag_setDragCursor_const_QPixmap_R_Qt__DropAction(self, cursor, action)
    end
    def drag_cursor(action : DropAction) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QDrag_dragCursor_Qt__DropAction(self, action))
    end
    def supported_actions() : DropActions
      Binding.bg_QDrag_supportedActions_(self)
    end
    def default_action() : DropAction
      Binding.bg_QDrag_defaultAction_(self)
    end
    def self.cancel() : Void
      Binding.bg_QDrag_cancel_STATIC_()
    end
    def action_changed(action : DropAction) : Void
      Binding.bg_QDrag_actionChanged_Qt__DropAction(self, action)
    end
    def on_action_changed(&block : Proc(DropAction, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDrag_actionChanged_CONNECT_CrystalProc_void__Qt__DropAction_(self, BindgenHelper.wrap_proc(->(action : DropAction){ block.call(action) })))
    end
    def target_changed(new_target : Object) : Void
      Binding.bg_QDrag_targetChanged_QObject_X(self, new_target)
    end
    def on_target_changed(&block : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDrag_targetChanged_CONNECT_CrystalProc_void__QObjectX_(self, BindgenHelper.wrap_proc(->(new_target : Binding::QObject*){ block.call(Object.new(unwrap: new_target)) })))
    end
  end
  class DropEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(pos : PointF, actions : DropActions, data : MimeData, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type = Event::Type::Drop)
      unwrap = Binding.bg_QDropEvent_CONSTRUCT_const_QPointF_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos, actions, data, buttons, modifiers, type)
    @unwrap = unwrap
    
    end
    def pos() : Point
      Point.new(unwrap: Binding.bg_QDropEvent_pos_(self))
    end
    def pos_f() : PointF
      PointF.new(unwrap: Binding.bg_QDropEvent_posF_(self))
    end
    def mouse_buttons() : MouseButtons
      Binding.bg_QDropEvent_mouseButtons_(self)
    end
    def keyboard_modifiers() : KeyboardModifiers
      Binding.bg_QDropEvent_keyboardModifiers_(self)
    end
    def possible_actions() : DropActions
      Binding.bg_QDropEvent_possibleActions_(self)
    end
    def proposed_action() : DropAction
      Binding.bg_QDropEvent_proposedAction_(self)
    end
    def accept_proposed_action() : Void
      Binding.bg_QDropEvent_acceptProposedAction_(self)
    end
    def drop_action() : DropAction
      Binding.bg_QDropEvent_dropAction_(self)
    end
    def drop_action=(action : DropAction) : Void
      Binding.bg_QDropEvent_setDropAction_Qt__DropAction(self, action)
    end
    def source() : Object
      Object.new(unwrap: Binding.bg_QDropEvent_source_(self))
    end
    def mime_data() : MimeData
      MimeData.new(unwrap: Binding.bg_QDropEvent_mimeData_(self))
    end
  end
  class DragMoveEvent < DropEvent
    def initialize(@unwrap : Void*)
    end
    def initialize(pos : Point, actions : DropActions, data : MimeData, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type = Event::Type::DragMove)
      unwrap = Binding.bg_QDragMoveEvent_CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos, actions, data, buttons, modifiers, type)
    @unwrap = unwrap
    
    end
    def answer_rect() : Rect
      Rect.new(unwrap: Binding.bg_QDragMoveEvent_answerRect_(self))
    end
    def accept() : Void
      Binding.bg_QDragMoveEvent_accept_(self)
    end
    def ignore() : Void
      Binding.bg_QDragMoveEvent_ignore_(self)
    end
    def accept(r : Rect) : Void
      Binding.bg_QDragMoveEvent_accept_const_QRect_R(self, r)
    end
    def ignore(r : Rect) : Void
      Binding.bg_QDragMoveEvent_ignore_const_QRect_R(self, r)
    end
  end
  class DragEnterEvent < DragMoveEvent
    def initialize(@unwrap : Void*)
    end
    def initialize(pos : Point, actions : DropActions, data : MimeData, buttons : MouseButtons, modifiers : KeyboardModifiers)
      unwrap = Binding.bg_QDragEnterEvent_CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers(pos, actions, data, buttons, modifiers)
    @unwrap = unwrap
    
    end
  end
  class DragLeaveEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QDragLeaveEvent_CONSTRUCT_()
    @unwrap = unwrap
    
    end
  end
  class HelpEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(type : Event::Type, pos : Point, global_pos : Point)
      unwrap = Binding.bg_QHelpEvent_CONSTRUCT_QEvent__Type_const_QPoint_R_const_QPoint_R(type, pos, global_pos)
    @unwrap = unwrap
    
    end
    def x() : Int32
      Binding.bg_QHelpEvent_x_(self)
    end
    def y() : Int32
      Binding.bg_QHelpEvent_y_(self)
    end
    def global_x() : Int32
      Binding.bg_QHelpEvent_globalX_(self)
    end
    def global_y() : Int32
      Binding.bg_QHelpEvent_globalY_(self)
    end
    def pos() : Point
      Point.new(unwrap: Binding.bg_QHelpEvent_pos_(self))
    end
    def global_pos() : Point
      Point.new(unwrap: Binding.bg_QHelpEvent_globalPos_(self))
    end
  end
  class StatusTipEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(tip : String)
      unwrap = Binding.bg_QStatusTipEvent_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(tip))
    @unwrap = unwrap
    
    end
    def tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusTipEvent_tip_(self))
    end
  end
  class WhatsThisClickedEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(href : String)
      unwrap = Binding.bg_QWhatsThisClickedEvent_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(href))
    @unwrap = unwrap
    
    end
    def href() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWhatsThisClickedEvent_href_(self))
    end
  end
  class ActionEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(type : Int32, action : Action, before : Action? = nil)
      unwrap = Binding.bg_QActionEvent_CONSTRUCT_int_QAction_X_QAction_X(type, action, before)
    @unwrap = unwrap
    
    end
    def action() : Action
      Action.new(unwrap: Binding.bg_QActionEvent_action_(self))
    end
    def before() : Action
      Action.new(unwrap: Binding.bg_QActionEvent_before_(self))
    end
  end
  class FileOpenEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(file : String)
      unwrap = Binding.bg_QFileOpenEvent_CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file))
    @unwrap = unwrap
    
    end
    def initialize(url : Url)
      unwrap = Binding.bg_QFileOpenEvent_CONSTRUCT_const_QUrl_R(url)
    @unwrap = unwrap
    
    end
    def file() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileOpenEvent_file_(self))
    end
    def url() : Url
      Url.new(unwrap: Binding.bg_QFileOpenEvent_url_(self))
    end
    def open_file(file : QFile*, flags : IODevice::OpenMode) : Bool
      Binding.bg_QFileOpenEvent_openFile_QFile_R_QIODevice__OpenMode(self, file, flags)
    end
  end
  class ToolBarChangeEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(t : Bool)
      unwrap = Binding.bg_QToolBarChangeEvent_CONSTRUCT_bool(t)
    @unwrap = unwrap
    
    end
    def toggle() : Bool
      Binding.bg_QToolBarChangeEvent_toggle_(self)
    end
  end
  class ShortcutEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(key : KeySequence, id : Int32, ambiguous : Bool = false)
      unwrap = Binding.bg_QShortcutEvent_CONSTRUCT_const_QKeySequence_R_int_bool(key, id, ambiguous)
    @unwrap = unwrap
    
    end
    def key() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QShortcutEvent_key_(self))
    end
    def shortcut_id() : Int32
      Binding.bg_QShortcutEvent_shortcutId_(self)
    end
    def ambiguous?() : Bool
      Binding.bg_QShortcutEvent_isAmbiguous_(self)
    end
  end
  class ScrollPrepareEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(start_pos : PointF)
      unwrap = Binding.bg_QScrollPrepareEvent_CONSTRUCT_const_QPointF_R(start_pos)
    @unwrap = unwrap
    
    end
    def start_pos() : PointF
      PointF.new(unwrap: Binding.bg_QScrollPrepareEvent_startPos_(self))
    end
    def viewport_size() : QSizeF*
      Binding.bg_QScrollPrepareEvent_viewportSize_(self)
    end
    def content_pos_range() : RectF
      RectF.new(unwrap: Binding.bg_QScrollPrepareEvent_contentPosRange_(self))
    end
    def content_pos() : PointF
      PointF.new(unwrap: Binding.bg_QScrollPrepareEvent_contentPos_(self))
    end
    def viewport_size=(size : QSizeF*) : Void
      Binding.bg_QScrollPrepareEvent_setViewportSize_const_QSizeF_R(self, size)
    end
    def content_pos_range=(rect : RectF) : Void
      Binding.bg_QScrollPrepareEvent_setContentPosRange_const_QRectF_R(self, rect)
    end
    def content_pos=(pos : PointF) : Void
      Binding.bg_QScrollPrepareEvent_setContentPos_const_QPointF_R(self, pos)
    end
  end
  class ScrollEvent < Event
    enum ScrollState : UInt32
      ScrollStarted = 0
      ScrollUpdated = 1
      ScrollFinished = 2
    end
    def initialize(@unwrap : Void*)
    end
    def initialize(content_pos : PointF, overshoot : PointF, scroll_state : ScrollEvent::ScrollState)
      unwrap = Binding.bg_QScrollEvent_CONSTRUCT_const_QPointF_R_const_QPointF_R_QScrollEvent__ScrollState(content_pos, overshoot, scroll_state)
    @unwrap = unwrap
    
    end
    def content_pos() : PointF
      PointF.new(unwrap: Binding.bg_QScrollEvent_contentPos_(self))
    end
    def overshoot_distance() : PointF
      PointF.new(unwrap: Binding.bg_QScrollEvent_overshootDistance_(self))
    end
    def scroll_state() : ScrollEvent::ScrollState
      Binding.bg_QScrollEvent_scrollState_(self)
    end
  end
  class ScreenOrientationChangeEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(screen : Screen, orientation : ScreenOrientation)
      unwrap = Binding.bg_QScreenOrientationChangeEvent_CONSTRUCT_QScreen_X_Qt__ScreenOrientation(screen, orientation)
    @unwrap = unwrap
    
    end
    def screen() : Screen
      Screen.new(unwrap: Binding.bg_QScreenOrientationChangeEvent_screen_(self))
    end
    def orientation() : ScreenOrientation
      Binding.bg_QScreenOrientationChangeEvent_orientation_(self)
    end
  end
  class ApplicationStateChangeEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(state : ApplicationState)
      unwrap = Binding.bg_QApplicationStateChangeEvent_CONSTRUCT_Qt__ApplicationState(state)
    @unwrap = unwrap
    
    end
    def application_state() : ApplicationState
      Binding.bg_QApplicationStateChangeEvent_applicationState_(self)
    end
  end
  class GestureEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(gestures : Enumerable(Gesture))
      unwrap = Binding.bg_QGestureEvent_CONSTRUCT_const_QList_QGesture_X__R(BindgenHelper.wrap_container(QList_QGesture_X, gestures).to_unsafe)
    @unwrap = unwrap
    
    end
    def gestures() : Enumerable(Gesture)
      QList_QGesture_X.new(unwrap: Binding.bg_QGestureEvent_gestures_(self))
    end
    def gesture(type : GestureType) : Gesture
      Gesture.new(unwrap: Binding.bg_QGestureEvent_gesture_Qt__GestureType(self, type))
    end
    def active_gestures() : Enumerable(Gesture)
      QList_QGesture_X.new(unwrap: Binding.bg_QGestureEvent_activeGestures_(self))
    end
    def canceled_gestures() : Enumerable(Gesture)
      QList_QGesture_X.new(unwrap: Binding.bg_QGestureEvent_canceledGestures_(self))
    end
    def set_accepted(unnamed_arg_0 : Gesture, unnamed_arg_1 : Bool) : Void
      Binding.bg_QGestureEvent_setAccepted_QGesture_X_bool(self, unnamed_arg_0, unnamed_arg_1)
    end
    def accept(unnamed_arg_0 : Gesture) : Void
      Binding.bg_QGestureEvent_accept_QGesture_X(self, unnamed_arg_0)
    end
    def ignore(unnamed_arg_0 : Gesture) : Void
      Binding.bg_QGestureEvent_ignore_QGesture_X(self, unnamed_arg_0)
    end
    def is_accepted(unnamed_arg_0 : Gesture) : Bool
      Binding.bg_QGestureEvent_isAccepted_QGesture_X(self, unnamed_arg_0)
    end
    def set_accepted(unnamed_arg_0 : GestureType, unnamed_arg_1 : Bool) : Void
      Binding.bg_QGestureEvent_setAccepted_Qt__GestureType_bool(self, unnamed_arg_0, unnamed_arg_1)
    end
    def accept(unnamed_arg_0 : GestureType) : Void
      Binding.bg_QGestureEvent_accept_Qt__GestureType(self, unnamed_arg_0)
    end
    def ignore(unnamed_arg_0 : GestureType) : Void
      Binding.bg_QGestureEvent_ignore_Qt__GestureType(self, unnamed_arg_0)
    end
    def is_accepted(unnamed_arg_0 : GestureType) : Bool
      Binding.bg_QGestureEvent_isAccepted_Qt__GestureType(self, unnamed_arg_0)
    end
    def widget=(widget : Widget) : Void
      Binding.bg_QGestureEvent_setWidget_QWidget_X(self, widget)
    end
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QGestureEvent_widget_(self))
    end
    def map_to_graphics_scene(gesture_point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGestureEvent_mapToGraphicsScene_const_QPointF_R(self, gesture_point))
    end
  end
  class GraphicsSceneEvent < Event
    def initialize(@unwrap : Void*)
    end
    def initialize(type : Event::Type)
      unwrap = Binding.bg_QGraphicsSceneEvent_CONSTRUCT_QEvent__Type(type)
    @unwrap = unwrap
    
    end
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QGraphicsSceneEvent_widget_(self))
    end
    def widget=(widget : Widget) : Void
      Binding.bg_QGraphicsSceneEvent_setWidget_QWidget_X(self, widget)
    end
    protected def initialize(dd : QGraphicsSceneEventPrivate*, type : Event::Type = Event::Type::None)
      unwrap = Binding.bg_QGraphicsSceneEvent_CONSTRUCT_QGraphicsSceneEventPrivate_R_QEvent__Type(dd, type)
    @unwrap = unwrap
    
    end
    protected def d_func() : QGraphicsSceneEventPrivate*
      Binding.bg_QGraphicsSceneEvent_d_func_(self)
    end
  end
  abstract class IODevice < Object
    @[Flags]
    enum OpenMode : UInt32
      NotOpen = 0
      ReadOnly = 1
      WriteOnly = 2
      ReadWrite = 3
      Append = 4
      Truncate = 8
      Text = 16
      Unbuffered = 32
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QIODevice_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QIODevice_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QIODevice_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QIODevice_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QIODevice_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(IODevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall sequential? open close pos size seek at_end reset bytes_available bytes_to_write can_read_line wait_for_ready_read wait_for_bytes_written read_data read_line_data write_data event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQIODevice.new(
      bg_QIODevice_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QIODevice_isSequential_: BindgenHelper.wrap_proc({% if forwarded.includes?("sequential?") %} ->(){ self.sequential?() } {% else %} nil {% end %}),
      bg_QIODevice_open_QIODevice__OpenMode: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(mode : IODevice::OpenMode){ self.open(mode) } {% else %} nil {% end %}),
      bg_QIODevice_close_: BindgenHelper.wrap_proc({% if forwarded.includes?("close") %} ->(){ self.close() } {% else %} nil {% end %}),
      bg_QIODevice_pos_: BindgenHelper.wrap_proc({% if forwarded.includes?("pos") %} ->(){ self.pos() } {% else %} nil {% end %}),
      bg_QIODevice_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} ->(){ self.size() } {% else %} nil {% end %}),
      bg_QIODevice_seek_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("seek") %} ->(pos : Int64){ self.seek(pos) } {% else %} nil {% end %}),
      bg_QIODevice_atEnd_: BindgenHelper.wrap_proc({% if forwarded.includes?("at_end") %} ->(){ self.at_end() } {% else %} nil {% end %}),
      bg_QIODevice_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} ->(){ self.reset() } {% else %} nil {% end %}),
      bg_QIODevice_bytesAvailable_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_available") %} ->(){ self.bytes_available() } {% else %} nil {% end %}),
      bg_QIODevice_bytesToWrite_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_to_write") %} ->(){ self.bytes_to_write() } {% else %} nil {% end %}),
      bg_QIODevice_canReadLine_: BindgenHelper.wrap_proc({% if forwarded.includes?("can_read_line") %} ->(){ self.can_read_line() } {% else %} nil {% end %}),
      bg_QIODevice_waitForReadyRead_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_ready_read") %} ->(msecs : Int32){ self.wait_for_ready_read(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_waitForBytesWritten_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_bytes_written") %} ->(msecs : Int32){ self.wait_for_bytes_written(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_readData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_data") %} ->(data : UInt8*, maxlen : Int64){ self.read_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_readLineData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_line_data") %} ->(data : UInt8*, maxlen : Int64){ self.read_line_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_writeData_const_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("write_data") %} ->(data : UInt8*, len : Int64){ self.write_data(data, len) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QIODevice_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(parent : Object)
      unwrap = Binding.bg_QIODevice_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(IODevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall sequential? open close pos size seek at_end reset bytes_available bytes_to_write can_read_line wait_for_ready_read wait_for_bytes_written read_data read_line_data write_data event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQIODevice.new(
      bg_QIODevice_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QIODevice_isSequential_: BindgenHelper.wrap_proc({% if forwarded.includes?("sequential?") %} ->(){ self.sequential?() } {% else %} nil {% end %}),
      bg_QIODevice_open_QIODevice__OpenMode: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(mode : IODevice::OpenMode){ self.open(mode) } {% else %} nil {% end %}),
      bg_QIODevice_close_: BindgenHelper.wrap_proc({% if forwarded.includes?("close") %} ->(){ self.close() } {% else %} nil {% end %}),
      bg_QIODevice_pos_: BindgenHelper.wrap_proc({% if forwarded.includes?("pos") %} ->(){ self.pos() } {% else %} nil {% end %}),
      bg_QIODevice_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} ->(){ self.size() } {% else %} nil {% end %}),
      bg_QIODevice_seek_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("seek") %} ->(pos : Int64){ self.seek(pos) } {% else %} nil {% end %}),
      bg_QIODevice_atEnd_: BindgenHelper.wrap_proc({% if forwarded.includes?("at_end") %} ->(){ self.at_end() } {% else %} nil {% end %}),
      bg_QIODevice_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} ->(){ self.reset() } {% else %} nil {% end %}),
      bg_QIODevice_bytesAvailable_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_available") %} ->(){ self.bytes_available() } {% else %} nil {% end %}),
      bg_QIODevice_bytesToWrite_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_to_write") %} ->(){ self.bytes_to_write() } {% else %} nil {% end %}),
      bg_QIODevice_canReadLine_: BindgenHelper.wrap_proc({% if forwarded.includes?("can_read_line") %} ->(){ self.can_read_line() } {% else %} nil {% end %}),
      bg_QIODevice_waitForReadyRead_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_ready_read") %} ->(msecs : Int32){ self.wait_for_ready_read(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_waitForBytesWritten_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_bytes_written") %} ->(msecs : Int32){ self.wait_for_bytes_written(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_readData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_data") %} ->(data : UInt8*, maxlen : Int64){ self.read_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_readLineData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_line_data") %} ->(data : UInt8*, maxlen : Int64){ self.read_line_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_writeData_const_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("write_data") %} ->(data : UInt8*, len : Int64){ self.write_data(data, len) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QIODevice_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def open_mode() : IODevice::OpenMode
      Binding.bg_QIODevice_openMode_(self)
    end
    def text_mode_enabled=(enabled : Bool) : Void
      Binding.bg_QIODevice_setTextModeEnabled_bool(self, enabled)
    end
    def text_mode_enabled?() : Bool
      Binding.bg_QIODevice_isTextModeEnabled_(self)
    end
    def open?() : Bool
      Binding.bg_QIODevice_isOpen_(self)
    end
    def readable?() : Bool
      Binding.bg_QIODevice_isReadable_(self)
    end
    def writable?() : Bool
      Binding.bg_QIODevice_isWritable_(self)
    end
    def sequential?() : Bool
      Binding.bg_QIODevice_isSequential_(self)
    end
    def read_channel_count() : Int32
      Binding.bg_QIODevice_readChannelCount_(self)
    end
    def write_channel_count() : Int32
      Binding.bg_QIODevice_writeChannelCount_(self)
    end
    def current_read_channel() : Int32
      Binding.bg_QIODevice_currentReadChannel_(self)
    end
    def current_read_channel=(channel : Int32) : Void
      Binding.bg_QIODevice_setCurrentReadChannel_int(self, channel)
    end
    def current_write_channel() : Int32
      Binding.bg_QIODevice_currentWriteChannel_(self)
    end
    def current_write_channel=(channel : Int32) : Void
      Binding.bg_QIODevice_setCurrentWriteChannel_int(self, channel)
    end
    def open(mode : IODevice::OpenMode) : Bool
      Binding.bg_QIODevice_open_QIODevice__OpenMode(self, mode)
    end
    def close() : Void
      Binding.bg_QIODevice_close_(self)
    end
    def pos() : Int64
      Binding.bg_QIODevice_pos_(self)
    end
    def size() : Int64
      Binding.bg_QIODevice_size_(self)
    end
    def seek(pos : Int64) : Bool
      Binding.bg_QIODevice_seek_qint64(self, pos)
    end
    def at_end() : Bool
      Binding.bg_QIODevice_atEnd_(self)
    end
    def reset() : Bool
      Binding.bg_QIODevice_reset_(self)
    end
    def bytes_available() : Int64
      Binding.bg_QIODevice_bytesAvailable_(self)
    end
    def bytes_to_write() : Int64
      Binding.bg_QIODevice_bytesToWrite_(self)
    end
    def read(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_read_char_X_qint64(self, data, maxlen)
    end
    def read(maxlen : Int64) : QByteArray*
      Binding.bg_QIODevice_read_qint64(self, maxlen)
    end
    def read_all() : QByteArray*
      Binding.bg_QIODevice_readAll_(self)
    end
    def read_line(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_readLine_char_X_qint64(self, data, maxlen)
    end
    def read_line(maxlen : Int64 = 0i64) : QByteArray*
      Binding.bg_QIODevice_readLine_qint64(self, maxlen)
    end
    def can_read_line() : Bool
      Binding.bg_QIODevice_canReadLine_(self)
    end
    def start_transaction() : Void
      Binding.bg_QIODevice_startTransaction_(self)
    end
    def commit_transaction() : Void
      Binding.bg_QIODevice_commitTransaction_(self)
    end
    def rollback_transaction() : Void
      Binding.bg_QIODevice_rollbackTransaction_(self)
    end
    def transaction_started?() : Bool
      Binding.bg_QIODevice_isTransactionStarted_(self)
    end
    def write(data : UInt8*, len : Int64) : Int64
      Binding.bg_QIODevice_write_const_char_X_qint64(self, data, len)
    end
    def write(data : UInt8*) : Int64
      Binding.bg_QIODevice_write_const_char_X(self, data)
    end
    def write(data : QByteArray*) : Int64
      Binding.bg_QIODevice_write_const_QByteArray_R(self, data)
    end
    def peek(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_peek_char_X_qint64(self, data, maxlen)
    end
    def peek(maxlen : Int64) : QByteArray*
      Binding.bg_QIODevice_peek_qint64(self, maxlen)
    end
    def wait_for_ready_read(msecs : Int32) : Bool
      Binding.bg_QIODevice_waitForReadyRead_int(self, msecs)
    end
    def wait_for_bytes_written(msecs : Int32) : Bool
      Binding.bg_QIODevice_waitForBytesWritten_int(self, msecs)
    end
    def unget_char(c : UInt8) : Void
      Binding.bg_QIODevice_ungetChar_char(self, c)
    end
    def put_char(c : UInt8) : Bool
      Binding.bg_QIODevice_putChar_char(self, c)
    end
    def get_char(c : UInt8*) : Bool
      Binding.bg_QIODevice_getChar_char_X(self, c)
    end
    def error_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QIODevice_errorString_(self))
    end
    def ready_read() : Void
      Binding.bg_QIODevice_readyRead_(self)
    end
    def on_ready_read(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_readyRead_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def channel_ready_read(channel : Int32) : Void
      Binding.bg_QIODevice_channelReadyRead_int(self, channel)
    end
    def on_channel_ready_read(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_channelReadyRead_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(channel : Int32){ block.call(channel) })))
    end
    def bytes_written(bytes : Int64) : Void
      Binding.bg_QIODevice_bytesWritten_qint64(self, bytes)
    end
    def on_bytes_written(&block : Proc(Int64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_bytesWritten_CONNECT_CrystalProc_void__qint64_(self, BindgenHelper.wrap_proc(->(bytes : Int64){ block.call(bytes) })))
    end
    def channel_bytes_written(channel : Int32, bytes : Int64) : Void
      Binding.bg_QIODevice_channelBytesWritten_int_qint64(self, channel, bytes)
    end
    def on_channel_bytes_written(&block : Proc(Int32, Int64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_channelBytesWritten_CONNECT_CrystalProc_void__int__qint64_(self, BindgenHelper.wrap_proc(->(channel : Int32, bytes : Int64){ block.call(channel, bytes) })))
    end
    def about_to_close() : Void
      Binding.bg_QIODevice_aboutToClose_(self)
    end
    def on_about_to_close(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_aboutToClose_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    def read_channel_finished() : Void
      Binding.bg_QIODevice_readChannelFinished_(self)
    end
    def on_read_channel_finished(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_readChannelFinished_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def initialize(dd : QIODevicePrivate*, parent : Object? = nil)
      unwrap = Binding.bg_QIODevice_CONSTRUCT_QIODevicePrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(IODevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall sequential? open close pos size seek at_end reset bytes_available bytes_to_write can_read_line wait_for_ready_read wait_for_bytes_written read_data read_line_data write_data event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQIODevice.new(
      bg_QIODevice_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QIODevice_isSequential_: BindgenHelper.wrap_proc({% if forwarded.includes?("sequential?") %} ->(){ self.sequential?() } {% else %} nil {% end %}),
      bg_QIODevice_open_QIODevice__OpenMode: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} ->(mode : IODevice::OpenMode){ self.open(mode) } {% else %} nil {% end %}),
      bg_QIODevice_close_: BindgenHelper.wrap_proc({% if forwarded.includes?("close") %} ->(){ self.close() } {% else %} nil {% end %}),
      bg_QIODevice_pos_: BindgenHelper.wrap_proc({% if forwarded.includes?("pos") %} ->(){ self.pos() } {% else %} nil {% end %}),
      bg_QIODevice_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} ->(){ self.size() } {% else %} nil {% end %}),
      bg_QIODevice_seek_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("seek") %} ->(pos : Int64){ self.seek(pos) } {% else %} nil {% end %}),
      bg_QIODevice_atEnd_: BindgenHelper.wrap_proc({% if forwarded.includes?("at_end") %} ->(){ self.at_end() } {% else %} nil {% end %}),
      bg_QIODevice_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} ->(){ self.reset() } {% else %} nil {% end %}),
      bg_QIODevice_bytesAvailable_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_available") %} ->(){ self.bytes_available() } {% else %} nil {% end %}),
      bg_QIODevice_bytesToWrite_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_to_write") %} ->(){ self.bytes_to_write() } {% else %} nil {% end %}),
      bg_QIODevice_canReadLine_: BindgenHelper.wrap_proc({% if forwarded.includes?("can_read_line") %} ->(){ self.can_read_line() } {% else %} nil {% end %}),
      bg_QIODevice_waitForReadyRead_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_ready_read") %} ->(msecs : Int32){ self.wait_for_ready_read(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_waitForBytesWritten_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_bytes_written") %} ->(msecs : Int32){ self.wait_for_bytes_written(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_readData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_data") %} ->(data : UInt8*, maxlen : Int64){ self.read_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_readLineData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_line_data") %} ->(data : UInt8*, maxlen : Int64){ self.read_line_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_writeData_const_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("write_data") %} ->(data : UInt8*, len : Int64){ self.write_data(data, len) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QIODevice_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    protected abstract def read_data(data : UInt8*, maxlen : Int64) : Int64
    protected def read_line_data(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_readLineData_char_X_qint64(self, data, maxlen)
    end
    protected abstract def write_data(data : UInt8*, len : Int64) : Int64
    protected def open_mode=(open_mode : IODevice::OpenMode) : Void
      Binding.bg_QIODevice_setOpenMode_QIODevice__OpenMode(self, open_mode)
    end
    protected def error_string=(error_string : String) : Void
      Binding.bg_QIODevice_setErrorString_const_QString_R(self, Qt::Converter::QString.wrap(error_string))
    end
  end
  class IODeviceImpl < IODevice
    macro inherited
      {{ raise "You can't sub-class IODeviceImpl, inherit from IODevice instead" }}
    end
    protected def read_data(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_readData_char_X_qint64(self, data, maxlen)
    end
    protected def write_data(data : UInt8*, len : Int64) : Int64
      Binding.bg_QIODevice_writeData_const_char_X_qint64(self, data, len)
    end
  end
  class Gesture < Object
    enum GestureCancelPolicy : UInt32
      CancelNone = 0
      CancelAllInContext = 1
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QGesture_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGesture_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGesture_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGesture_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QGesture_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Gesture)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGesture.new(
      bg_QGesture_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGesture_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGesture_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def gesture_type() : GestureType
      Binding.bg_QGesture_gestureType_(self)
    end
    def state() : GestureState
      Binding.bg_QGesture_state_(self)
    end
    def hot_spot() : PointF
      PointF.new(unwrap: Binding.bg_QGesture_hotSpot_(self))
    end
    def hot_spot=(value : PointF) : Void
      Binding.bg_QGesture_setHotSpot_const_QPointF_R(self, value)
    end
    def has_hot_spot?() : Bool
      Binding.bg_QGesture_hasHotSpot_(self)
    end
    def unset_hot_spot() : Void
      Binding.bg_QGesture_unsetHotSpot_(self)
    end
    def gesture_cancel_policy=(policy : Gesture::GestureCancelPolicy) : Void
      Binding.bg_QGesture_setGestureCancelPolicy_QGesture__GestureCancelPolicy(self, policy)
    end
    def gesture_cancel_policy() : Gesture::GestureCancelPolicy
      Binding.bg_QGesture_gestureCancelPolicy_(self)
    end
    protected def initialize(dd : QGesturePrivate*, parent : Object)
      unwrap = Binding.bg_QGesture_CONSTRUCT_QGesturePrivate_R_QObject_X(dd, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Gesture)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQGesture.new(
      bg_QGesture_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QGesture_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QGesture_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
  end
  class Painter 
    @[Flags]
    enum RenderHints : UInt32
      Antialiasing = 1
      TextAntialiasing = 2
      SmoothPixmapTransform = 4
      HighQualityAntialiasing = 8
      NonCosmeticDefaultPen = 16
      Qt4CompatiblePainting = 32
    end
    enum RenderHint : UInt32
      Antialiasing = 1
      TextAntialiasing = 2
      SmoothPixmapTransform = 4
      HighQualityAntialiasing = 8
      NonCosmeticDefaultPen = 16
      Qt4CompatiblePainting = 32
    end
    enum CompositionMode : UInt32
      CompositionModeSourceOver = 0
      CompositionModeDestinationOver = 1
      CompositionModeClear = 2
      CompositionModeSource = 3
      CompositionModeDestination = 4
      CompositionModeSourceIn = 5
      CompositionModeDestinationIn = 6
      CompositionModeSourceOut = 7
      CompositionModeDestinationOut = 8
      CompositionModeSourceAtop = 9
      CompositionModeDestinationAtop = 10
      CompositionModeXor = 11
      CompositionModePlus = 12
      CompositionModeMultiply = 13
      CompositionModeScreen = 14
      CompositionModeOverlay = 15
      CompositionModeDarken = 16
      CompositionModeLighten = 17
      CompositionModeColorDodge = 18
      CompositionModeColorBurn = 19
      CompositionModeHardLight = 20
      CompositionModeSoftLight = 21
      CompositionModeDifference = 22
      CompositionModeExclusion = 23
      RasterOpSourceOrDestination = 24
      RasterOpSourceAndDestination = 25
      RasterOpSourceXorDestination = 26
      RasterOpNotSourceAndNotDestination = 27
      RasterOpNotSourceOrNotDestination = 28
      RasterOpNotSourceXorDestination = 29
      RasterOpNotSource = 30
      RasterOpNotSourceAndDestination = 31
      RasterOpSourceAndNotDestination = 32
      RasterOpNotSourceOrDestination = 33
      RasterOpSourceOrNotDestination = 34
      RasterOpClearDestination = 35
      RasterOpSetDestination = 36
      RasterOpNotDestination = 37
    end
    enum PixmapFragmentHint : UInt32
      OpaqueHint = 1
    end
    @[Flags]
    enum PixmapFragmentHints : UInt32
      OpaqueHint = 1
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QPainter_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(unnamed_arg_0 : PaintDevice)
      unwrap = Binding.bg_QPainter_CONSTRUCT_QPaintDevice_X(unnamed_arg_0)
    @unwrap = unwrap
    
    end
    def device() : PaintDevice
      PaintDevice.new(unwrap: Binding.bg_QPainter_device_(self))
    end
    def begin(unnamed_arg_0 : PaintDevice) : Bool
      Binding.bg_QPainter_begin_QPaintDevice_X(self, unnamed_arg_0)
    end
    def end() : Bool
      Binding.bg_QPainter_end_(self)
    end
    def active?() : Bool
      Binding.bg_QPainter_isActive_(self)
    end
    def init_from(device : PaintDevice) : Void
      Binding.bg_QPainter_initFrom_const_QPaintDevice_X(self, device)
    end
    def composition_mode=(mode : Painter::CompositionMode) : Void
      Binding.bg_QPainter_setCompositionMode_QPainter__CompositionMode(self, mode)
    end
    def composition_mode() : Painter::CompositionMode
      Binding.bg_QPainter_compositionMode_(self)
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QPainter_font_(self))
    end
    def font=(f : Font) : Void
      Binding.bg_QPainter_setFont_const_QFont_R(self, f)
    end
    def font_metrics() : QFontMetrics*
      Binding.bg_QPainter_fontMetrics_(self)
    end
    def font_info() : QFontInfo*
      Binding.bg_QPainter_fontInfo_(self)
    end
    def pen=(color : Color) : Void
      Binding.bg_QPainter_setPen_const_QColor_R(self, color)
    end
    def pen=(pen : QPen*) : Void
      Binding.bg_QPainter_setPen_const_QPen_R(self, pen)
    end
    def pen=(style : PenStyle) : Void
      Binding.bg_QPainter_setPen_Qt__PenStyle(self, style)
    end
    def pen() : QPen*
      Binding.bg_QPainter_pen_(self)
    end
    def brush=(brush : Brush) : Void
      Binding.bg_QPainter_setBrush_const_QBrush_R(self, brush)
    end
    def brush=(style : BrushStyle) : Void
      Binding.bg_QPainter_setBrush_Qt__BrushStyle(self, style)
    end
    def brush() : Brush
      Brush.new(unwrap: Binding.bg_QPainter_brush_(self))
    end
    def background_mode=(mode : BgMode) : Void
      Binding.bg_QPainter_setBackgroundMode_Qt__BGMode(self, mode)
    end
    def background_mode() : BgMode
      Binding.bg_QPainter_backgroundMode_(self)
    end
    def brush_origin() : Point
      Point.new(unwrap: Binding.bg_QPainter_brushOrigin_(self))
    end
    def set_brush_origin(x : Int32, y : Int32) : Void
      Binding.bg_QPainter_setBrushOrigin_int_int(self, x, y)
    end
    def brush_origin=(unnamed_arg_0 : Point) : Void
      Binding.bg_QPainter_setBrushOrigin_const_QPoint_R(self, unnamed_arg_0)
    end
    def brush_origin=(unnamed_arg_0 : PointF) : Void
      Binding.bg_QPainter_setBrushOrigin_const_QPointF_R(self, unnamed_arg_0)
    end
    def background=(bg : Brush) : Void
      Binding.bg_QPainter_setBackground_const_QBrush_R(self, bg)
    end
    def background() : Brush
      Brush.new(unwrap: Binding.bg_QPainter_background_(self))
    end
    def opacity() : Float64
      Binding.bg_QPainter_opacity_(self)
    end
    def opacity=(opacity : Float64) : Void
      Binding.bg_QPainter_setOpacity_qreal(self, opacity)
    end
    def clip_region() : QRegion*
      Binding.bg_QPainter_clipRegion_(self)
    end
    def clip_path() : QPainterPath*
      Binding.bg_QPainter_clipPath_(self)
    end
    def set_clip_rect(unnamed_arg_0 : RectF, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRect_const_QRectF_R_Qt__ClipOperation(self, unnamed_arg_0, op)
    end
    def set_clip_rect(unnamed_arg_0 : Rect, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRect_const_QRect_R_Qt__ClipOperation(self, unnamed_arg_0, op)
    end
    def set_clip_rect(x : Int32, y : Int32, w : Int32, h : Int32, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRect_int_int_int_int_Qt__ClipOperation(self, x, y, w, h, op)
    end
    def set_clip_region(unnamed_arg_0 : QRegion*, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRegion_const_QRegion_R_Qt__ClipOperation(self, unnamed_arg_0, op)
    end
    def set_clip_path(path : QPainterPath*, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipPath_const_QPainterPath_R_Qt__ClipOperation(self, path, op)
    end
    def clipping=(enable : Bool) : Void
      Binding.bg_QPainter_setClipping_bool(self, enable)
    end
    def has_clipping?() : Bool
      Binding.bg_QPainter_hasClipping_(self)
    end
    def clip_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QPainter_clipBoundingRect_(self))
    end
    def save() : Void
      Binding.bg_QPainter_save_(self)
    end
    def restore() : Void
      Binding.bg_QPainter_restore_(self)
    end
    def set_matrix(matrix : QMatrix*, combine : Bool = false) : Void
      Binding.bg_QPainter_setMatrix_const_QMatrix_R_bool(self, matrix, combine)
    end
    def matrix() : QMatrix*
      Binding.bg_QPainter_matrix_(self)
    end
    def device_matrix() : QMatrix*
      Binding.bg_QPainter_deviceMatrix_(self)
    end
    def reset_matrix() : Void
      Binding.bg_QPainter_resetMatrix_(self)
    end
    def set_transform(transform : QTransform*, combine : Bool = false) : Void
      Binding.bg_QPainter_setTransform_const_QTransform_R_bool(self, transform, combine)
    end
    def transform() : QTransform*
      Binding.bg_QPainter_transform_(self)
    end
    def device_transform() : QTransform*
      Binding.bg_QPainter_deviceTransform_(self)
    end
    def reset_transform() : Void
      Binding.bg_QPainter_resetTransform_(self)
    end
    def set_world_matrix(matrix : QMatrix*, combine : Bool = false) : Void
      Binding.bg_QPainter_setWorldMatrix_const_QMatrix_R_bool(self, matrix, combine)
    end
    def world_matrix() : QMatrix*
      Binding.bg_QPainter_worldMatrix_(self)
    end
    def set_world_transform(matrix : QTransform*, combine : Bool = false) : Void
      Binding.bg_QPainter_setWorldTransform_const_QTransform_R_bool(self, matrix, combine)
    end
    def world_transform() : QTransform*
      Binding.bg_QPainter_worldTransform_(self)
    end
    def combined_matrix() : QMatrix*
      Binding.bg_QPainter_combinedMatrix_(self)
    end
    def combined_transform() : QTransform*
      Binding.bg_QPainter_combinedTransform_(self)
    end
    def matrix_enabled=(enabled : Bool) : Void
      Binding.bg_QPainter_setMatrixEnabled_bool(self, enabled)
    end
    def matrix_enabled() : Bool
      Binding.bg_QPainter_matrixEnabled_(self)
    end
    def world_matrix_enabled=(enabled : Bool) : Void
      Binding.bg_QPainter_setWorldMatrixEnabled_bool(self, enabled)
    end
    def world_matrix_enabled() : Bool
      Binding.bg_QPainter_worldMatrixEnabled_(self)
    end
    def scale(sx : Float64, sy : Float64) : Void
      Binding.bg_QPainter_scale_qreal_qreal(self, sx, sy)
    end
    def shear(sh : Float64, sv : Float64) : Void
      Binding.bg_QPainter_shear_qreal_qreal(self, sh, sv)
    end
    def rotate(a : Float64) : Void
      Binding.bg_QPainter_rotate_qreal(self, a)
    end
    def translate(offset : PointF) : Void
      Binding.bg_QPainter_translate_const_QPointF_R(self, offset)
    end
    def translate(offset : Point) : Void
      Binding.bg_QPainter_translate_const_QPoint_R(self, offset)
    end
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QPainter_translate_qreal_qreal(self, dx, dy)
    end
    def window() : Rect
      Rect.new(unwrap: Binding.bg_QPainter_window_(self))
    end
    def window=(window : Rect) : Void
      Binding.bg_QPainter_setWindow_const_QRect_R(self, window)
    end
    def set_window(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_setWindow_int_int_int_int(self, x, y, w, h)
    end
    def viewport() : Rect
      Rect.new(unwrap: Binding.bg_QPainter_viewport_(self))
    end
    def viewport=(viewport : Rect) : Void
      Binding.bg_QPainter_setViewport_const_QRect_R(self, viewport)
    end
    def set_viewport(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_setViewport_int_int_int_int(self, x, y, w, h)
    end
    def view_transform_enabled=(enable : Bool) : Void
      Binding.bg_QPainter_setViewTransformEnabled_bool(self, enable)
    end
    def view_transform_enabled() : Bool
      Binding.bg_QPainter_viewTransformEnabled_(self)
    end
    def stroke_path(path : QPainterPath*, pen : QPen*) : Void
      Binding.bg_QPainter_strokePath_const_QPainterPath_R_const_QPen_R(self, path, pen)
    end
    def fill_path(path : QPainterPath*, brush : Brush) : Void
      Binding.bg_QPainter_fillPath_const_QPainterPath_R_const_QBrush_R(self, path, brush)
    end
    def draw_path(path : QPainterPath*) : Void
      Binding.bg_QPainter_drawPath_const_QPainterPath_R(self, path)
    end
    def draw_point(pt : PointF) : Void
      Binding.bg_QPainter_drawPoint_const_QPointF_R(self, pt)
    end
    def draw_point(p : Point) : Void
      Binding.bg_QPainter_drawPoint_const_QPoint_R(self, p)
    end
    def draw_point(x : Int32, y : Int32) : Void
      Binding.bg_QPainter_drawPoint_int_int(self, x, y)
    end
    def draw_points(points : QPolygonF*) : Void
      Binding.bg_QPainter_drawPoints_const_QPolygonF_R(self, points)
    end
    def draw_points(points : QPolygon*) : Void
      Binding.bg_QPainter_drawPoints_const_QPolygon_R(self, points)
    end
    def draw_line(line : QLineF) : Void
      Binding.bg_QPainter_drawLine_const_QLineF_R(self, line)
    end
    def draw_line(line : QLine) : Void
      Binding.bg_QPainter_drawLine_const_QLine_R(self, line)
    end
    def draw_line(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QPainter_drawLine_int_int_int_int(self, x1, y1, x2, y2)
    end
    def draw_line(p1 : Point, p2 : Point) : Void
      Binding.bg_QPainter_drawLine_const_QPoint_R_const_QPoint_R(self, p1, p2)
    end
    def draw_line(p1 : PointF, p2 : PointF) : Void
      Binding.bg_QPainter_drawLine_const_QPointF_R_const_QPointF_R(self, p1, p2)
    end
    def draw_lines(lines : QLineF, line_count : Int32) : Void
      Binding.bg_QPainter_drawLines_const_QLineF_X_int(self, lines, line_count)
    end
    def draw_lines(lines : Enumerable(QLineF)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QLineF__R(self, BindgenHelper.wrap_container(QVector_QLineF, lines).to_unsafe)
    end
    def draw_lines(point_pairs : Enumerable(PointF)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QPointF__R(self, BindgenHelper.wrap_container(QVector_QPointF, point_pairs).to_unsafe)
    end
    def draw_lines(lines : QLine, line_count : Int32) : Void
      Binding.bg_QPainter_drawLines_const_QLine_X_int(self, lines, line_count)
    end
    def draw_lines(lines : Enumerable(QLine)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QLine__R(self, BindgenHelper.wrap_container(QVector_QLine, lines).to_unsafe)
    end
    def draw_lines(point_pairs : Enumerable(Point)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QPoint__R(self, BindgenHelper.wrap_container(QVector_QPoint, point_pairs).to_unsafe)
    end
    def draw_rect(rect : RectF) : Void
      Binding.bg_QPainter_drawRect_const_QRectF_R(self, rect)
    end
    def draw_rect(x1 : Int32, y1 : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_drawRect_int_int_int_int(self, x1, y1, w, h)
    end
    def draw_rect(rect : Rect) : Void
      Binding.bg_QPainter_drawRect_const_QRect_R(self, rect)
    end
    def draw_rects(rects : RectF, rect_count : Int32) : Void
      Binding.bg_QPainter_drawRects_const_QRectF_X_int(self, rects, rect_count)
    end
    def draw_rects(rectangles : Enumerable(RectF)) : Void
      Binding.bg_QPainter_drawRects_const_QVector_QRectF__R(self, BindgenHelper.wrap_container(QVector_QRectF, rectangles).to_unsafe)
    end
    def draw_rects(rects : Rect, rect_count : Int32) : Void
      Binding.bg_QPainter_drawRects_const_QRect_X_int(self, rects, rect_count)
    end
    def draw_rects(rectangles : Enumerable(Rect)) : Void
      Binding.bg_QPainter_drawRects_const_QVector_QRect__R(self, BindgenHelper.wrap_container(QVector_QRect, rectangles).to_unsafe)
    end
    def draw_ellipse(r : RectF) : Void
      Binding.bg_QPainter_drawEllipse_const_QRectF_R(self, r)
    end
    def draw_ellipse(r : Rect) : Void
      Binding.bg_QPainter_drawEllipse_const_QRect_R(self, r)
    end
    def draw_ellipse(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_drawEllipse_int_int_int_int(self, x, y, w, h)
    end
    def draw_ellipse(center : PointF, rx : Float64, ry : Float64) : Void
      Binding.bg_QPainter_drawEllipse_const_QPointF_R_qreal_qreal(self, center, rx, ry)
    end
    def draw_ellipse(center : Point, rx : Int32, ry : Int32) : Void
      Binding.bg_QPainter_drawEllipse_const_QPoint_R_int_int(self, center, rx, ry)
    end
    def draw_polyline(polyline : QPolygonF*) : Void
      Binding.bg_QPainter_drawPolyline_const_QPolygonF_R(self, polyline)
    end
    def draw_polyline(polygon : QPolygon*) : Void
      Binding.bg_QPainter_drawPolyline_const_QPolygon_R(self, polygon)
    end
    def draw_polygon(polygon : QPolygonF*, fill_rule : FillRule = FillRule::OddEvenFill) : Void
      Binding.bg_QPainter_drawPolygon_const_QPolygonF_R_Qt__FillRule(self, polygon, fill_rule)
    end
    def draw_polygon(polygon : QPolygon*, fill_rule : FillRule = FillRule::OddEvenFill) : Void
      Binding.bg_QPainter_drawPolygon_const_QPolygon_R_Qt__FillRule(self, polygon, fill_rule)
    end
    def draw_convex_polygon(polygon : QPolygonF*) : Void
      Binding.bg_QPainter_drawConvexPolygon_const_QPolygonF_R(self, polygon)
    end
    def draw_convex_polygon(polygon : QPolygon*) : Void
      Binding.bg_QPainter_drawConvexPolygon_const_QPolygon_R(self, polygon)
    end
    def draw_arc(rect : RectF, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawArc_const_QRectF_R_int_int(self, rect, a, alen)
    end
    def draw_arc(unnamed_arg_0 : Rect, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawArc_const_QRect_R_int_int(self, unnamed_arg_0, a, alen)
    end
    def draw_arc(x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawArc_int_int_int_int_int_int(self, x, y, w, h, a, alen)
    end
    def draw_pie(rect : RectF, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawPie_const_QRectF_R_int_int(self, rect, a, alen)
    end
    def draw_pie(x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawPie_int_int_int_int_int_int(self, x, y, w, h, a, alen)
    end
    def draw_pie(unnamed_arg_0 : Rect, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawPie_const_QRect_R_int_int(self, unnamed_arg_0, a, alen)
    end
    def draw_chord(rect : RectF, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawChord_const_QRectF_R_int_int(self, rect, a, alen)
    end
    def draw_chord(x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawChord_int_int_int_int_int_int(self, x, y, w, h, a, alen)
    end
    def draw_chord(unnamed_arg_0 : Rect, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawChord_const_QRect_R_int_int(self, unnamed_arg_0, a, alen)
    end
    def draw_rounded_rect(rect : RectF, x_radius : Float64, y_radius : Float64, mode : SizeMode = SizeMode::AbsoluteSize) : Void
      Binding.bg_QPainter_drawRoundedRect_const_QRectF_R_qreal_qreal_Qt__SizeMode(self, rect, x_radius, y_radius, mode)
    end
    def draw_rounded_rect(x : Int32, y : Int32, w : Int32, h : Int32, x_radius : Float64, y_radius : Float64, mode : SizeMode = SizeMode::AbsoluteSize) : Void
      Binding.bg_QPainter_drawRoundedRect_int_int_int_int_qreal_qreal_Qt__SizeMode(self, x, y, w, h, x_radius, y_radius, mode)
    end
    def draw_rounded_rect(rect : Rect, x_radius : Float64, y_radius : Float64, mode : SizeMode = SizeMode::AbsoluteSize) : Void
      Binding.bg_QPainter_drawRoundedRect_const_QRect_R_qreal_qreal_Qt__SizeMode(self, rect, x_radius, y_radius, mode)
    end
    def draw_round_rect(r : RectF, xround : Int32 = 25, yround : Int32 = 25) : Void
      Binding.bg_QPainter_drawRoundRect_const_QRectF_R_int_int(self, r, xround, yround)
    end
    def draw_round_rect(x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : Int32 = 25, unnamed_arg_5 : Int32 = 25) : Void
      Binding.bg_QPainter_drawRoundRect_int_int_int_int_int_int(self, x, y, w, h, unnamed_arg_4, unnamed_arg_5)
    end
    def draw_round_rect(r : Rect, xround : Int32 = 25, yround : Int32 = 25) : Void
      Binding.bg_QPainter_drawRoundRect_const_QRect_R_int_int(self, r, xround, yround)
    end
    def draw_tiled_pixmap(rect : RectF, pm : Pixmap) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R(self, rect, pm)
    end
    def draw_tiled_pixmap(rect : RectF, pm : Pixmap, offset : PointF) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R_const_QPointF_R(self, rect, pm, offset)
    end
    def draw_tiled_pixmap(x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : Pixmap, sx : Int32 = 0, sy : Int32 = 0) : Void
      Binding.bg_QPainter_drawTiledPixmap_int_int_int_int_const_QPixmap_R_int_int(self, x, y, w, h, unnamed_arg_4, sx, sy)
    end
    def draw_tiled_pixmap(unnamed_arg_0 : Rect, unnamed_arg_1 : Pixmap) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    def draw_tiled_pixmap(unnamed_arg_0 : Rect, unnamed_arg_1 : Pixmap, unnamed_arg_2 : Point) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def draw_picture(p : PointF, picture : QPicture*) : Void
      Binding.bg_QPainter_drawPicture_const_QPointF_R_const_QPicture_R(self, p, picture)
    end
    def draw_picture(x : Int32, y : Int32, picture : QPicture*) : Void
      Binding.bg_QPainter_drawPicture_int_int_const_QPicture_R(self, x, y, picture)
    end
    def draw_picture(p : Point, picture : QPicture*) : Void
      Binding.bg_QPainter_drawPicture_const_QPoint_R_const_QPicture_R(self, p, picture)
    end
    def draw_pixmap(target_rect : RectF, pixmap : Pixmap, source_rect : RectF) : Void
      Binding.bg_QPainter_drawPixmap_const_QRectF_R_const_QPixmap_R_const_QRectF_R(self, target_rect, pixmap, source_rect)
    end
    def draw_pixmap(target_rect : Rect, pixmap : Pixmap, source_rect : Rect) : Void
      Binding.bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R_const_QRect_R(self, target_rect, pixmap, source_rect)
    end
    def draw_pixmap(x : Int32, y : Int32, w : Int32, h : Int32, pm : Pixmap, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
      Binding.bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R_int_int_int_int(self, x, y, w, h, pm, sx, sy, sw, sh)
    end
    def draw_pixmap(x : Int32, y : Int32, pm : Pixmap, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
      Binding.bg_QPainter_drawPixmap_int_int_const_QPixmap_R_int_int_int_int(self, x, y, pm, sx, sy, sw, sh)
    end
    def draw_pixmap(p : PointF, pm : Pixmap, sr : RectF) : Void
      Binding.bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R_const_QRectF_R(self, p, pm, sr)
    end
    def draw_pixmap(p : Point, pm : Pixmap, sr : Rect) : Void
      Binding.bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R_const_QRect_R(self, p, pm, sr)
    end
    def draw_pixmap(p : PointF, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R(self, p, pm)
    end
    def draw_pixmap(p : Point, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R(self, p, pm)
    end
    def draw_pixmap(x : Int32, y : Int32, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_int_int_const_QPixmap_R(self, x, y, pm)
    end
    def draw_pixmap(r : Rect, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R(self, r, pm)
    end
    def draw_pixmap(x : Int32, y : Int32, w : Int32, h : Int32, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R(self, x, y, w, h, pm)
    end
    def draw_image(target_rect : RectF, image : Image, source_rect : RectF) : Void
      Binding.bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R(self, target_rect, image, source_rect)
    end
    def draw_image(target_rect : RectF, image : Image, source_rect : RectF, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(self, target_rect, image, source_rect, flags)
    end
    def draw_image(target_rect : Rect, image : Image, source_rect : Rect) : Void
      Binding.bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R(self, target_rect, image, source_rect)
    end
    def draw_image(target_rect : Rect, image : Image, source_rect : Rect, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(self, target_rect, image, source_rect, flags)
    end
    def draw_image(p : PointF, image : Image, sr : RectF) : Void
      Binding.bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R(self, p, image, sr)
    end
    def draw_image(p : PointF, image : Image, sr : RectF, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(self, p, image, sr, flags)
    end
    def draw_image(p : Point, image : Image, sr : Rect) : Void
      Binding.bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R(self, p, image, sr)
    end
    def draw_image(p : Point, image : Image, sr : Rect, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(self, p, image, sr, flags)
    end
    def draw_image(r : RectF, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QRectF_R_const_QImage_R(self, r, image)
    end
    def draw_image(r : Rect, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QRect_R_const_QImage_R(self, r, image)
    end
    def draw_image(p : PointF, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QPointF_R_const_QImage_R(self, p, image)
    end
    def draw_image(p : Point, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QPoint_R_const_QImage_R(self, p, image)
    end
    def draw_image(x : Int32, y : Int32, image : Image, sx : Int32 = 0, sy : Int32 = 0, sw : Int32 = -1, sh : Int32 = -1) : Void
      Binding.bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int(self, x, y, image, sx, sy, sw, sh)
    end
    def draw_image(x : Int32, y : Int32, image : Image, sx : Int32, sy : Int32, sw : Int32, sh : Int32, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int_Qt__ImageConversionFlags(self, x, y, image, sx, sy, sw, sh, flags)
    end
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QPainter_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    def layout_direction() : LayoutDirection
      Binding.bg_QPainter_layoutDirection_(self)
    end
    def draw_glyph_run(position : PointF, glyph_run : QGlyphRun*) : Void
      Binding.bg_QPainter_drawGlyphRun_const_QPointF_R_const_QGlyphRun_R(self, position, glyph_run)
    end
    def draw_static_text(top_left_position : PointF, static_text : QStaticText*) : Void
      Binding.bg_QPainter_drawStaticText_const_QPointF_R_const_QStaticText_R(self, top_left_position, static_text)
    end
    def draw_static_text(top_left_position : Point, static_text : QStaticText*) : Void
      Binding.bg_QPainter_drawStaticText_const_QPoint_R_const_QStaticText_R(self, top_left_position, static_text)
    end
    def draw_static_text(left : Int32, top : Int32, static_text : QStaticText*) : Void
      Binding.bg_QPainter_drawStaticText_int_int_const_QStaticText_R(self, left, top, static_text)
    end
    def draw_text(p : PointF, s : String) : Void
      Binding.bg_QPainter_drawText_const_QPointF_R_const_QString_R(self, p, Qt::Converter::QString.wrap(s))
    end
    def draw_text(p : Point, s : String) : Void
      Binding.bg_QPainter_drawText_const_QPoint_R_const_QString_R(self, p, Qt::Converter::QString.wrap(s))
    end
    def draw_text(x : Int32, y : Int32, s : String) : Void
      Binding.bg_QPainter_drawText_int_int_const_QString_R(self, x, y, Qt::Converter::QString.wrap(s))
    end
    def draw_text(p : PointF, str : String, tf : Int32, justification_padding : Int32) : Void
      Binding.bg_QPainter_drawText_const_QPointF_R_const_QString_R_int_int(self, p, Qt::Converter::QString.wrap(str), tf, justification_padding)
    end
    def draw_text(r : RectF, flags : Int32, text : String, br : RectF? = nil) : Void
      Binding.bg_QPainter_drawText_const_QRectF_R_int_const_QString_R_QRectF_X(self, r, flags, Qt::Converter::QString.wrap(text), br)
    end
    def draw_text(r : Rect, flags : Int32, text : String, br : Rect? = nil) : Void
      Binding.bg_QPainter_drawText_const_QRect_R_int_const_QString_R_QRect_X(self, r, flags, Qt::Converter::QString.wrap(text), br)
    end
    def draw_text(x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : String, br : Rect? = nil) : Void
      Binding.bg_QPainter_drawText_int_int_int_int_int_const_QString_R_QRect_X(self, x, y, w, h, flags, Qt::Converter::QString.wrap(text), br)
    end
    def draw_text(r : RectF, text : String) : Void
      Binding.bg_QPainter_drawText_const_QRectF_R_const_QString_R(self, r, Qt::Converter::QString.wrap(text))
    end
    def draw_text(r : RectF, text : String, o : TextOption) : Void
      Binding.bg_QPainter_drawText_const_QRectF_R_const_QString_R_const_QTextOption_R(self, r, Qt::Converter::QString.wrap(text), o)
    end
    def bounding_rect(rect : RectF, flags : Int32, text : String) : RectF
      RectF.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRectF_R_int_const_QString_R(self, rect, flags, Qt::Converter::QString.wrap(text)))
    end
    def bounding_rect(rect : Rect, flags : Int32, text : String) : Rect
      Rect.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRect_R_int_const_QString_R(self, rect, flags, Qt::Converter::QString.wrap(text)))
    end
    def bounding_rect(x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : String) : Rect
      Rect.new(unwrap: Binding.bg_QPainter_boundingRect_int_int_int_int_int_const_QString_R(self, x, y, w, h, flags, Qt::Converter::QString.wrap(text)))
    end
    def bounding_rect(rect : RectF, text : String) : RectF
      RectF.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRectF_R_const_QString_R(self, rect, Qt::Converter::QString.wrap(text)))
    end
    def bounding_rect(rect : RectF, text : String, o : TextOption) : RectF
      RectF.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRectF_R_const_QString_R_const_QTextOption_R(self, rect, Qt::Converter::QString.wrap(text), o))
    end
    def draw_text_item(p : PointF, ti : QTextItem*) : Void
      Binding.bg_QPainter_drawTextItem_const_QPointF_R_const_QTextItem_R(self, p, ti)
    end
    def draw_text_item(x : Int32, y : Int32, ti : QTextItem*) : Void
      Binding.bg_QPainter_drawTextItem_int_int_const_QTextItem_R(self, x, y, ti)
    end
    def draw_text_item(p : Point, ti : QTextItem*) : Void
      Binding.bg_QPainter_drawTextItem_const_QPoint_R_const_QTextItem_R(self, p, ti)
    end
    def fill_rect(unnamed_arg_0 : RectF, unnamed_arg_1 : Brush) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_const_QBrush_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : Brush) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_const_QBrush_R(self, x, y, w, h, unnamed_arg_4)
    end
    def fill_rect(unnamed_arg_0 : Rect, unnamed_arg_1 : Brush) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_const_QBrush_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    def fill_rect(unnamed_arg_0 : RectF, color : Color) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_const_QColor_R(self, unnamed_arg_0, color)
    end
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, color : Color) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_const_QColor_R(self, x, y, w, h, color)
    end
    def fill_rect(unnamed_arg_0 : Rect, color : Color) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_const_QColor_R(self, unnamed_arg_0, color)
    end
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, c : GlobalColor) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_Qt__GlobalColor(self, x, y, w, h, c)
    end
    def fill_rect(r : Rect, c : GlobalColor) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_Qt__GlobalColor(self, r, c)
    end
    def fill_rect(r : RectF, c : GlobalColor) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_Qt__GlobalColor(self, r, c)
    end
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, style : BrushStyle) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_Qt__BrushStyle(self, x, y, w, h, style)
    end
    def fill_rect(r : Rect, style : BrushStyle) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_Qt__BrushStyle(self, r, style)
    end
    def fill_rect(r : RectF, style : BrushStyle) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_Qt__BrushStyle(self, r, style)
    end
    def erase_rect(unnamed_arg_0 : RectF) : Void
      Binding.bg_QPainter_eraseRect_const_QRectF_R(self, unnamed_arg_0)
    end
    def erase_rect(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_eraseRect_int_int_int_int(self, x, y, w, h)
    end
    def erase_rect(unnamed_arg_0 : Rect) : Void
      Binding.bg_QPainter_eraseRect_const_QRect_R(self, unnamed_arg_0)
    end
    def set_render_hint(hint : Painter::RenderHint, on : Bool = true) : Void
      Binding.bg_QPainter_setRenderHint_QPainter__RenderHint_bool(self, hint, on)
    end
    def set_render_hints(hints : Painter::RenderHints, on : Bool = true) : Void
      Binding.bg_QPainter_setRenderHints_QPainter__RenderHints_bool(self, hints, on)
    end
    def render_hints() : Painter::RenderHints
      Binding.bg_QPainter_renderHints_(self)
    end
    def test_render_hint(hint : Painter::RenderHint) : Bool
      Binding.bg_QPainter_testRenderHint_QPainter__RenderHint(self, hint)
    end
    def paint_engine() : QPaintEngine*
      Binding.bg_QPainter_paintEngine_(self)
    end
    def self.set_redirected(device : PaintDevice, replacement : PaintDevice) : Void
      Binding.bg_QPainter_setRedirected_STATIC_const_QPaintDevice_X_QPaintDevice_X(device, replacement)
    end
    def self.set_redirected(device : PaintDevice, replacement : PaintDevice, offset : Point) : Void
      Binding.bg_QPainter_setRedirected_STATIC_const_QPaintDevice_X_QPaintDevice_X_const_QPoint_R(device, replacement, offset)
    end
    def self.restore_redirected(device : PaintDevice) : Void
      Binding.bg_QPainter_restoreRedirected_STATIC_const_QPaintDevice_X(device)
    end
    def begin_native_painting() : Void
      Binding.bg_QPainter_beginNativePainting_(self)
    end
    def end_native_painting() : Void
      Binding.bg_QPainter_endNativePainting_(self)
    end
  end
  class QLine 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QLine_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(pt1 : Point, pt2 : Point)
      unwrap = Binding.bg_QLine_CONSTRUCT_const_QPoint_R_const_QPoint_R(pt1, pt2)
    @unwrap = unwrap
    
    end
    def initialize(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32)
      unwrap = Binding.bg_QLine_CONSTRUCT_int_int_int_int(x1, y1, x2, y2)
    @unwrap = unwrap
    
    end
    def null?() : Bool
      Binding.bg_QLine_isNull_(self)
    end
    def p1() : Point
      Point.new(unwrap: Binding.bg_QLine_p1_(self))
    end
    def p2() : Point
      Point.new(unwrap: Binding.bg_QLine_p2_(self))
    end
    def x1() : Int32
      Binding.bg_QLine_x1_(self)
    end
    def y1() : Int32
      Binding.bg_QLine_y1_(self)
    end
    def x2() : Int32
      Binding.bg_QLine_x2_(self)
    end
    def y2() : Int32
      Binding.bg_QLine_y2_(self)
    end
    def dx() : Int32
      Binding.bg_QLine_dx_(self)
    end
    def dy() : Int32
      Binding.bg_QLine_dy_(self)
    end
    def translate(p : Point) : Void
      Binding.bg_QLine_translate_const_QPoint_R(self, p)
    end
    def translate(dx : Int32, dy : Int32) : Void
      Binding.bg_QLine_translate_int_int(self, dx, dy)
    end
    def translated(p : Point) : QLine
      QLine.new(unwrap: Binding.bg_QLine_translated_const_QPoint_R(self, p))
    end
    def translated(dx : Int32, dy : Int32) : QLine
      QLine.new(unwrap: Binding.bg_QLine_translated_int_int(self, dx, dy))
    end
    def center() : Point
      Point.new(unwrap: Binding.bg_QLine_center_(self))
    end
    def p1=(p1 : Point) : Void
      Binding.bg_QLine_setP1_const_QPoint_R(self, p1)
    end
    def p2=(p2 : Point) : Void
      Binding.bg_QLine_setP2_const_QPoint_R(self, p2)
    end
    def set_points(p1 : Point, p2 : Point) : Void
      Binding.bg_QLine_setPoints_const_QPoint_R_const_QPoint_R(self, p1, p2)
    end
    def set_line(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QLine_setLine_int_int_int_int(self, x1, y1, x2, y2)
    end
  end
  class QLineF 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QLineF_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(pt1 : PointF, pt2 : PointF)
      unwrap = Binding.bg_QLineF_CONSTRUCT_const_QPointF_R_const_QPointF_R(pt1, pt2)
    @unwrap = unwrap
    
    end
    def initialize(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64)
      unwrap = Binding.bg_QLineF_CONSTRUCT_qreal_qreal_qreal_qreal(x1, y1, x2, y2)
    @unwrap = unwrap
    
    end
    def initialize(line : QLine)
      unwrap = Binding.bg_QLineF_CONSTRUCT_const_QLine_R(line)
    @unwrap = unwrap
    
    end
    def self.from_polar(length : Float64, angle : Float64) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_fromPolar_STATIC_qreal_qreal(length, angle))
    end
    def null?() : Bool
      Binding.bg_QLineF_isNull_(self)
    end
    def p1() : PointF
      PointF.new(unwrap: Binding.bg_QLineF_p1_(self))
    end
    def p2() : PointF
      PointF.new(unwrap: Binding.bg_QLineF_p2_(self))
    end
    def x1() : Float64
      Binding.bg_QLineF_x1_(self)
    end
    def y1() : Float64
      Binding.bg_QLineF_y1_(self)
    end
    def x2() : Float64
      Binding.bg_QLineF_x2_(self)
    end
    def y2() : Float64
      Binding.bg_QLineF_y2_(self)
    end
    def dx() : Float64
      Binding.bg_QLineF_dx_(self)
    end
    def dy() : Float64
      Binding.bg_QLineF_dy_(self)
    end
    def length() : Float64
      Binding.bg_QLineF_length_(self)
    end
    def length=(len : Float64) : Void
      Binding.bg_QLineF_setLength_qreal(self, len)
    end
    def angle() : Float64
      Binding.bg_QLineF_angle_(self)
    end
    def angle=(angle : Float64) : Void
      Binding.bg_QLineF_setAngle_qreal(self, angle)
    end
    def angle_to(l : QLineF) : Float64
      Binding.bg_QLineF_angleTo_const_QLineF_R(self, l)
    end
    def unit_vector() : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_unitVector_(self))
    end
    def normal_vector() : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_normalVector_(self))
    end
    def angle(l : QLineF) : Float64
      Binding.bg_QLineF_angle_const_QLineF_R(self, l)
    end
    def point_at(t : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QLineF_pointAt_qreal(self, t))
    end
    def translate(p : PointF) : Void
      Binding.bg_QLineF_translate_const_QPointF_R(self, p)
    end
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QLineF_translate_qreal_qreal(self, dx, dy)
    end
    def translated(p : PointF) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_translated_const_QPointF_R(self, p))
    end
    def translated(dx : Float64, dy : Float64) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_translated_qreal_qreal(self, dx, dy))
    end
    def center() : PointF
      PointF.new(unwrap: Binding.bg_QLineF_center_(self))
    end
    def p1=(p1 : PointF) : Void
      Binding.bg_QLineF_setP1_const_QPointF_R(self, p1)
    end
    def p2=(p2 : PointF) : Void
      Binding.bg_QLineF_setP2_const_QPointF_R(self, p2)
    end
    def set_points(p1 : PointF, p2 : PointF) : Void
      Binding.bg_QLineF_setPoints_const_QPointF_R_const_QPointF_R(self, p1, p2)
    end
    def set_line(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
      Binding.bg_QLineF_setLine_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    def to_line() : QLine
      QLine.new(unwrap: Binding.bg_QLineF_toLine_(self))
    end
  end
  class SystemTrayIcon < Object
    enum ActivationReason : UInt32
      Unknown = 0
      Context = 1
      DoubleClick = 2
      Trigger = 3
      MiddleClick = 4
    end
    enum MessageIcon : UInt32
      NoIcon = 0
      Information = 1
      Warning = 2
      Critical = 3
    end
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QSystemTrayIcon_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSystemTrayIcon_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSystemTrayIcon_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize(parent : Object? = nil)
      unwrap = Binding.bg_QSystemTrayIcon_CONSTRUCT_QObject_X(parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SystemTrayIcon)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQSystemTrayIcon.new(
      bg_QSystemTrayIcon_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QSystemTrayIcon_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def initialize(icon : Icon, parent : Object? = nil)
      unwrap = Binding.bg_QSystemTrayIcon_CONSTRUCT_const_QIcon_R_QObject_X(icon, parent)
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SystemTrayIcon)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQSystemTrayIcon.new(
      bg_QSystemTrayIcon_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QSystemTrayIcon_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def context_menu=(menu : Menu) : Void
      Binding.bg_QSystemTrayIcon_setContextMenu_QMenu_X(self, menu)
    end
    def context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QSystemTrayIcon_contextMenu_(self))
    end
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QSystemTrayIcon_icon_(self))
    end
    def icon=(icon : Icon) : Void
      Binding.bg_QSystemTrayIcon_setIcon_const_QIcon_R(self, icon)
    end
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSystemTrayIcon_toolTip_(self))
    end
    def tool_tip=(tip : String) : Void
      Binding.bg_QSystemTrayIcon_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tip))
    end
    def self.system_tray_available?() : Bool
      Binding.bg_QSystemTrayIcon_isSystemTrayAvailable_STATIC_()
    end
    def self.supports_messages() : Bool
      Binding.bg_QSystemTrayIcon_supportsMessages_STATIC_()
    end
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QSystemTrayIcon_geometry_(self))
    end
    def visible?() : Bool
      Binding.bg_QSystemTrayIcon_isVisible_(self)
    end
    def visible=(visible : Bool) : Void
      Binding.bg_QSystemTrayIcon_setVisible_bool(self, visible)
    end
    def show() : Void
      Binding.bg_QSystemTrayIcon_show_(self)
    end
    def hide() : Void
      Binding.bg_QSystemTrayIcon_hide_(self)
    end
    def show_message(title : String, msg : String, icon : Icon, msecs : Int32 = 10000) : Void
      Binding.bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_const_QIcon_R_int(self, Qt::Converter::QString.wrap(title), Qt::Converter::QString.wrap(msg), icon, msecs)
    end
    def show_message(title : String, msg : String, icon : SystemTrayIcon::MessageIcon = SystemTrayIcon::MessageIcon::Information, msecs : Int32 = 10000) : Void
      Binding.bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_QSystemTrayIcon__MessageIcon_int(self, Qt::Converter::QString.wrap(title), Qt::Converter::QString.wrap(msg), icon, msecs)
    end
    def activated(reason : SystemTrayIcon::ActivationReason) : Void
      Binding.bg_QSystemTrayIcon_activated_QSystemTrayIcon__ActivationReason(self, reason)
    end
    def on_activated(&block : Proc(SystemTrayIcon::ActivationReason, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSystemTrayIcon_activated_CONNECT_CrystalProc_void__QSystemTrayIcon__ActivationReason_(self, BindgenHelper.wrap_proc(->(reason : SystemTrayIcon::ActivationReason){ block.call(reason) })))
    end
    def message_clicked() : Void
      Binding.bg_QSystemTrayIcon_messageClicked_(self)
    end
    def on_message_clicked(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSystemTrayIcon_messageClicked_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def event(event : Event) : Bool
      Binding.bg_QSystemTrayIcon_event_QEvent_X(self, event)
    end
  end
  class DesktopServices 
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def self.open_url(url : Url) : Bool
      Binding.bg_QDesktopServices_openUrl_STATIC_const_QUrl_R(url)
    end
    def self.set_url_handler(scheme : String, receiver : Object, method : UInt8*) : Void
      Binding.bg_QDesktopServices_setUrlHandler_STATIC_const_QString_R_QObject_X_const_char_X(Qt::Converter::QString.wrap(scheme), receiver, method)
    end
    def self.unset_url_handler(scheme : String) : Void
      Binding.bg_QDesktopServices_unsetUrlHandler_STATIC_const_QString_R(Qt::Converter::QString.wrap(scheme))
    end
  end
  class DesktopWidget < Widget
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QDesktopWidget_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDesktopWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDesktopWidget_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QDesktopWidget_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DesktopWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall resize_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQDesktopWidget.new(
      bg_QDesktopWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QDesktopWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDesktopWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} ->(e : Binding::QResizeEvent*){ self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} ->(){ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} ->(visible : Bool){ self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} ->(){ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} ->(){ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} ->(unnamed_arg_0 : Int32){ self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} ->(){ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} ->(){ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} ->(event : Binding::QMouseEvent*){ self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} ->(event : QWheelEvent*){ self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} ->(event : QKeyEvent*){ self.key_press_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} ->(event : QKeyEvent*){ self.key_release_event(event) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} ->(event : Binding::QFocusEvent*){ self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} ->(event : Binding::QFocusEvent*){ self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} ->(event : Binding::QEvent*){ self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} ->(event : Binding::QEvent*){ self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} ->(event : Binding::QPaintEvent*){ self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} ->(event : Binding::QMoveEvent*){ self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} ->(event : Binding::QCloseEvent*){ self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} ->(event : QContextMenuEvent*){ self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} ->(event : QTabletEvent*){ self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} ->(event : Binding::QActionEvent*){ self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} ->(event : Binding::QDragEnterEvent*){ self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} ->(event : Binding::QDragMoveEvent*){ self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} ->(event : Binding::QDragLeaveEvent*){ self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} ->(event : Binding::QDropEvent*){ self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} ->(event : Binding::QShowEvent*){ self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} ->(event : Binding::QHideEvent*){ self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} ->(event_type : QByteArray*, message : Void*, result : Int32*){ self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} ->(unnamed_arg_0 : Binding::QEvent*){ self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} ->(unnamed_arg_0 : PaintDevice::PaintDeviceMetric){ self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} ->(painter : Binding::QPainter*){ self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} ->(){ Painter.new(unwrap: self.shared_painter()).to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} ->(unnamed_arg_0 : Binding::QInputMethodEvent*){ self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} ->(next_ : Bool){ self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QDesktopWidget_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def virtual_desktop?() : Bool
      Binding.bg_QDesktopWidget_isVirtualDesktop_(self)
    end
    def num_screens() : Int32
      Binding.bg_QDesktopWidget_numScreens_(self)
    end
    def screen_count() : Int32
      Binding.bg_QDesktopWidget_screenCount_(self)
    end
    def primary_screen() : Int32
      Binding.bg_QDesktopWidget_primaryScreen_(self)
    end
    def screen_number(widget : Widget? = nil) : Int32
      Binding.bg_QDesktopWidget_screenNumber_const_QWidget_X(self, widget)
    end
    def screen_number(unnamed_arg_0 : Point) : Int32
      Binding.bg_QDesktopWidget_screenNumber_const_QPoint_R(self, unnamed_arg_0)
    end
    def screen(screen : Int32 = -1) : Widget
      Widget.new(unwrap: Binding.bg_QDesktopWidget_screen_int(self, screen))
    end
    def screen_geometry(screen : Int32 = -1) : Rect
      Rect.new(unwrap: Binding.bg_QDesktopWidget_screenGeometry_int(self, screen))
    end
    def screen_geometry(widget : Widget) : Rect
      Rect.new(unwrap: Binding.bg_QDesktopWidget_screenGeometry_const_QWidget_X(self, widget))
    end
    def screen_geometry(point : Point) : Rect
      Rect.new(unwrap: Binding.bg_QDesktopWidget_screenGeometry_const_QPoint_R(self, point))
    end
    def available_geometry(screen : Int32 = -1) : Rect
      Rect.new(unwrap: Binding.bg_QDesktopWidget_availableGeometry_int(self, screen))
    end
    def available_geometry(widget : Widget) : Rect
      Rect.new(unwrap: Binding.bg_QDesktopWidget_availableGeometry_const_QWidget_X(self, widget))
    end
    def available_geometry(point : Point) : Rect
      Rect.new(unwrap: Binding.bg_QDesktopWidget_availableGeometry_const_QPoint_R(self, point))
    end
    def resized(unnamed_arg_0 : Int32) : Void
      Binding.bg_QDesktopWidget_resized_int(self, unnamed_arg_0)
    end
    def on_resized(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_resized_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    def work_area_resized(unnamed_arg_0 : Int32) : Void
      Binding.bg_QDesktopWidget_workAreaResized_int(self, unnamed_arg_0)
    end
    def on_work_area_resized(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_workAreaResized_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    def screen_count_changed(unnamed_arg_0 : Int32) : Void
      Binding.bg_QDesktopWidget_screenCountChanged_int(self, unnamed_arg_0)
    end
    def on_screen_count_changed(&block : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_screenCountChanged_CONNECT_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(->(unnamed_arg_0 : Int32){ block.call(unnamed_arg_0) })))
    end
    def primary_screen_changed() : Void
      Binding.bg_QDesktopWidget_primaryScreenChanged_(self)
    end
    def on_primary_screen_changed(&block : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_primaryScreenChanged_CONNECT_CrystalProc_void_(self, BindgenHelper.wrap_proc(->(){ block.call() })))
    end
    protected def resize_event(e : ResizeEvent) : Void
      Binding.bg_QDesktopWidget_resizeEvent_QResizeEvent_X(self, e)
    end
  end
  class StandardPaths 
    enum LocateOption : UInt32
      LocateFile = 0
      LocateDirectory = 1
    end
    @[Flags]
    enum LocateOptions : UInt32
      LocateFile = 0
      LocateDirectory = 1
    end
    enum StandardLocation : UInt32
      DesktopLocation = 0
      DocumentsLocation = 1
      FontsLocation = 2
      ApplicationsLocation = 3
      MusicLocation = 4
      MoviesLocation = 5
      PicturesLocation = 6
      TempLocation = 7
      HomeLocation = 8
      DataLocation = 9
      CacheLocation = 10
      GenericDataLocation = 11
      RuntimeLocation = 12
      ConfigLocation = 13
      DownloadLocation = 14
      GenericCacheLocation = 15
      GenericConfigLocation = 16
      AppDataLocation = 17
      AppConfigLocation = 18
      AppLocalDataLocation = 9
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def self.writable_location(type : StandardPaths::StandardLocation) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_writableLocation_STATIC_QStandardPaths__StandardLocation(type))
    end
    def self.standard_locations(type : StandardPaths::StandardLocation) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QStandardPaths_standardLocations_STATIC_QStandardPaths__StandardLocation(type))
    end
    def self.locate(type : StandardPaths::StandardLocation, file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R(type, Qt::Converter::QString.wrap(file_name)))
    end
    def self.locate(type : StandardPaths::StandardLocation, file_name : String, options : StandardPaths::LocateOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type, Qt::Converter::QString.wrap(file_name), options))
    end
    def self.locate_all(type : StandardPaths::StandardLocation, file_name : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R(type, Qt::Converter::QString.wrap(file_name)))
    end
    def self.locate_all(type : StandardPaths::StandardLocation, file_name : String, options : StandardPaths::LocateOptions) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type, Qt::Converter::QString.wrap(file_name), options))
    end
    def self.display_name(type : StandardPaths::StandardLocation) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_displayName_STATIC_QStandardPaths__StandardLocation(type))
    end
    def self.find_executable(executable_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_findExecutable_STATIC_const_QString_R(Qt::Converter::QString.wrap(executable_name)))
    end
    def self.find_executable(executable_name : String, paths : Enumerable(String)) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_findExecutable_STATIC_const_QString_R_const_QStringList_R(Qt::Converter::QString.wrap(executable_name), BindgenHelper.wrap_container(QList_QString, paths).to_unsafe))
    end
    def self.enable_test_mode(test_mode : Bool) : Void
      Binding.bg_QStandardPaths_enableTestMode_STATIC_bool(test_mode)
    end
    def self.test_mode_enabled=(test_mode : Bool) : Void
      Binding.bg_QStandardPaths_setTestModeEnabled_STATIC_bool(test_mode)
    end
    def self.test_mode_enabled?() : Bool
      Binding.bg_QStandardPaths_isTestModeEnabled_STATIC_()
    end
  end
  class MimeData < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QMimeData_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMimeData_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def initialize()
      unwrap = Binding.bg_QMimeData_CONSTRUCT_()
    @unwrap = unwrap
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MimeData)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall has_format formats event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgTableQMimeData.new(
      bg_QMimeData_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} ->(){ self.meta_object() } {% else %} nil {% end %}),
      bg_QMimeData_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} ->(unnamed_arg_0 : UInt8*){ self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} ->(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**){ self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMimeData_hasFormat_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("has_format") %} ->(mimetype : Binding::CrystalString){ self.has_format(Qt::Converter::QString.unwrap(mimetype)) } {% else %} nil {% end %}),
      bg_QMimeData_formats_: BindgenHelper.wrap_proc({% if forwarded.includes?("formats") %} ->(){ BindgenHelper.wrap_container(QList_QString, self.formats()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} ->(event : Binding::QEvent*){ self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} ->(watched : Binding::QObject*, event : Binding::QEvent*){ self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} ->(event : Binding::QTimerEvent*){ self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} ->(event : QChildEvent*){ self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} ->(event : Binding::QEvent*){ self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} ->(signal : QMetaMethod*){ self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} ->(signal : QMetaMethod*){ self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_QMimeData_JUMPTABLE unwrap, pointerof(jump_table)
    {% end %}
    
    end
    def urls() : Enumerable(Url)
      QList_QUrl.new(unwrap: Binding.bg_QMimeData_urls_(self))
    end
    def urls=(urls : Enumerable(Url)) : Void
      Binding.bg_QMimeData_setUrls_const_QList_QUrl__R(self, BindgenHelper.wrap_container(QList_QUrl, urls).to_unsafe)
    end
    def has_urls?() : Bool
      Binding.bg_QMimeData_hasUrls_(self)
    end
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_text_(self))
    end
    def text=(text : String) : Void
      Binding.bg_QMimeData_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    def has_text?() : Bool
      Binding.bg_QMimeData_hasText_(self)
    end
    def html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_html_(self))
    end
    def html=(html : String) : Void
      Binding.bg_QMimeData_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    def has_html?() : Bool
      Binding.bg_QMimeData_hasHtml_(self)
    end
    def has_image?() : Bool
      Binding.bg_QMimeData_hasImage_(self)
    end
    def has_color?() : Bool
      Binding.bg_QMimeData_hasColor_(self)
    end
    def data(mimetype : String) : QByteArray*
      Binding.bg_QMimeData_data_const_QString_R(self, Qt::Converter::QString.wrap(mimetype))
    end
    def set_data(mimetype : String, data : QByteArray*) : Void
      Binding.bg_QMimeData_setData_const_QString_R_const_QByteArray_R(self, Qt::Converter::QString.wrap(mimetype), data)
    end
    def remove_format(mimetype : String) : Void
      Binding.bg_QMimeData_removeFormat_const_QString_R(self, Qt::Converter::QString.wrap(mimetype))
    end
    def has_format(mimetype : String) : Bool
      Binding.bg_QMimeData_hasFormat_const_QString_R(self, Qt::Converter::QString.wrap(mimetype))
    end
    def formats() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QMimeData_formats_(self))
    end
    def clear() : Void
      Binding.bg_QMimeData_clear_(self)
    end
  end
  class SizePolicy 
    enum ControlType : UInt32
      DefaultType = 1
      ButtonBox = 2
      CheckBox = 4
      ComboBox = 8
      Frame = 16
      GroupBox = 32
      Label = 64
      Line = 128
      LineEdit = 256
      PushButton = 512
      RadioButton = 1024
      Slider = 2048
      SpinBox = 4096
      TabWidget = 8192
      ToolButton = 16384
    end
    @[Flags]
    enum ControlTypes : UInt32
      DefaultType = 1
      ButtonBox = 2
      CheckBox = 4
      ComboBox = 8
      Frame = 16
      GroupBox = 32
      Label = 64
      Line = 128
      LineEdit = 256
      PushButton = 512
      RadioButton = 1024
      Slider = 2048
      SpinBox = 4096
      TabWidget = 8192
      ToolButton = 16384
    end
    enum Policy : UInt32
      Fixed = 0
      Minimum = 1
      Maximum = 4
      Preferred = 5
      MinimumExpanding = 3
      Expanding = 7
      Ignored = 13
    end
    enum PolicyFlag : UInt32
      GrowFlag = 1
      ExpandFlag = 2
      ShrinkFlag = 4
      IgnoreFlag = 8
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QSizePolicy_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy, type : SizePolicy::ControlType = SizePolicy::ControlType::DefaultType)
      unwrap = Binding.bg_QSizePolicy_CONSTRUCT_QSizePolicy__Policy_QSizePolicy__Policy_QSizePolicy__ControlType(horizontal, vertical, type)
    @unwrap = unwrap
    
    end
    def horizontal_policy() : SizePolicy::Policy
      Binding.bg_QSizePolicy_horizontalPolicy_(self)
    end
    def vertical_policy() : SizePolicy::Policy
      Binding.bg_QSizePolicy_verticalPolicy_(self)
    end
    def control_type() : SizePolicy::ControlType
      Binding.bg_QSizePolicy_controlType_(self)
    end
    def horizontal_policy=(d : SizePolicy::Policy) : Void
      Binding.bg_QSizePolicy_setHorizontalPolicy_QSizePolicy__Policy(self, d)
    end
    def vertical_policy=(d : SizePolicy::Policy) : Void
      Binding.bg_QSizePolicy_setVerticalPolicy_QSizePolicy__Policy(self, d)
    end
    def control_type=(type : SizePolicy::ControlType) : Void
      Binding.bg_QSizePolicy_setControlType_QSizePolicy__ControlType(self, type)
    end
    def expanding_directions() : Orientations
      Binding.bg_QSizePolicy_expandingDirections_(self)
    end
    def height_for_width=(b : Bool) : Void
      Binding.bg_QSizePolicy_setHeightForWidth_bool(self, b)
    end
    def has_height_for_width?() : Bool
      Binding.bg_QSizePolicy_hasHeightForWidth_(self)
    end
    def width_for_height=(b : Bool) : Void
      Binding.bg_QSizePolicy_setWidthForHeight_bool(self, b)
    end
    def has_width_for_height?() : Bool
      Binding.bg_QSizePolicy_hasWidthForHeight_(self)
    end
    def horizontal_stretch() : Int32
      Binding.bg_QSizePolicy_horizontalStretch_(self)
    end
    def vertical_stretch() : Int32
      Binding.bg_QSizePolicy_verticalStretch_(self)
    end
    def horizontal_stretch=(stretch_factor : Int32) : Void
      Binding.bg_QSizePolicy_setHorizontalStretch_int(self, stretch_factor)
    end
    def vertical_stretch=(stretch_factor : Int32) : Void
      Binding.bg_QSizePolicy_setVerticalStretch_int(self, stretch_factor)
    end
    def retain_size_when_hidden() : Bool
      Binding.bg_QSizePolicy_retainSizeWhenHidden_(self)
    end
    def retain_size_when_hidden=(retain_size : Bool) : Void
      Binding.bg_QSizePolicy_setRetainSizeWhenHidden_bool(self, retain_size)
    end
    def transpose() : Void
      Binding.bg_QSizePolicy_transpose_(self)
    end
    def transposed() : SizePolicy
      SizePolicy.new(unwrap: Binding.bg_QSizePolicy_transposed_(self))
    end
  end
  class Url 
    enum ComponentFormattingOption : UInt32
      PrettyDecoded = 0
      EncodeSpaces = 1048576
      EncodeUnicode = 2097152
      EncodeDelimiters = 12582912
      EncodeReserved = 16777216
      DecodeReserved = 33554432
      FullyEncoded = 32505856
      FullyDecoded = 133169152
    end
    @[Flags]
    enum ComponentFormattingOptions : UInt32
      PrettyDecoded = 0
      EncodeSpaces = 1048576
      EncodeUnicode = 2097152
      EncodeDelimiters = 12582912
      EncodeReserved = 16777216
      DecodeReserved = 33554432
      FullyEncoded = 32505856
      FullyDecoded = 133169152
    end
    enum ParsingMode : UInt32
      TolerantMode = 0
      StrictMode = 1
      DecodedMode = 2
    end
    enum UrlFormattingOption : UInt32
      None = 0
      RemoveScheme = 1
      RemovePassword = 2
      RemoveUserInfo = 6
      RemovePort = 8
      RemoveAuthority = 30
      RemovePath = 32
      RemoveQuery = 64
      RemoveFragment = 128
      PreferLocalFile = 512
      StripTrailingSlash = 1024
      RemoveFilename = 2048
      NormalizePathSegments = 4096
    end
    enum UserInputResolutionOption : UInt32
      DefaultResolution = 0
      AssumeLocalFile = 1
    end
    @[Flags]
    enum UserInputResolutionOptions : UInt32
      DefaultResolution = 0
      AssumeLocalFile = 1
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QUrl_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(url : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode)
      unwrap = Binding.bg_QUrl_CONSTRUCT_const_QString_R_QUrl__ParsingMode(Qt::Converter::QString.wrap(url), mode)
    @unwrap = unwrap
    
    end
    def swap(other : Url) : Void
      Binding.bg_QUrl_swap_QUrl_R(self, other)
    end
    def set_url(url : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setUrl_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(url), mode)
    end
    def url() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_url_(self))
    end
    def url(options : Url::FormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_url_QUrl__FormattingOptions(self, options))
    end
    def to_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toString_(self))
    end
    def to_string(options : Url::FormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toString_QUrl__FormattingOptions(self, options))
    end
    def to_display_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toDisplayString_(self))
    end
    def to_display_string(options : Url::FormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toDisplayString_QUrl__FormattingOptions(self, options))
    end
    def adjusted(options : Url::FormattingOptions) : Url
      Url.new(unwrap: Binding.bg_QUrl_adjusted_QUrl__FormattingOptions(self, options))
    end
    def to_encoded() : QByteArray*
      Binding.bg_QUrl_toEncoded_(self)
    end
    def to_encoded(options : Url::FormattingOptions) : QByteArray*
      Binding.bg_QUrl_toEncoded_QUrl__FormattingOptions(self, options)
    end
    def self.from_encoded(url : QByteArray*, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromEncoded_STATIC_const_QByteArray_R_QUrl__ParsingMode(url, mode))
    end
    def self.from_user_input(user_input : String) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromUserInput_STATIC_const_QString_R(Qt::Converter::QString.wrap(user_input)))
    end
    def self.from_user_input(user_input : String, working_directory : String) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(user_input), Qt::Converter::QString.wrap(working_directory)))
    end
    def self.from_user_input(user_input : String, working_directory : String, options : Url::UserInputResolutionOptions) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R_QUrl__UserInputResolutionOptions(Qt::Converter::QString.wrap(user_input), Qt::Converter::QString.wrap(working_directory), options))
    end
    def valid?() : Bool
      Binding.bg_QUrl_isValid_(self)
    end
    def error_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_errorString_(self))
    end
    def empty?() : Bool
      Binding.bg_QUrl_isEmpty_(self)
    end
    def clear() : Void
      Binding.bg_QUrl_clear_(self)
    end
    def scheme=(scheme : String) : Void
      Binding.bg_QUrl_setScheme_const_QString_R(self, Qt::Converter::QString.wrap(scheme))
    end
    def scheme() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_scheme_(self))
    end
    def set_authority(authority : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setAuthority_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(authority), mode)
    end
    def authority() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_authority_(self))
    end
    def authority(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_authority_QUrl__ComponentFormattingOptions(self, options))
    end
    def set_user_info(user_info : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setUserInfo_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(user_info), mode)
    end
    def user_info() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userInfo_(self))
    end
    def user_info(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userInfo_QUrl__ComponentFormattingOptions(self, options))
    end
    def set_user_name(user_name : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setUserName_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(user_name), mode)
    end
    def user_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userName_(self))
    end
    def user_name(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userName_QUrl__ComponentFormattingOptions(self, options))
    end
    def set_password(password : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setPassword_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(password), mode)
    end
    def password() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_password_(self))
    end
    def password(unnamed_arg_0 : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_password_QUrl__ComponentFormattingOptions(self, unnamed_arg_0))
    end
    def set_host(host : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setHost_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(host), mode)
    end
    def host() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_host_(self))
    end
    def host(unnamed_arg_0 : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_host_QUrl__ComponentFormattingOptions(self, unnamed_arg_0))
    end
    def top_level_domain() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_topLevelDomain_(self))
    end
    def top_level_domain(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_topLevelDomain_QUrl__ComponentFormattingOptions(self, options))
    end
    def port=(port : Int32) : Void
      Binding.bg_QUrl_setPort_int(self, port)
    end
    def port(default_port : Int32 = -1) : Int32
      Binding.bg_QUrl_port_int(self, default_port)
    end
    def set_path(path : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setPath_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(path), mode)
    end
    def path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_path_(self))
    end
    def path(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_path_QUrl__ComponentFormattingOptions(self, options))
    end
    def file_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fileName_(self))
    end
    def file_name(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fileName_QUrl__ComponentFormattingOptions(self, options))
    end
    def has_query?() : Bool
      Binding.bg_QUrl_hasQuery_(self)
    end
    def set_query(query : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setQuery_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(query), mode)
    end
    def query=(query : QUrlQuery*) : Void
      Binding.bg_QUrl_setQuery_const_QUrlQuery_R(self, query)
    end
    def query() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_query_(self))
    end
    def query(unnamed_arg_0 : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_query_QUrl__ComponentFormattingOptions(self, unnamed_arg_0))
    end
    def has_fragment?() : Bool
      Binding.bg_QUrl_hasFragment_(self)
    end
    def fragment() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fragment_(self))
    end
    def fragment(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fragment_QUrl__ComponentFormattingOptions(self, options))
    end
    def set_fragment(fragment : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setFragment_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(fragment), mode)
    end
    def resolved(relative : Url) : Url
      Url.new(unwrap: Binding.bg_QUrl_resolved_const_QUrl_R(self, relative))
    end
    def relative?() : Bool
      Binding.bg_QUrl_isRelative_(self)
    end
    def is_parent_of(url : Url) : Bool
      Binding.bg_QUrl_isParentOf_const_QUrl_R(self, url)
    end
    def local_file?() : Bool
      Binding.bg_QUrl_isLocalFile_(self)
    end
    def self.from_local_file(localfile : String) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromLocalFile_STATIC_const_QString_R(Qt::Converter::QString.wrap(localfile)))
    end
    def to_local_file() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toLocalFile_(self))
    end
    def detach() : Void
      Binding.bg_QUrl_detach_(self)
    end
    def detached?() : Bool
      Binding.bg_QUrl_isDetached_(self)
    end
    def matches(url : Url, options : Url::FormattingOptions) : Bool
      Binding.bg_QUrl_matches_const_QUrl_R_QUrl__FormattingOptions(self, url, options)
    end
    def self.from_percent_encoding(unnamed_arg_0 : QByteArray*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fromPercentEncoding_STATIC_const_QByteArray_R(unnamed_arg_0))
    end
    def self.to_percent_encoding(unnamed_arg_0 : String) : QByteArray*
      Binding.bg_QUrl_toPercentEncoding_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.to_percent_encoding(unnamed_arg_0 : String, exclude : QByteArray*) : QByteArray*
      Binding.bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R(Qt::Converter::QString.wrap(unnamed_arg_0), exclude)
    end
    def self.to_percent_encoding(unnamed_arg_0 : String, exclude : QByteArray*, include_ : QByteArray*) : QByteArray*
      Binding.bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R_const_QByteArray_R(Qt::Converter::QString.wrap(unnamed_arg_0), exclude, include_)
    end
    def self.from_ace(unnamed_arg_0 : QByteArray*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fromAce_STATIC_const_QByteArray_R(unnamed_arg_0))
    end
    def self.to_ace(unnamed_arg_0 : String) : QByteArray*
      Binding.bg_QUrl_toAce_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.idn_whitelist() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QUrl_idnWhitelist_STATIC_())
    end
    def self.to_string_list(uris : Enumerable(Url)) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QUrl_toStringList_STATIC_const_QList_QUrl__R(BindgenHelper.wrap_container(QList_QUrl, uris).to_unsafe))
    end
    def self.to_string_list(uris : Enumerable(Url), options : Url::FormattingOptions) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QUrl_toStringList_STATIC_const_QList_QUrl__R_QUrl__FormattingOptions(BindgenHelper.wrap_container(QList_QUrl, uris).to_unsafe, options))
    end
    def self.from_string_list(uris : Enumerable(String), mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Enumerable(Url)
      QList_QUrl.new(unwrap: Binding.bg_QUrl_fromStringList_STATIC_const_QStringList_R_QUrl__ParsingMode(BindgenHelper.wrap_container(QList_QString, uris).to_unsafe, mode))
    end
    def self.idn_whitelist=(unnamed_arg_0 : Enumerable(String)) : Void
      Binding.bg_QUrl_setIdnWhitelist_STATIC_const_QStringList_R(BindgenHelper.wrap_container(QList_QString, unnamed_arg_0).to_unsafe)
    end
  end
  class Screen < Object
    def initialize(@unwrap : Void*)
    end
    def meta_object() : QMetaObject*
      Binding.bg_QScreen_metaObject_(self)
    end
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QScreen_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
      Binding.bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    def self.tr(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def self.tr_utf8(s : UInt8*, c : UInt8*? = nil, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_trUtf8_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    def handle() : QPlatformScreen*
      Binding.bg_QScreen_handle_(self)
    end
    def name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_name_(self))
    end
    def manufacturer() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_manufacturer_(self))
    end
    def model() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_model_(self))
    end
    def serial_number() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_serialNumber_(self))
    end
    def depth() : Int32
      Binding.bg_QScreen_depth_(self)
    end
    def size() : QSize*
      Binding.bg_QScreen_size_(self)
    end
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_geometry_(self))
    end
    def physical_size() : QSizeF*
      Binding.bg_QScreen_physicalSize_(self)
    end
    def physical_dots_per_inch_x() : Float64
      Binding.bg_QScreen_physicalDotsPerInchX_(self)
    end
    def physical_dots_per_inch_y() : Float64
      Binding.bg_QScreen_physicalDotsPerInchY_(self)
    end
    def physical_dots_per_inch() : Float64
      Binding.bg_QScreen_physicalDotsPerInch_(self)
    end
    def logical_dots_per_inch_x() : Float64
      Binding.bg_QScreen_logicalDotsPerInchX_(self)
    end
    def logical_dots_per_inch_y() : Float64
      Binding.bg_QScreen_logicalDotsPerInchY_(self)
    end
    def logical_dots_per_inch() : Float64
      Binding.bg_QScreen_logicalDotsPerInch_(self)
    end
    def device_pixel_ratio() : Float64
      Binding.bg_QScreen_devicePixelRatio_(self)
    end
    def available_size() : QSize*
      Binding.bg_QScreen_availableSize_(self)
    end
    def available_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_availableGeometry_(self))
    end
    def virtual_siblings() : Enumerable(Screen)
      QList_QScreen_X.new(unwrap: Binding.bg_QScreen_virtualSiblings_(self))
    end
    def virtual_size() : QSize*
      Binding.bg_QScreen_virtualSize_(self)
    end
    def virtual_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_virtualGeometry_(self))
    end
    def available_virtual_size() : QSize*
      Binding.bg_QScreen_availableVirtualSize_(self)
    end
    def available_virtual_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_availableVirtualGeometry_(self))
    end
    def primary_orientation() : ScreenOrientation
      Binding.bg_QScreen_primaryOrientation_(self)
    end
    def orientation() : ScreenOrientation
      Binding.bg_QScreen_orientation_(self)
    end
    def native_orientation() : ScreenOrientation
      Binding.bg_QScreen_nativeOrientation_(self)
    end
    def orientation_update_mask() : ScreenOrientations
      Binding.bg_QScreen_orientationUpdateMask_(self)
    end
    def orientation_update_mask=(mask : ScreenOrientations) : Void
      Binding.bg_QScreen_setOrientationUpdateMask_Qt__ScreenOrientations(self, mask)
    end
    def angle_between(a : ScreenOrientation, b : ScreenOrientation) : Int32
      Binding.bg_QScreen_angleBetween_Qt__ScreenOrientation_Qt__ScreenOrientation(self, a, b)
    end
    def transform_between(a : ScreenOrientation, b : ScreenOrientation, target : Rect) : QTransform*
      Binding.bg_QScreen_transformBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(self, a, b, target)
    end
    def map_between(a : ScreenOrientation, b : ScreenOrientation, rect : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QScreen_mapBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(self, a, b, rect))
    end
    def is_portrait(orientation : ScreenOrientation) : Bool
      Binding.bg_QScreen_isPortrait_Qt__ScreenOrientation(self, orientation)
    end
    def is_landscape(orientation : ScreenOrientation) : Bool
      Binding.bg_QScreen_isLandscape_Qt__ScreenOrientation(self, orientation)
    end
    def refresh_rate() : Float64
      Binding.bg_QScreen_refreshRate_(self)
    end
    def geometry_changed(geometry : Rect) : Void
      Binding.bg_QScreen_geometryChanged_const_QRect_R(self, geometry)
    end
    def on_geometry_changed(&block : Proc(Rect, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_geometryChanged_CONNECT_CrystalProc_void__const_QRectR_(self, BindgenHelper.wrap_proc(->(geometry : Binding::QRect*){ block.call(Rect.new(unwrap: geometry)) })))
    end
    def available_geometry_changed(geometry : Rect) : Void
      Binding.bg_QScreen_availableGeometryChanged_const_QRect_R(self, geometry)
    end
    def on_available_geometry_changed(&block : Proc(Rect, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_availableGeometryChanged_CONNECT_CrystalProc_void__const_QRectR_(self, BindgenHelper.wrap_proc(->(geometry : Binding::QRect*){ block.call(Rect.new(unwrap: geometry)) })))
    end
    def physical_size_changed(size : QSizeF*) : Void
      Binding.bg_QScreen_physicalSizeChanged_const_QSizeF_R(self, size)
    end
    def on_physical_size_changed(&block : Proc(QSizeF*, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_physicalSizeChanged_CONNECT_CrystalProc_void__const_QSizeFR_(self, BindgenHelper.wrap_proc(->(size : QSizeF*){ block.call(size) })))
    end
    def physical_dots_per_inch_changed(dpi : Float64) : Void
      Binding.bg_QScreen_physicalDotsPerInchChanged_qreal(self, dpi)
    end
    def on_physical_dots_per_inch_changed(&block : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_physicalDotsPerInchChanged_CONNECT_CrystalProc_void__qreal_(self, BindgenHelper.wrap_proc(->(dpi : Float64){ block.call(dpi) })))
    end
    def logical_dots_per_inch_changed(dpi : Float64) : Void
      Binding.bg_QScreen_logicalDotsPerInchChanged_qreal(self, dpi)
    end
    def on_logical_dots_per_inch_changed(&block : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_logicalDotsPerInchChanged_CONNECT_CrystalProc_void__qreal_(self, BindgenHelper.wrap_proc(->(dpi : Float64){ block.call(dpi) })))
    end
    def virtual_geometry_changed(rect : Rect) : Void
      Binding.bg_QScreen_virtualGeometryChanged_const_QRect_R(self, rect)
    end
    def on_virtual_geometry_changed(&block : Proc(Rect, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_virtualGeometryChanged_CONNECT_CrystalProc_void__const_QRectR_(self, BindgenHelper.wrap_proc(->(rect : Binding::QRect*){ block.call(Rect.new(unwrap: rect)) })))
    end
    def primary_orientation_changed(orientation : ScreenOrientation) : Void
      Binding.bg_QScreen_primaryOrientationChanged_Qt__ScreenOrientation(self, orientation)
    end
    def on_primary_orientation_changed(&block : Proc(ScreenOrientation, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_primaryOrientationChanged_CONNECT_CrystalProc_void__Qt__ScreenOrientation_(self, BindgenHelper.wrap_proc(->(orientation : ScreenOrientation){ block.call(orientation) })))
    end
    def orientation_changed(orientation : ScreenOrientation) : Void
      Binding.bg_QScreen_orientationChanged_Qt__ScreenOrientation(self, orientation)
    end
    def on_orientation_changed(&block : Proc(ScreenOrientation, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_orientationChanged_CONNECT_CrystalProc_void__Qt__ScreenOrientation_(self, BindgenHelper.wrap_proc(->(orientation : ScreenOrientation){ block.call(orientation) })))
    end
    def refresh_rate_changed(refresh_rate : Float64) : Void
      Binding.bg_QScreen_refreshRateChanged_qreal(self, refresh_rate)
    end
    def on_refresh_rate_changed(&block : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_refreshRateChanged_CONNECT_CrystalProc_void__qreal_(self, BindgenHelper.wrap_proc(->(refresh_rate : Float64){ block.call(refresh_rate) })))
    end
  end
  class PixelFormat 
    enum ByteOrder : UInt32
      LittleEndian = 0
      BigEndian = 1
      CurrentSystemEndian = 2
    end
    enum ColorModel : UInt32
      RGB = 0
      BGR = 1
      Indexed = 2
      Grayscale = 3
      CMYK = 4
      HSL = 5
      HSV = 6
      YUV = 7
      Alpha = 8
    end
    enum AlphaUsage : UInt32
      UsesAlpha = 0
      IgnoresAlpha = 1
    end
    enum AlphaPosition : UInt32
      AtBeginning = 0
      AtEnd = 1
    end
    enum AlphaPremultiplied : UInt32
      NotPremultiplied = 0
      Premultiplied = 1
    end
    enum TypeInterpretation : UInt32
      UnsignedInteger = 0
      UnsignedShort = 1
      UnsignedByte = 2
      FloatingPoint = 3
    end
    enum YUVLayout : UInt32
      YUV444 = 0
      YUV422 = 1
      YUV411 = 2
      YUV420P = 3
      YUV420SP = 4
      YV12 = 5
      UYVY = 6
      YUYV = 7
      NV12 = 8
      NV21 = 9
      IMC1 = 10
      IMC2 = 11
      IMC3 = 12
      IMC4 = 13
      Y8 = 14
      Y16 = 15
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QPixelFormat_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(color_model : PixelFormat::ColorModel, first_size : UInt8, second_size : UInt8, third_size : UInt8, fourth_size : UInt8, fifth_size : UInt8, alpha_size : UInt8, alpha_usage : PixelFormat::AlphaUsage, alpha_position : PixelFormat::AlphaPosition, premultiplied : PixelFormat::AlphaPremultiplied, type_interpretation : PixelFormat::TypeInterpretation, byte_order : PixelFormat::ByteOrder = PixelFormat::ByteOrder::CurrentSystemEndian, sub_enum : UInt8 = 0u8)
      unwrap = Binding.bg_QPixelFormat_CONSTRUCT_QPixelFormat__ColorModel_uchar_uchar_uchar_uchar_uchar_uchar_QPixelFormat__AlphaUsage_QPixelFormat__AlphaPosition_QPixelFormat__AlphaPremultiplied_QPixelFormat__TypeInterpretation_QPixelFormat__ByteOrder_uchar(color_model, first_size, second_size, third_size, fourth_size, fifth_size, alpha_size, alpha_usage, alpha_position, premultiplied, type_interpretation, byte_order, sub_enum)
    @unwrap = unwrap
    
    end
    def color_model() : PixelFormat::ColorModel
      Binding.bg_QPixelFormat_colorModel_(self)
    end
    def channel_count() : UInt8
      Binding.bg_QPixelFormat_channelCount_(self)
    end
    def red_size() : UInt8
      Binding.bg_QPixelFormat_redSize_(self)
    end
    def green_size() : UInt8
      Binding.bg_QPixelFormat_greenSize_(self)
    end
    def blue_size() : UInt8
      Binding.bg_QPixelFormat_blueSize_(self)
    end
    def cyan_size() : UInt8
      Binding.bg_QPixelFormat_cyanSize_(self)
    end
    def magenta_size() : UInt8
      Binding.bg_QPixelFormat_magentaSize_(self)
    end
    def yellow_size() : UInt8
      Binding.bg_QPixelFormat_yellowSize_(self)
    end
    def black_size() : UInt8
      Binding.bg_QPixelFormat_blackSize_(self)
    end
    def hue_size() : UInt8
      Binding.bg_QPixelFormat_hueSize_(self)
    end
    def saturation_size() : UInt8
      Binding.bg_QPixelFormat_saturationSize_(self)
    end
    def lightness_size() : UInt8
      Binding.bg_QPixelFormat_lightnessSize_(self)
    end
    def brightness_size() : UInt8
      Binding.bg_QPixelFormat_brightnessSize_(self)
    end
    def alpha_size() : UInt8
      Binding.bg_QPixelFormat_alphaSize_(self)
    end
    def bits_per_pixel() : UInt8
      Binding.bg_QPixelFormat_bitsPerPixel_(self)
    end
    def alpha_usage() : PixelFormat::AlphaUsage
      Binding.bg_QPixelFormat_alphaUsage_(self)
    end
    def alpha_position() : PixelFormat::AlphaPosition
      Binding.bg_QPixelFormat_alphaPosition_(self)
    end
    def premultiplied() : PixelFormat::AlphaPremultiplied
      Binding.bg_QPixelFormat_premultiplied_(self)
    end
    def type_interpretation() : PixelFormat::TypeInterpretation
      Binding.bg_QPixelFormat_typeInterpretation_(self)
    end
    def byte_order() : PixelFormat::ByteOrder
      Binding.bg_QPixelFormat_byteOrder_(self)
    end
    def yuv_layout() : PixelFormat::YUVLayout
      Binding.bg_QPixelFormat_yuvLayout_(self)
    end
    def sub_enum() : UInt8
      Binding.bg_QPixelFormat_subEnum_(self)
    end
  end
  class TextFormat 
    enum FormatType : Int32
      InvalidFormat = -1
      BlockFormat = 1
      CharFormat = 2
      ListFormat = 3
      TableFormat = 4
      FrameFormat = 5
      UserFormat = 100
    end
    enum ObjectTypes : UInt32
      NoObject = 0
      ImageObject = 1
      TableObject = 2
      TableCellObject = 3
      UserObject = 4096
    end
    enum PageBreakFlag : UInt32
      PageBreakAuto = 0
      PageBreakAlwaysBefore = 1
      PageBreakAlwaysAfter = 16
    end
    @[Flags]
    enum PageBreakFlags : UInt32
      PageBreakAuto = 0
      PageBreakAlwaysBefore = 1
      PageBreakAlwaysAfter = 16
    end
    enum Property : UInt32
      ObjectIndex = 0
      CssFloat = 2048
      LayoutDirection = 2049
      OutlinePen = 2064
      BackgroundBrush = 2080
      ForegroundBrush = 2081
      BackgroundImageUrl = 2083
      BlockAlignment = 4112
      BlockTopMargin = 4144
      BlockBottomMargin = 4145
      BlockLeftMargin = 4146
      BlockRightMargin = 4147
      TextIndent = 4148
      TabPositions = 4149
      BlockIndent = 4160
      LineHeight = 4168
      LineHeightType = 4169
      BlockNonBreakableLines = 4176
      BlockTrailingHorizontalRulerWidth = 4192
      FirstFontProperty = 8160
      FontCapitalization = 8160
      FontLetterSpacingType = 8243
      FontLetterSpacing = 8161
      FontWordSpacing = 8162
      FontStretch = 8244
      FontStyleHint = 8163
      FontStyleStrategy = 8164
      FontKerning = 8165
      FontHintingPreference = 8166
      FontFamily = 8192
      FontPointSize = 8193
      FontSizeAdjustment = 8194
      FontSizeIncrement = 8194
      FontWeight = 8195
      FontItalic = 8196
      FontUnderline = 8197
      FontOverline = 8198
      FontStrikeOut = 8199
      FontFixedPitch = 8200
      FontPixelSize = 8201
      LastFontProperty = 8201
      TextUnderlineColor = 8208
      TextVerticalAlignment = 8225
      TextOutline = 8226
      TextUnderlineStyle = 8227
      TextToolTip = 8228
      IsAnchor = 8240
      AnchorHref = 8241
      AnchorName = 8242
      ObjectType = 12032
      ListStyle = 12288
      ListIndent = 12289
      ListNumberPrefix = 12290
      ListNumberSuffix = 12291
      FrameBorder = 16384
      FrameMargin = 16385
      FramePadding = 16386
      FrameWidth = 16387
      FrameHeight = 16388
      FrameTopMargin = 16389
      FrameBottomMargin = 16390
      FrameLeftMargin = 16391
      FrameRightMargin = 16392
      FrameBorderBrush = 16393
      FrameBorderStyle = 16400
      TableColumns = 16640
      TableColumnWidthConstraints = 16641
      TableCellSpacing = 16642
      TableCellPadding = 16643
      TableHeaderRowCount = 16644
      TableCellRowSpan = 18448
      TableCellColumnSpan = 18449
      TableCellTopPadding = 18450
      TableCellBottomPadding = 18451
      TableCellLeftPadding = 18452
      TableCellRightPadding = 18453
      ImageName = 20480
      ImageWidth = 20496
      ImageHeight = 20497
      FullWidthSelection = 24576
      PageBreakPolicy = 28672
      UserProperty = 1048576
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextFormat_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(type : Int32)
      unwrap = Binding.bg_QTextFormat_CONSTRUCT_int(type)
    @unwrap = unwrap
    
    end
    def swap(other : TextFormat) : Void
      Binding.bg_QTextFormat_swap_QTextFormat_R(self, other)
    end
    def merge(other : TextFormat) : Void
      Binding.bg_QTextFormat_merge_const_QTextFormat_R(self, other)
    end
    def valid?() : Bool
      Binding.bg_QTextFormat_isValid_(self)
    end
    def empty?() : Bool
      Binding.bg_QTextFormat_isEmpty_(self)
    end
    def type() : Int32
      Binding.bg_QTextFormat_type_(self)
    end
    def object_index() : Int32
      Binding.bg_QTextFormat_objectIndex_(self)
    end
    def object_index=(object : Int32) : Void
      Binding.bg_QTextFormat_setObjectIndex_int(self, object)
    end
    def clear_property(property_id : Int32) : Void
      Binding.bg_QTextFormat_clearProperty_int(self, property_id)
    end
    def has_property(property_id : Int32) : Bool
      Binding.bg_QTextFormat_hasProperty_int(self, property_id)
    end
    def bool_property(property_id : Int32) : Bool
      Binding.bg_QTextFormat_boolProperty_int(self, property_id)
    end
    def int_property(property_id : Int32) : Int32
      Binding.bg_QTextFormat_intProperty_int(self, property_id)
    end
    def double_property(property_id : Int32) : Float64
      Binding.bg_QTextFormat_doubleProperty_int(self, property_id)
    end
    def string_property(property_id : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextFormat_stringProperty_int(self, property_id))
    end
    def color_property(property_id : Int32) : Color
      Color.new(unwrap: Binding.bg_QTextFormat_colorProperty_int(self, property_id))
    end
    def pen_property(property_id : Int32) : QPen*
      Binding.bg_QTextFormat_penProperty_int(self, property_id)
    end
    def brush_property(property_id : Int32) : Brush
      Brush.new(unwrap: Binding.bg_QTextFormat_brushProperty_int(self, property_id))
    end
    def length_property(property_id : Int32) : TextLength
      TextLength.new(unwrap: Binding.bg_QTextFormat_lengthProperty_int(self, property_id))
    end
    def length_vector_property(property_id : Int32) : Enumerable(TextLength)
      QVector_QTextLength.new(unwrap: Binding.bg_QTextFormat_lengthVectorProperty_int(self, property_id))
    end
    def set_property(property_id : Int32, lengths : Enumerable(TextLength)) : Void
      Binding.bg_QTextFormat_setProperty_int_const_QVector_QTextLength__R(self, property_id, BindgenHelper.wrap_container(QVector_QTextLength, lengths).to_unsafe)
    end
    def property_count() : Int32
      Binding.bg_QTextFormat_propertyCount_(self)
    end
    def object_type=(type : Int32) : Void
      Binding.bg_QTextFormat_setObjectType_int(self, type)
    end
    def object_type() : Int32
      Binding.bg_QTextFormat_objectType_(self)
    end
    def char_format?() : Bool
      Binding.bg_QTextFormat_isCharFormat_(self)
    end
    def block_format?() : Bool
      Binding.bg_QTextFormat_isBlockFormat_(self)
    end
    def list_format?() : Bool
      Binding.bg_QTextFormat_isListFormat_(self)
    end
    def frame_format?() : Bool
      Binding.bg_QTextFormat_isFrameFormat_(self)
    end
    def image_format?() : Bool
      Binding.bg_QTextFormat_isImageFormat_(self)
    end
    def table_format?() : Bool
      Binding.bg_QTextFormat_isTableFormat_(self)
    end
    def table_cell_format?() : Bool
      Binding.bg_QTextFormat_isTableCellFormat_(self)
    end
    def to_block_format() : TextBlockFormat
      TextBlockFormat.new(unwrap: Binding.bg_QTextFormat_toBlockFormat_(self))
    end
    def to_char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextFormat_toCharFormat_(self))
    end
    def to_list_format() : TextListFormat
      TextListFormat.new(unwrap: Binding.bg_QTextFormat_toListFormat_(self))
    end
    def to_table_format() : QTextTableFormat*
      Binding.bg_QTextFormat_toTableFormat_(self)
    end
    def to_frame_format() : TextFrameFormat
      TextFrameFormat.new(unwrap: Binding.bg_QTextFormat_toFrameFormat_(self))
    end
    def to_image_format() : QTextImageFormat*
      Binding.bg_QTextFormat_toImageFormat_(self)
    end
    def to_table_cell_format() : QTextTableCellFormat*
      Binding.bg_QTextFormat_toTableCellFormat_(self)
    end
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QTextFormat_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    def layout_direction() : LayoutDirection
      Binding.bg_QTextFormat_layoutDirection_(self)
    end
    def background=(brush : Brush) : Void
      Binding.bg_QTextFormat_setBackground_const_QBrush_R(self, brush)
    end
    def background() : Brush
      Brush.new(unwrap: Binding.bg_QTextFormat_background_(self))
    end
    def clear_background() : Void
      Binding.bg_QTextFormat_clearBackground_(self)
    end
    def foreground=(brush : Brush) : Void
      Binding.bg_QTextFormat_setForeground_const_QBrush_R(self, brush)
    end
    def foreground() : Brush
      Brush.new(unwrap: Binding.bg_QTextFormat_foreground_(self))
    end
    def clear_foreground() : Void
      Binding.bg_QTextFormat_clearForeground_(self)
    end
  end
  class TextBlockFormat < TextFormat
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextBlockFormat_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def valid?() : Bool
      Binding.bg_QTextBlockFormat_isValid_(self)
    end
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QTextBlockFormat_setAlignment_Qt__Alignment(self, alignment)
    end
    def alignment() : Alignment
      Binding.bg_QTextBlockFormat_alignment_(self)
    end
    def top_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setTopMargin_qreal(self, margin)
    end
    def top_margin() : Float64
      Binding.bg_QTextBlockFormat_topMargin_(self)
    end
    def bottom_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setBottomMargin_qreal(self, margin)
    end
    def bottom_margin() : Float64
      Binding.bg_QTextBlockFormat_bottomMargin_(self)
    end
    def left_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setLeftMargin_qreal(self, margin)
    end
    def left_margin() : Float64
      Binding.bg_QTextBlockFormat_leftMargin_(self)
    end
    def right_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setRightMargin_qreal(self, margin)
    end
    def right_margin() : Float64
      Binding.bg_QTextBlockFormat_rightMargin_(self)
    end
    def text_indent=(aindent : Float64) : Void
      Binding.bg_QTextBlockFormat_setTextIndent_qreal(self, aindent)
    end
    def text_indent() : Float64
      Binding.bg_QTextBlockFormat_textIndent_(self)
    end
    def indent=(indent : Int32) : Void
      Binding.bg_QTextBlockFormat_setIndent_int(self, indent)
    end
    def indent() : Int32
      Binding.bg_QTextBlockFormat_indent_(self)
    end
    def set_line_height(height : Float64, height_type : Int32) : Void
      Binding.bg_QTextBlockFormat_setLineHeight_qreal_int(self, height, height_type)
    end
    def line_height(script_line_height : Float64, scaling : Float64) : Float64
      Binding.bg_QTextBlockFormat_lineHeight_qreal_qreal(self, script_line_height, scaling)
    end
    def line_height() : Float64
      Binding.bg_QTextBlockFormat_lineHeight_(self)
    end
    def line_height_type() : Int32
      Binding.bg_QTextBlockFormat_lineHeightType_(self)
    end
    def non_breakable_lines=(b : Bool) : Void
      Binding.bg_QTextBlockFormat_setNonBreakableLines_bool(self, b)
    end
    def non_breakable_lines() : Bool
      Binding.bg_QTextBlockFormat_nonBreakableLines_(self)
    end
    def page_break_policy=(flags : TextFormat::PageBreakFlags) : Void
      Binding.bg_QTextBlockFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(self, flags)
    end
    def page_break_policy() : TextFormat::PageBreakFlags
      Binding.bg_QTextBlockFormat_pageBreakPolicy_(self)
    end
    protected def initialize(fmt : TextFormat)
      unwrap = Binding.bg_QTextBlockFormat_CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = unwrap
    
    end
  end
  class TextCharFormat < TextFormat
    enum FontPropertiesInheritanceBehavior : UInt32
      FontPropertiesSpecifiedOnly = 0
      FontPropertiesAll = 1
    end
    enum UnderlineStyle : UInt32
      NoUnderline = 0
      SingleUnderline = 1
      DashUnderline = 2
      DotLine = 3
      DashDotLine = 4
      DashDotDotLine = 5
      WaveUnderline = 6
      SpellCheckUnderline = 7
    end
    enum VerticalAlignment : UInt32
      AlignNormal = 0
      AlignSuperScript = 1
      AlignSubScript = 2
      AlignMiddle = 3
      AlignTop = 4
      AlignBottom = 5
      AlignBaseline = 6
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextCharFormat_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def valid?() : Bool
      Binding.bg_QTextCharFormat_isValid_(self)
    end
    def set_font(font : Font, behavior : TextCharFormat::FontPropertiesInheritanceBehavior) : Void
      Binding.bg_QTextCharFormat_setFont_const_QFont_R_QTextCharFormat__FontPropertiesInheritanceBehavior(self, font, behavior)
    end
    def font=(font : Font) : Void
      Binding.bg_QTextCharFormat_setFont_const_QFont_R(self, font)
    end
    def font() : Font
      Font.new(unwrap: Binding.bg_QTextCharFormat_font_(self))
    end
    def font_family=(family : String) : Void
      Binding.bg_QTextCharFormat_setFontFamily_const_QString_R(self, Qt::Converter::QString.wrap(family))
    end
    def font_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCharFormat_fontFamily_(self))
    end
    def font_point_size=(size : Float64) : Void
      Binding.bg_QTextCharFormat_setFontPointSize_qreal(self, size)
    end
    def font_point_size() : Float64
      Binding.bg_QTextCharFormat_fontPointSize_(self)
    end
    def font_weight=(weight : Int32) : Void
      Binding.bg_QTextCharFormat_setFontWeight_int(self, weight)
    end
    def font_weight() : Int32
      Binding.bg_QTextCharFormat_fontWeight_(self)
    end
    def font_italic=(italic : Bool) : Void
      Binding.bg_QTextCharFormat_setFontItalic_bool(self, italic)
    end
    def font_italic() : Bool
      Binding.bg_QTextCharFormat_fontItalic_(self)
    end
    def font_capitalization=(capitalization : Font::Capitalization) : Void
      Binding.bg_QTextCharFormat_setFontCapitalization_QFont__Capitalization(self, capitalization)
    end
    def font_capitalization() : Font::Capitalization
      Binding.bg_QTextCharFormat_fontCapitalization_(self)
    end
    def font_letter_spacing_type=(letter_spacing_type : Font::SpacingType) : Void
      Binding.bg_QTextCharFormat_setFontLetterSpacingType_QFont__SpacingType(self, letter_spacing_type)
    end
    def font_letter_spacing_type() : Font::SpacingType
      Binding.bg_QTextCharFormat_fontLetterSpacingType_(self)
    end
    def font_letter_spacing=(spacing : Float64) : Void
      Binding.bg_QTextCharFormat_setFontLetterSpacing_qreal(self, spacing)
    end
    def font_letter_spacing() : Float64
      Binding.bg_QTextCharFormat_fontLetterSpacing_(self)
    end
    def font_word_spacing=(spacing : Float64) : Void
      Binding.bg_QTextCharFormat_setFontWordSpacing_qreal(self, spacing)
    end
    def font_word_spacing() : Float64
      Binding.bg_QTextCharFormat_fontWordSpacing_(self)
    end
    def font_underline=(underline : Bool) : Void
      Binding.bg_QTextCharFormat_setFontUnderline_bool(self, underline)
    end
    def font_underline() : Bool
      Binding.bg_QTextCharFormat_fontUnderline_(self)
    end
    def font_overline=(overline : Bool) : Void
      Binding.bg_QTextCharFormat_setFontOverline_bool(self, overline)
    end
    def font_overline() : Bool
      Binding.bg_QTextCharFormat_fontOverline_(self)
    end
    def font_strike_out=(strike_out : Bool) : Void
      Binding.bg_QTextCharFormat_setFontStrikeOut_bool(self, strike_out)
    end
    def font_strike_out() : Bool
      Binding.bg_QTextCharFormat_fontStrikeOut_(self)
    end
    def underline_color=(color : Color) : Void
      Binding.bg_QTextCharFormat_setUnderlineColor_const_QColor_R(self, color)
    end
    def underline_color() : Color
      Color.new(unwrap: Binding.bg_QTextCharFormat_underlineColor_(self))
    end
    def font_fixed_pitch=(fixed_pitch : Bool) : Void
      Binding.bg_QTextCharFormat_setFontFixedPitch_bool(self, fixed_pitch)
    end
    def font_fixed_pitch() : Bool
      Binding.bg_QTextCharFormat_fontFixedPitch_(self)
    end
    def font_stretch=(factor : Int32) : Void
      Binding.bg_QTextCharFormat_setFontStretch_int(self, factor)
    end
    def font_stretch() : Int32
      Binding.bg_QTextCharFormat_fontStretch_(self)
    end
    def set_font_style_hint(hint : Font::StyleHint, strategy : Font::StyleStrategy = Font::StyleStrategy::PreferDefault) : Void
      Binding.bg_QTextCharFormat_setFontStyleHint_QFont__StyleHint_QFont__StyleStrategy(self, hint, strategy)
    end
    def font_style_strategy=(strategy : Font::StyleStrategy) : Void
      Binding.bg_QTextCharFormat_setFontStyleStrategy_QFont__StyleStrategy(self, strategy)
    end
    def font_style_hint() : Font::StyleHint
      Binding.bg_QTextCharFormat_fontStyleHint_(self)
    end
    def font_style_strategy() : Font::StyleStrategy
      Binding.bg_QTextCharFormat_fontStyleStrategy_(self)
    end
    def font_hinting_preference=(hinting_preference : Font::HintingPreference) : Void
      Binding.bg_QTextCharFormat_setFontHintingPreference_QFont__HintingPreference(self, hinting_preference)
    end
    def font_hinting_preference() : Font::HintingPreference
      Binding.bg_QTextCharFormat_fontHintingPreference_(self)
    end
    def font_kerning=(enable : Bool) : Void
      Binding.bg_QTextCharFormat_setFontKerning_bool(self, enable)
    end
    def font_kerning() : Bool
      Binding.bg_QTextCharFormat_fontKerning_(self)
    end
    def underline_style=(style : TextCharFormat::UnderlineStyle) : Void
      Binding.bg_QTextCharFormat_setUnderlineStyle_QTextCharFormat__UnderlineStyle(self, style)
    end
    def underline_style() : TextCharFormat::UnderlineStyle
      Binding.bg_QTextCharFormat_underlineStyle_(self)
    end
    def vertical_alignment=(alignment : TextCharFormat::VerticalAlignment) : Void
      Binding.bg_QTextCharFormat_setVerticalAlignment_QTextCharFormat__VerticalAlignment(self, alignment)
    end
    def vertical_alignment() : TextCharFormat::VerticalAlignment
      Binding.bg_QTextCharFormat_verticalAlignment_(self)
    end
    def text_outline=(pen : QPen*) : Void
      Binding.bg_QTextCharFormat_setTextOutline_const_QPen_R(self, pen)
    end
    def text_outline() : QPen*
      Binding.bg_QTextCharFormat_textOutline_(self)
    end
    def tool_tip=(tip : String) : Void
      Binding.bg_QTextCharFormat_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tip))
    end
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCharFormat_toolTip_(self))
    end
    def anchor=(anchor : Bool) : Void
      Binding.bg_QTextCharFormat_setAnchor_bool(self, anchor)
    end
    def anchor?() : Bool
      Binding.bg_QTextCharFormat_isAnchor_(self)
    end
    def anchor_href=(value : String) : Void
      Binding.bg_QTextCharFormat_setAnchorHref_const_QString_R(self, Qt::Converter::QString.wrap(value))
    end
    def anchor_href() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCharFormat_anchorHref_(self))
    end
    def anchor_name=(name : String) : Void
      Binding.bg_QTextCharFormat_setAnchorName_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    def anchor_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCharFormat_anchorName_(self))
    end
    def anchor_names=(names : Enumerable(String)) : Void
      Binding.bg_QTextCharFormat_setAnchorNames_const_QStringList_R(self, BindgenHelper.wrap_container(QList_QString, names).to_unsafe)
    end
    def anchor_names() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QTextCharFormat_anchorNames_(self))
    end
    def table_cell_row_span=(table_cell_row_span : Int32) : Void
      Binding.bg_QTextCharFormat_setTableCellRowSpan_int(self, table_cell_row_span)
    end
    def table_cell_row_span() : Int32
      Binding.bg_QTextCharFormat_tableCellRowSpan_(self)
    end
    def table_cell_column_span=(table_cell_column_span : Int32) : Void
      Binding.bg_QTextCharFormat_setTableCellColumnSpan_int(self, table_cell_column_span)
    end
    def table_cell_column_span() : Int32
      Binding.bg_QTextCharFormat_tableCellColumnSpan_(self)
    end
    protected def initialize(fmt : TextFormat)
      unwrap = Binding.bg_QTextCharFormat_CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = unwrap
    
    end
  end
  class TextFrameFormat < TextFormat
    enum Position : UInt32
      InFlow = 0
      FloatLeft = 1
      FloatRight = 2
    end
    enum BorderStyle : UInt32
      BorderStyleNone = 0
      BorderStyleDotted = 1
      BorderStyleDashed = 2
      BorderStyleSolid = 3
      BorderStyleDouble = 4
      BorderStyleDotDash = 5
      BorderStyleDotDotDash = 6
      BorderStyleGroove = 7
      BorderStyleRidge = 8
      BorderStyleInset = 9
      BorderStyleOutset = 10
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextFrameFormat_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def valid?() : Bool
      Binding.bg_QTextFrameFormat_isValid_(self)
    end
    def position=(f : TextFrameFormat::Position) : Void
      Binding.bg_QTextFrameFormat_setPosition_QTextFrameFormat__Position(self, f)
    end
    def position() : TextFrameFormat::Position
      Binding.bg_QTextFrameFormat_position_(self)
    end
    def border=(border : Float64) : Void
      Binding.bg_QTextFrameFormat_setBorder_qreal(self, border)
    end
    def border() : Float64
      Binding.bg_QTextFrameFormat_border_(self)
    end
    def border_brush=(brush : Brush) : Void
      Binding.bg_QTextFrameFormat_setBorderBrush_const_QBrush_R(self, brush)
    end
    def border_brush() : Brush
      Brush.new(unwrap: Binding.bg_QTextFrameFormat_borderBrush_(self))
    end
    def border_style=(style : TextFrameFormat::BorderStyle) : Void
      Binding.bg_QTextFrameFormat_setBorderStyle_QTextFrameFormat__BorderStyle(self, style)
    end
    def border_style() : TextFrameFormat::BorderStyle
      Binding.bg_QTextFrameFormat_borderStyle_(self)
    end
    def margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setMargin_qreal(self, margin)
    end
    def margin() : Float64
      Binding.bg_QTextFrameFormat_margin_(self)
    end
    def top_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setTopMargin_qreal(self, margin)
    end
    def top_margin() : Float64
      Binding.bg_QTextFrameFormat_topMargin_(self)
    end
    def bottom_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setBottomMargin_qreal(self, margin)
    end
    def bottom_margin() : Float64
      Binding.bg_QTextFrameFormat_bottomMargin_(self)
    end
    def left_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setLeftMargin_qreal(self, margin)
    end
    def left_margin() : Float64
      Binding.bg_QTextFrameFormat_leftMargin_(self)
    end
    def right_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setRightMargin_qreal(self, margin)
    end
    def right_margin() : Float64
      Binding.bg_QTextFrameFormat_rightMargin_(self)
    end
    def padding=(padding : Float64) : Void
      Binding.bg_QTextFrameFormat_setPadding_qreal(self, padding)
    end
    def padding() : Float64
      Binding.bg_QTextFrameFormat_padding_(self)
    end
    def width=(width : Float64) : Void
      Binding.bg_QTextFrameFormat_setWidth_qreal(self, width)
    end
    def width=(length : TextLength) : Void
      Binding.bg_QTextFrameFormat_setWidth_const_QTextLength_R(self, length)
    end
    def width() : TextLength
      TextLength.new(unwrap: Binding.bg_QTextFrameFormat_width_(self))
    end
    def height=(height : Float64) : Void
      Binding.bg_QTextFrameFormat_setHeight_qreal(self, height)
    end
    def height=(height : TextLength) : Void
      Binding.bg_QTextFrameFormat_setHeight_const_QTextLength_R(self, height)
    end
    def height() : TextLength
      TextLength.new(unwrap: Binding.bg_QTextFrameFormat_height_(self))
    end
    def page_break_policy=(flags : TextFormat::PageBreakFlags) : Void
      Binding.bg_QTextFrameFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(self, flags)
    end
    def page_break_policy() : TextFormat::PageBreakFlags
      Binding.bg_QTextFrameFormat_pageBreakPolicy_(self)
    end
    protected def initialize(fmt : TextFormat)
      unwrap = Binding.bg_QTextFrameFormat_CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = unwrap
    
    end
  end
  class TextListFormat < TextFormat
    enum Style : Int32
      ListDisc = -1
      ListCircle = -2
      ListSquare = -3
      ListDecimal = -4
      ListLowerAlpha = -5
      ListUpperAlpha = -6
      ListLowerRoman = -7
      ListUpperRoman = -8
      ListStyleUndefined = 0
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextListFormat_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def valid?() : Bool
      Binding.bg_QTextListFormat_isValid_(self)
    end
    def style=(style : TextListFormat::Style) : Void
      Binding.bg_QTextListFormat_setStyle_QTextListFormat__Style(self, style)
    end
    def style() : TextListFormat::Style
      Binding.bg_QTextListFormat_style_(self)
    end
    def indent=(indent : Int32) : Void
      Binding.bg_QTextListFormat_setIndent_int(self, indent)
    end
    def indent() : Int32
      Binding.bg_QTextListFormat_indent_(self)
    end
    def number_prefix=(number_prefix : String) : Void
      Binding.bg_QTextListFormat_setNumberPrefix_const_QString_R(self, Qt::Converter::QString.wrap(number_prefix))
    end
    def number_prefix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextListFormat_numberPrefix_(self))
    end
    def number_suffix=(number_suffix : String) : Void
      Binding.bg_QTextListFormat_setNumberSuffix_const_QString_R(self, Qt::Converter::QString.wrap(number_suffix))
    end
    def number_suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextListFormat_numberSuffix_(self))
    end
    protected def initialize(fmt : TextFormat)
      unwrap = Binding.bg_QTextListFormat_CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = unwrap
    
    end
  end
  class TextLength 
    enum Type : UInt32
      VariableLength = 0
      FixedLength = 1
      PercentageLength = 2
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QTextLength_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(type : TextLength::Type, value : Float64)
      unwrap = Binding.bg_QTextLength_CONSTRUCT_QTextLength__Type_qreal(type, value)
    @unwrap = unwrap
    
    end
    def type() : TextLength::Type
      Binding.bg_QTextLength_type_(self)
    end
    def value(maximum_length : Float64) : Float64
      Binding.bg_QTextLength_value_qreal(self, maximum_length)
    end
    def raw_value() : Float64
      Binding.bg_QTextLength_rawValue_(self)
    end
  end
  class Font 
    enum Capitalization : UInt32
      MixedCase = 0
      AllUppercase = 1
      AllLowercase = 2
      SmallCaps = 3
      Capitalize = 4
    end
    enum HintingPreference : UInt32
      PreferDefaultHinting = 0
      PreferNoHinting = 1
      PreferVerticalHinting = 2
      PreferFullHinting = 3
    end
    enum SpacingType : UInt32
      PercentageSpacing = 0
      AbsoluteSpacing = 1
    end
    enum Stretch : UInt32
      AnyStretch = 0
      UltraCondensed = 50
      ExtraCondensed = 62
      Condensed = 75
      SemiCondensed = 87
      Unstretched = 100
      SemiExpanded = 112
      Expanded = 125
      ExtraExpanded = 150
      UltraExpanded = 200
    end
    enum Style : UInt32
      StyleNormal = 0
      StyleItalic = 1
      StyleOblique = 2
    end
    enum StyleHint : UInt32
      Helvetica = 0
      SansSerif = 0
      Times = 1
      Serif = 1
      Courier = 2
      TypeWriter = 2
      OldEnglish = 3
      Decorative = 3
      System = 4
      AnyStyle = 5
      Cursive = 6
      Monospace = 7
      Fantasy = 8
    end
    enum StyleStrategy : UInt32
      PreferDefault = 1
      PreferBitmap = 2
      PreferDevice = 4
      PreferOutline = 8
      ForceOutline = 16
      PreferMatch = 32
      PreferQuality = 64
      PreferAntialias = 128
      NoAntialias = 256
      OpenGLCompatible = 512
      ForceIntegerMetrics = 1024
      NoSubpixelAntialias = 2048
      NoFontMerging = 32768
    end
    enum Weight : UInt32
      Thin = 0
      ExtraLight = 12
      Light = 25
      Normal = 50
      Medium = 57
      DemiBold = 63
      Bold = 75
      ExtraBold = 81
      Black = 87
    end
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QFont_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def initialize(family : String, point_size : Int32 = -1, weight : Int32 = -1, italic : Bool = false)
      unwrap = Binding.bg_QFont_CONSTRUCT_const_QString_R_int_int_bool(Qt::Converter::QString.wrap(family), point_size, weight, italic)
    @unwrap = unwrap
    
    end
    def initialize(unnamed_arg_0 : Font, pd : PaintDevice)
      unwrap = Binding.bg_QFont_CONSTRUCT_const_QFont_R_QPaintDevice_X(unnamed_arg_0, pd)
    @unwrap = unwrap
    
    end
    def swap(other : Font) : Void
      Binding.bg_QFont_swap_QFont_R(self, other)
    end
    def family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_family_(self))
    end
    def family=(unnamed_arg_0 : String) : Void
      Binding.bg_QFont_setFamily_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def style_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_styleName_(self))
    end
    def style_name=(unnamed_arg_0 : String) : Void
      Binding.bg_QFont_setStyleName_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def point_size() : Int32
      Binding.bg_QFont_pointSize_(self)
    end
    def point_size=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setPointSize_int(self, unnamed_arg_0)
    end
    def point_size_f() : Float64
      Binding.bg_QFont_pointSizeF_(self)
    end
    def point_size_f=(unnamed_arg_0 : Float64) : Void
      Binding.bg_QFont_setPointSizeF_qreal(self, unnamed_arg_0)
    end
    def pixel_size() : Int32
      Binding.bg_QFont_pixelSize_(self)
    end
    def pixel_size=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setPixelSize_int(self, unnamed_arg_0)
    end
    def weight() : Int32
      Binding.bg_QFont_weight_(self)
    end
    def weight=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setWeight_int(self, unnamed_arg_0)
    end
    def bold() : Bool
      Binding.bg_QFont_bold_(self)
    end
    def bold=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setBold_bool(self, unnamed_arg_0)
    end
    def style=(style : Font::Style) : Void
      Binding.bg_QFont_setStyle_QFont__Style(self, style)
    end
    def style() : Font::Style
      Binding.bg_QFont_style_(self)
    end
    def italic() : Bool
      Binding.bg_QFont_italic_(self)
    end
    def italic=(b : Bool) : Void
      Binding.bg_QFont_setItalic_bool(self, b)
    end
    def underline() : Bool
      Binding.bg_QFont_underline_(self)
    end
    def underline=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setUnderline_bool(self, unnamed_arg_0)
    end
    def overline() : Bool
      Binding.bg_QFont_overline_(self)
    end
    def overline=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setOverline_bool(self, unnamed_arg_0)
    end
    def strike_out() : Bool
      Binding.bg_QFont_strikeOut_(self)
    end
    def strike_out=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setStrikeOut_bool(self, unnamed_arg_0)
    end
    def fixed_pitch() : Bool
      Binding.bg_QFont_fixedPitch_(self)
    end
    def fixed_pitch=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setFixedPitch_bool(self, unnamed_arg_0)
    end
    def kerning() : Bool
      Binding.bg_QFont_kerning_(self)
    end
    def kerning=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setKerning_bool(self, unnamed_arg_0)
    end
    def style_hint() : Font::StyleHint
      Binding.bg_QFont_styleHint_(self)
    end
    def style_strategy() : Font::StyleStrategy
      Binding.bg_QFont_styleStrategy_(self)
    end
    def set_style_hint(unnamed_arg_0 : Font::StyleHint, unnamed_arg_1 : Font::StyleStrategy = Font::StyleStrategy::PreferDefault) : Void
      Binding.bg_QFont_setStyleHint_QFont__StyleHint_QFont__StyleStrategy(self, unnamed_arg_0, unnamed_arg_1)
    end
    def style_strategy=(s : Font::StyleStrategy) : Void
      Binding.bg_QFont_setStyleStrategy_QFont__StyleStrategy(self, s)
    end
    def stretch() : Int32
      Binding.bg_QFont_stretch_(self)
    end
    def stretch=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setStretch_int(self, unnamed_arg_0)
    end
    def letter_spacing() : Float64
      Binding.bg_QFont_letterSpacing_(self)
    end
    def letter_spacing_type() : Font::SpacingType
      Binding.bg_QFont_letterSpacingType_(self)
    end
    def set_letter_spacing(type : Font::SpacingType, spacing : Float64) : Void
      Binding.bg_QFont_setLetterSpacing_QFont__SpacingType_qreal(self, type, spacing)
    end
    def word_spacing() : Float64
      Binding.bg_QFont_wordSpacing_(self)
    end
    def word_spacing=(spacing : Float64) : Void
      Binding.bg_QFont_setWordSpacing_qreal(self, spacing)
    end
    def capitalization=(unnamed_arg_0 : Font::Capitalization) : Void
      Binding.bg_QFont_setCapitalization_QFont__Capitalization(self, unnamed_arg_0)
    end
    def capitalization() : Font::Capitalization
      Binding.bg_QFont_capitalization_(self)
    end
    def hinting_preference=(hinting_preference : Font::HintingPreference) : Void
      Binding.bg_QFont_setHintingPreference_QFont__HintingPreference(self, hinting_preference)
    end
    def hinting_preference() : Font::HintingPreference
      Binding.bg_QFont_hintingPreference_(self)
    end
    def raw_mode() : Bool
      Binding.bg_QFont_rawMode_(self)
    end
    def raw_mode=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setRawMode_bool(self, unnamed_arg_0)
    end
    def exact_match() : Bool
      Binding.bg_QFont_exactMatch_(self)
    end
    def is_copy_of(unnamed_arg_0 : Font) : Bool
      Binding.bg_QFont_isCopyOf_const_QFont_R(self, unnamed_arg_0)
    end
    def raw_name=(unnamed_arg_0 : String) : Void
      Binding.bg_QFont_setRawName_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def raw_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_rawName_(self))
    end
    def key() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_key_(self))
    end
    def to_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_toString_(self))
    end
    def from_string(unnamed_arg_0 : String) : Bool
      Binding.bg_QFont_fromString_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.substitute(unnamed_arg_0 : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_substitute_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0)))
    end
    def self.substitutes(unnamed_arg_0 : String) : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFont_substitutes_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0)))
    end
    def self.substitutions() : Enumerable(String)
      QList_QString.new(unwrap: Binding.bg_QFont_substitutions_STATIC_())
    end
    def self.insert_substitution(unnamed_arg_0 : String, unnamed_arg_1 : String) : Void
      Binding.bg_QFont_insertSubstitution_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0), Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    def self.insert_substitutions(unnamed_arg_0 : String, unnamed_arg_1 : Enumerable(String)) : Void
      Binding.bg_QFont_insertSubstitutions_STATIC_const_QString_R_const_QStringList_R(Qt::Converter::QString.wrap(unnamed_arg_0), BindgenHelper.wrap_container(QList_QString, unnamed_arg_1).to_unsafe)
    end
    def self.remove_substitutions(unnamed_arg_0 : String) : Void
      Binding.bg_QFont_removeSubstitutions_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    def self.initialize() : Void
      Binding.bg_QFont_initialize_STATIC_()
    end
    def self.cleanup() : Void
      Binding.bg_QFont_cleanup_STATIC_()
    end
    def self.cache_statistics() : Void
      Binding.bg_QFont_cacheStatistics_STATIC_()
    end
    def default_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_defaultFamily_(self))
    end
    def last_resort_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_lastResortFamily_(self))
    end
    def last_resort_font() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_lastResortFont_(self))
    end
    def resolve(unnamed_arg_0 : Font) : Font
      Font.new(unwrap: Binding.bg_QFont_resolve_const_QFont_R(self, unnamed_arg_0))
    end
    def resolve() : UInt32
      Binding.bg_QFont_resolve_(self)
    end
    def resolve(mask : UInt32) : Void
      Binding.bg_QFont_resolve_uint(self, mask)
    end
  end
  class QList_QString < BindgenHelper::SequentialContainer(String)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QString_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QList_QString_at_int(self, index))
    end
    def push(value : String) : Void
      Binding.bg_QList_QString_push_back_QString(self, Qt::Converter::QString.wrap(value))
    end
    def size() : Int32
      Binding.bg_QList_QString_size_(self)
    end
  end
  class QList_QObject_X < BindgenHelper::SequentialContainer(Object)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QObject_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Object
      Object.new(unwrap: Binding.bg_QList_QObject_X_at_int(self, index))
    end
    def push(value : Object) : Void
      Binding.bg_QList_QObject_X_push_back_QObject_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QObject_X_size_(self)
    end
  end
  class QList_QWidget_X < BindgenHelper::SequentialContainer(Widget)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QWidget_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QList_QWidget_X_at_int(self, index))
    end
    def push(value : Widget) : Void
      Binding.bg_QList_QWidget_X_push_back_QWidget_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QWidget_X_size_(self)
    end
  end
  class QList_QDockWidget_X < BindgenHelper::SequentialContainer(DockWidget)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QDockWidget_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : DockWidget
      DockWidget.new(unwrap: Binding.bg_QList_QDockWidget_X_at_int(self, index))
    end
    def push(value : DockWidget) : Void
      Binding.bg_QList_QDockWidget_X_push_back_QDockWidget_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QDockWidget_X_size_(self)
    end
  end
  class QList_QAction_X < BindgenHelper::SequentialContainer(Action)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QAction_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Action
      Action.new(unwrap: Binding.bg_QList_QAction_X_at_int(self, index))
    end
    def push(value : Action) : Void
      Binding.bg_QList_QAction_X_push_back_QAction_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QAction_X_size_(self)
    end
  end
  class QList_QGesture_X < BindgenHelper::SequentialContainer(Gesture)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QGesture_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Gesture
      Gesture.new(unwrap: Binding.bg_QList_QGesture_X_at_int(self, index))
    end
    def push(value : Gesture) : Void
      Binding.bg_QList_QGesture_X_push_back_QGesture_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QGesture_X_size_(self)
    end
  end
  class QList_QAbstractButton_X < BindgenHelper::SequentialContainer(AbstractButton)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QAbstractButton_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : AbstractButton
      AbstractButton.new(unwrap: Binding.bg_QList_QAbstractButton_X_at_int(self, index))
    end
    def push(value : AbstractButton) : Void
      Binding.bg_QList_QAbstractButton_X_push_back_QAbstractButton_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QAbstractButton_X_size_(self)
    end
  end
  class QList_QUrl < BindgenHelper::SequentialContainer(Url)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QUrl_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Url
      Url.new(unwrap: Binding.bg_QList_QUrl_at_int(self, index))
    end
    def push(value : Url) : Void
      Binding.bg_QList_QUrl_push_back_QUrl(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QUrl_size_(self)
    end
  end
  class QList_QGraphicsItem_X < BindgenHelper::SequentialContainer(GraphicsItem)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QGraphicsItem_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : GraphicsItem
      GraphicsItem.new(unwrap: Binding.bg_QList_QGraphicsItem_X_at_int(self, index))
    end
    def push(value : GraphicsItem) : Void
      Binding.bg_QList_QGraphicsItem_X_push_back_QGraphicsItem_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QGraphicsItem_X_size_(self)
    end
  end
  class QList_QGraphicsWidget_X < BindgenHelper::SequentialContainer(GraphicsWidget)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QGraphicsWidget_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QList_QGraphicsWidget_X_at_int(self, index))
    end
    def push(value : GraphicsWidget) : Void
      Binding.bg_QList_QGraphicsWidget_X_push_back_QGraphicsWidget_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QGraphicsWidget_X_size_(self)
    end
  end
  class QList_QGraphicsTransform_X < BindgenHelper::SequentialContainer(GraphicsTransform)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QGraphicsTransform_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : GraphicsTransform
      GraphicsTransform.new(unwrap: Binding.bg_QList_QGraphicsTransform_X_at_int(self, index))
    end
    def push(value : GraphicsTransform) : Void
      Binding.bg_QList_QGraphicsTransform_X_push_back_QGraphicsTransform_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QGraphicsTransform_X_size_(self)
    end
  end
  class QList_QGraphicsView_X < BindgenHelper::SequentialContainer(GraphicsView)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QGraphicsView_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : GraphicsView
      GraphicsView.new(unwrap: Binding.bg_QList_QGraphicsView_X_at_int(self, index))
    end
    def push(value : GraphicsView) : Void
      Binding.bg_QList_QGraphicsView_X_push_back_QGraphicsView_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QGraphicsView_X_size_(self)
    end
  end
  class QList_QAbstractEventDispatcher__TimerInfo < BindgenHelper::SequentialContainer(Binding::EventDispatcherTimerInfo)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Binding::EventDispatcherTimerInfo
      Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_at_int(self, index)
    end
    def push(value : Binding::EventDispatcherTimerInfo) : Void
      Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_push_back_QAbstractEventDispatcher__TimerInfo(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QAbstractEventDispatcher__TimerInfo_size_(self)
    end
  end
  class QList_QSize < BindgenHelper::SequentialContainer(Binding::QSize)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QSize_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : QSize*
      Binding.bg_QList_QSize_at_int(self, index)
    end
    def push(value : QSize*) : Void
      Binding.bg_QList_QSize_push_back_QSize(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QSize_size_(self)
    end
  end
  class QList_QKeySequence < BindgenHelper::SequentialContainer(KeySequence)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QKeySequence_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QList_QKeySequence_at_int(self, index))
    end
    def push(value : KeySequence) : Void
      Binding.bg_QList_QKeySequence_push_back_QKeySequence(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QKeySequence_size_(self)
    end
  end
  class QList_QRectF < BindgenHelper::SequentialContainer(RectF)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QRectF_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : RectF
      RectF.new(unwrap: Binding.bg_QList_QRectF_at_int(self, index))
    end
    def push(value : RectF) : Void
      Binding.bg_QList_QRectF_push_back_QRectF(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QRectF_size_(self)
    end
  end
  class QList_QScreen_X < BindgenHelper::SequentialContainer(Screen)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_QScreen_X_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Screen
      Screen.new(unwrap: Binding.bg_QList_QScreen_X_at_int(self, index))
    end
    def push(value : Screen) : Void
      Binding.bg_QList_QScreen_X_push_back_QScreen_X(self, value)
    end
    def size() : Int32
      Binding.bg_QList_QScreen_X_size_(self)
    end
  end
  class QList_qreal < BindgenHelper::SequentialContainer(Float64)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_qreal_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Float64
      Binding.bg_QList_qreal_at_int(self, index)
    end
    def push(value : Float64) : Void
      Binding.bg_QList_qreal_push_back_qreal(self, value)
    end
    def size() : Int32
      Binding.bg_QList_qreal_size_(self)
    end
  end
  class QList_int < BindgenHelper::SequentialContainer(Int32)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QList_int_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Int32
      Binding.bg_QList_int_at_int(self, index)
    end
    def push(value : Int32) : Void
      Binding.bg_QList_int_push_back_int(self, value)
    end
    def size() : Int32
      Binding.bg_QList_int_size_(self)
    end
  end
  class QVector_QLine < BindgenHelper::SequentialContainer(QLine)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QLine_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : QLine
      QLine.new(unwrap: Binding.bg_QVector_QLine_at_int(self, index))
    end
    def push(value : QLine) : Void
      Binding.bg_QVector_QLine_push_back_QLine(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QLine_size_(self)
    end
  end
  class QVector_QLineF < BindgenHelper::SequentialContainer(QLineF)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QLineF_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : QLineF
      QLineF.new(unwrap: Binding.bg_QVector_QLineF_at_int(self, index))
    end
    def push(value : QLineF) : Void
      Binding.bg_QVector_QLineF_push_back_QLineF(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QLineF_size_(self)
    end
  end
  class QVector_QPoint < BindgenHelper::SequentialContainer(Point)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QPoint_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Point
      Point.new(unwrap: Binding.bg_QVector_QPoint_at_int(self, index))
    end
    def push(value : Point) : Void
      Binding.bg_QVector_QPoint_push_back_QPoint(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QPoint_size_(self)
    end
  end
  class QVector_QPointF < BindgenHelper::SequentialContainer(PointF)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QPointF_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : PointF
      PointF.new(unwrap: Binding.bg_QVector_QPointF_at_int(self, index))
    end
    def push(value : PointF) : Void
      Binding.bg_QVector_QPointF_push_back_QPointF(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QPointF_size_(self)
    end
  end
  class QVector_QRect < BindgenHelper::SequentialContainer(Rect)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QRect_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QVector_QRect_at_int(self, index))
    end
    def push(value : Rect) : Void
      Binding.bg_QVector_QRect_push_back_QRect(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QRect_size_(self)
    end
  end
  class QVector_QRectF < BindgenHelper::SequentialContainer(RectF)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QRectF_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : RectF
      RectF.new(unwrap: Binding.bg_QVector_QRectF_at_int(self, index))
    end
    def push(value : RectF) : Void
      Binding.bg_QVector_QRectF_push_back_QRectF(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QRectF_size_(self)
    end
  end
  class QVector_QRgb < BindgenHelper::SequentialContainer(UInt32)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QRgb_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : UInt32
      Binding.bg_QVector_QRgb_at_int(self, index)
    end
    def push(value : UInt32) : Void
      Binding.bg_QVector_QRgb_push_back_QRgb(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QRgb_size_(self)
    end
  end
  class QVector_QTextLength < BindgenHelper::SequentialContainer(TextLength)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QTextLength_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : TextLength
      TextLength.new(unwrap: Binding.bg_QVector_QTextLength_at_int(self, index))
    end
    def push(value : TextLength) : Void
      Binding.bg_QVector_QTextLength_push_back_QTextLength(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QTextLength_size_(self)
    end
  end
  class QVector_QTextFormat < BindgenHelper::SequentialContainer(TextFormat)
    @unwrap : Void*
    def to_unsafe
      @unwrap
    end
    def initialize(@unwrap : Void*)
    end
    def initialize()
      unwrap = Binding.bg_QVector_QTextFormat_CONSTRUCT_()
    @unwrap = unwrap
    
    end
    def unsafe_at(index : Int32) : TextFormat
      TextFormat.new(unwrap: Binding.bg_QVector_QTextFormat_at_int(self, index))
    end
    def push(value : TextFormat) : Void
      Binding.bg_QVector_QTextFormat_push_back_QTextFormat(self, value)
    end
    def size() : Int32
      Binding.bg_QVector_QTextFormat_size_(self)
    end
  end
end
